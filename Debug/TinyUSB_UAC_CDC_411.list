
TinyUSB_UAC_CDC_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800818c  0800818c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008194  08008194  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a84  20000014  080081b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  080081b0  00021a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189c2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003877  00000000  00000000  00038a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001986a  00000000  00000000  0003e888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ed5  00000000  00000000  000580f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a031d  00000000  00000000  0006dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e2e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d8  00000000  00000000  0010e334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d3c 	.word	0x08007d3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08007d3c 	.word	0x08007d3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	461a      	mov	r2, r3
 80004ec:	6879      	ldr	r1, [r7, #4]
 80004ee:	2000      	movs	r0, #0
 80004f0:	f002 faee 	bl	8002ad0 <tud_audio_n_read>
 80004f4:	4603      	mov	r3, r0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	461a      	mov	r2, r3
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	2000      	movs	r0, #0
 8000512:	f002 fb7f 	bl	8002c14 <tud_audio_n_write>
 8000516:	4603      	mov	r3, r0
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <tud_audio_clock_get_request>:
	blink_interval_ms = BLINK_MOUNTED;
}

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d00a      	beq.n	800054a <tud_audio_clock_get_request+0x2a>
 8000534:	4b44      	ldr	r3, [pc, #272]	; (8000648 <tud_audio_clock_get_request+0x128>)
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
 8000538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	2b00      	cmp	r3, #0
 8000542:	d000      	beq.n	8000546 <tud_audio_clock_get_request+0x26>
 8000544:	be00      	bkpt	0x0000
 8000546:	2300      	movs	r3, #0
 8000548:	e07a      	b.n	8000640 <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	78db      	ldrb	r3, [r3, #3]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d161      	bne.n	8000616 <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <tud_audio_clock_get_request+0x12c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000560:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000564:	79f8      	ldrb	r0, [r7, #7]
 8000566:	2304      	movs	r3, #4
 8000568:	6839      	ldr	r1, [r7, #0]
 800056a:	f003 f913 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 800056e:	4603      	mov	r3, r0
 8000570:	e066      	b.n	8000640 <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d161      	bne.n	800063e <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2232      	movs	r2, #50	; 0x32
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f006 fe76 	bl	8007274 <memset>
 8000588:	2304      	movs	r3, #4
 800058a:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000592:	e033      	b.n	80005fc <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8000594:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000598:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <tud_audio_clock_get_request+0x130>)
 800059a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005a2:	4619      	mov	r1, r3
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	3350      	adds	r3, #80	; 0x50
 80005ae:	443b      	add	r3, r7
 80005b0:	3b44      	subs	r3, #68	; 0x44
 80005b2:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005ba:	4a25      	ldr	r2, [pc, #148]	; (8000650 <tud_audio_clock_get_request+0x130>)
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005c4:	4619      	mov	r1, r3
 80005c6:	4613      	mov	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	3350      	adds	r3, #80	; 0x50
 80005d0:	443b      	add	r3, r7
 80005d2:	3b44      	subs	r3, #68	; 0x44
 80005d4:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 80005d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	3350      	adds	r3, #80	; 0x50
 80005e6:	443b      	add	r3, r7
 80005e8:	3b3c      	subs	r3, #60	; 0x3c
 80005ea:	2200      	movs	r2, #0
 80005ec:	805a      	strh	r2, [r3, #2]
 80005ee:	2200      	movs	r2, #0
 80005f0:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 80005f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005f6:	3301      	adds	r3, #1
 80005f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80005fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000600:	2b03      	cmp	r3, #3
 8000602:	d9c7      	bls.n	8000594 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	79f8      	ldrb	r0, [r7, #7]
 800060a:	2332      	movs	r3, #50	; 0x32
 800060c:	6839      	ldr	r1, [r7, #0]
 800060e:	f003 f8c1 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 8000612:	4603      	mov	r3, r0
 8000614:	e014      	b.n	8000640 <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	78db      	ldrb	r3, [r3, #3]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d10f      	bne.n	800063e <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000622:	2b01      	cmp	r3, #1
 8000624:	d10b      	bne.n	800063e <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8000626:	2301      	movs	r3, #1
 8000628:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800062c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000630:	79f8      	ldrb	r0, [r7, #7]
 8000632:	2301      	movs	r3, #1
 8000634:	6839      	ldr	r1, [r7, #0]
 8000636:	f003 f8ad 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 800063a:	4603      	mov	r3, r0
 800063c:	e000      	b.n	8000640 <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	e000edf0 	.word	0xe000edf0
 800064c:	20000000 	.word	0x20000000
 8000650:	08007d68 	.word	0x08007d68

08000654 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	795b      	ldrb	r3, [r3, #5]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d00a      	beq.n	8000680 <tud_audio_clock_set_request+0x2c>
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <tud_audio_clock_set_request+0x6c>)
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d000      	beq.n	800067c <tud_audio_clock_set_request+0x28>
 800067a:	be00      	bkpt	0x0000
 800067c:	2300      	movs	r3, #0
 800067e:	e018      	b.n	80006b2 <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d001      	beq.n	800068c <tud_audio_clock_set_request+0x38>
 8000688:	2300      	movs	r3, #0
 800068a:	e012      	b.n	80006b2 <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d10d      	bne.n	80006b0 <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	b29b      	uxth	r3, r3
 800069a:	2b04      	cmp	r3, #4
 800069c:	d001      	beq.n	80006a2 <tud_audio_clock_set_request+0x4e>
 800069e:	2300      	movs	r3, #0
 80006a0:	e007      	b.n	80006b2 <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <tud_audio_clock_set_request+0x70>)
 80006aa:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80006b0:	2300      	movs	r3, #0
	}
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000edf0 	.word	0xe000edf0
 80006c4:	20000000 	.word	0x20000000

080006c8 <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d00a      	beq.n	80006f2 <tud_audio_feature_unit_get_request+0x2a>
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <tud_audio_feature_unit_get_request+0xbc>)
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d000      	beq.n	80006ee <tud_audio_feature_unit_get_request+0x26>
 80006ec:	be00      	bkpt	0x0000
 80006ee:	2300      	movs	r3, #0
 80006f0:	e043      	b.n	800077a <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	78db      	ldrb	r3, [r3, #3]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d112      	bne.n	8000720 <tud_audio_feature_unit_get_request+0x58>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10e      	bne.n	8000720 <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	789b      	ldrb	r3, [r3, #2]
 8000706:	461a      	mov	r2, r3
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <tud_audio_feature_unit_get_request+0xc0>)
 800070a:	569b      	ldrsb	r3, [r3, r2]
 800070c:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800070e:	f107 0218 	add.w	r2, r7, #24
 8000712:	79f8      	ldrb	r0, [r7, #7]
 8000714:	2301      	movs	r3, #1
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	f003 f83c 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 800071c:	4603      	mov	r3, r0
 800071e:	e02c      	b.n	800077a <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	78db      	ldrb	r3, [r3, #3]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d127      	bne.n	8000778 <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d10f      	bne.n	8000750 <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <tud_audio_feature_unit_get_request+0xc4>)
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073a:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800073e:	f107 0210 	add.w	r2, r7, #16
 8000742:	79f8      	ldrb	r0, [r7, #7]
 8000744:	2308      	movs	r3, #8
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	f003 f824 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 800074c:	4603      	mov	r3, r0
 800074e:	e014      	b.n	800077a <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d10f      	bne.n	8000778 <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <tud_audio_feature_unit_get_request+0xc8>)
 8000760:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000764:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8000766:	f107 020c 	add.w	r2, r7, #12
 800076a:	79f8      	ldrb	r0, [r7, #7]
 800076c:	2302      	movs	r3, #2
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	f003 f810 	bl	8003794 <tud_audio_buffer_and_schedule_control_xfer>
 8000774:	4603      	mov	r3, r0
 8000776:	e000      	b.n	800077a <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000edf0 	.word	0xe000edf0
 8000788:	2000058c 	.word	0x2000058c
 800078c:	08007d54 	.word	0x08007d54
 8000790:	20000590 	.word	0x20000590

08000794 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d00a      	beq.n	80007c0 <tud_audio_feature_unit_set_request+0x2c>
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <tud_audio_feature_unit_set_request+0xa0>)
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d000      	beq.n	80007bc <tud_audio_feature_unit_set_request+0x28>
 80007ba:	be00      	bkpt	0x0000
 80007bc:	2300      	movs	r3, #0
 80007be:	e032      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d001      	beq.n	80007cc <tud_audio_feature_unit_set_request+0x38>
 80007c8:	2300      	movs	r3, #0
 80007ca:	e02c      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	78db      	ldrb	r3, [r3, #3]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d110      	bne.n	80007f6 <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	88db      	ldrh	r3, [r3, #6]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d001      	beq.n	80007e2 <tud_audio_feature_unit_set_request+0x4e>
 80007de:	2300      	movs	r3, #0
 80007e0:	e021      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f993 1000 	ldrsb.w	r1, [r3]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <tud_audio_feature_unit_set_request+0xa4>)
 80007f0:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e017      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	78db      	ldrb	r3, [r3, #3]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d112      	bne.n	8000824 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	88db      	ldrh	r3, [r3, #6]
 8000802:	b29b      	uxth	r3, r3
 8000804:	2b02      	cmp	r3, #2
 8000806:	d001      	beq.n	800080c <tud_audio_feature_unit_set_request+0x78>
 8000808:	2300      	movs	r3, #0
 800080a:	e00c      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000818:	b219      	sxth	r1, r3
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <tud_audio_feature_unit_set_request+0xa8>)
 800081c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 8000820:	2301      	movs	r3, #1
 8000822:	e000      	b.n	8000826 <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8000824:	2300      	movs	r3, #0
	}
}
 8000826:	4618      	mov	r0, r3
 8000828:	371c      	adds	r7, #28
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000edf0 	.word	0xe000edf0
 8000838:	2000058c 	.word	0x2000058c
 800083c:	20000590 	.word	0x20000590

08000840 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d106      	bne.n	8000866 <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe5f 	bl	8000520 <tud_audio_clock_get_request>
 8000862:	4603      	mov	r3, r0
 8000864:	e00b      	b.n	800087e <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d106      	bne.n	800087c <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	68f9      	ldr	r1, [r7, #12]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff28 	bl	80006c8 <tud_audio_feature_unit_get_request>
 8000878:	4603      	mov	r3, r0
 800087a:	e000      	b.n	800087e <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d107      	bne.n	80008b0 <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6979      	ldr	r1, [r7, #20]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff74 	bl	8000794 <tud_audio_feature_unit_set_request>
 80008ac:	4603      	mov	r3, r0
 80008ae:	e00c      	b.n	80008ca <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d107      	bne.n	80008c8 <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6979      	ldr	r1, [r7, #20]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fec8 	bl	8000654 <tud_audio_clock_set_request>
 80008c4:	4603      	mov	r3, r0
 80008c6:	e000      	b.n	80008ca <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	889b      	ldrh	r3, [r3, #4]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80008e8:	897b      	ldrh	r3, [r7, #10]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	885b      	ldrh	r3, [r3, #2]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	81bb      	strh	r3, [r7, #12]
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d106      	bne.n	8000910 <tud_audio_set_itf_close_EP_cb+0x3c>
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <tud_audio_set_itf_close_EP_cb+0x4c>)
 800090a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090e:	601a      	str	r2, [r3, #0]

	return true;
 8000910:	2301      	movs	r3, #1
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000004 	.word	0x20000004

08000924 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	b29b      	uxth	r3, r3
 8000936:	817b      	strh	r3, [r7, #10]
 8000938:	897b      	ldrh	r3, [r7, #10]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	885b      	ldrh	r3, [r3, #2]
 8000942:	b29b      	uxth	r3, r3
 8000944:	81bb      	strh	r3, [r7, #12]
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d105      	bne.n	800095e <tud_audio_set_itf_cb+0x3a>
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <tud_audio_set_itf_cb+0x60>)
 800095a:	2219      	movs	r2, #25
 800095c:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <tud_audio_set_itf_cb+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d005      	beq.n	8000976 <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <tud_audio_set_itf_cb+0x68>)
 8000970:	5cd2      	ldrb	r2, [r2, r3]
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <tud_audio_set_itf_cb+0x6c>)
 8000974:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	20000004 	.word	0x20000004
 8000988:	20000eb0 	.word	0x20000eb0
 800098c:	08007d78 	.word	0x08007d78
 8000990:	20000eb4 	.word	0x20000eb4

08000994 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	71bb      	strb	r3, [r7, #6]
 80009ae:	4613      	mov	r3, r2
 80009b0:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <tud_audio_rx_done_pre_read_cb+0x3c>)
 80009b8:	f7ff fd90 	bl	80004dc <tud_audio_read>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <tud_audio_rx_done_pre_read_cb+0x40>)
 80009c2:	601a      	str	r2, [r3, #0]
	return true;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200008a0 	.word	0x200008a0
 80009d4:	20000eb0 	.word	0x20000eb0

080009d8 <tud_audio_tx_done_pre_load_cb>:


bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 80009d8:	b490      	push	{r4, r7}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4604      	mov	r4, r0
 80009e0:	4608      	mov	r0, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4623      	mov	r3, r4
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	4603      	mov	r3, r0
 80009ec:	71bb      	strb	r3, [r7, #6]
 80009ee:	460b      	mov	r3, r1
 80009f0:	717b      	strb	r3, [r7, #5]
 80009f2:	4613      	mov	r3, r2
 80009f4:	713b      	strb	r3, [r7, #4]
	(void) itf;
	(void) ep_in;
	(void) cur_alt_setting;


	return true;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc90      	pop	{r4, r7}
 8000a00:	4770      	bx	lr
	...

08000a04 <tud_audio_tx_done_post_load_cb>:


bool tud_audio_tx_done_post_load_cb(uint8_t rhport, uint16_t n_bytes_copied, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4603      	mov	r3, r0
 8000a18:	80bb      	strh	r3, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	int16_t *dst = (int16_t*)mic_buf;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <tud_audio_tx_done_post_load_cb+0x90>)
 8000a24:	60fb      	str	r3, [r7, #12]
	{
		LastBytesCopied = n_bytes_copied;
	}
#endif
#if 1
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000a26:	2300      	movs	r3, #0
 8000a28:	817b      	strh	r3, [r7, #10]
 8000a2a:	e026      	b.n	8000a7a <tud_audio_tx_done_post_load_cb+0x76>
	{
		//		*dst ++ = (int16_t)(20000.0f * arm_sinf32((float)(432.0f * 6.28f * AudioCounter++ / 48000)));
		*dst ++ = (int16_t)(20000.0f * sinf((float)(432.0f * 6.28f * AudioCounter++ / 48000)));
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <tud_audio_tx_done_post_load_cb+0x94>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	1c53      	adds	r3, r2, #1
 8000a32:	4919      	ldr	r1, [pc, #100]	; (8000a98 <tud_audio_tx_done_post_load_cb+0x94>)
 8000a34:	600b      	str	r3, [r1, #0]
 8000a36:	ee07 2a90 	vmov	s15, r2
 8000a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000a9c <tud_audio_tx_done_post_load_cb+0x98>
 8000a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a46:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000aa0 <tud_audio_tx_done_post_load_cb+0x9c>
 8000a4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000a52:	f006 fc17 	bl	8007284 <sinf>
 8000a56:	eef0 7a40 	vmov.f32	s15, s0
 8000a5a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000aa4 <tud_audio_tx_done_post_load_cb+0xa0>
 8000a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1c9a      	adds	r2, r3, #2
 8000a66:	60fa      	str	r2, [r7, #12]
 8000a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a6c:	ee17 2a90 	vmov	r2, s15
 8000a70:	b212      	sxth	r2, r2
 8000a72:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000a74:	897b      	ldrh	r3, [r7, #10]
 8000a76:	3301      	adds	r3, #1
 8000a78:	817b      	strh	r3, [r7, #10]
 8000a7a:	897b      	ldrh	r3, [r7, #10]
 8000a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a7e:	d9d5      	bls.n	8000a2c <tud_audio_tx_done_post_load_cb+0x28>

	/* There seems to be no advantage in deferring tud_audio_write to tud_audio_tx_done_pre_load_cb
	 * as in the 4 mic example.
	 * Also, a delay in this callback has the same effect of a delay in the main loop.
	 */
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (2 * 48000 /1000));
 8000a80:	2160      	movs	r1, #96	; 0x60
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <tud_audio_tx_done_post_load_cb+0x90>)
 8000a84:	f7ff fd3b 	bl	80004fe <tud_audio_write>

#endif
	return true;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000598 	.word	0x20000598
 8000a98:	20000eb8 	.word	0x20000eb8
 8000a9c:	45298f5d 	.word	0x45298f5d
 8000aa0:	473b8000 	.word	0x473b8000
 8000aa4:	469c4000 	.word	0x469c4000

08000aa8 <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	71bb      	strb	r3, [r7, #6]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DWT_Delay_Init>:
 * @brief Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	/* Disable TRC */

	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <DWT_Delay_Init+0x58>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <DWT_Delay_Init+0x58>)
 8000ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aea:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <DWT_Delay_Init+0x58>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <DWT_Delay_Init+0x58>)
 8000af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af6:	60d3      	str	r3, [r2, #12]
	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000afe:	f023 0301 	bic.w	r3, r3, #1
 8000b02:	6013      	str	r3, [r2, #0]
	/* Enable clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
	/* 3 NO OPERATION instructions */
	asm("NOP");
 8000b16:	bf00      	nop
	asm("NOP");
 8000b18:	bf00      	nop
	asm("NOP");
 8000b1a:	bf00      	nop
	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <DWT_Delay_Init+0x5c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <DWT_Delay_Init+0x4c>
	{
		return 0; /*clock cycle counter started*/
 8000b24:	2300      	movs	r3, #0
 8000b26:	e000      	b.n	8000b2a <DWT_Delay_Init+0x4e>
	}
	else
	{
		return 1; /*clock cycle counter not started*/
 8000b28:	2301      	movs	r3, #1
	}
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000edf0 	.word	0xe000edf0
 8000b38:	e0001000 	.word	0xe0001000

08000b3c <StartStopwatch_us>:
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

__STATIC_INLINE void StartStopwatch_us(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	StopwatchStart = DWT->CYCCNT;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <StartStopwatch_us+0x18>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <StartStopwatch_us+0x1c>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e0001000 	.word	0xe0001000
 8000b58:	20000584 	.word	0x20000584

08000b5c <StopStopwatch_us>:

__STATIC_INLINE void StopStopwatch_us(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
	uint32_t StopwatchStop = DWT->CYCCNT;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <StopStopwatch_us+0x2c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	607b      	str	r3, [r7, #4]

	StopwatchValue = (StopwatchStop- StopwatchStart) /96; // * 1000000 / HAL_RCC_GetHCLKFreq();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <StopStopwatch_us+0x30>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <StopStopwatch_us+0x34>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <StopStopwatch_us+0x38>)
 8000b7a:	6013      	str	r3, [r2, #0]

}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e0001000 	.word	0xe0001000
 8000b8c:	20000584 	.word	0x20000584
 8000b90:	aaaaaaab 	.word	0xaaaaaaab
 8000b94:	20000588 	.word	0x20000588

08000b98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	return;
 8000ba0:	bf00      	nop
	MainLoopCounter++;  //used with debugger to check frequency of main loop
	cdc_task();
	led_blinking_task();
	//	StopStopwatch_us();
	//			DWT_Delay_us(950);  //enable this delay to test MCU load. 850 us is fine with -O0, 950 with -O3 (98 MHz F411)
}
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bb2:	f000 fa1f 	bl	8000ff4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bb6:	f000 f855 	bl	8000c64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bba:	f000 f8fd 	bl	8000db8 <MX_GPIO_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000bbe:	f000 f8cd 	bl	8000d5c <MX_USB_OTG_FS_PCD_Init>
//	MX_TIM5_Init();

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000bc2:	f000 f8b7 	bl	8000d34 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	if(DWT_Delay_Init())
 8000bc6:	f7ff ff89 	bl	8000adc <DWT_Delay_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <main+0x28>
	{
		Error_Handler(); /* Call Error Handler */
 8000bd0:	f000 f91a 	bl	8000e08 <Error_Handler>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	481c      	ldr	r0, [pc, #112]	; (8000c4c <main+0xa0>)
 8000bdc:	f000 fd36 	bl	800164c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	; 0x64
 8000be2:	f000 fa79 	bl	80010d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <main+0xa0>)
 8000bee:	f000 fd2d 	bl	800164c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f000 fa70 	bl	80010d8 <HAL_Delay>
//	TU_ASSERT(tusb_init());
	HAL_TIM_Base_Start_IT(&htim5);
 8000bf8:	4815      	ldr	r0, [pc, #84]	; (8000c50 <main+0xa4>)
 8000bfa:	f001 fac1 	bl	8002180 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		StartStopwatch_us();
 8000bfe:	f7ff ff9d 	bl	8000b3c <StartStopwatch_us>
		int16_t v = (int16_t)(20000.0f * sinf((float)(432.0f * 6.28f * AudioCounter++ / 48000)));
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <main+0xa8>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	1c53      	adds	r3, r2, #1
 8000c08:	4912      	ldr	r1, [pc, #72]	; (8000c54 <main+0xa8>)
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	ee07 2a90 	vmov	s15, r2
 8000c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c14:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c58 <main+0xac>
 8000c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000c5c <main+0xb0>
 8000c20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c24:	eeb0 0a47 	vmov.f32	s0, s14
 8000c28:	f006 fb2c 	bl	8007284 <sinf>
 8000c2c:	eef0 7a40 	vmov.f32	s15, s0
 8000c30:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000c60 <main+0xb4>
 8000c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3c:	ee17 3a90 	vmov	r3, s15
 8000c40:	80fb      	strh	r3, [r7, #6]

			StopStopwatch_us();
 8000c42:	f7ff ff8b 	bl	8000b5c <StopStopwatch_us>
			asm("NOP");
 8000c46:	bf00      	nop
	{
 8000c48:	e7d9      	b.n	8000bfe <main+0x52>
 8000c4a:	bf00      	nop
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	20000030 	.word	0x20000030
 8000c54:	20000eb8 	.word	0x20000eb8
 8000c58:	45298f5d 	.word	0x45298f5d
 8000c5c:	473b8000 	.word	0x473b8000
 8000c60:	469c4000 	.word	0x469c4000

08000c64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f006 fafe 	bl	8007274 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <SystemClock_Config+0xc8>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <SystemClock_Config+0xc8>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <SystemClock_Config+0xc8>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <SystemClock_Config+0xcc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <SystemClock_Config+0xcc>)
 8000cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <SystemClock_Config+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000cd8:	23c0      	movs	r3, #192	; 0xc0
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fde5 	bl	80018b8 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000cf4:	f000 f888 	bl	8000e08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2103      	movs	r1, #3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 f847 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000d20:	f000 f872 	bl	8000e08 <Error_Handler>
	}
}
 8000d24:	bf00      	nop
 8000d26:	3750      	adds	r7, #80	; 0x50
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	/* OTG_FS_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2043      	movs	r0, #67	; 0x43
 8000d3e:	f000 faca 	bl	80012d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d42:	2043      	movs	r0, #67	; 0x43
 8000d44:	f000 fae3 	bl	800130e <HAL_NVIC_EnableIRQ>
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f000 fac2 	bl	80012d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d52:	2032      	movs	r0, #50	; 0x32
 8000d54:	f000 fadb 	bl	800130e <HAL_NVIC_EnableIRQ>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d66:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	f000 fc6d 	bl	800167e <HAL_PCD_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 8000daa:	f000 f82d 	bl	8000e08 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000078 	.word	0x20000078

08000db8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_GPIO_Init+0x4c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e84:	d132      	bne.n	8000eec <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ea2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <HAL_PCD_MspInit+0x94>)
 8000ec0:	f000 fa40 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ece:	6353      	str	r3, [r2, #52]	; 0x34
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ede:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_PCD_MspInit+0x90>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8a6 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM5_IRQHandler+0x10>)
 8000f56:	f001 f975 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000030 	.word	0x20000030

08000f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f005 ff23 	bl	8006db4 <dcd_int_handler>
	return;
 8000f6e:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd3 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f006 f91f 	bl	8007210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fdeb 	bl	8000bac <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fe4:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 8000fe8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fec:	20001a98 	.word	0x20001a98

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94f 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fef4 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f967 	bl	800132a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f92f 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000008 	.word	0x20000008
 8001090:	20000010 	.word	0x20000010
 8001094:	2000000c 	.word	0x2000000c

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000010 	.word	0x20000010
 80010bc:	20000ebc 	.word	0x20000ebc

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000ebc 	.word	0x20000ebc

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000010 	.word	0x20000010

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e159      	b.n	8001614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8148 	bne.w	800160e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80a2 	beq.w	800160e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x2f0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x202>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2f4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1fe>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_GPIO_Init+0x2f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1fa>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_GPIO_Init+0x2fc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1f6>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a45      	ldr	r2, [pc, #276]	; (8001644 <HAL_GPIO_Init+0x300>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1f2>
 8001532:	2304      	movs	r3, #4
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001536:	2307      	movs	r3, #7
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x204>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x204>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x2ec>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x304>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_Init+0x304>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x304>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_GPIO_Init+0x304>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f aea2 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40013c00 	.word	0x40013c00

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800167e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001680:	b08f      	sub	sp, #60	; 0x3c
 8001682:	af0a      	add	r7, sp, #40	; 0x28
 8001684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e10f      	b.n	80018b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fbda 	bl	8000e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 ff5d 	bl	800258e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	687e      	ldr	r6, [r7, #4]
 80016dc:	466d      	mov	r5, sp
 80016de:	f106 0410 	add.w	r4, r6, #16
 80016e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f2:	1d33      	adds	r3, r6, #4
 80016f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f6:	6838      	ldr	r0, [r7, #0]
 80016f8:	f000 fee8 	bl	80024cc <USB_CoreInit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0d0      	b.n	80018b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f000 ff4b 	bl	80025b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e04a      	b.n	80017b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	333d      	adds	r3, #61	; 0x3d
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	333c      	adds	r3, #60	; 0x3c
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	b298      	uxth	r0, r3
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3344      	adds	r3, #68	; 0x44
 800175c:	4602      	mov	r2, r0
 800175e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3340      	adds	r3, #64	; 0x40
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3348      	adds	r3, #72	; 0x48
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	334c      	adds	r3, #76	; 0x4c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3354      	adds	r3, #84	; 0x54
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3af      	bcc.n	8001720 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e044      	b.n	8001850 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	3301      	adds	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3b5      	bcc.n	80017c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	687e      	ldr	r6, [r7, #4]
 8001862:	466d      	mov	r5, sp
 8001864:	f106 0410 	add.w	r4, r6, #16
 8001868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001874:	e885 0003 	stmia.w	r5, {r0, r1}
 8001878:	1d33      	adds	r3, r6, #4
 800187a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f000 fee3 	bl	8002648 <USB_DevInit>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e00d      	b.n	80018b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 f8ae 	bl	8002a0a <USB_DevDisconnect>

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e267      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d00c      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d112      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e242      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x74>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6f      	ldr	r2, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6c      	ldr	r2, [pc, #432]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 8001950:	4b69      	ldr	r3, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fba6 	bl	80010c0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fba2 	bl	80010c0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e207      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb92 	bl	80010c0 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fb8e 	bl	80010c0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1f3      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1c7      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e03a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb47 	bl	80010c0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fb43 	bl	80010c0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1a8      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4925      	ldr	r1, [pc, #148]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e015      	b.n	8001a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_OscConfig+0x244>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb26 	bl	80010c0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fb22 	bl	80010c0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e187      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d036      	beq.n	8001b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb06 	bl	80010c0 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fb02 	bl	80010c0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e167      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x200>
 8001ad6:	e01b      	b.n	8001b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x248>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff faef 	bl	80010c0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00e      	b.n	8001b04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff faeb 	bl	80010c0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d907      	bls.n	8001b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e150      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	42470000 	.word	0x42470000
 8001b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ea      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8097 	beq.w	8001c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff faab 	bl	80010c0 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff faa7 	bl	80010c0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e10c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x474>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x30c>
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5b      	ldr	r2, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x324>
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa6c 	bl	80010c0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff fa68 	bl	80010c0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0cb      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff fa56 	bl	80010c0 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff fa52 	bl	80010c0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0b5      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a1 	beq.w	8001d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d05c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d141      	bne.n	8001cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa26 	bl	80010c0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fa22 	bl	80010c0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e087      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f9fb 	bl	80010c0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f9f7 	bl	80010c0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e05c      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x416>
 8001cec:	e054      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x478>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f9e4 	bl	80010c0 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f9e0 	bl	80010c0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e045      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x470>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
 8001d1a:	e03d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e038      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4ec>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d028      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d121      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0cc      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d90c      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d044      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e067      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f912 	bl	80010c0 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff f90e 	bl	80010c0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e04f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f872 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08007d7c 	.word	0x08007d7c
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	2000000c 	.word	0x2000000c

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b094      	sub	sp, #80	; 0x50
 8001f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f80:	2300      	movs	r3, #0
 8001f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f84:	2300      	movs	r3, #0
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8c:	4b79      	ldr	r3, [pc, #484]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	f200 80e1 	bhi.w	8002160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x3a>
 8001fa6:	e0db      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_GetSysClockFreq+0x204>)
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fac:	e0db      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_GetSysClockFreq+0x208>)
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb2:	e0d8      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d063      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	f04f 0000 	mov.w	r0, #0
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	0159      	lsls	r1, r3, #5
 8001ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff8:	0150      	lsls	r0, r2, #5
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4621      	mov	r1, r4
 8002000:	1a51      	subs	r1, r2, r1
 8002002:	6139      	str	r1, [r7, #16]
 8002004:	4629      	mov	r1, r5
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002018:	4659      	mov	r1, fp
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	4651      	mov	r1, sl
 800201e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002022:	4651      	mov	r1, sl
 8002024:	018a      	lsls	r2, r1, #6
 8002026:	4651      	mov	r1, sl
 8002028:	ebb2 0801 	subs.w	r8, r2, r1
 800202c:	4659      	mov	r1, fp
 800202e:	eb63 0901 	sbc.w	r9, r3, r1
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002046:	4690      	mov	r8, r2
 8002048:	4699      	mov	r9, r3
 800204a:	4623      	mov	r3, r4
 800204c:	eb18 0303 	adds.w	r3, r8, r3
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	462b      	mov	r3, r5
 8002054:	eb49 0303 	adc.w	r3, r9, r3
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002066:	4629      	mov	r1, r5
 8002068:	024b      	lsls	r3, r1, #9
 800206a:	4621      	mov	r1, r4
 800206c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002070:	4621      	mov	r1, r4
 8002072:	024a      	lsls	r2, r1, #9
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207a:	2200      	movs	r2, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
 800207e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002084:	f7fe f8a8 	bl	80001d8 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4613      	mov	r3, r2
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002090:	e058      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	2200      	movs	r2, #0
 800209a:	4618      	mov	r0, r3
 800209c:	4611      	mov	r1, r2
 800209e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020ac:	4642      	mov	r2, r8
 80020ae:	464b      	mov	r3, r9
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0159      	lsls	r1, r3, #5
 80020ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020be:	0150      	lsls	r0, r2, #5
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4641      	mov	r1, r8
 80020c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ca:	4649      	mov	r1, r9
 80020cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e4:	ebb2 040a 	subs.w	r4, r2, sl
 80020e8:	eb63 050b 	sbc.w	r5, r3, fp
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	00eb      	lsls	r3, r5, #3
 80020f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fa:	00e2      	lsls	r2, r4, #3
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	4643      	mov	r3, r8
 8002102:	18e3      	adds	r3, r4, r3
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	464b      	mov	r3, r9
 8002108:	eb45 0303 	adc.w	r3, r5, r3
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800211a:	4629      	mov	r1, r5
 800211c:	028b      	lsls	r3, r1, #10
 800211e:	4621      	mov	r1, r4
 8002120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002124:	4621      	mov	r1, r4
 8002126:	028a      	lsls	r2, r1, #10
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212e:	2200      	movs	r2, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	61fa      	str	r2, [r7, #28]
 8002134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002138:	f7fe f84e 	bl	80001d8 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetSysClockFreq+0x200>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetSysClockFreq+0x204>)
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002168:	4618      	mov	r0, r3
 800216a:	3750      	adds	r7, #80	; 0x50
 800216c:	46bd      	mov	sp, r7
 800216e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400
 800217c:	007a1200 	.word	0x007a1200

08002180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e044      	b.n	8002222 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_TIM_Base_Start_IT+0xb0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d018      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d013      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_TIM_Base_Start_IT+0xb4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00e      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_TIM_Base_Start_IT+0xb8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d009      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_TIM_Base_Start_IT+0xbc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_TIM_Base_Start_IT+0xc0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d111      	bne.n	8002210 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d010      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220e:	e007      	b.n	8002220 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40014000 	.word	0x40014000

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0202 	mvn.w	r2, #2
 8002270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8ee 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8e0 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f8f1 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d122      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8c4 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8b6 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8c7 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0208 	mvn.w	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f89a 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f88c 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f89d 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b10      	cmp	r3, #16
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0210 	mvn.w	r2, #16
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2208      	movs	r2, #8
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f870 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f862 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f873 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0201 	mvn.w	r2, #1
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fbe8 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f862 	bl	80024b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f838 	bl	8002490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0220 	mvn.w	r2, #32
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f82c 	bl	80024a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80024cc:	b084      	sub	sp, #16
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	f107 001c 	add.w	r0, r7, #28
 80024da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d122      	bne.n	800252a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80024f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 faa2 	bl	8002a68 <USB_CoreReset>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e01a      	b.n	8002560 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa96 	bl	8002a68 <USB_CoreReset>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
 8002552:	e005      	b.n	8002560 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10b      	bne.n	800257e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f043 0206 	orr.w	r2, r3, #6
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800258a:	b004      	add	sp, #16
 800258c:	4770      	bx	lr

0800258e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0201 	bic.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fd7a 	bl	80010d8 <HAL_Delay>
      ms++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa2e 	bl	8002a4c <USB_GetMode>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d01e      	beq.n	8002634 <USB_SetCurrentMode+0x84>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b31      	cmp	r3, #49	; 0x31
 80025fa:	d9f0      	bls.n	80025de <USB_SetCurrentMode+0x2e>
 80025fc:	e01a      	b.n	8002634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d115      	bne.n	8002630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe fd61 	bl	80010d8 <HAL_Delay>
      ms++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3301      	adds	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa15 	bl	8002a4c <USB_GetMode>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <USB_SetCurrentMode+0x84>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b31      	cmp	r3, #49	; 0x31
 800262c:	d9f0      	bls.n	8002610 <USB_SetCurrentMode+0x60>
 800262e:	e001      	b.n	8002634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e005      	b.n	8002640 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b32      	cmp	r3, #50	; 0x32
 8002638:	d101      	bne.n	800263e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002648:	b084      	sub	sp, #16
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e009      	b.n	800267c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	3340      	adds	r3, #64	; 0x40
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	3301      	adds	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b0e      	cmp	r3, #14
 8002680:	d9f2      	bls.n	8002668 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11c      	bne.n	80026c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
 80026c0:	e00b      	b.n	80026da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80026e0:	461a      	mov	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ec:	4619      	mov	r1, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	461a      	mov	r2, r3
 80026f6:	680b      	ldr	r3, [r1, #0]
 80026f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10c      	bne.n	800271a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f965 	bl	80029d8 <USB_SetDevSpeed>
 800270e:	e008      	b.n	8002722 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002710:	2101      	movs	r1, #1
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f960 	bl	80029d8 <USB_SetDevSpeed>
 8002718:	e003      	b.n	8002722 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800271a:	2103      	movs	r1, #3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f95b 	bl	80029d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002722:	2110      	movs	r1, #16
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8f3 	bl	8002910 <USB_FlushTxFifo>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f91f 	bl	8002978 <USB_FlushRxFifo>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274a:	461a      	mov	r2, r3
 800274c:	2300      	movs	r3, #0
 800274e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	461a      	mov	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002762:	461a      	mov	r2, r3
 8002764:	2300      	movs	r3, #0
 8002766:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e043      	b.n	80027f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002784:	d118      	bne.n	80027b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e013      	b.n	80027ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ae:	461a      	mov	r2, r3
 80027b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e008      	b.n	80027ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c4:	461a      	mov	r2, r3
 80027c6:	2300      	movs	r3, #0
 80027c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	461a      	mov	r2, r3
 80027ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3301      	adds	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3b7      	bcc.n	800276e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e043      	b.n	800288c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281a:	d118      	bne.n	800284e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e013      	b.n	8002860 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002844:	461a      	mov	r2, r3
 8002846:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e008      	b.n	8002860 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	461a      	mov	r2, r3
 800286e:	2300      	movs	r3, #0
 8002870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	461a      	mov	r2, r3
 8002880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3301      	adds	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d3b7      	bcc.n	8002804 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80028b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <USB_DevInit+0x2c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f043 0208 	orr.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80028e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002908:	b004      	add	sp, #16
 800290a:	4770      	bx	lr
 800290c:	803c3800 	.word	0x803c3800

08002910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <USB_FlushTxFifo+0x64>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e01b      	b.n	8002968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	daf2      	bge.n	800291e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	019b      	lsls	r3, r3, #6
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3301      	adds	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <USB_FlushTxFifo+0x64>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e006      	b.n	8002968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	d0f0      	beq.n	8002948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	00030d40 	.word	0x00030d40

08002978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <USB_FlushRxFifo+0x5c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e018      	b.n	80029c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	daf2      	bge.n	8002984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2210      	movs	r2, #16
 80029a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <USB_FlushRxFifo+0x5c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e006      	b.n	80029c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d0f0      	beq.n	80029a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	00030d40 	.word	0x00030d40

080029d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002a24:	f023 0303 	bic.w	r3, r3, #3
 8002a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0301 	and.w	r3, r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <USB_CoreReset+0x64>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e01b      	b.n	8002abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	daf2      	bge.n	8002a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <USB_CoreReset+0x64>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e006      	b.n	8002abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d0f0      	beq.n	8002a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	00030d40 	.word	0x00030d40

08002ad0 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <tud_audio_n_read+0x2c>
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	490e      	ldr	r1, [pc, #56]	; (8002b24 <tud_audio_n_read+0x54>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <tud_audio_n_read+0x30>
 8002afc:	2300      	movs	r3, #0
 8002afe:	e00d      	b.n	8002b1c <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 8002b00:	79fa      	ldrb	r2, [r7, #7]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <tud_audio_n_read+0x54>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	88ba      	ldrh	r2, [r7, #4]
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 f9b5 	bl	8004e84 <tu_fifo_read_n>
 8002b1a:	4603      	mov	r3, r0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2000181c 	.word	0x2000181c

08002b28 <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <audiod_rx_done_cb+0xe4>)
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <audiod_rx_done_cb+0x24>
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <audiod_rx_done_cb+0xe8>)
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f001 f8d3 	bl	8003cf8 <audiod_get_audio_fct_idx>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7c18      	ldrb	r0, [r3, #16]
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	f107 020e 	add.w	r2, r7, #14
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	f000 fee4 	bl	8003930 <audiod_get_AS_interface_index>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <audiod_rx_done_cb+0x50>
 8002b74:	2300      	movs	r3, #0
 8002b76:	e044      	b.n	8002c02 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <audiod_rx_done_cb+0xe4>)
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	7b5c      	ldrb	r4, [r3, #13]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	7bba      	ldrb	r2, [r7, #14]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	88b9      	ldrh	r1, [r7, #4]
 8002b90:	79f8      	ldrb	r0, [r7, #7]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4623      	mov	r3, r4
 8002b96:	f7fd fefd 	bl	8000994 <tud_audio_rx_done_pre_read_cb>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f083 0301 	eor.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <audiod_rx_done_cb+0x82>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e02b      	b.n	8002c02 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7b59      	ldrb	r1, [r3, #13]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f103 0220 	add.w	r2, r3, #32
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	89db      	ldrh	r3, [r3, #14]
 8002bb8:	79f8      	ldrb	r0, [r7, #7]
 8002bba:	f002 fddb 	bl	8005774 <usbd_edpt_xfer_fifo>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <audiod_rx_done_cb+0xa6>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e019      	b.n	8002c02 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <audiod_rx_done_cb+0xe8>)
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7b5c      	ldrb	r4, [r3, #13]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	7bba      	ldrb	r2, [r7, #14]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	88b9      	ldrh	r1, [r7, #4]
 8002be6:	79f8      	ldrb	r0, [r7, #7]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4623      	mov	r3, r4
 8002bec:	f3af 8000 	nop.w
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <audiod_rx_done_cb+0xd8>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <audiod_rx_done_cb+0xda>
  }

  return true;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08000995 	.word	0x08000995
 8002c10:	00000000 	.word	0x00000000

08002c14 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <tud_audio_n_write+0x2c>
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	490f      	ldr	r1, [pc, #60]	; (8002c6c <tud_audio_n_write+0x58>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <tud_audio_n_write+0x30>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e00e      	b.n	8002c62 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <tud_audio_n_write+0x58>)
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	88ba      	ldrh	r2, [r7, #4]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 f979 	bl	8004f52 <tu_fifo_write_n>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000181c 	.word	0x2000181c

08002c70 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f001 f83b 	bl	8003cf8 <audiod_get_audio_fct_idx>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7b18      	ldrb	r0, [r3, #12]
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	f107 020f 	add.w	r2, r7, #15
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	f000 fe4c 	bl	8003930 <audiod_get_AS_interface_index>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <audiod_tx_done_cb+0x38>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e05b      	b.n	8002d60 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <audiod_tx_done_cb+0x4a>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e052      	b.n	8002d60 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <audiod_tx_done_cb+0xf8>)
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <audiod_tx_done_cb+0x76>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7a1a      	ldrb	r2, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	7bf9      	ldrb	r1, [r7, #15]
 8002cca:	440b      	add	r3, r1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	7df9      	ldrb	r1, [r7, #23]
 8002cd0:	79f8      	ldrb	r0, [r7, #7]
 8002cd2:	f7fd fe81 	bl	80009d8 <tud_audio_tx_done_pre_load_cb>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <audiod_tx_done_cb+0x76>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e03c      	b.n	8002d60 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	332c      	adds	r3, #44	; 0x2c
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 f81d 	bl	8004d2a <tu_fifo_count>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	895b      	ldrh	r3, [r3, #10]
 8002cf8:	827a      	strh	r2, [r7, #18]
 8002cfa:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002cfc:	8a7a      	ldrh	r2, [r7, #18]
 8002cfe:	8a3b      	ldrh	r3, [r7, #16]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf28      	it	cs
 8002d04:	4613      	movcs	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	7a19      	ldrb	r1, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002d14:	8abb      	ldrh	r3, [r7, #20]
 8002d16:	79f8      	ldrb	r0, [r7, #7]
 8002d18:	f002 fd2c 	bl	8005774 <usbd_edpt_xfer_fifo>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <audiod_tx_done_cb+0xbc>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e019      	b.n	8002d60 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <audiod_tx_done_cb+0xfc>)
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <audiod_tx_done_cb+0xee>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	7a1c      	ldrb	r4, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	7dfa      	ldrb	r2, [r7, #23]
 8002d42:	8ab9      	ldrh	r1, [r7, #20]
 8002d44:	79f8      	ldrb	r0, [r7, #7]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f7fd fe5b 	bl	8000a04 <tud_audio_tx_done_post_load_cb>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <audiod_tx_done_cb+0xee>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <audiod_tx_done_cb+0xf0>

  return true;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	080009d9 	.word	0x080009d9
 8002d6c:	08000a05 	.word	0x08000a05

08002d70 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8002d76:	2238      	movs	r2, #56	; 0x38
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4824      	ldr	r0, [pc, #144]	; (8002e0c <audiod_init+0x9c>)
 8002d7c:	f004 fa7a 	bl	8007274 <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	71fb      	strb	r3, [r7, #7]
 8002d84:	e039      	b.n	8002dfa <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <audiod_init+0x9c>)
 8002d92:	4413      	add	r3, r2
 8002d94:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <audiod_init+0xa0>)
 8002da0:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	761a      	strb	r2, [r3, #24]
        break;
 8002da8:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d103      	bne.n	8002db8 <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <audiod_init+0xa4>)
 8002db4:	61da      	str	r2, [r3, #28]
        break;
 8002db6:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f44f 7242 	mov.w	r2, #776	; 0x308
 8002dce:	4912      	ldr	r1, [pc, #72]	; (8002e18 <audiod_init+0xa8>)
 8002dd0:	f001 fb9e 	bl	8004510 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 8002dd4:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f103 0020 	add.w	r0, r3, #32
 8002de2:	2301      	movs	r3, #1
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8002dec:	490b      	ldr	r1, [pc, #44]	; (8002e1c <audiod_init+0xac>)
 8002dee:	f001 fb8f 	bl	8004510 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 8002df2:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	3301      	adds	r3, #1
 8002df8:	71fb      	strb	r3, [r7, #7]
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0c2      	beq.n	8002d86 <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000181c 	.word	0x2000181c
 8002e10:	200017d8 	.word	0x200017d8
 8002e14:	20001818 	.word	0x20001818
 8002e18:	20000ec0 	.word	0x20000ec0
 8002e1c:	200011c8 	.word	0x200011c8

08002e20 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e019      	b.n	8002e64 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <audiod_reset+0x54>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8002e40:	2214      	movs	r2, #20
 8002e42:	2100      	movs	r1, #0
 8002e44:	68b8      	ldr	r0, [r7, #8]
 8002e46:	f004 fa15 	bl	8007274 <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	332c      	adds	r3, #44	; 0x2c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 f8a3 	bl	8004f9a <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3320      	adds	r3, #32
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 f89e 	bl	8004f9a <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	3301      	adds	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0e2      	beq.n	8002e30 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	2000181c 	.word	0x2000181c

08002e78 <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	795b      	ldrb	r3, [r3, #5]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d103      	bne.n	8002e98 <audiod_open+0x20>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	799b      	ldrb	r3, [r3, #6]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <audiod_open+0x24>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e064      	b.n	8002f66 <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	79db      	ldrb	r3, [r3, #7]
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d001      	beq.n	8002ea8 <audiod_open+0x30>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e05e      	b.n	8002f66 <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	791b      	ldrb	r3, [r3, #4]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e058      	b.n	8002f66 <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	78db      	ldrb	r3, [r3, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <audiod_open+0x48>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e052      	b.n	8002f66 <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e030      	b.n	8002f28 <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	492a      	ldr	r1, [pc, #168]	; (8002f74 <audiod_open+0xfc>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d122      	bne.n	8002f22 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	4925      	ldr	r1, [pc, #148]	; (8002f74 <audiod_open+0xfc>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3304      	adds	r3, #4
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	4920      	ldr	r1, [pc, #128]	; (8002f74 <audiod_open+0xfc>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	491a      	ldr	r1, [pc, #104]	; (8002f74 <audiod_open+0xfc>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3312      	adds	r3, #18
 8002f18:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002f1c:	801a      	strh	r2, [r3, #0]
          break;
 8002f1e:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 8002f20:	e006      	b.n	8002f30 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0cb      	beq.n	8002ec6 <audiod_open+0x4e>
 8002f2e:	e000      	b.n	8002f32 <audiod_open+0xba>
      break;
 8002f30:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <audiod_open+0xd6>
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <audiod_open+0x100>)
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d000      	beq.n	8002f4a <audiod_open+0xd2>
 8002f48:	be00      	bkpt	0x0000
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e00b      	b.n	8002f66 <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	4908      	ldr	r1, [pc, #32]	; (8002f74 <audiod_open+0xfc>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3312      	adds	r3, #18
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	3b08      	subs	r3, #8
 8002f62:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8002f64:	89bb      	ldrh	r3, [r7, #12]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000181c 	.word	0x2000181c
 8002f78:	e000edf0 	.word	0xe000edf0

08002f7c <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	889b      	ldrh	r3, [r3, #4]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002f90:	8abb      	ldrh	r3, [r7, #20]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	f107 0212 	add.w	r2, r7, #18
 8002f9e:	f107 0113 	add.w	r1, r7, #19
 8002fa2:	7df8      	ldrb	r0, [r7, #23]
 8002fa4:	f000 fd20 	bl	80039e8 <audiod_get_AS_interface_index_global>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f083 0301 	eor.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <audiod_get_interface+0x3c>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e019      	b.n	8002fec <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <audiod_get_interface+0x78>)
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a5b      	subs	r3, r3, r1
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	331c      	adds	r3, #28
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	7cba      	ldrb	r2, [r7, #18]
 8002fce:	441a      	add	r2, r3
 8002fd0:	79f8      	ldrb	r0, [r7, #7]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	f002 fd79 	bl	8005acc <tud_control_xfer>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f083 0301 	eor.w	r3, r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <audiod_get_interface+0x6e>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000181c 	.word	0x2000181c

08002ff8 <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b096      	sub	sp, #88	; 0x58
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	889b      	ldrh	r3, [r3, #4]
 8003008:	b29b      	uxth	r3, r3
 800300a:	873b      	strh	r3, [r7, #56]	; 0x38
 800300c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	885b      	ldrh	r3, [r3, #2]
 8003018:	b29b      	uxth	r3, r3
 800301a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800301c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	f107 020e 	add.w	r2, r7, #14
 800302c:	f107 010f 	add.w	r1, r7, #15
 8003030:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8003034:	f000 fcd8 	bl	80039e8 <audiod_get_AS_interface_index_global>
 8003038:	4603      	mov	r3, r0
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <audiod_set_interface+0x50>
 8003044:	2300      	movs	r3, #0
 8003046:	e168      	b.n	800331a <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	461a      	mov	r2, r3
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4aa9      	ldr	r2, [pc, #676]	; (80032fc <audiod_set_interface+0x304>)
 8003056:	4413      	add	r3, r2
 8003058:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	7b1b      	ldrb	r3, [r3, #12]
 800305e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003062:	429a      	cmp	r2, r3
 8003064:	d121      	bne.n	80030aa <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 8003066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003068:	2200      	movs	r2, #0
 800306a:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 800306c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306e:	7a1a      	ldrb	r2, [r3, #8]
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fc3f 	bl	80058f8 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307c:	332c      	adds	r3, #44	; 0x2c
 800307e:	4618      	mov	r0, r3
 8003080:	f001 ff8b 	bl	8004f9a <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8003084:	4b9e      	ldr	r3, [pc, #632]	; (8003300 <audiod_set_interface+0x308>)
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <audiod_set_interface+0xac>
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fc20 	bl	80008d4 <tud_audio_set_itf_close_EP_cb>
 8003094:	4603      	mov	r3, r0
 8003096:	f083 0301 	eor.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <audiod_set_interface+0xac>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e13a      	b.n	800331a <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 80030a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a6:	2200      	movs	r2, #0
 80030a8:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 80030aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ac:	7c1b      	ldrb	r3, [r3, #16]
 80030ae:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d121      	bne.n	80030fa <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 80030b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b8:	2200      	movs	r2, #0
 80030ba:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 80030bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030be:	7b5a      	ldrb	r2, [r3, #13]
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fc17 	bl	80058f8 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 80030ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030cc:	3320      	adds	r3, #32
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 ff63 	bl	8004f9a <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <audiod_set_interface+0x308>)
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <audiod_set_interface+0xfc>
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fbf8 	bl	80008d4 <tud_audio_set_itf_close_EP_cb>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f083 0301 	eor.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <audiod_set_interface+0xfc>
 80030f0:	2300      	movs	r3, #0
 80030f2:	e112      	b.n	800331a <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	2200      	movs	r2, #0
 80030f8:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 80030fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	7bba      	ldrb	r2, [r7, #14]
 8003100:	4413      	add	r3, r2
 8003102:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003106:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310e:	8a5b      	ldrh	r3, [r3, #18]
 8003110:	3b08      	subs	r3, #8
 8003112:	4413      	add	r3, r2
 8003114:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 8003116:	e0ea      	b.n	80032ee <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	3301      	adds	r3, #1
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b04      	cmp	r3, #4
 8003124:	f040 80d9 	bne.w	80032da <audiod_set_interface+0x2e2>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	789b      	ldrb	r3, [r3, #2]
 800312c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003130:	429a      	cmp	r2, r3
 8003132:	f040 80d2 	bne.w	80032da <audiod_set_interface+0x2e2>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800313e:	429a      	cmp	r2, r3
 8003140:	f040 80cb 	bne.w	80032da <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003152:	e09f      	b.n	8003294 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	3301      	adds	r3, #1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b05      	cmp	r3, #5
 8003160:	f040 808e 	bne.w	8003280 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800316c:	4618      	mov	r0, r3
 800316e:	f002 f9f3 	bl	8005558 <usbd_edpt_open>
 8003172:	4603      	mov	r3, r0
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <audiod_set_interface+0x19c>
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <audiod_set_interface+0x30c>)
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d000      	beq.n	8003190 <audiod_set_interface+0x198>
 800318e:	be00      	bkpt	0x0000
 8003190:	2300      	movs	r3, #0
 8003192:	e0c2      	b.n	800331a <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 800319c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fb5b 	bl	8005860 <usbd_edpt_clear_stall>
 80031aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80031ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80031b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031b6:	09db      	lsrs	r3, r3, #7
 80031b8:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d12d      	bne.n	800321a <audiod_set_interface+0x222>
 80031be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d126      	bne.n	800321a <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80031d2:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 80031d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80031da:	731a      	strb	r2, [r3, #12]
 80031dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	889b      	ldrh	r3, [r3, #4]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ea:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <audiod_set_interface+0x304>)
 80031fe:	441a      	add	r2, r3
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fd33 	bl	8002c70 <audiod_tx_done_cb>
 800320a:	4603      	mov	r3, r0
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <audiod_set_interface+0x222>
 8003216:	2300      	movs	r3, #0
 8003218:	e07f      	b.n	800331a <audiod_set_interface+0x322>
 800321a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003226:	09db      	lsrs	r3, r3, #7
 8003228:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 800322a:	2b00      	cmp	r3, #0
 800322c:	d123      	bne.n	8003276 <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 800322e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003230:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003234:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 8003236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003238:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800323c:	741a      	strb	r2, [r3, #16]
 800323e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003240:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	889b      	ldrh	r3, [r3, #4]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003250:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	7b59      	ldrb	r1, [r3, #13]
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003258:	f103 0220 	add.w	r2, r3, #32
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	89db      	ldrh	r3, [r3, #14]
 8003260:	79f8      	ldrb	r0, [r7, #7]
 8003262:	f002 fa87 	bl	8005774 <usbd_edpt_xfer_fifo>
 8003266:	4603      	mov	r3, r0
 8003268:	f083 0301 	eor.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <audiod_set_interface+0x27e>
 8003272:	2300      	movs	r3, #0
 8003274:	e051      	b.n	800331a <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 8003276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800327a:	3301      	adds	r3, #1
 800327c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4413      	add	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003294:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003298:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800329c:	429a      	cmp	r2, r3
 800329e:	d204      	bcs.n	80032aa <audiod_set_interface+0x2b2>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f63f af55 	bhi.w	8003154 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 80032aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80032ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <audiod_set_interface+0x2c2>
 80032b6:	2300      	movs	r3, #0
 80032b8:	e02f      	b.n	800331a <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <audiod_set_interface+0x310>)
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d025      	beq.n	800330c <audiod_set_interface+0x314>
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fb2d 	bl	8000924 <tud_audio_set_itf_cb>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01a      	beq.n	800330c <audiod_set_interface+0x314>
 80032d6:	2300      	movs	r3, #0
 80032d8:	e01f      	b.n	800331a <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f63f af10 	bhi.w	8003118 <audiod_set_interface+0x120>
 80032f8:	e009      	b.n	800330e <audiod_set_interface+0x316>
 80032fa:	bf00      	nop
 80032fc:	2000181c 	.word	0x2000181c
 8003300:	080008d5 	.word	0x080008d5
 8003304:	e000edf0 	.word	0xe000edf0
 8003308:	08000925 	.word	0x08000925
      break;
 800330c:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fb68 	bl	80059e8 <tud_control_status>

  return true;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	3758      	adds	r7, #88	; 0x58
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop

08003324 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 809d 	bne.w	800347a <audiod_control_complete+0x156>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8095 	bne.w	800347a <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <audiod_control_complete+0x40>
 800335e:	2b02      	cmp	r3, #2
 8003360:	d057      	beq.n	8003412 <audiod_control_complete+0xee>
 8003362:	e07f      	b.n	8003464 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	889b      	ldrh	r3, [r3, #4]
 8003368:	b29b      	uxth	r3, r3
 800336a:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	889b      	ldrh	r3, [r3, #4]
 8003370:	b29b      	uxth	r3, r3
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 8003378:	7d7b      	ldrb	r3, [r7, #21]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <audiod_control_complete+0x160>)
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01f      	beq.n	80033c4 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003384:	f107 020f 	add.w	r2, r7, #15
 8003388:	7d79      	ldrb	r1, [r7, #21]
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fb57 	bl	8003a40 <audiod_verify_entity_exists>
 8003392:	4603      	mov	r3, r0
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <audiod_control_complete+0x7e>
 800339e:	2300      	movs	r3, #0
 80033a0:	e06c      	b.n	800347c <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	4619      	mov	r1, r3
 80033a6:	4a38      	ldr	r2, [pc, #224]	; (8003488 <audiod_control_complete+0x164>)
 80033a8:	460b      	mov	r3, r1
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a5b      	subs	r3, r3, r1
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	3314      	adds	r3, #20
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fa63 	bl	8000886 <tud_audio_set_req_entity_cb>
 80033c0:	4603      	mov	r3, r0
 80033c2:	e05b      	b.n	800347c <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 80033c4:	2300      	movs	r3, #0
 80033c6:	e059      	b.n	800347c <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <audiod_control_complete+0x168>)
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01f      	beq.n	800340e <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80033ce:	f107 020f 	add.w	r2, r7, #15
 80033d2:	7dbb      	ldrb	r3, [r7, #22]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fbaa 	bl	8003b30 <audiod_verify_itf_exists>
 80033dc:	4603      	mov	r3, r0
 80033de:	f083 0301 	eor.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <audiod_control_complete+0xc8>
 80033e8:	2300      	movs	r3, #0
 80033ea:	e047      	b.n	800347c <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <audiod_control_complete+0x164>)
 80033f2:	460b      	mov	r3, r1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a5b      	subs	r3, r3, r1
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	3314      	adds	r3, #20
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f3af 8000 	nop.w
 800340a:	4603      	mov	r3, r0
 800340c:	e036      	b.n	800347c <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 800340e:	2300      	movs	r3, #0
 8003410:	e034      	b.n	800347c <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	889b      	ldrh	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <audiod_control_complete+0x16c>)
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01f      	beq.n	8003460 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003420:	f107 020f 	add.w	r2, r7, #15
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fbeb 	bl	8003c04 <audiod_verify_ep_exists>
 800342e:	4603      	mov	r3, r0
 8003430:	f083 0301 	eor.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <audiod_control_complete+0x11a>
 800343a:	2300      	movs	r3, #0
 800343c:	e01e      	b.n	800347c <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	4619      	mov	r1, r3
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <audiod_control_complete+0x164>)
 8003444:	460b      	mov	r3, r1
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	1a5b      	subs	r3, r3, r1
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	3314      	adds	r3, #20
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f3af 8000 	nop.w
 800345c:	4603      	mov	r3, r0
 800345e:	e00d      	b.n	800347c <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8003460:	2300      	movs	r3, #0
 8003462:	e00b      	b.n	800347c <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <audiod_control_complete+0x170>)
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d000      	beq.n	8003476 <audiod_control_complete+0x152>
 8003474:	be00      	bkpt	0x0000
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <audiod_control_complete+0x158>
    }
  }
  return true;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	08000887 	.word	0x08000887
 8003488:	2000181c 	.word	0x2000181c
	...
 8003494:	e000edf0 	.word	0xe000edf0

08003498 <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11f      	bne.n	80034f2 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	2b0a      	cmp	r3, #10
 80034b8:	d002      	beq.n	80034c0 <audiod_control_request+0x28>
 80034ba:	2b0b      	cmp	r3, #11
 80034bc:	d007      	beq.n	80034ce <audiod_control_request+0x36>
 80034be:	e00d      	b.n	80034dc <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fd59 	bl	8002f7c <audiod_get_interface>
 80034ca:	4603      	mov	r3, r0
 80034cc:	e0d5      	b.n	800367a <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fd90 	bl	8002ff8 <audiod_set_interface>
 80034d8:	4603      	mov	r3, r0
 80034da:	e0ce      	b.n	800367a <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 80034dc:	4b69      	ldr	r3, [pc, #420]	; (8003684 <audiod_control_request+0x1ec>)
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d000      	beq.n	80034ee <audiod_control_request+0x56>
 80034ec:	be00      	bkpt	0x0000
 80034ee:	2300      	movs	r3, #0
 80034f0:	e0c3      	b.n	800367a <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 80b2 	bne.w	8003666 <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	b29b      	uxth	r3, r3
 8003508:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d002      	beq.n	800351e <audiod_control_request+0x86>
 8003518:	2b02      	cmp	r3, #2
 800351a:	d04d      	beq.n	80035b8 <audiod_control_request+0x120>
 800351c:	e072      	b.n	8003604 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	b29b      	uxth	r3, r3
 8003528:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 800352a:	7e7b      	ldrb	r3, [r7, #25]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d021      	beq.n	8003574 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003530:	f107 020f 	add.w	r2, r7, #15
 8003534:	7e79      	ldrb	r1, [r7, #25]
 8003536:	7efb      	ldrb	r3, [r7, #27]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fa81 	bl	8003a40 <audiod_verify_entity_exists>
 800353e:	4603      	mov	r3, r0
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <audiod_control_request+0xb6>
 800354a:	2300      	movs	r3, #0
 800354c:	e095      	b.n	800367a <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05e      	beq.n	800361a <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 800355c:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <audiod_control_request+0x1f0>)
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd f96a 	bl	8000840 <tud_audio_get_req_entity_cb>
 800356c:	4603      	mov	r3, r0
 800356e:	e084      	b.n	800367a <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8003570:	2300      	movs	r3, #0
 8003572:	e082      	b.n	800367a <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003574:	f107 020f 	add.w	r2, r7, #15
 8003578:	7efb      	ldrb	r3, [r7, #27]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fad7 	bl	8003b30 <audiod_verify_itf_exists>
 8003582:	4603      	mov	r3, r0
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <audiod_control_request+0xfa>
 800358e:	2300      	movs	r3, #0
 8003590:	e073      	b.n	800367a <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03c      	beq.n	800361a <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <audiod_control_request+0x1f4>)
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f3af 8000 	nop.w
 80035b0:	4603      	mov	r3, r0
 80035b2:	e062      	b.n	800367a <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 80035b4:	2300      	movs	r3, #0
 80035b6:	e060      	b.n	800367a <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	889b      	ldrh	r3, [r3, #4]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80035c0:	f107 020f 	add.w	r2, r7, #15
 80035c4:	7ebb      	ldrb	r3, [r7, #26]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fb1b 	bl	8003c04 <audiod_verify_ep_exists>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <audiod_control_request+0x146>
 80035da:	2300      	movs	r3, #0
 80035dc:	e04d      	b.n	800367a <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d018      	beq.n	800361e <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <audiod_control_request+0x1f8>)
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	6839      	ldr	r1, [r7, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f3af 8000 	nop.w
 80035fc:	4603      	mov	r3, r0
 80035fe:	e03c      	b.n	800367a <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8003600:	2300      	movs	r3, #0
 8003602:	e03a      	b.n	800367a <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <audiod_control_request+0x1ec>)
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d000      	beq.n	8003616 <audiod_control_request+0x17e>
 8003614:	be00      	bkpt	0x0000
 8003616:	2300      	movs	r3, #0
 8003618:	e02f      	b.n	800367a <audiod_control_request+0x1e2>
      break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <audiod_control_request+0x188>
      break;
 800361e:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	4619      	mov	r1, r3
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <audiod_control_request+0x1fc>)
 8003626:	460b      	mov	r3, r1
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a5b      	subs	r3, r3, r1
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	3314      	adds	r3, #20
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4618      	mov	r0, r3
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <audiod_control_request+0x1fc>)
 800363a:	4603      	mov	r3, r0
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a1b      	subs	r3, r3, r0
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	3318      	adds	r3, #24
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	79f8      	ldrb	r0, [r7, #7]
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	f002 fa3d 	bl	8005acc <tud_control_xfer>
 8003652:	4603      	mov	r3, r0
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <audiod_control_request+0x1ca>
 800365e:	2300      	movs	r3, #0
 8003660:	e00b      	b.n	800367a <audiod_control_request+0x1e2>
    return true;
 8003662:	2301      	movs	r3, #1
 8003664:	e009      	b.n	800367a <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <audiod_control_request+0x1ec>)
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d000      	beq.n	8003678 <audiod_control_request+0x1e0>
 8003676:	be00      	bkpt	0x0000
  return false;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000edf0 	.word	0xe000edf0
 8003688:	08000841 	.word	0x08000841
	...
 8003694:	2000181c 	.word	0x2000181c

08003698 <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	603a      	str	r2, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
 80036a4:	460b      	mov	r3, r1
 80036a6:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 80036a8:	79bb      	ldrb	r3, [r7, #6]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d106      	bne.n	80036bc <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fef0 	bl	8003498 <audiod_control_request>
 80036b8:	4603      	mov	r3, r0
 80036ba:	e00a      	b.n	80036d2 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 80036bc:	79bb      	ldrb	r3, [r7, #6]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d106      	bne.n	80036d0 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe2c 	bl	8003324 <audiod_control_complete>
 80036cc:	4603      	mov	r3, r0
 80036ce:	e000      	b.n	80036d2 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 80036d0:	2301      	movs	r3, #1
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
 80036e8:	460b      	mov	r3, r1
 80036ea:	71bb      	strb	r3, [r7, #6]
 80036ec:	4613      	mov	r3, r2
 80036ee:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e038      	b.n	8003768 <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <audiod_xfer_cb+0x9c>)
 8003702:	4413      	add	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	7a1b      	ldrb	r3, [r3, #8]
 800370a:	79ba      	ldrb	r2, [r7, #6]
 800370c:	429a      	cmp	r2, r3
 800370e:	d112      	bne.n	8003736 <audiod_xfer_cb+0x5a>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff faa7 	bl	8002c70 <audiod_tx_done_cb>
 8003722:	4603      	mov	r3, r0
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <audiod_xfer_cb+0x56>
 800372e:	2300      	movs	r3, #0
 8003730:	e01e      	b.n	8003770 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8003732:	2301      	movs	r3, #1
 8003734:	e01c      	b.n	8003770 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	7b5b      	ldrb	r3, [r3, #13]
 800373a:	79ba      	ldrb	r2, [r7, #6]
 800373c:	429a      	cmp	r2, r3
 800373e:	d110      	bne.n	8003762 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f9ed 	bl	8002b28 <audiod_rx_done_cb>
 800374e:	4603      	mov	r3, r0
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <audiod_xfer_cb+0x82>
 800375a:	2300      	movs	r3, #0
 800375c:	e008      	b.n	8003770 <audiod_xfer_cb+0x94>
      return true;
 800375e:	2301      	movs	r3, #1
 8003760:	e006      	b.n	8003770 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	3301      	adds	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c3      	beq.n	80036f6 <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000181c 	.word	0x2000181c

0800377c <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	4613      	mov	r3, r2
 80037a6:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <tud_audio_buffer_and_schedule_control_xfer+0x26>
 80037b6:	2300      	movs	r3, #0
 80037b8:	e0b2      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	889b      	ldrh	r3, [r3, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d002      	beq.n	80037d8 <tud_audio_buffer_and_schedule_control_xfer+0x44>
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d02c      	beq.n	8003830 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80037d6:	e040      	b.n	800385a <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	889b      	ldrh	r3, [r3, #4]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 80037e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d010      	beq.n	8003810 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80037ee:	f107 0217 	add.w	r2, r7, #23
 80037f2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80037f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f920 	bl	8003a40 <audiod_verify_entity_exists>
 8003800:	4603      	mov	r3, r0
 8003802:	f083 0301 	eor.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d031      	beq.n	8003870 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 800380c:	2300      	movs	r3, #0
 800380e:	e087      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003810:	f107 0217 	add.w	r2, r7, #23
 8003814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f988 	bl	8003b30 <audiod_verify_itf_exists>
 8003820:	4603      	mov	r3, r0
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 800382c:	2300      	movs	r3, #0
 800382e:	e077      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	889b      	ldrh	r3, [r3, #4]
 8003834:	b29b      	uxth	r3, r3
 8003836:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 800383a:	f107 0217 	add.w	r2, r7, #23
 800383e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f9dd 	bl	8003c04 <audiod_verify_ep_exists>
 800384a:	4603      	mov	r3, r0
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 8003856:	2300      	movs	r3, #0
 8003858:	e062      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800385a:	4b33      	ldr	r3, [pc, #204]	; (8003928 <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d000      	beq.n	800386c <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 800386a:	be00      	bkpt	0x0000
 800386c:	2300      	movs	r3, #0
 800386e:	e057      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8003874:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	4619      	mov	r1, r3
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 800387c:	460b      	mov	r3, r1
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a5b      	subs	r3, r3, r1
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	3318      	adds	r3, #24
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	89ba      	ldrh	r2, [r7, #12]
 800388e:	429a      	cmp	r2, r3
 8003890:	d90a      	bls.n	80038a8 <tud_audio_buffer_and_schedule_control_xfer+0x114>
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	4619      	mov	r1, r3
 8003896:	4a25      	ldr	r2, [pc, #148]	; (800392c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003898:	460b      	mov	r3, r1
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a5b      	subs	r3, r3, r1
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	3318      	adds	r3, #24
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4a1f      	ldr	r2, [pc, #124]	; (800392c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80038ae:	460b      	mov	r3, r1
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a5b      	subs	r3, r3, r1
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	3314      	adds	r3, #20
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	4618      	mov	r0, r3
 80038c0:	491a      	ldr	r1, [pc, #104]	; (800392c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80038c2:	4603      	mov	r3, r0
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a1b      	subs	r3, r3, r0
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	440b      	add	r3, r1
 80038cc:	3318      	adds	r3, #24
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	89bb      	ldrh	r3, [r7, #12]
 80038d4:	627a      	str	r2, [r7, #36]	; 0x24
 80038d6:	6239      	str	r1, [r7, #32]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d202      	bcs.n	80038ec <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e005      	b.n	80038f8 <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	69f9      	ldr	r1, [r7, #28]
 80038f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f2:	f003 fcb1 	bl	8007258 <memcpy>
  return 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 80038fc:	2300      	movs	r3, #0
 80038fe:	e00f      	b.n	8003920 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	4619      	mov	r1, r3
 8003904:	4a09      	ldr	r2, [pc, #36]	; (800392c <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003906:	460b      	mov	r3, r1
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a5b      	subs	r3, r3, r1
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	3314      	adds	r3, #20
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	89bb      	ldrh	r3, [r7, #12]
 8003916:	7bf8      	ldrb	r0, [r7, #15]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	f002 f8d7 	bl	8005acc <tud_control_xfer>
 800391e:	4603      	mov	r3, r0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3730      	adds	r7, #48	; 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000edf0 	.word	0xe000edf0
 800392c:	2000181c 	.word	0x2000181c

08003930 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8003930:	b480      	push	{r7}
 8003932:	b08d      	sub	sp, #52	; 0x34
 8003934:	af00      	add	r7, sp, #0
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4603      	mov	r3, r0
 800393e:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d048      	beq.n	80039da <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	8a5b      	ldrh	r3, [r3, #18]
 8003950:	3b08      	subs	r3, #8
 8003952:	4413      	add	r3, r2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	88db      	ldrh	r3, [r3, #6]
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	4413      	add	r3, r2
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8003980:	e027      	b.n	80039d2 <audiod_get_AS_interface_index+0xa2>
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3301      	adds	r3, #1
 800398a:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800398c:	2b04      	cmp	r3, #4
 800398e:	d116      	bne.n	80039be <audiod_get_AS_interface_index+0x8e>
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d112      	bne.n	80039be <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d108      	bne.n	80039b4 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039a8:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ae:	601a      	str	r2, [r3, #0]
          return true;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e013      	b.n	80039dc <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 80039b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039b8:	3301      	adds	r3, #1
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 80039d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3d3      	bcc.n	8003982 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3734      	adds	r7, #52	; 0x34
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4603      	mov	r3, r0
 80039f6:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	75fb      	strb	r3, [r7, #23]
 80039fc:	e016      	b.n	8003a2c <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 80039fe:	7dfa      	ldrb	r2, [r7, #23]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <audiod_get_AS_interface_index_global+0x54>)
 8003a0a:	1899      	adds	r1, r3, r2
 8003a0c:	7bf8      	ldrb	r0, [r7, #15]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	f7ff ff8d 	bl	8003930 <audiod_get_AS_interface_index>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	7dfa      	ldrb	r2, [r7, #23]
 8003a20:	701a      	strb	r2, [r3, #0]
      return true;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e006      	b.n	8003a34 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0e5      	beq.n	80039fe <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000181c 	.word	0x2000181c

08003a40 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b08d      	sub	sp, #52	; 0x34
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	603a      	str	r2, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a56:	e05d      	b.n	8003b14 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003a58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a5c:	4933      	ldr	r1, [pc, #204]	; (8003b2c <audiod_verify_entity_exists+0xec>)
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3304      	adds	r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d04c      	beq.n	8003b0a <audiod_verify_entity_exists+0xca>
 8003a70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a74:	492d      	ldr	r1, [pc, #180]	; (8003b2c <audiod_verify_entity_exists+0xec>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3304      	adds	r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	79fa      	ldrb	r2, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d13e      	bne.n	8003b0a <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8003a8c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a90:	4926      	ldr	r1, [pc, #152]	; (8003b2c <audiod_verify_entity_exists+0xec>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4413      	add	r3, r2
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	88db      	ldrh	r3, [r3, #6]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	4413      	add	r3, r2
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 8003ad4:	e015      	b.n	8003b02 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	3303      	adds	r3, #3
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	79ba      	ldrb	r2, [r7, #6]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d105      	bne.n	8003aee <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003ae8:	701a      	strb	r2, [r3, #0]
          return true;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e017      	b.n	8003b1e <audiod_verify_entity_exists+0xde>
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 8003b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d3e5      	bcc.n	8003ad6 <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d09d      	beq.n	8003a58 <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3734      	adds	r7, #52	; 0x34
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000181c 	.word	0x2000181c

08003b30 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e054      	b.n	8003bec <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 8003b42:	7ffa      	ldrb	r2, [r7, #31]
 8003b44:	492e      	ldr	r1, [pc, #184]	; (8003c00 <audiod_verify_itf_exists+0xd0>)
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d046      	beq.n	8003be6 <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 8003b58:	7ffa      	ldrb	r2, [r7, #31]
 8003b5a:	4929      	ldr	r1, [pc, #164]	; (8003c00 <audiod_verify_itf_exists+0xd0>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3304      	adds	r3, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003b6c:	7ffa      	ldrb	r2, [r7, #31]
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <audiod_verify_itf_exists+0xd0>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	7ffa      	ldrb	r2, [r7, #31]
 8003b80:	481f      	ldr	r0, [pc, #124]	; (8003c00 <audiod_verify_itf_exists+0xd0>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4403      	add	r3, r0
 8003b8c:	3312      	adds	r3, #18
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	3b08      	subs	r3, #8
 8003b92:	440b      	add	r3, r1
 8003b94:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 8003b96:	e022      	b.n	8003bde <audiod_verify_itf_exists+0xae>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d111      	bne.n	8003bca <audiod_verify_itf_exists+0x9a>
 8003ba6:	7ffa      	ldrb	r2, [r7, #31]
 8003ba8:	4915      	ldr	r1, [pc, #84]	; (8003c00 <audiod_verify_itf_exists+0xd0>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	789b      	ldrb	r3, [r3, #2]
 8003bba:	79fa      	ldrb	r2, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d104      	bne.n	8003bca <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	7ffa      	ldrb	r2, [r7, #31]
 8003bc4:	701a      	strb	r2, [r3, #0]
          return true;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e014      	b.n	8003bf4 <audiod_verify_itf_exists+0xc4>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8003bdc:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3d8      	bcc.n	8003b98 <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	3301      	adds	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0a7      	beq.n	8003b42 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3724      	adds	r7, #36	; 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	2000181c 	.word	0x2000181c

08003c04 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b08b      	sub	sp, #44	; 0x2c
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c16:	e061      	b.n	8003cdc <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 8003c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c1c:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <audiod_verify_ep_exists+0xf0>)
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	440b      	add	r3, r1
 8003c28:	3304      	adds	r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d050      	beq.n	8003cd2 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8003c30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c34:	492f      	ldr	r1, [pc, #188]	; (8003cf4 <audiod_verify_ep_exists+0xf0>)
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	3304      	adds	r3, #4
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c48:	482a      	ldr	r0, [pc, #168]	; (8003cf4 <audiod_verify_ep_exists+0xf0>)
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4403      	add	r3, r0
 8003c54:	3312      	adds	r3, #18
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	440b      	add	r3, r1
 8003c5a:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 8003c5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c60:	4924      	ldr	r1, [pc, #144]	; (8003cf4 <audiod_verify_ep_exists+0xf0>)
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4413      	add	r3, r2
 8003c80:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	88db      	ldrh	r3, [r3, #6]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 8003c90:	e01b      	b.n	8003cca <audiod_verify_ep_exists+0xc6>
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10a      	bne.n	8003cb6 <audiod_verify_ep_exists+0xb2>
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	789b      	ldrb	r3, [r3, #2]
 8003ca4:	79fa      	ldrb	r2, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d105      	bne.n	8003cb6 <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003cb0:	701a      	strb	r2, [r3, #0]
          return true;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e017      	b.n	8003ce6 <audiod_verify_ep_exists+0xe2>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8003cc8:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3df      	bcc.n	8003c92 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d099      	beq.n	8003c18 <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	372c      	adds	r7, #44	; 0x2c
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000181c 	.word	0x2000181c

08003cf8 <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e00e      	b.n	8003d24 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <audiod_get_audio_fct_idx+0x40>)
 8003d12:	4413      	add	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d101      	bne.n	8003d1e <audiod_get_audio_fct_idx+0x26>
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	e006      	b.n	8003d2c <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	3301      	adds	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ed      	beq.n	8003d06 <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	2000181c 	.word	0x2000181c

08003d3c <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f861 	bl	8004e14 <tu_fifo_remaining>
 8003d52:	4603      	mov	r3, r0
 8003d54:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8003d56:	89bb      	ldrh	r3, [r7, #12]
 8003d58:	2b3f      	cmp	r3, #63	; 0x3f
 8003d5a:	d801      	bhi.n	8003d60 <_prep_out_transaction+0x24>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e02b      	b.n	8003db8 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	78da      	ldrb	r2, [r3, #3]
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fc39 	bl	80055e0 <usbd_edpt_claim>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f083 0301 	eor.w	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <_prep_out_transaction+0x42>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e01c      	b.n	8003db8 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3310      	adds	r3, #16
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f846 	bl	8004e14 <tu_fifo_remaining>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8003d8c:	89bb      	ldrh	r3, [r7, #12]
 8003d8e:	2b3f      	cmp	r3, #63	; 0x3f
 8003d90:	d90a      	bls.n	8003da8 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	78d9      	ldrb	r1, [r3, #3]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003d9c:	7bf8      	ldrb	r0, [r7, #15]
 8003d9e:	2340      	movs	r3, #64	; 0x40
 8003da0:	f001 fc72 	bl	8005688 <usbd_edpt_xfer>
 8003da4:	4603      	mov	r3, r0
 8003da6:	e007      	b.n	8003db8 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	78da      	ldrb	r2, [r3, #3]
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fc3f 	bl	8005634 <usbd_edpt_release>

    return false;
 8003db6:	2300      	movs	r3, #0
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	4a36      	ldr	r2, [pc, #216]	; (8003eb0 <tud_cdc_n_write_flush+0xf0>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8003dda:	f001 f939 	bl	8005050 <tud_mounted>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <tud_cdc_n_write_flush+0x38>
 8003de4:	f001 f946 	bl	8005074 <tud_suspended>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <tud_cdc_n_write_flush+0x38>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <tud_cdc_n_write_flush+0x3a>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8003e00:	f083 0301 	eor.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <tud_cdc_n_write_flush+0x4e>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e04c      	b.n	8003ea8 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	331c      	adds	r3, #28
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ff89 	bl	8004d2a <tu_fifo_count>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <tud_cdc_n_write_flush+0x62>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e042      	b.n	8003ea8 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	789a      	ldrb	r2, [r3, #2]
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fbd6 	bl	80055e0 <usbd_edpt_claim>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f083 0301 	eor.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <tud_cdc_n_write_flush+0x84>
 8003e40:	2300      	movs	r3, #0
 8003e42:	e031      	b.n	8003ea8 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f103 001c 	add.w	r0, r3, #28
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	33e8      	adds	r3, #232	; 0xe8
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	4619      	mov	r1, r3
 8003e52:	f001 f817 	bl	8004e84 <tu_fifo_read_n>
 8003e56:	4603      	mov	r3, r0
 8003e58:	823b      	strh	r3, [r7, #16]

  if ( count )
 8003e5a:	8a3b      	ldrh	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	7899      	ldrb	r1, [r3, #2]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8003e6a:	8a3b      	ldrh	r3, [r7, #16]
 8003e6c:	7cf8      	ldrb	r0, [r7, #19]
 8003e6e:	f001 fc0b 	bl	8005688 <usbd_edpt_xfer>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f083 0301 	eor.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <tud_cdc_n_write_flush+0xd4>
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <tud_cdc_n_write_flush+0xf4>)
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d000      	beq.n	8003e90 <tud_cdc_n_write_flush+0xd0>
 8003e8e:	be00      	bkpt	0x0000
 8003e90:	2300      	movs	r3, #0
 8003e92:	e009      	b.n	8003ea8 <tud_cdc_n_write_flush+0xe8>
    return count;
 8003e94:	8a3b      	ldrh	r3, [r7, #16]
 8003e96:	e007      	b.n	8003ea8 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	789a      	ldrb	r2, [r3, #2]
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fbc7 	bl	8005634 <usbd_edpt_release>
    return 0;
 8003ea6:	2300      	movs	r3, #0
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20001854 	.word	0x20001854
 8003eb4:	e000edf0 	.word	0xe000edf0

08003eb8 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003ebe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4820      	ldr	r0, [pc, #128]	; (8003f48 <cdcd_init+0x90>)
 8003ec6:	f003 f9d5 	bl	8007274 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	71fb      	strb	r3, [r7, #7]
 8003ece:	e032      	b.n	8003f36 <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <cdcd_init+0x90>)
 8003edc:	4413      	add	r3, r2
 8003ede:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003eec:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2208      	movs	r2, #8
 8003efe:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f103 0010 	add.w	r0, r3, #16
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2301      	movs	r3, #1
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	f000 fafc 	bl	8004510 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f103 001c 	add.w	r0, r3, #28
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003f24:	2301      	movs	r3, #1
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	f000 faf0 	bl	8004510 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	3301      	adds	r3, #1
 8003f34:	71fb      	strb	r3, [r7, #7]
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0c9      	beq.n	8003ed0 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20001854 	.word	0x20001854

08003f4c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	e01f      	b.n	8003f9c <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <cdcd_reset+0x60>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	2100      	movs	r1, #0
 8003f70:	68b8      	ldr	r0, [r7, #8]
 8003f72:	f003 f97f 	bl	8007274 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3310      	adds	r3, #16
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 f80d 	bl	8004f9a <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	331c      	adds	r3, #28
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 f808 	bl	8004f9a <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	331c      	adds	r3, #28
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f813 	bl	8004fbc <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0dc      	beq.n	8003f5c <cdcd_reset+0x10>
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20001854 	.word	0x20001854

08003fb0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b09a      	sub	sp, #104	; 0x68
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	795b      	ldrb	r3, [r3, #5]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d103      	bne.n	8003fd0 <cdcd_open+0x20>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	799b      	ldrb	r3, [r3, #6]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d001      	beq.n	8003fd4 <cdcd_open+0x24>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e0e1      	b.n	8004198 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8003fde:	e01a      	b.n	8004016 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8003fe0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	; (80041a0 <cdcd_open+0x1f0>)
 8003fe6:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8003ff8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003ffc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	4a66      	ldr	r2, [pc, #408]	; (80041a0 <cdcd_open+0x1f0>)
 8004006:	4413      	add	r3, r2
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800400a:	e008      	b.n	800401e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800400c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004010:	3301      	adds	r3, #1
 8004012:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8004016:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0e0      	beq.n	8003fe0 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 800401e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <cdcd_open+0x8a>
 8004024:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <cdcd_open+0x1f4>)
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d000      	beq.n	8004036 <cdcd_open+0x86>
 8004034:	be00      	bkpt	0x0000
 8004036:	2300      	movs	r3, #0
 8004038:	e0ae      	b.n	8004198 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	789a      	ldrb	r2, [r3, #2]
 800403e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004040:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8004042:	2309      	movs	r3, #9
 8004044:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 800404c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 800405a:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800405c:	e013      	b.n	8004086 <cdcd_open+0xd6>
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8004066:	b29a      	uxth	r2, r3
 8004068:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800406c:	4413      	add	r3, r2
 800406e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8004084:	657b      	str	r3, [r7, #84]	; 0x54
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	3301      	adds	r3, #1
 800408e:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8004090:	2b24      	cmp	r3, #36	; 0x24
 8004092:	d104      	bne.n	800409e <cdcd_open+0xee>
 8004094:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8004098:	88bb      	ldrh	r3, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d9df      	bls.n	800405e <cdcd_open+0xae>
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	3301      	adds	r3, #1
 80040a6:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d12f      	bne.n	800410c <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 fa4f 	bl	8005558 <usbd_edpt_open>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <cdcd_open+0x12c>
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <cdcd_open+0x1f4>)
 80040c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d000      	beq.n	80040d8 <cdcd_open+0x128>
 80040d6:	be00      	bkpt	0x0000
 80040d8:	2300      	movs	r3, #0
 80040da:	e05d      	b.n	8004198 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80040dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040de:	789a      	ldrb	r2, [r3, #2]
 80040e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e2:	705a      	strb	r2, [r3, #1]
 80040e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e6:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80040f2:	4413      	add	r3, r2
 80040f4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80040f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800410a:	657b      	str	r3, [r7, #84]	; 0x54
 800410c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	3301      	adds	r3, #1
 8004114:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004116:	2b04      	cmp	r3, #4
 8004118:	d139      	bne.n	800418e <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800411a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411c:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800411e:	2b0a      	cmp	r3, #10
 8004120:	d135      	bne.n	800418e <cdcd_open+0x1de>
 8004122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004124:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800412a:	b29a      	uxth	r2, r3
 800412c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004130:	4413      	add	r3, r2
 8004132:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004138:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8004148:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	3303      	adds	r3, #3
 800414e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004150:	3202      	adds	r2, #2
 8004152:	79f8      	ldrb	r0, [r7, #7]
 8004154:	9201      	str	r2, [sp, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2302      	movs	r3, #2
 800415a:	2202      	movs	r2, #2
 800415c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800415e:	f001 f993 	bl	8005488 <usbd_open_edpt_pair>
 8004162:	4603      	mov	r3, r0
 8004164:	f083 0301 	eor.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <cdcd_open+0x1d4>
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <cdcd_open+0x1f4>)
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
 8004172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d000      	beq.n	8004180 <cdcd_open+0x1d0>
 800417e:	be00      	bkpt	0x0000
 8004180:	2300      	movs	r3, #0
 8004182:	e009      	b.n	8004198 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8004184:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004188:	330e      	adds	r3, #14
 800418a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 800418e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004190:	f7ff fdd4 	bl	8003d3c <_prep_out_transaction>

  return drv_len;
 8004194:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8004198:	4618      	mov	r0, r3
 800419a:	3760      	adds	r7, #96	; 0x60
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20001854 	.word	0x20001854
 80041a4:	e000edf0 	.word	0xe000edf0

080041a8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	603a      	str	r2, [r7, #0]
 80041b2:	71fb      	strb	r3, [r7, #7]
 80041b4:	460b      	mov	r3, r1
 80041b6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d001      	beq.n	80041ca <cdcd_control_xfer_cb+0x22>
 80041c6:	2300      	movs	r3, #0
 80041c8:	e0cf      	b.n	800436a <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 80041d0:	4b68      	ldr	r3, [pc, #416]	; (8004374 <cdcd_control_xfer_cb+0x1cc>)
 80041d2:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80041d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <cdcd_control_xfer_cb+0x38>
 80041dc:	2300      	movs	r3, #0
 80041de:	e0c4      	b.n	800436a <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	889b      	ldrh	r3, [r3, #4]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d009      	beq.n	8004204 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 80041f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041f4:	3301      	adds	r3, #1
 80041f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004200:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004202:	e7e7      	b.n	80041d4 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8004204:	bf00      	nop
  }

  switch ( request->bRequest )
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	3b20      	subs	r3, #32
 800420c:	2b03      	cmp	r3, #3
 800420e:	f200 80a2 	bhi.w	8004356 <cdcd_control_xfer_cb+0x1ae>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <cdcd_control_xfer_cb+0x70>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004229 	.word	0x08004229
 800421c:	08004265 	.word	0x08004265
 8004220:	0800427d 	.word	0x0800427d
 8004224:	08004325 	.word	0x08004325
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004228:	79bb      	ldrb	r3, [r7, #6]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d108      	bne.n	8004240 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f103 0208 	add.w	r2, r3, #8
 8004234:	79f8      	ldrb	r0, [r7, #7]
 8004236:	2307      	movs	r3, #7
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	f001 fc47 	bl	8005acc <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 800423e:	e08c      	b.n	800435a <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8004240:	79bb      	ldrb	r3, [r7, #6]
 8004242:	2b03      	cmp	r3, #3
 8004244:	f040 8089 	bne.w	800435a <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <cdcd_control_xfer_cb+0x1d0>)
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8085 	beq.w	800435a <cdcd_control_xfer_cb+0x1b2>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f103 0208 	add.w	r2, r3, #8
 8004256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f3af 8000 	nop.w
    break;
 8004262:	e07a      	b.n	800435a <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004264:	79bb      	ldrb	r3, [r7, #6]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d179      	bne.n	800435e <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f103 0208 	add.w	r2, r3, #8
 8004270:	79f8      	ldrb	r0, [r7, #7]
 8004272:	2307      	movs	r3, #7
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	f001 fc29 	bl	8005acc <tud_control_xfer>
      }
    break;
 800427a:	e070      	b.n	800435e <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 800427c:	79bb      	ldrb	r3, [r7, #6]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f001 fbae 	bl	80059e8 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 800428c:	e069      	b.n	8004362 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 800428e:	79bb      	ldrb	r3, [r7, #6]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d166      	bne.n	8004362 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	885b      	ldrh	r3, [r3, #2]
 8004298:	b29b      	uxth	r3, r3
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	885b      	ldrh	r3, [r3, #2]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	885b      	ldrh	r3, [r3, #2]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f103 021c 	add.w	r2, r3, #28
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f083 0301 	eor.w	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 fe57 	bl	8004fbc <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <cdcd_control_xfer_cb+0x1d4>)
 8004310:	2b00      	cmp	r3, #0
 8004312:	d026      	beq.n	8004362 <cdcd_control_xfer_cb+0x1ba>
 8004314:	7fba      	ldrb	r2, [r7, #30]
 8004316:	7ff9      	ldrb	r1, [r7, #31]
 8004318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc fbc3 	bl	8000aa8 <tud_cdc_line_state_cb>
    break;
 8004322:	e01e      	b.n	8004362 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8004324:	79bb      	ldrb	r3, [r7, #6]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fb5a 	bl	80059e8 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8004334:	e017      	b.n	8004366 <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8004336:	79bb      	ldrb	r3, [r7, #6]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d114      	bne.n	8004366 <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <cdcd_control_xfer_cb+0x1d8>)
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <cdcd_control_xfer_cb+0x1be>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	885b      	ldrh	r3, [r3, #2]
 8004346:	b29a      	uxth	r2, r3
 8004348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f3af 8000 	nop.w
    break;
 8004354:	e007      	b.n	8004366 <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8004356:	2300      	movs	r3, #0
 8004358:	e007      	b.n	800436a <cdcd_control_xfer_cb+0x1c2>
    break;
 800435a:	bf00      	nop
 800435c:	e004      	b.n	8004368 <cdcd_control_xfer_cb+0x1c0>
    break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <cdcd_control_xfer_cb+0x1c0>
    break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <cdcd_control_xfer_cb+0x1c0>
    break;
 8004366:	bf00      	nop
  }

  return true;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20001854 	.word	0x20001854
 8004378:	00000000 	.word	0x00000000
 800437c:	08000aa9 	.word	0x08000aa9
 8004380:	00000000 	.word	0x00000000

08004384 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4603      	mov	r3, r0
 800438e:	71fb      	strb	r3, [r7, #7]
 8004390:	460b      	mov	r3, r1
 8004392:	71bb      	strb	r3, [r7, #6]
 8004394:	4613      	mov	r3, r2
 8004396:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8004398:	2300      	movs	r3, #0
 800439a:	75fb      	strb	r3, [r7, #23]
 800439c:	e014      	b.n	80043c8 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	4a54      	ldr	r2, [pc, #336]	; (80044fc <cdcd_xfer_cb+0x178>)
 80043aa:	4413      	add	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	78db      	ldrb	r3, [r3, #3]
 80043b2:	79ba      	ldrb	r2, [r7, #6]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d00a      	beq.n	80043ce <cdcd_xfer_cb+0x4a>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	789b      	ldrb	r3, [r3, #2]
 80043bc:	79ba      	ldrb	r2, [r7, #6]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d005      	beq.n	80043ce <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	3301      	adds	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0e7      	beq.n	800439e <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <cdcd_xfer_cb+0x66>
 80043d4:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <cdcd_xfer_cb+0x17c>)
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d000      	beq.n	80043e6 <cdcd_xfer_cb+0x62>
 80043e4:	be00      	bkpt	0x0000
 80043e6:	2300      	movs	r3, #0
 80043e8:	e084      	b.n	80044f4 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	78db      	ldrb	r3, [r3, #3]
 80043ee:	79ba      	ldrb	r2, [r7, #6]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d14a      	bne.n	800448a <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f103 0010 	add.w	r0, r3, #16
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	33a8      	adds	r3, #168	; 0xa8
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	b292      	uxth	r2, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f000 fda5 	bl	8004f52 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <cdcd_xfer_cb+0x180>)
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <cdcd_xfer_cb+0xdc>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	795b      	ldrb	r3, [r3, #5]
 8004412:	2bff      	cmp	r3, #255	; 0xff
 8004414:	d024      	beq.n	8004460 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e01d      	b.n	8004458 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	795a      	ldrb	r2, [r3, #5]
 8004420:	6939      	ldr	r1, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	440b      	add	r3, r1
 8004426:	33a8      	adds	r3, #168	; 0xa8
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d111      	bne.n	8004452 <cdcd_xfer_cb+0xce>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fcab 	bl	8004d8e <tu_fifo_empty>
 8004438:	4603      	mov	r3, r0
 800443a:	f083 0301 	eor.w	r3, r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	795a      	ldrb	r2, [r3, #5]
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d3dd      	bcc.n	800441c <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <cdcd_xfer_cb+0x184>)
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <cdcd_xfer_cb+0x100>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3310      	adds	r3, #16
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fc8f 	bl	8004d8e <tu_fifo_empty>
 8004470:	4603      	mov	r3, r0
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <cdcd_xfer_cb+0x100>
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc fb21 	bl	8000ac6 <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8004484:	6938      	ldr	r0, [r7, #16]
 8004486:	f7ff fc59 	bl	8003d3c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	79ba      	ldrb	r2, [r7, #6]
 8004490:	429a      	cmp	r2, r3
 8004492:	d12e      	bne.n	80044f2 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <cdcd_xfer_cb+0x188>)
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <cdcd_xfer_cb+0x11e>
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	4618      	mov	r0, r3
 800449e:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fc8b 	bl	8003dc0 <tud_cdc_n_write_flush>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d120      	bne.n	80044f2 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	331c      	adds	r3, #28
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fc38 	bl	8004d2a <tu_fifo_count>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d118      	bne.n	80044f2 <cdcd_xfer_cb+0x16e>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d015      	beq.n	80044f2 <cdcd_xfer_cb+0x16e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d110      	bne.n	80044f2 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	789a      	ldrb	r2, [r3, #2]
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f881 	bl	80055e0 <usbd_edpt_claim>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	7899      	ldrb	r1, [r3, #2]
 80044e8:	79f8      	ldrb	r0, [r7, #7]
 80044ea:	2300      	movs	r3, #0
 80044ec:	2200      	movs	r2, #0
 80044ee:	f001 f8cb 	bl	8005688 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20001854 	.word	0x20001854
 8004500:	e000edf0 	.word	0xe000edf0
 8004504:	00000000 	.word	0x00000000
 8004508:	08000ac7 	.word	0x08000ac7
 800450c:	00000000 	.word	0x00000000

08004510 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	460b      	mov	r3, r1
 8004520:	80fb      	strh	r3, [r7, #6]
 8004522:	4613      	mov	r3, r2
 8004524:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	d901      	bls.n	8004532 <tu_fifo_config+0x22>
 800452e:	2300      	movs	r3, #0
 8004530:	e01b      	b.n	800456a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800453e:	88bb      	ldrh	r3, [r7, #4]
 8004540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004544:	b299      	uxth	r1, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	88d3      	ldrh	r3, [r2, #6]
 800454a:	f361 030e 	bfi	r3, r1, #0, #15
 800454e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	79d3      	ldrb	r3, [r2, #7]
 8004554:	7e39      	ldrb	r1, [r7, #24]
 8004556:	f361 13c7 	bfi	r3, r1, #7, #1
 800455a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004568:	2301      	movs	r3, #1
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800458e:	e00b      	b.n	80045a8 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	61ba      	str	r2, [r7, #24]
 8004598:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	bf00      	nop
    ff_buf += 4;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3304      	adds	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80045a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	84fa      	strh	r2, [r7, #38]	; 0x26
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ee      	bne.n	8004590 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80045bc:	7ffb      	ldrb	r3, [r7, #31]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80045c8:	7ffa      	ldrb	r2, [r7, #31]
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4619      	mov	r1, r3
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f002 fe41 	bl	8007258 <memcpy>
  }
}
 80045d6:	bf00      	nop
 80045d8:	3728      	adds	r7, #40	; 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b08a      	sub	sp, #40	; 0x28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	4613      	mov	r3, r2
 80045ea:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80045f6:	e008      	b.n	800460a <_ff_pull_const_addr+0x2c>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3304      	adds	r3, #4
 8004608:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800460a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800460c:	1e5a      	subs	r2, r3, #1
 800460e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f1      	bne.n	80045f8 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800461e:	7ffb      	ldrb	r3, [r7, #31]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004628:	7ffa      	ldrb	r2, [r7, #31]
 800462a:	f107 0314 	add.w	r3, r7, #20
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	4618      	mov	r0, r3
 8004632:	f002 fe11 	bl	8007258 <memcpy>

    *reg_tx = tmp32;
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	601a      	str	r2, [r3, #0]
  }
}
 800463c:	bf00      	nop
 800463e:	3728      	adds	r7, #40	; 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	88c9      	ldrh	r1, [r1, #6]
 800465c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004660:	b289      	uxth	r1, r1
 8004662:	fb01 f202 	mul.w	r2, r1, r2
 8004666:	1898      	adds	r0, r3, r2
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88db      	ldrh	r3, [r3, #6]
 800466c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	f002 fdef 	bl	8007258 <memcpy>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08e      	sub	sp, #56	; 0x38
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4611      	mov	r1, r2
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	80fb      	strh	r3, [r7, #6]
 8004694:	4613      	mov	r3, r2
 8004696:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	889a      	ldrh	r2, [r3, #4]
 800469c:	88bb      	ldrh	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88db      	ldrh	r3, [r3, #6]
 80046ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046b8:	fb13 f302 	smulbb	r3, r3, r2
 80046bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	88db      	ldrh	r3, [r3, #6]
 80046c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046cc:	fb13 f302 	smulbb	r3, r3, r2
 80046d0:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	88ba      	ldrh	r2, [r7, #4]
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	88c9      	ldrh	r1, [r1, #6]
 80046dc:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80046e0:	b289      	uxth	r1, r1
 80046e2:	fb01 f202 	mul.w	r2, r1, r2
 80046e6:	4413      	add	r3, r2
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 80046ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <_ff_push_n+0x76>
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d022      	beq.n	800473c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 80046f6:	e09e      	b.n	8004836 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d80d      	bhi.n	800471c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	88d2      	ldrh	r2, [r2, #6]
 8004706:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800470a:	b292      	uxth	r2, r2
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	461a      	mov	r2, r3
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f002 fd9f 	bl	8007258 <memcpy>
      break;
 800471a:	e08c      	b.n	8004836 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800471c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800471e:	461a      	mov	r2, r3
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004724:	f002 fd98 	bl	8007258 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004734:	4619      	mov	r1, r3
 8004736:	f002 fd8f 	bl	8007258 <memcpy>
      break;
 800473a:	e07c      	b.n	8004836 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004740:	429a      	cmp	r2, r3
 8004742:	d80f      	bhi.n	8004764 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88db      	ldrh	r3, [r3, #6]
 8004748:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	fb13 f302 	smulbb	r3, r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475e:	f7ff ff0a 	bl	8004576 <_ff_push_const_addr>
      break;
 8004762:	e067      	b.n	8004834 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8004764:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800476c:	8c3b      	ldrh	r3, [r7, #32]
 800476e:	461a      	mov	r2, r3
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004774:	f7ff feff 	bl	8004576 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8004778:	8c3b      	ldrh	r3, [r7, #32]
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	4413      	add	r3, r2
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8004780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800478c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004790:	2b00      	cmp	r3, #0
 8004792:	d043      	beq.n	800481c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800479c:	b29b      	uxth	r3, r3
 800479e:	f1c3 0304 	rsb	r3, r3, #4
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047a6:	837b      	strh	r3, [r7, #26]
 80047a8:	4613      	mov	r3, r2
 80047aa:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80047ac:	8b7a      	ldrh	r2, [r7, #26]
 80047ae:	8b3b      	ldrh	r3, [r7, #24]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf28      	it	cs
 80047b4:	4613      	movcs	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80047bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80047d4:	e007      	b.n	80047e6 <_ff_push_n+0x164>
 80047d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d8:	1c53      	adds	r3, r2, #1
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	1c59      	adds	r1, r3, #1
 80047e0:	6339      	str	r1, [r7, #48]	; 0x30
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80047fa:	e007      	b.n	800480c <_ff_push_n+0x18a>
 80047fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fe:	1c53      	adds	r3, r2, #1
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	6339      	str	r1, [r7, #48]	; 0x30
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <_ff_push_n+0x17a>
 800481a:	e002      	b.n	8004822 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8004822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <_ff_push_n+0x1b2>
 8004828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800482a:	461a      	mov	r2, r3
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004830:	f7ff fea1 	bl	8004576 <_ff_push_const_addr>
      break;
 8004834:	bf00      	nop
}
 8004836:	bf00      	nop
 8004838:	3738      	adds	r7, #56	; 0x38
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b08e      	sub	sp, #56	; 0x38
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	4611      	mov	r1, r2
 800484a:	461a      	mov	r2, r3
 800484c:	460b      	mov	r3, r1
 800484e:	80fb      	strh	r3, [r7, #6]
 8004850:	4613      	mov	r3, r2
 8004852:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	889a      	ldrh	r2, [r3, #4]
 8004858:	88bb      	ldrh	r3, [r7, #4]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88db      	ldrh	r3, [r3, #6]
 800486a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004874:	fb13 f302 	smulbb	r3, r3, r2
 8004878:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88db      	ldrh	r3, [r3, #6]
 800487e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004888:	fb13 f302 	smulbb	r3, r3, r2
 800488c:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	88ba      	ldrh	r2, [r7, #4]
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	88c9      	ldrh	r1, [r1, #6]
 8004898:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800489c:	b289      	uxth	r1, r1
 800489e:	fb01 f202 	mul.w	r2, r1, r2
 80048a2:	4413      	add	r3, r2
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 80048a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <_ff_pull_n+0x76>
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d022      	beq.n	80048f8 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 80048b2:	e0a0      	b.n	80049f6 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d80d      	bhi.n	80048d8 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	88d2      	ldrh	r2, [r2, #6]
 80048c2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80048c6:	b292      	uxth	r2, r2
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	68b8      	ldr	r0, [r7, #8]
 80048d2:	f002 fcc1 	bl	8007258 <memcpy>
    break;
 80048d6:	e08e      	b.n	80049f6 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80048d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048da:	461a      	mov	r2, r3
 80048dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048de:	68b8      	ldr	r0, [r7, #8]
 80048e0:	f002 fcba 	bl	8007258 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80048e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	18d0      	adds	r0, r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048f0:	4619      	mov	r1, r3
 80048f2:	f002 fcb1 	bl	8007258 <memcpy>
    break;
 80048f6:	e07e      	b.n	80049f6 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d80f      	bhi.n	8004920 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88db      	ldrh	r3, [r3, #6]
 8004904:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	fb13 f302 	smulbb	r3, r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f7ff fe60 	bl	80045de <_ff_pull_const_addr>
    break;
 800491e:	e069      	b.n	80049f4 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8004920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8004928:	8c3b      	ldrh	r3, [r7, #32]
 800492a:	461a      	mov	r2, r3
 800492c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800492e:	68b8      	ldr	r0, [r7, #8]
 8004930:	f7ff fe55 	bl	80045de <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8004934:	8c3b      	ldrh	r3, [r7, #32]
 8004936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004938:	4413      	add	r3, r2
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800493c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800494c:	2b00      	cmp	r3, #0
 800494e:	d045      	beq.n	80049dc <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004958:	b29b      	uxth	r3, r3
 800495a:	f1c3 0304 	rsb	r3, r3, #4
 800495e:	b29a      	uxth	r2, r3
 8004960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004962:	837b      	strh	r3, [r7, #26]
 8004964:	4613      	mov	r3, r2
 8004966:	833b      	strh	r3, [r7, #24]
 8004968:	8b7a      	ldrh	r2, [r7, #26]
 800496a:	8b3b      	ldrh	r3, [r7, #24]
 800496c:	4293      	cmp	r3, r2
 800496e:	bf28      	it	cs
 8004970:	4613      	movcs	r3, r2
 8004972:	b29b      	uxth	r3, r3
 8004974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8004978:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800497c:	b29b      	uxth	r3, r3
 800497e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 800498e:	e007      	b.n	80049a0 <_ff_pull_n+0x162>
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	1c53      	adds	r3, r2, #1
 8004994:	633b      	str	r3, [r7, #48]	; 0x30
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	1c59      	adds	r1, r3, #1
 800499a:	62b9      	str	r1, [r7, #40]	; 0x28
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80049b4:	e007      	b.n	80049c6 <_ff_pull_n+0x188>
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	1c53      	adds	r3, r2, #1
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e002      	b.n	80049e2 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80049e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <_ff_pull_n+0x1b6>
 80049e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049ea:	461a      	mov	r2, r3
 80049ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ee:	68b8      	ldr	r0, [r7, #8]
 80049f0:	f7ff fdf5 	bl	80045de <_ff_pull_const_addr>
    break;
 80049f4:	bf00      	nop
  }
}
 80049f6:	bf00      	nop
 80049f8:	3738      	adds	r7, #56	; 0x38
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	80fb      	strh	r3, [r7, #6]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	80bb      	strh	r3, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8004a10:	88ba      	ldrh	r2, [r7, #4]
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	4413      	add	r3, r2
 8004a16:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8004a18:	88ba      	ldrh	r2, [r7, #4]
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d804      	bhi.n	8004a2a <advance_index+0x2c>
 8004a20:	89fa      	ldrh	r2, [r7, #14]
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	429a      	cmp	r2, r3
 8004a28:	db08      	blt.n	8004a3c <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	425b      	negs	r3, r3
 8004a32:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8004a34:	89fa      	ldrh	r2, [r7, #14]
 8004a36:	89bb      	ldrh	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8004a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b08c      	sub	sp, #48	; 0x30
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	4611      	mov	r1, r2
 8004a56:	461a      	mov	r2, r3
 8004a58:	460b      	mov	r3, r1
 8004a5a:	80fb      	strh	r3, [r7, #6]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	889b      	ldrh	r3, [r3, #4]
 8004a64:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a66:	88bb      	ldrh	r3, [r7, #4]
 8004a68:	843b      	strh	r3, [r7, #32]
 8004a6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a6c:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004a6e:	8c3a      	ldrh	r2, [r7, #32]
 8004a70:	8bfb      	ldrh	r3, [r7, #30]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d304      	bcc.n	8004a80 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8004a76:	8c3a      	ldrh	r2, [r7, #32]
 8004a78:	8bfb      	ldrh	r3, [r7, #30]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	e008      	b.n	8004a92 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	8c39      	ldrh	r1, [r7, #32]
 8004a88:	8bfb      	ldrh	r3, [r7, #30]
 8004a8a:	1acb      	subs	r3, r1, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004a92:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8004a94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <_tu_fifo_peek_n+0x54>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e041      	b.n	8004b22 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	889b      	ldrh	r3, [r3, #4]
 8004aa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d91b      	bls.n	8004ae0 <_tu_fifo_peek_n+0x96>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	88bb      	ldrh	r3, [r7, #4]
 8004aae:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	889b      	ldrh	r3, [r3, #4]
 8004ab4:	8afa      	ldrh	r2, [r7, #22]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d305      	bcc.n	8004ac6 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	889b      	ldrh	r3, [r3, #4]
 8004abe:	8afa      	ldrh	r2, [r7, #22]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	82bb      	strh	r3, [r7, #20]
 8004ac4:	e004      	b.n	8004ad0 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	889a      	ldrh	r2, [r3, #4]
 8004aca:	8afb      	ldrh	r3, [r7, #22]
 8004acc:	4413      	add	r3, r2
 8004ace:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	8aba      	ldrh	r2, [r7, #20]
 8004ad4:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004ad6:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004ad8:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	889b      	ldrh	r3, [r3, #4]
 8004ade:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004ae0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d201      	bcs.n	8004aec <_tu_fifo_peek_n+0xa2>
 8004ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004aea:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	889b      	ldrh	r3, [r3, #4]
 8004af0:	827b      	strh	r3, [r7, #18]
 8004af2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004af4:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004af6:	e003      	b.n	8004b00 <_tu_fifo_peek_n+0xb6>
 8004af8:	8a3a      	ldrh	r2, [r7, #16]
 8004afa:	8a7b      	ldrh	r3, [r7, #18]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	823b      	strh	r3, [r7, #16]
 8004b00:	8a7a      	ldrh	r2, [r7, #18]
 8004b02:	8a3b      	ldrh	r3, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d9f7      	bls.n	8004af8 <_tu_fifo_peek_n+0xae>
  return idx;
 8004b08:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004b0a:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8004b0c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	460b      	mov	r3, r1
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fe8f 	bl	800483e <_ff_pull_n>

  return n;
 8004b20:	88fb      	ldrh	r3, [r7, #6]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3728      	adds	r7, #40	; 0x28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b092      	sub	sp, #72	; 0x48
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	4611      	mov	r1, r2
 8004b36:	461a      	mov	r2, r3
 8004b38:	460b      	mov	r3, r1
 8004b3a:	80fb      	strh	r3, [r7, #6]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <_tu_fifo_write_n+0x20>
 8004b46:	2300      	movs	r3, #0
 8004b48:	e0bc      	b.n	8004cc4 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	891b      	ldrh	r3, [r3, #8]
 8004b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	895b      	ldrh	r3, [r3, #10]
 8004b54:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	79db      	ldrb	r3, [r3, #7]
 8004b5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f083 0301 	eor.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d036      	beq.n	8004bdc <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	889b      	ldrh	r3, [r3, #4]
 8004b72:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b76:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b82:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b86:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8004b88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b8a:	8c3b      	ldrh	r3, [r7, #32]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d304      	bcc.n	8004b9a <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004b90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b92:	8c3b      	ldrh	r3, [r7, #32]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	e008      	b.n	8004bac <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004ba2:	8c3b      	ldrh	r3, [r7, #32]
 8004ba4:	1acb      	subs	r3, r1, r3
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004bac:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004bae:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004bb0:	8bfb      	ldrh	r3, [r7, #30]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d904      	bls.n	8004bc0 <_tu_fifo_write_n+0x96>
 8004bb6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004bb8:	8bfb      	ldrh	r3, [r7, #30]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	e000      	b.n	8004bc2 <_tu_fifo_write_n+0x98>
 8004bc0:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004bc2:	867b      	strh	r3, [r7, #50]	; 0x32
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bc8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bf28      	it	cs
 8004bd4:	4613      	movcs	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8004bd8:	80fb      	strh	r3, [r7, #6]
 8004bda:	e04b      	b.n	8004c74 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	889b      	ldrh	r3, [r3, #4]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d317      	bcc.n	8004c16 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8004be6:	797b      	ldrb	r3, [r7, #5]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10e      	bne.n	8004c0a <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	8892      	ldrh	r2, [r2, #4]
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	88d2      	ldrh	r2, [r2, #6]
 8004bf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	4413      	add	r3, r2
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	889b      	ldrh	r3, [r3, #4]
 8004c0e:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8004c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c12:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c14:	e02e      	b.n	8004c74 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	889b      	ldrh	r3, [r3, #4]
 8004c1a:	83bb      	strh	r3, [r7, #28]
 8004c1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c1e:	837b      	strh	r3, [r7, #26]
 8004c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c22:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8004c24:	8b7a      	ldrh	r2, [r7, #26]
 8004c26:	8b3b      	ldrh	r3, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d304      	bcc.n	8004c36 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8004c2c:	8b7a      	ldrh	r2, [r7, #26]
 8004c2e:	8b3b      	ldrh	r3, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	e008      	b.n	8004c48 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004c36:	8bbb      	ldrh	r3, [r7, #28]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	8b79      	ldrh	r1, [r7, #26]
 8004c3e:	8b3b      	ldrh	r3, [r7, #24]
 8004c40:	1acb      	subs	r3, r1, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004c48:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8004c4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	441a      	add	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	889b      	ldrh	r3, [r3, #4]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	429a      	cmp	r2, r3
 8004c58:	db0c      	blt.n	8004c74 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8898      	ldrh	r0, [r3, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	889a      	ldrh	r2, [r3, #4]
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7ff fec7 	bl	80049fe <advance_index>
 8004c70:	4603      	mov	r3, r0
 8004c72:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d023      	beq.n	8004cc2 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	889b      	ldrh	r3, [r3, #4]
 8004c7e:	82fb      	strh	r3, [r7, #22]
 8004c80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c82:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004c84:	e003      	b.n	8004c8e <_tu_fifo_write_n+0x164>
 8004c86:	8aba      	ldrh	r2, [r7, #20]
 8004c88:	8afb      	ldrh	r3, [r7, #22]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	82bb      	strh	r3, [r7, #20]
 8004c8e:	8afa      	ldrh	r2, [r7, #22]
 8004c90:	8abb      	ldrh	r3, [r7, #20]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d9f7      	bls.n	8004c86 <_tu_fifo_write_n+0x15c>
  return idx;
 8004c96:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004c98:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004c9a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	797b      	ldrb	r3, [r7, #5]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fceb 	bl	8004682 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	889b      	ldrh	r3, [r3, #4]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fea2 	bl	80049fe <advance_index>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3740      	adds	r7, #64	; 0x40
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	460b      	mov	r3, r1
 8004cdc:	80fb      	strh	r3, [r7, #6]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	891b      	ldrh	r3, [r3, #8]
 8004ce6:	b298      	uxth	r0, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	895b      	ldrh	r3, [r3, #10]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	88f9      	ldrh	r1, [r7, #6]
 8004cf0:	797a      	ldrb	r2, [r7, #5]
 8004cf2:	9201      	str	r2, [sp, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	460a      	mov	r2, r1
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fea4 	bl	8004a4a <_tu_fifo_peek_n>
 8004d02:	4603      	mov	r3, r0
 8004d04:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8898      	ldrh	r0, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	895b      	ldrh	r3, [r3, #10]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7ff fe73 	bl	80049fe <advance_index>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8004d20:	88fb      	ldrh	r3, [r7, #6]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b087      	sub	sp, #28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8899      	ldrh	r1, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	891b      	ldrh	r3, [r3, #8]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	895b      	ldrh	r3, [r3, #10]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8279      	strh	r1, [r7, #18]
 8004d44:	823a      	strh	r2, [r7, #16]
 8004d46:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8004d48:	8a3a      	ldrh	r2, [r7, #16]
 8004d4a:	89fb      	ldrh	r3, [r7, #14]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d304      	bcc.n	8004d5a <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004d50:	8a3a      	ldrh	r2, [r7, #16]
 8004d52:	89fb      	ldrh	r3, [r7, #14]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	e008      	b.n	8004d6c <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004d5a:	8a7b      	ldrh	r3, [r7, #18]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	8a39      	ldrh	r1, [r7, #16]
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	1acb      	subs	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	8892      	ldrh	r2, [r2, #4]
 8004d70:	82fb      	strh	r3, [r7, #22]
 8004d72:	4613      	mov	r3, r2
 8004d74:	82bb      	strh	r3, [r7, #20]
 8004d76:	8afa      	ldrh	r2, [r7, #22]
 8004d78:	8abb      	ldrh	r3, [r7, #20]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	bf28      	it	cs
 8004d7e:	4613      	movcs	r3, r2
 8004d80:	b29b      	uxth	r3, r3
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	891b      	ldrh	r3, [r3, #8]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	895b      	ldrh	r3, [r3, #10]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8899      	ldrh	r1, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	891b      	ldrh	r3, [r3, #8]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	895b      	ldrh	r3, [r3, #10]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	81f9      	strh	r1, [r7, #14]
 8004dd2:	81ba      	strh	r2, [r7, #12]
 8004dd4:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004dd6:	89ba      	ldrh	r2, [r7, #12]
 8004dd8:	897b      	ldrh	r3, [r7, #10]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d304      	bcc.n	8004de8 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004dde:	89ba      	ldrh	r2, [r7, #12]
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	e008      	b.n	8004dfa <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	89b9      	ldrh	r1, [r7, #12]
 8004df0:	897b      	ldrh	r3, [r7, #10]
 8004df2:	1acb      	subs	r3, r1, r3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	8892      	ldrh	r2, [r2, #4]
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf2c      	ite	cs
 8004e02:	2301      	movcs	r3, #1
 8004e04:	2300      	movcc	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8899      	ldrh	r1, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	891b      	ldrh	r3, [r3, #8]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	895b      	ldrh	r3, [r3, #10]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	82f9      	strh	r1, [r7, #22]
 8004e2e:	82ba      	strh	r2, [r7, #20]
 8004e30:	827b      	strh	r3, [r7, #18]
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	823b      	strh	r3, [r7, #16]
 8004e36:	8abb      	ldrh	r3, [r7, #20]
 8004e38:	81fb      	strh	r3, [r7, #14]
 8004e3a:	8a7b      	ldrh	r3, [r7, #18]
 8004e3c:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8004e3e:	89fa      	ldrh	r2, [r7, #14]
 8004e40:	89bb      	ldrh	r3, [r7, #12]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d304      	bcc.n	8004e50 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8004e46:	89fa      	ldrh	r2, [r7, #14]
 8004e48:	89bb      	ldrh	r3, [r7, #12]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	e008      	b.n	8004e62 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004e50:	8a3b      	ldrh	r3, [r7, #16]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	89f9      	ldrh	r1, [r7, #14]
 8004e58:	89bb      	ldrh	r3, [r7, #12]
 8004e5a:	1acb      	subs	r3, r1, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004e62:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8004e64:	8afa      	ldrh	r2, [r7, #22]
 8004e66:	897b      	ldrh	r3, [r7, #10]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d904      	bls.n	8004e76 <tu_fifo_remaining+0x62>
 8004e6c:	8afa      	ldrh	r2, [r7, #22]
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	e000      	b.n	8004e78 <tu_fifo_remaining+0x64>
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	2300      	movs	r3, #0
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff ff17 	bl	8004ccc <_tu_fifo_read_n>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ff05 	bl	8004ccc <_tu_fifo_read_n>
 8004ec2:	4603      	mov	r3, r0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	891b      	ldrh	r3, [r3, #8]
 8004eda:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff6b 	bl	8004db8 <tu_fifo_full>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <tu_fifo_write+0x36>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	79db      	ldrb	r3, [r3, #7]
 8004eec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f083 0301 	eor.w	r3, r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <tu_fifo_write+0x36>
  {
    ret = false;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
 8004f00:	e022      	b.n	8004f48 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	889b      	ldrh	r3, [r3, #4]
 8004f06:	823b      	strh	r3, [r7, #16]
 8004f08:	8abb      	ldrh	r3, [r7, #20]
 8004f0a:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8004f0c:	e003      	b.n	8004f16 <tu_fifo_write+0x4a>
 8004f0e:	89fa      	ldrh	r2, [r7, #14]
 8004f10:	8a3b      	ldrh	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	81fb      	strh	r3, [r7, #14]
 8004f16:	8a3a      	ldrh	r2, [r7, #16]
 8004f18:	89fb      	ldrh	r3, [r7, #14]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d9f7      	bls.n	8004f0e <tu_fifo_write+0x42>
  return idx;
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004f20:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004f22:	8a7b      	ldrh	r3, [r7, #18]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff fb8b 	bl	8004644 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	889b      	ldrh	r3, [r3, #4]
 8004f32:	8ab9      	ldrh	r1, [r7, #20]
 8004f34:	2201      	movs	r2, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fd61 	bl	80049fe <advance_index>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	2300      	movs	r3, #0
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fddf 	bl	8004b2a <_tu_fifo_write_n>
 8004f6c:	4603      	mov	r3, r0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	2301      	movs	r3, #1
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff fdcd 	bl	8004b2a <_tu_fifo_write_n>
 8004f90:	4603      	mov	r3, r0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	79d3      	ldrb	r3, [r2, #7]
 8004fcc:	78f9      	ldrb	r1, [r7, #3]
 8004fce:	f361 13c7 	bfi	r3, r1, #7, #1
 8004fd2:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004fd4:	2301      	movs	r3, #1
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <get_driver+0x5c>)
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <get_driver+0x60>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	79fa      	ldrb	r2, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d208      	bcs.n	8005010 <get_driver+0x2c>
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <get_driver+0x64>)
 8005000:	6819      	ldr	r1, [r3, #0]
 8005002:	79fa      	ldrb	r2, [r7, #7]
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	440b      	add	r3, r1
 800500e:	e010      	b.n	8005032 <get_driver+0x4e>
    drvid -= _app_driver_count;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <get_driver+0x60>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	79fa      	ldrb	r2, [r7, #7]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d807      	bhi.n	8005030 <get_driver+0x4c>
 8005020:	79fa      	ldrb	r2, [r7, #7]
 8005022:	4613      	mov	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <get_driver+0x68>)
 800502c:	4413      	add	r3, r2
 800502e:	e000      	b.n	8005032 <get_driver+0x4e>

  return NULL;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	00000000 	.word	0x00000000
 8005044:	200019ac 	.word	0x200019ac
 8005048:	200019a8 	.word	0x200019a8
 800504c:	08007d8c 	.word	0x08007d8c

08005050 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <tud_mounted+0x20>)
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	2000197c 	.word	0x2000197c

08005074 <tud_suspended>:

bool tud_suspended(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <tud_suspended+0x24>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000197c 	.word	0x2000197c

0800509c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b0aa      	sub	sp, #168	; 0xa8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	3b02      	subs	r3, #2
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	f200 8198 	bhi.w	80053e4 <dcd_event_handler+0x348>
 80050b4:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <dcd_event_handler+0x20>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080052d1 	.word	0x080052d1
 80050c4:	0800518d 	.word	0x0800518d
 80050c8:	08005233 	.word	0x08005233
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 80050cc:	4a82      	ldr	r2, [pc, #520]	; (80052d8 <dcd_event_handler+0x23c>)
 80050ce:	7813      	ldrb	r3, [r2, #0]
 80050d0:	f36f 0300 	bfc	r3, #0, #1
 80050d4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 80050d6:	4a80      	ldr	r2, [pc, #512]	; (80052d8 <dcd_event_handler+0x23c>)
 80050d8:	7813      	ldrb	r3, [r2, #0]
 80050da:	f36f 0341 	bfc	r3, #1, #1
 80050de:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 80050e0:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <dcd_event_handler+0x23c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 80050e6:	4a7c      	ldr	r2, [pc, #496]	; (80052d8 <dcd_event_handler+0x23c>)
 80050e8:	7813      	ldrb	r3, [r2, #0]
 80050ea:	f36f 0382 	bfc	r3, #2, #1
 80050ee:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80050f0:	4b7a      	ldr	r3, [pc, #488]	; (80052dc <dcd_event_handler+0x240>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8005104:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005108:	f083 0301 	eor.w	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <dcd_event_handler+0x8a>
 8005112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 800511a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2000      	movs	r0, #0
 8005122:	4798      	blx	r3
}
 8005124:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512a:	3304      	adds	r3, #4
 800512c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fecb 	bl	8004ecc <tu_fifo_write>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 800513c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005140:	f083 0301 	eor.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <dcd_event_handler+0xc2>
 800514a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800514e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8005152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2001      	movs	r0, #1
 800515a:	4798      	blx	r3
}
 800515c:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 800515e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005162:	f083 0301 	eor.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <dcd_event_handler+0xe8>
 800516c:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <dcd_event_handler+0x244>)
 800516e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <dcd_event_handler+0xec>
 8005180:	be00      	bkpt	0x0000
 8005182:	e001      	b.n	8005188 <dcd_event_handler+0xec>

  return success;
 8005184:	bf00      	nop
 8005186:	e172      	b.n	800546e <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8005188:	bf00      	nop
    break;
 800518a:	e170      	b.n	800546e <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 800518c:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <dcd_event_handler+0x23c>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8164 	beq.w	8005464 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 800519c:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <dcd_event_handler+0x23c>)
 800519e:	7813      	ldrb	r3, [r2, #0]
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80051a6:	4b4d      	ldr	r3, [pc, #308]	; (80052dc <dcd_event_handler+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 80051b8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80051bc:	f083 0301 	eor.w	r3, r3, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <dcd_event_handler+0x13a>
 80051c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051ca:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 80051cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2000      	movs	r0, #0
 80051d2:	4798      	blx	r3
}
 80051d4:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80051d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051da:	3304      	adds	r3, #4
 80051dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe74 	bl	8004ecc <tu_fifo_write>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 80051ea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80051ee:	f083 0301 	eor.w	r3, r3, #1
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <dcd_event_handler+0x16c>
 80051f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2001      	movs	r0, #1
 8005204:	4798      	blx	r3
}
 8005206:	bf00      	nop
  TU_ASSERT(success);
 8005208:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800520c:	f083 0301 	eor.w	r3, r3, #1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <dcd_event_handler+0x18e>
 8005216:	4b32      	ldr	r3, [pc, #200]	; (80052e0 <dcd_event_handler+0x244>)
 8005218:	66bb      	str	r3, [r7, #104]	; 0x68
 800521a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <dcd_event_handler+0x192>
 8005226:	be00      	bkpt	0x0000
 8005228:	e001      	b.n	800522e <dcd_event_handler+0x192>
  return success;
 800522a:	bf00      	nop
 800522c:	e11a      	b.n	8005464 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 800522e:	bf00      	nop
      }
    break;
 8005230:	e118      	b.n	8005464 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <dcd_event_handler+0x23c>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8113 	beq.w	8005468 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 8005242:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <dcd_event_handler+0x23c>)
 8005244:	7813      	ldrb	r3, [r2, #0]
 8005246:	f36f 0382 	bfc	r3, #2, #1
 800524a:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 800524c:	4b23      	ldr	r3, [pc, #140]	; (80052dc <dcd_event_handler+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	667b      	str	r3, [r7, #100]	; 0x64
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 800525c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005260:	f083 0301 	eor.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d006      	beq.n	8005278 <dcd_event_handler+0x1dc>
 800526a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800526c:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 800526e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2000      	movs	r0, #0
 8005274:	4798      	blx	r3
}
 8005276:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8005278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527a:	3304      	adds	r3, #4
 800527c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fe24 	bl	8004ecc <tu_fifo_write>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 800528a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800528e:	f083 0301 	eor.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <dcd_event_handler+0x20a>
 8005298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 800529c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2001      	movs	r0, #1
 80052a2:	4798      	blx	r3
}
 80052a4:	bf00      	nop
  TU_ASSERT(success);
 80052a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052aa:	f083 0301 	eor.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <dcd_event_handler+0x22c>
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <dcd_event_handler+0x244>)
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <dcd_event_handler+0x230>
 80052c4:	be00      	bkpt	0x0000
 80052c6:	e001      	b.n	80052cc <dcd_event_handler+0x230>
  return success;
 80052c8:	bf00      	nop
 80052ca:	e0cd      	b.n	8005468 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80052cc:	bf00      	nop
      }
    break;
 80052ce:	e0cb      	b.n	8005468 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80052d6:	e023      	b.n	8005320 <dcd_event_handler+0x284>
 80052d8:	2000197c 	.word	0x2000197c
 80052dc:	200019b0 	.word	0x200019b0
 80052e0:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 80052e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fe7b 	bl	8004fe4 <get_driver>
 80052ee:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 80052f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00d      	beq.n	8005316 <dcd_event_handler+0x27a>
 80052fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8005304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	7810      	ldrb	r0, [r2, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6852      	ldr	r2, [r2, #4]
 8005312:	4611      	mov	r1, r2
 8005314:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005316:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800531a:	3301      	adds	r3, #1
 800531c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8005320:	4b55      	ldr	r3, [pc, #340]	; (8005478 <dcd_event_handler+0x3dc>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800532a:	429a      	cmp	r2, r3
 800532c:	dada      	bge.n	80052e4 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 800532e:	4b53      	ldr	r3, [pc, #332]	; (800547c <dcd_event_handler+0x3e0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8097 	beq.w	800546c <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 800533e:	4a4f      	ldr	r2, [pc, #316]	; (800547c <dcd_event_handler+0x3e0>)
 8005340:	7813      	ldrb	r3, [r2, #0]
 8005342:	f36f 0382 	bfc	r3, #2, #1
 8005346:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	723b      	strb	r3, [r7, #8]
 800535a:	2305      	movs	r3, #5
 800535c:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <dcd_event_handler+0x3e4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
 8005364:	f107 0308 	add.w	r3, r7, #8
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8005370:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005374:	f083 0301 	eor.w	r3, r3, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <dcd_event_handler+0x2f0>
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 8005382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2000      	movs	r0, #0
 8005388:	4798      	blx	r3
}
 800538a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800538c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538e:	3304      	adds	r3, #4
 8005390:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fd9a 	bl	8004ecc <tu_fifo_write>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 800539e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053a2:	f083 0301 	eor.w	r3, r3, #1
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <dcd_event_handler+0x31e>
 80053ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2001      	movs	r0, #1
 80053b6:	4798      	blx	r3
}
 80053b8:	bf00      	nop
  TU_ASSERT(success);
 80053ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053be:	f083 0301 	eor.w	r3, r3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <dcd_event_handler+0x340>
 80053c8:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <dcd_event_handler+0x3e8>)
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <dcd_event_handler+0x344>
 80053d8:	be00      	bkpt	0x0000
 80053da:	e001      	b.n	80053e0 <dcd_event_handler+0x344>
  return success;
 80053dc:	bf00      	nop
 80053de:	e045      	b.n	800546c <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 80053e0:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 80053e2:	e043      	b.n	800546c <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 80053e4:	4b26      	ldr	r3, [pc, #152]	; (8005480 <dcd_event_handler+0x3e4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 80053f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053f8:	f083 0301 	eor.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d006      	beq.n	8005410 <dcd_event_handler+0x374>
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2000      	movs	r0, #0
 800540c:	4798      	blx	r3
}
 800540e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	3304      	adds	r3, #4
 8005414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fd58 	bl	8004ecc <tu_fifo_write>
 800541c:	4603      	mov	r3, r0
 800541e:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005424:	f083 0301 	eor.w	r3, r3, #1
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <dcd_event_handler+0x3a0>
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2001      	movs	r0, #1
 8005438:	4798      	blx	r3
}
 800543a:	bf00      	nop
  TU_ASSERT(success);
 800543c:	7ffb      	ldrb	r3, [r7, #31]
 800543e:	f083 0301 	eor.w	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <dcd_event_handler+0x3c0>
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <dcd_event_handler+0x3e8>)
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <dcd_event_handler+0x3c4>
 8005458:	be00      	bkpt	0x0000
 800545a:	e001      	b.n	8005460 <dcd_event_handler+0x3c4>
  return success;
 800545c:	bf00      	nop
 800545e:	e006      	b.n	800546e <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8005460:	bf00      	nop
    break;
 8005462:	e004      	b.n	800546e <dcd_event_handler+0x3d2>
    break;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <dcd_event_handler+0x3d2>
    break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <dcd_event_handler+0x3d2>
    break;
 800546c:	bf00      	nop
  }
}
 800546e:	bf00      	nop
 8005470:	37a8      	adds	r7, #168	; 0xa8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200019ac 	.word	0x200019ac
 800547c:	2000197c 	.word	0x2000197c
 8005480:	200019b0 	.word	0x200019b0
 8005484:	e000edf0 	.word	0xe000edf0

08005488 <usbd_open_edpt_pair>:
  }
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6039      	str	r1, [r7, #0]
 8005490:	4611      	mov	r1, r2
 8005492:	461a      	mov	r2, r3
 8005494:	4603      	mov	r3, r0
 8005496:	71fb      	strb	r3, [r7, #7]
 8005498:	460b      	mov	r3, r1
 800549a:	71bb      	strb	r3, [r7, #6]
 800549c:	4613      	mov	r3, r2
 800549e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	e04d      	b.n	8005542 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d108      	bne.n	80054c4 <usbd_open_edpt_pair+0x3c>
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	797b      	ldrb	r3, [r7, #5]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00a      	beq.n	80054da <usbd_open_edpt_pair+0x52>
 80054c4:	4b23      	ldr	r3, [pc, #140]	; (8005554 <usbd_open_edpt_pair+0xcc>)
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d000      	beq.n	80054d6 <usbd_open_edpt_pair+0x4e>
 80054d4:	be00      	bkpt	0x0000
 80054d6:	2300      	movs	r3, #0
 80054d8:	e038      	b.n	800554c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f83a 	bl	8005558 <usbd_edpt_open>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <usbd_open_edpt_pair+0x7e>
 80054f0:	4b18      	ldr	r3, [pc, #96]	; (8005554 <usbd_open_edpt_pair+0xcc>)
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d000      	beq.n	8005502 <usbd_open_edpt_pair+0x7a>
 8005500:	be00      	bkpt	0x0000
 8005502:	2300      	movs	r3, #0
 8005504:	e022      	b.n	800554c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	789b      	ldrb	r3, [r3, #2]
 800550a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	09db      	lsrs	r3, r3, #7
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d104      	bne.n	8005520 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	789a      	ldrb	r2, [r3, #2]
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e003      	b.n	8005528 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	789a      	ldrb	r2, [r3, #2]
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800553a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	3301      	adds	r3, #1
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
 8005542:	79bb      	ldrb	r3, [r7, #6]
 8005544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005546:	429a      	cmp	r2, r3
 8005548:	dbad      	blt.n	80054a6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800554a:	2301      	movs	r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	3728      	adds	r7, #40	; 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	e000edf0 	.word	0xe000edf0

08005558 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <usbd_edpt_open+0x7c>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	789b      	ldrb	r3, [r3, #2]
 800556e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b05      	cmp	r3, #5
 800557a:	d90a      	bls.n	8005592 <usbd_edpt_open+0x3a>
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <usbd_edpt_open+0x80>)
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d000      	beq.n	800558e <usbd_edpt_open+0x36>
 800558c:	be00      	bkpt	0x0000
 800558e:	2300      	movs	r3, #0
 8005590:	e01c      	b.n	80055cc <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8005592:	4b12      	ldr	r3, [pc, #72]	; (80055dc <usbd_edpt_open+0x84>)
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	4619      	mov	r1, r3
 8005598:	6838      	ldr	r0, [r7, #0]
 800559a:	f001 fdbd 	bl	8007118 <tu_edpt_validate>
 800559e:	4603      	mov	r3, r0
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <usbd_edpt_open+0x68>
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <usbd_edpt_open+0x80>)
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d000      	beq.n	80055bc <usbd_edpt_open+0x64>
 80055ba:	be00      	bkpt	0x0000
 80055bc:	2300      	movs	r3, #0
 80055be:	e005      	b.n	80055cc <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd3b 	bl	8006040 <dcd_edpt_open>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000011 	.word	0x20000011
 80055d8:	e000edf0 	.word	0xe000edf0
 80055dc:	2000197c 	.word	0x2000197c

080055e0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	460a      	mov	r2, r1
 80055ea:	71fb      	strb	r3, [r7, #7]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71bb      	strb	r3, [r7, #6]
 80055f0:	79bb      	ldrb	r3, [r7, #6]
 80055f2:	73bb      	strb	r3, [r7, #14]
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fa:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80055fc:	75fb      	strb	r3, [r7, #23]
 80055fe:	79bb      	ldrb	r3, [r7, #6]
 8005600:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	09db      	lsrs	r3, r3, #7
 8005606:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005608:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800560a:	7dfa      	ldrb	r2, [r7, #23]
 800560c:	7dbb      	ldrb	r3, [r7, #22]
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	4413      	add	r3, r2
 8005612:	3318      	adds	r3, #24
 8005614:	4a06      	ldr	r2, [pc, #24]	; (8005630 <usbd_edpt_claim+0x50>)
 8005616:	4413      	add	r3, r2
 8005618:	3307      	adds	r3, #7
 800561a:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800561c:	2100      	movs	r1, #0
 800561e:	6938      	ldr	r0, [r7, #16]
 8005620:	f001 fd16 	bl	8007050 <tu_edpt_claim>
 8005624:	4603      	mov	r3, r0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000197c 	.word	0x2000197c

08005634 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	460a      	mov	r2, r1
 800563e:	71fb      	strb	r3, [r7, #7]
 8005640:	4613      	mov	r3, r2
 8005642:	71bb      	strb	r3, [r7, #6]
 8005644:	79bb      	ldrb	r3, [r7, #6]
 8005646:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005648:	7bbb      	ldrb	r3, [r7, #14]
 800564a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8005650:	75fb      	strb	r3, [r7, #23]
 8005652:	79bb      	ldrb	r3, [r7, #6]
 8005654:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	09db      	lsrs	r3, r3, #7
 800565a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800565c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800565e:	7dfa      	ldrb	r2, [r7, #23]
 8005660:	7dbb      	ldrb	r3, [r7, #22]
 8005662:	0052      	lsls	r2, r2, #1
 8005664:	4413      	add	r3, r2
 8005666:	3318      	adds	r3, #24
 8005668:	4a06      	ldr	r2, [pc, #24]	; (8005684 <usbd_edpt_release+0x50>)
 800566a:	4413      	add	r3, r2
 800566c:	3307      	adds	r3, #7
 800566e:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8005670:	2100      	movs	r1, #0
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f001 fd26 	bl	80070c4 <tu_edpt_release>
 8005678:	4603      	mov	r3, r0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000197c 	.word	0x2000197c

08005688 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	603a      	str	r2, [r7, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
 8005696:	460b      	mov	r3, r1
 8005698:	71bb      	strb	r3, [r7, #6]
 800569a:	4613      	mov	r3, r2
 800569c:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800569e:	4b32      	ldr	r3, [pc, #200]	; (8005768 <usbd_edpt_xfer+0xe0>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
 80056a4:	79bb      	ldrb	r3, [r7, #6]
 80056a6:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80056a8:	7abb      	ldrb	r3, [r7, #10]
 80056aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ae:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80056b0:	75fb      	strb	r3, [r7, #23]
 80056b2:	79bb      	ldrb	r3, [r7, #6]
 80056b4:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	09db      	lsrs	r3, r3, #7
 80056ba:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80056bc:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80056be:	7dfa      	ldrb	r2, [r7, #23]
 80056c0:	7dbb      	ldrb	r3, [r7, #22]
 80056c2:	492a      	ldr	r1, [pc, #168]	; (800576c <usbd_edpt_xfer+0xe4>)
 80056c4:	0052      	lsls	r2, r2, #1
 80056c6:	440a      	add	r2, r1
 80056c8:	4413      	add	r3, r2
 80056ca:	3318      	adds	r3, #24
 80056cc:	79db      	ldrb	r3, [r3, #7]
 80056ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <usbd_edpt_xfer+0x66>
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <usbd_edpt_xfer+0xe8>)
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d000      	beq.n	80056ea <usbd_edpt_xfer+0x62>
 80056e8:	be00      	bkpt	0x0000
 80056ea:	2300      	movs	r3, #0
 80056ec:	e038      	b.n	8005760 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80056ee:	7dfa      	ldrb	r2, [r7, #23]
 80056f0:	7dbb      	ldrb	r3, [r7, #22]
 80056f2:	491e      	ldr	r1, [pc, #120]	; (800576c <usbd_edpt_xfer+0xe4>)
 80056f4:	0052      	lsls	r2, r2, #1
 80056f6:	440a      	add	r2, r1
 80056f8:	4413      	add	r3, r2
 80056fa:	f103 0218 	add.w	r2, r3, #24
 80056fe:	79d3      	ldrb	r3, [r2, #7]
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8005706:	88bb      	ldrh	r3, [r7, #4]
 8005708:	79b9      	ldrb	r1, [r7, #6]
 800570a:	79f8      	ldrb	r0, [r7, #7]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	f000 fdaf 	bl	8006270 <dcd_edpt_xfer>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <usbd_edpt_xfer+0x94>
  {
    return true;
 8005718:	2301      	movs	r3, #1
 800571a:	e021      	b.n	8005760 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800571c:	7dfa      	ldrb	r2, [r7, #23]
 800571e:	7dbb      	ldrb	r3, [r7, #22]
 8005720:	4912      	ldr	r1, [pc, #72]	; (800576c <usbd_edpt_xfer+0xe4>)
 8005722:	0052      	lsls	r2, r2, #1
 8005724:	440a      	add	r2, r1
 8005726:	4413      	add	r3, r2
 8005728:	f103 0218 	add.w	r2, r3, #24
 800572c:	79d3      	ldrb	r3, [r2, #7]
 800572e:	f36f 0300 	bfc	r3, #0, #1
 8005732:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8005734:	7dfa      	ldrb	r2, [r7, #23]
 8005736:	7dbb      	ldrb	r3, [r7, #22]
 8005738:	490c      	ldr	r1, [pc, #48]	; (800576c <usbd_edpt_xfer+0xe4>)
 800573a:	0052      	lsls	r2, r2, #1
 800573c:	440a      	add	r2, r1
 800573e:	4413      	add	r3, r2
 8005740:	f103 0218 	add.w	r2, r3, #24
 8005744:	79d3      	ldrb	r3, [r2, #7]
 8005746:	f36f 0382 	bfc	r3, #2, #1
 800574a:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <usbd_edpt_xfer+0xe8>)
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d000      	beq.n	800575e <usbd_edpt_xfer+0xd6>
 800575c:	be00      	bkpt	0x0000
    return false;
 800575e:	2300      	movs	r3, #0
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000011 	.word	0x20000011
 800576c:	2000197c 	.word	0x2000197c
 8005770:	e000edf0 	.word	0xe000edf0

08005774 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	603a      	str	r2, [r7, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
 8005782:	460b      	mov	r3, r1
 8005784:	71bb      	strb	r3, [r7, #6]
 8005786:	4613      	mov	r3, r2
 8005788:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800578a:	4b32      	ldr	r3, [pc, #200]	; (8005854 <usbd_edpt_xfer_fifo+0xe0>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	71fb      	strb	r3, [r7, #7]
 8005790:	79bb      	ldrb	r3, [r7, #6]
 8005792:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005794:	7abb      	ldrb	r3, [r7, #10]
 8005796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800579c:	75fb      	strb	r3, [r7, #23]
 800579e:	79bb      	ldrb	r3, [r7, #6]
 80057a0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	09db      	lsrs	r3, r3, #7
 80057a6:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80057a8:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	7dbb      	ldrb	r3, [r7, #22]
 80057ae:	492a      	ldr	r1, [pc, #168]	; (8005858 <usbd_edpt_xfer_fifo+0xe4>)
 80057b0:	0052      	lsls	r2, r2, #1
 80057b2:	440a      	add	r2, r1
 80057b4:	4413      	add	r3, r2
 80057b6:	3318      	adds	r3, #24
 80057b8:	79db      	ldrb	r3, [r3, #7]
 80057ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <usbd_edpt_xfer_fifo+0x66>
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <usbd_edpt_xfer_fifo+0xe8>)
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d000      	beq.n	80057d6 <usbd_edpt_xfer_fifo+0x62>
 80057d4:	be00      	bkpt	0x0000
 80057d6:	2300      	movs	r3, #0
 80057d8:	e038      	b.n	800584c <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80057da:	7dfa      	ldrb	r2, [r7, #23]
 80057dc:	7dbb      	ldrb	r3, [r7, #22]
 80057de:	491e      	ldr	r1, [pc, #120]	; (8005858 <usbd_edpt_xfer_fifo+0xe4>)
 80057e0:	0052      	lsls	r2, r2, #1
 80057e2:	440a      	add	r2, r1
 80057e4:	4413      	add	r3, r2
 80057e6:	f103 0218 	add.w	r2, r3, #24
 80057ea:	79d3      	ldrb	r3, [r2, #7]
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	71d3      	strb	r3, [r2, #7]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 80057f2:	88bb      	ldrh	r3, [r7, #4]
 80057f4:	79b9      	ldrb	r1, [r7, #6]
 80057f6:	79f8      	ldrb	r0, [r7, #7]
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	f000 fda1 	bl	8006340 <dcd_edpt_xfer_fifo>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8005804:	2301      	movs	r3, #1
 8005806:	e021      	b.n	800584c <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8005808:	7dfa      	ldrb	r2, [r7, #23]
 800580a:	7dbb      	ldrb	r3, [r7, #22]
 800580c:	4912      	ldr	r1, [pc, #72]	; (8005858 <usbd_edpt_xfer_fifo+0xe4>)
 800580e:	0052      	lsls	r2, r2, #1
 8005810:	440a      	add	r2, r1
 8005812:	4413      	add	r3, r2
 8005814:	f103 0218 	add.w	r2, r3, #24
 8005818:	79d3      	ldrb	r3, [r2, #7]
 800581a:	f36f 0300 	bfc	r3, #0, #1
 800581e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8005820:	7dfa      	ldrb	r2, [r7, #23]
 8005822:	7dbb      	ldrb	r3, [r7, #22]
 8005824:	490c      	ldr	r1, [pc, #48]	; (8005858 <usbd_edpt_xfer_fifo+0xe4>)
 8005826:	0052      	lsls	r2, r2, #1
 8005828:	440a      	add	r2, r1
 800582a:	4413      	add	r3, r2
 800582c:	f103 0218 	add.w	r2, r3, #24
 8005830:	79d3      	ldrb	r3, [r2, #7]
 8005832:	f36f 0382 	bfc	r3, #2, #1
 8005836:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <usbd_edpt_xfer_fifo+0xe8>)
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d000      	beq.n	800584a <usbd_edpt_xfer_fifo+0xd6>
 8005848:	be00      	bkpt	0x0000
    return false;
 800584a:	2300      	movs	r3, #0
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000011 	.word	0x20000011
 8005858:	2000197c 	.word	0x2000197c
 800585c:	e000edf0 	.word	0xe000edf0

08005860 <usbd_edpt_clear_stall>:
    _usbd_dev.ep_status[epnum][dir].busy = 1;
  }
}

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	460a      	mov	r2, r1
 800586a:	71fb      	strb	r3, [r7, #7]
 800586c:	4613      	mov	r3, r2
 800586e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8005870:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <usbd_edpt_clear_stall+0x90>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	71fb      	strb	r3, [r7, #7]
 8005876:	79bb      	ldrb	r3, [r7, #6]
 8005878:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800587a:	7b3b      	ldrb	r3, [r7, #12]
 800587c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005880:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	79bb      	ldrb	r3, [r7, #6]
 8005886:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005888:	7b7b      	ldrb	r3, [r7, #13]
 800588a:	09db      	lsrs	r3, r3, #7
 800588c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800588e:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	4917      	ldr	r1, [pc, #92]	; (80058f4 <usbd_edpt_clear_stall+0x94>)
 8005896:	0052      	lsls	r2, r2, #1
 8005898:	440a      	add	r2, r1
 800589a:	4413      	add	r3, r2
 800589c:	3318      	adds	r3, #24
 800589e:	79db      	ldrb	r3, [r3, #7]
 80058a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01d      	beq.n	80058e6 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80058aa:	79ba      	ldrb	r2, [r7, #6]
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 feff 	bl	80066b4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80058b6:	7bfa      	ldrb	r2, [r7, #15]
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	490e      	ldr	r1, [pc, #56]	; (80058f4 <usbd_edpt_clear_stall+0x94>)
 80058bc:	0052      	lsls	r2, r2, #1
 80058be:	440a      	add	r2, r1
 80058c0:	4413      	add	r3, r2
 80058c2:	f103 0218 	add.w	r2, r3, #24
 80058c6:	79d3      	ldrb	r3, [r2, #7]
 80058c8:	f36f 0341 	bfc	r3, #1, #1
 80058cc:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	4908      	ldr	r1, [pc, #32]	; (80058f4 <usbd_edpt_clear_stall+0x94>)
 80058d4:	0052      	lsls	r2, r2, #1
 80058d6:	440a      	add	r2, r1
 80058d8:	4413      	add	r3, r2
 80058da:	f103 0218 	add.w	r2, r3, #24
 80058de:	79d3      	ldrb	r3, [r2, #7]
 80058e0:	f36f 0300 	bfc	r3, #0, #1
 80058e4:	71d3      	strb	r3, [r2, #7]
  }
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000011 	.word	0x20000011
 80058f4:	2000197c 	.word	0x2000197c

080058f8 <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	460a      	mov	r2, r1
 8005902:	71fb      	strb	r3, [r7, #7]
 8005904:	4613      	mov	r3, r2
 8005906:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8005908:	4b25      	ldr	r3, [pc, #148]	; (80059a0 <usbd_edpt_close+0xa8>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <usbd_edpt_close+0xac>)
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <usbd_edpt_close+0x30>
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <usbd_edpt_close+0xb0>)
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d039      	beq.n	8005998 <usbd_edpt_close+0xa0>
 8005924:	be00      	bkpt	0x0000
 8005926:	e037      	b.n	8005998 <usbd_edpt_close+0xa0>
 8005928:	79bb      	ldrb	r3, [r7, #6]
 800592a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005932:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005934:	75fb      	strb	r3, [r7, #23]
 8005936:	79bb      	ldrb	r3, [r7, #6]
 8005938:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	09db      	lsrs	r3, r3, #7
 800593e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005940:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 8005942:	79ba      	ldrb	r2, [r7, #6]
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fe4d 	bl	80065e8 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800594e:	7dfa      	ldrb	r2, [r7, #23]
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	4916      	ldr	r1, [pc, #88]	; (80059ac <usbd_edpt_close+0xb4>)
 8005954:	0052      	lsls	r2, r2, #1
 8005956:	440a      	add	r2, r1
 8005958:	4413      	add	r3, r2
 800595a:	f103 0218 	add.w	r2, r3, #24
 800595e:	79d3      	ldrb	r3, [r2, #7]
 8005960:	f36f 0341 	bfc	r3, #1, #1
 8005964:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8005966:	7dfa      	ldrb	r2, [r7, #23]
 8005968:	7dbb      	ldrb	r3, [r7, #22]
 800596a:	4910      	ldr	r1, [pc, #64]	; (80059ac <usbd_edpt_close+0xb4>)
 800596c:	0052      	lsls	r2, r2, #1
 800596e:	440a      	add	r2, r1
 8005970:	4413      	add	r3, r2
 8005972:	f103 0218 	add.w	r2, r3, #24
 8005976:	79d3      	ldrb	r3, [r2, #7]
 8005978:	f36f 0300 	bfc	r3, #0, #1
 800597c:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800597e:	7dfa      	ldrb	r2, [r7, #23]
 8005980:	7dbb      	ldrb	r3, [r7, #22]
 8005982:	490a      	ldr	r1, [pc, #40]	; (80059ac <usbd_edpt_close+0xb4>)
 8005984:	0052      	lsls	r2, r2, #1
 8005986:	440a      	add	r2, r1
 8005988:	4413      	add	r3, r2
 800598a:	f103 0218 	add.w	r2, r3, #24
 800598e:	79d3      	ldrb	r3, [r2, #7]
 8005990:	f36f 0382 	bfc	r3, #2, #1
 8005994:	71d3      	strb	r3, [r2, #7]

  return;
 8005996:	e000      	b.n	800599a <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 8005998:	bf00      	nop
}
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000011 	.word	0x20000011
 80059a4:	080065e9 	.word	0x080065e9
 80059a8:	e000edf0 	.word	0xe000edf0
 80059ac:	2000197c 	.word	0x2000197c

080059b0 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <_status_stage_xact+0x1e>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e000      	b.n	80059d0 <_status_stage_xact+0x20>
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80059d2:	7bf9      	ldrb	r1, [r7, #15]
 80059d4:	79f8      	ldrb	r0, [r7, #7]
 80059d6:	2300      	movs	r3, #0
 80059d8:	2200      	movs	r2, #0
 80059da:	f7ff fe55 	bl	8005688 <usbd_edpt_xfer>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 80059f4:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <tud_control_status+0x3c>)
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	6810      	ldr	r0, [r2, #0]
 80059fa:	6851      	ldr	r1, [r2, #4]
 80059fc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <tud_control_status+0x3c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <tud_control_status+0x3c>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <tud_control_status+0x3c>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ffcb 	bl	80059b0 <_status_stage_xact>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200019b4 	.word	0x200019b4

08005a28 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <_data_stage_xact+0x9c>)
 8005a34:	899a      	ldrh	r2, [r3, #12]
 8005a36:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <_data_stage_xact+0x9c>)
 8005a38:	89db      	ldrh	r3, [r3, #14]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	837b      	strh	r3, [r7, #26]
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	833b      	strh	r3, [r7, #24]
 8005a44:	8b7a      	ldrh	r2, [r7, #26]
 8005a46:	8b3b      	ldrh	r3, [r7, #24]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bf28      	it	cs
 8005a4c:	4613      	movcs	r3, r2
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8005a52:	2300      	movs	r3, #0
 8005a54:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8005a56:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <_data_stage_xact+0x9c>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01e      	beq.n	8005aa2 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8005a68:	8bbb      	ldrh	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d019      	beq.n	8005aa2 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8005a6e:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <_data_stage_xact+0x9c>)
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	8bbb      	ldrh	r3, [r7, #28]
 8005a74:	4914      	ldr	r1, [pc, #80]	; (8005ac8 <_data_stage_xact+0xa0>)
 8005a76:	6179      	str	r1, [r7, #20]
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	6139      	str	r1, [r7, #16]
 8005a7c:	60fa      	str	r2, [r7, #12]
 8005a7e:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d202      	bcs.n	8005a8e <_data_stage_xact+0x66>
    return -1;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e005      	b.n	8005a9a <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	68f9      	ldr	r1, [r7, #12]
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f001 fbe0 	bl	8007258 <memcpy>
  return 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <_data_stage_xact+0x7a>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e00b      	b.n	8005aba <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8005aa2:	8bbb      	ldrh	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <_data_stage_xact+0x84>
 8005aa8:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <_data_stage_xact+0xa0>)
 8005aaa:	e000      	b.n	8005aae <_data_stage_xact+0x86>
 8005aac:	2200      	movs	r2, #0
 8005aae:	8bbb      	ldrh	r3, [r7, #28]
 8005ab0:	7ff9      	ldrb	r1, [r7, #31]
 8005ab2:	79f8      	ldrb	r0, [r7, #7]
 8005ab4:	f7ff fde8 	bl	8005688 <usbd_edpt_xfer>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200019b4 	.word	0x200019b4
 8005ac8:	200019c8 	.word	0x200019c8

08005acc <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	4613      	mov	r3, r2
 8005ade:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8005ae0:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <tud_control_xfer+0xd8>)
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	6810      	ldr	r0, [r2, #0]
 8005ae6:	6851      	ldr	r1, [r2, #4]
 8005ae8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8005aea:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <tud_control_xfer+0xd8>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8005af0:	4b2c      	ldr	r3, [pc, #176]	; (8005ba4 <tud_control_xfer+0xd8>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	88db      	ldrh	r3, [r3, #6]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	89bb      	ldrh	r3, [r7, #12]
 8005afe:	827b      	strh	r3, [r7, #18]
 8005b00:	4613      	mov	r3, r2
 8005b02:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005b04:	8a7a      	ldrh	r2, [r7, #18]
 8005b06:	8a3b      	ldrh	r3, [r7, #16]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	bf28      	it	cs
 8005b0c:	4613      	movcs	r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <tud_control_xfer+0xd8>)
 8005b12:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	88db      	ldrh	r3, [r3, #6]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d026      	beq.n	8005b6c <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <tud_control_xfer+0xd8>)
 8005b20:	899b      	ldrh	r3, [r3, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <tud_control_xfer+0x76>
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <tud_control_xfer+0xdc>)
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d000      	beq.n	8005b3e <tud_control_xfer+0x72>
 8005b3c:	be00      	bkpt	0x0000
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e02b      	b.n	8005b9a <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff6f 	bl	8005a28 <_data_stage_xact>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <tud_control_xfer+0xcc>
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <tud_control_xfer+0xdc>)
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d000      	beq.n	8005b68 <tud_control_xfer+0x9c>
 8005b66:	be00      	bkpt	0x0000
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e016      	b.n	8005b9a <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff ff1d 	bl	80059b0 <_status_stage_xact>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f083 0301 	eor.w	r3, r3, #1
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <tud_control_xfer+0xcc>
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <tud_control_xfer+0xdc>)
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d000      	beq.n	8005b94 <tud_control_xfer+0xc8>
 8005b92:	be00      	bkpt	0x0000
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <tud_control_xfer+0xce>
  }

  return true;
 8005b98:	2301      	movs	r3, #1
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200019b4 	.word	0x200019b4
 8005ba8:	e000edf0 	.word	0xe000edf0

08005bac <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3317      	adds	r3, #23
 8005bc2:	b29b      	uxth	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005bda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bde:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	757b      	strb	r3, [r7, #21]
 8005be8:	e013      	b.n	8005c12 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8005bea:	7d7b      	ldrb	r3, [r7, #21]
 8005bec:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <update_grxfsiz+0x60>)
 8005bee:	015b      	lsls	r3, r3, #5
 8005bf0:	4413      	add	r3, r2
 8005bf2:	330a      	adds	r3, #10
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	81fb      	strh	r3, [r7, #14]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8005bfe:	89fa      	ldrh	r2, [r7, #14]
 8005c00:	89bb      	ldrh	r3, [r7, #12]
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bf38      	it	cc
 8005c06:	4613      	movcc	r3, r2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005c0c:	7d7b      	ldrb	r3, [r7, #21]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	757b      	strb	r3, [r7, #21]
 8005c12:	7d7b      	ldrb	r3, [r7, #21]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d9e8      	bls.n	8005bea <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8005c18:	8afb      	ldrh	r3, [r7, #22]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff ffc6 	bl	8005bac <calc_rx_ff_size>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20001a10 	.word	0x20001a10

08005c34 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c42:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005c44:	4b30      	ldr	r3, [pc, #192]	; (8005d08 <bus_reset+0xd4>)
 8005c46:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005c48:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <bus_reset+0xd8>)
 8005c4a:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005c4c:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <bus_reset+0xdc>)
 8005c4e:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8005c50:	2280      	movs	r2, #128	; 0x80
 8005c52:	2100      	movs	r1, #0
 8005c54:	482f      	ldr	r0, [pc, #188]	; (8005d14 <bus_reset+0xe0>)
 8005c56:	f001 fb0d 	bl	8007274 <memset>
  _out_ep_closed = false;
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <bus_reset+0xe4>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e00e      	b.n	8005c90 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	015b      	lsls	r3, r3, #5
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4413      	add	r3, r2
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	7ffb      	ldrb	r3, [r7, #31]
 8005c7e:	015b      	lsls	r3, r3, #5
 8005c80:	6939      	ldr	r1, [r7, #16]
 8005c82:	440b      	add	r3, r1
 8005c84:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005c88:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005c8a:	7ffb      	ldrb	r3, [r7, #31]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	7ffb      	ldrb	r3, [r7, #31]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d9ed      	bls.n	8005c72 <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005c9c:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2209      	movs	r2, #9
 8005ca2:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2209      	movs	r2, #9
 8005ca8:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8005caa:	2040      	movs	r0, #64	; 0x40
 8005cac:	f7ff ff7e 	bl	8005bac <calc_rx_ff_size>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8005cb8:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <bus_reset+0xe8>)
 8005cba:	2210      	movs	r2, #16
 8005cbc:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <bus_reset+0xe8>)
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <bus_reset+0xe0>)
 8005cdc:	2240      	movs	r2, #64	; 0x40
 8005cde:	835a      	strh	r2, [r3, #26]
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <bus_reset+0xe0>)
 8005ce2:	8b5a      	ldrh	r2, [r3, #26]
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <bus_reset+0xe0>)
 8005ce6:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	619a      	str	r2, [r3, #24]
}
 8005d00:	bf00      	nop
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	50000800 	.word	0x50000800
 8005d0c:	50000b00 	.word	0x50000b00
 8005d10:	50000900 	.word	0x50000900
 8005d14:	20001a10 	.word	0x20001a10
 8005d18:	20001a96 	.word	0x20001a96
 8005d1c:	20001a94 	.word	0x20001a94

08005d20 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d106      	bne.n	8005d4c <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 8005d4a:	e050      	b.n	8005dee <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <set_turnaround+0xdc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2b      	ldr	r2, [pc, #172]	; (8005e00 <set_turnaround+0xe0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d302      	bcc.n	8005d5c <set_turnaround+0x3c>
      turnaround = 0x6U;
 8005d56:	2306      	movs	r3, #6
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e041      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 8005d5c:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <set_turnaround+0xdc>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a28      	ldr	r2, [pc, #160]	; (8005e04 <set_turnaround+0xe4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d902      	bls.n	8005d6c <set_turnaround+0x4c>
      turnaround = 0x7U;
 8005d66:	2307      	movs	r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e039      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <set_turnaround+0xdc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <set_turnaround+0xe8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d302      	bcc.n	8005d7c <set_turnaround+0x5c>
      turnaround = 0x8U;
 8005d76:	2308      	movs	r3, #8
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e031      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <set_turnaround+0xdc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <set_turnaround+0xec>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d902      	bls.n	8005d8c <set_turnaround+0x6c>
      turnaround = 0x9U;
 8005d86:	2309      	movs	r3, #9
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e029      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <set_turnaround+0xdc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <set_turnaround+0xf0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d902      	bls.n	8005d9c <set_turnaround+0x7c>
      turnaround = 0xAU;
 8005d96:	230a      	movs	r3, #10
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e021      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 8005d9c:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <set_turnaround+0xdc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <set_turnaround+0xf4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d902      	bls.n	8005dac <set_turnaround+0x8c>
      turnaround = 0xBU;
 8005da6:	230b      	movs	r3, #11
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e019      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 8005dac:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <set_turnaround+0xdc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <set_turnaround+0xf8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d302      	bcc.n	8005dbc <set_turnaround+0x9c>
      turnaround = 0xCU;
 8005db6:	230c      	movs	r3, #12
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e011      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <set_turnaround+0xdc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <set_turnaround+0xfc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d302      	bcc.n	8005dcc <set_turnaround+0xac>
      turnaround = 0xDU;
 8005dc6:	230d      	movs	r3, #13
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e009      	b.n	8005de0 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <set_turnaround+0xdc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <set_turnaround+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d302      	bcc.n	8005ddc <set_turnaround+0xbc>
      turnaround = 0xEU;
 8005dd6:	230e      	movs	r3, #14
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e001      	b.n	8005de0 <set_turnaround+0xc0>
      turnaround = 0xFU;
 8005ddc:	230f      	movs	r3, #15
 8005dde:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000008 	.word	0x20000008
 8005e00:	01e84800 	.word	0x01e84800
 8005e04:	01a39ddf 	.word	0x01a39ddf
 8005e08:	016e3600 	.word	0x016e3600
 8005e0c:	014ca43f 	.word	0x014ca43f
 8005e10:	01312cff 	.word	0x01312cff
 8005e14:	011a499f 	.word	0x011a499f
 8005e18:	01067380 	.word	0x01067380
 8005e1c:	00f42400 	.word	0x00f42400
 8005e20:	00e4e1c0 	.word	0x00e4e1c0

08005e24 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <get_speed+0x34>)
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <get_speed+0x24>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e000      	b.n	8005e4a <get_speed+0x26>
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	50000800 	.word	0x50000800

08005e5c <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8005e5c:	b490      	push	{r4, r7}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4604      	mov	r4, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	71fb      	strb	r3, [r7, #7]
 8005e6e:	4603      	mov	r3, r0
 8005e70:	71bb      	strb	r3, [r7, #6]
 8005e72:	460b      	mov	r3, r1
 8005e74:	717b      	strb	r3, [r7, #5]
 8005e76:	4613      	mov	r3, r2
 8005e78:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005e7a:	4b6c      	ldr	r3, [pc, #432]	; (800602c <edpt_schedule_packets+0x1d0>)
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005e7e:	4b6c      	ldr	r3, [pc, #432]	; (8006030 <edpt_schedule_packets+0x1d4>)
 8005e80:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005e82:	4b6c      	ldr	r3, [pc, #432]	; (8006034 <edpt_schedule_packets+0x1d8>)
 8005e84:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8005e86:	79bb      	ldrb	r3, [r7, #6]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d121      	bne.n	8005ed0 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8005e8c:	79ba      	ldrb	r2, [r7, #6]
 8005e8e:	797b      	ldrb	r3, [r7, #5]
 8005e90:	0052      	lsls	r2, r2, #1
 8005e92:	4413      	add	r3, r2
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	4a68      	ldr	r2, [pc, #416]	; (8006038 <edpt_schedule_packets+0x1dc>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8005e9c:	797b      	ldrb	r3, [r7, #5]
 8005e9e:	4a67      	ldr	r2, [pc, #412]	; (800603c <edpt_schedule_packets+0x1e0>)
 8005ea0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	895b      	ldrh	r3, [r3, #10]
 8005ea8:	81fa      	strh	r2, [r7, #14]
 8005eaa:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005eac:	89fa      	ldrh	r2, [r7, #14]
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bf28      	it	cs
 8005eb4:	4613      	movcs	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8005eba:	797b      	ldrb	r3, [r7, #5]
 8005ebc:	4a5f      	ldr	r2, [pc, #380]	; (800603c <edpt_schedule_packets+0x1e0>)
 8005ebe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005ec2:	797b      	ldrb	r3, [r7, #5]
 8005ec4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005ec6:	1a8a      	subs	r2, r1, r2
 8005ec8:	b291      	uxth	r1, r2
 8005eca:	4a5c      	ldr	r2, [pc, #368]	; (800603c <edpt_schedule_packets+0x1e0>)
 8005ecc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 8005ed0:	797b      	ldrb	r3, [r7, #5]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d14f      	bne.n	8005f76 <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	04db      	lsls	r3, r3, #19
 8005eda:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8005edc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8005ede:	79bb      	ldrb	r3, [r7, #6]
 8005ee0:	015b      	lsls	r3, r3, #5
 8005ee2:	69f9      	ldr	r1, [r7, #28]
 8005ee4:	440b      	add	r3, r1
 8005ee6:	4302      	orrs	r2, r0
 8005ee8:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8005eea:	79bb      	ldrb	r3, [r7, #6]
 8005eec:	015b      	lsls	r3, r3, #5
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	79bb      	ldrb	r3, [r7, #6]
 8005ef6:	015b      	lsls	r3, r3, #5
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	440b      	add	r3, r1
 8005efc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005f00:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8005f02:	79bb      	ldrb	r3, [r7, #6]
 8005f04:	015b      	lsls	r3, r3, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f14:	d122      	bne.n	8005f5c <edpt_schedule_packets+0x100>
 8005f16:	79ba      	ldrb	r2, [r7, #6]
 8005f18:	797b      	ldrb	r3, [r7, #5]
 8005f1a:	4947      	ldr	r1, [pc, #284]	; (8006038 <edpt_schedule_packets+0x1dc>)
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	440b      	add	r3, r1
 8005f24:	330c      	adds	r3, #12
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d117      	bne.n	8005f5c <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8005f36:	79bb      	ldrb	r3, [r7, #6]
 8005f38:	015b      	lsls	r3, r3, #5
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <edpt_schedule_packets+0xf0>
 8005f46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8005f4a:	e001      	b.n	8005f50 <edpt_schedule_packets+0xf4>
 8005f4c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005f50:	79bb      	ldrb	r3, [r7, #6]
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	69f8      	ldr	r0, [r7, #28]
 8005f56:	4403      	add	r3, r0
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8005f5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d05e      	beq.n	8006020 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	79ba      	ldrb	r2, [r7, #6]
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8005f74:	e054      	b.n	8006020 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f76:	79bb      	ldrb	r3, [r7, #6]
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	79bb      	ldrb	r3, [r7, #6]
 8005f82:	015b      	lsls	r3, r3, #5
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	440b      	add	r3, r1
 8005f88:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8005f8c:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8005f8e:	79bb      	ldrb	r3, [r7, #6]
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	4413      	add	r3, r2
 8005f96:	6919      	ldr	r1, [r3, #16]
 8005f98:	887b      	ldrh	r3, [r7, #2]
 8005f9a:	04db      	lsls	r3, r3, #19
 8005f9c:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8005f9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	79bb      	ldrb	r3, [r7, #6]
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	6a38      	ldr	r0, [r7, #32]
 8005fa8:	4403      	add	r3, r0
 8005faa:	430a      	orrs	r2, r1
 8005fac:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8005fae:	79bb      	ldrb	r3, [r7, #6]
 8005fb0:	015b      	lsls	r3, r3, #5
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	79bb      	ldrb	r3, [r7, #6]
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	6a39      	ldr	r1, [r7, #32]
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005fc4:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8005fc6:	79bb      	ldrb	r3, [r7, #6]
 8005fc8:	015b      	lsls	r3, r3, #5
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	4413      	add	r3, r2
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd8:	d122      	bne.n	8006020 <edpt_schedule_packets+0x1c4>
 8005fda:	79ba      	ldrb	r2, [r7, #6]
 8005fdc:	797b      	ldrb	r3, [r7, #5]
 8005fde:	4916      	ldr	r1, [pc, #88]	; (8006038 <edpt_schedule_packets+0x1dc>)
 8005fe0:	0052      	lsls	r2, r2, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	440b      	add	r3, r1
 8005fe8:	330c      	adds	r3, #12
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d117      	bne.n	8006020 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff8:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8005ffa:	79bb      	ldrb	r3, [r7, #6]
 8005ffc:	015b      	lsls	r3, r3, #5
 8005ffe:	6a3a      	ldr	r2, [r7, #32]
 8006000:	4413      	add	r3, r2
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <edpt_schedule_packets+0x1b4>
 800600a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800600e:	e001      	b.n	8006014 <edpt_schedule_packets+0x1b8>
 8006010:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006014:	79bb      	ldrb	r3, [r7, #6]
 8006016:	015b      	lsls	r3, r3, #5
 8006018:	6a38      	ldr	r0, [r7, #32]
 800601a:	4403      	add	r3, r0
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3728      	adds	r7, #40	; 0x28
 8006024:	46bd      	mov	sp, r7
 8006026:	bc90      	pop	{r4, r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	50000800 	.word	0x50000800
 8006030:	50000b00 	.word	0x50000b00
 8006034:	50000900 	.word	0x50000900
 8006038:	20001a10 	.word	0x20001a10
 800603c:	20001a90 	.word	0x20001a90

08006040 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b090      	sub	sp, #64	; 0x40
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	6039      	str	r1, [r7, #0]
 800604a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800604c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006052:	4b81      	ldr	r3, [pc, #516]	; (8006258 <dcd_edpt_open+0x218>)
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006056:	4b81      	ldr	r3, [pc, #516]	; (800625c <dcd_edpt_open+0x21c>)
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800605a:	4b81      	ldr	r3, [pc, #516]	; (8006260 <dcd_edpt_open+0x220>)
 800605c:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	789b      	ldrb	r3, [r3, #2]
 8006062:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006064:	7cbb      	ldrb	r3, [r7, #18]
 8006066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	789b      	ldrb	r3, [r3, #2]
 8006074:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006076:	7cfb      	ldrb	r3, [r7, #19]
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8006080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006084:	2b03      	cmp	r3, #3
 8006086:	d90a      	bls.n	800609e <dcd_edpt_open+0x5e>
 8006088:	4b76      	ldr	r3, [pc, #472]	; (8006264 <dcd_edpt_open+0x224>)
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d000      	beq.n	800609a <dcd_edpt_open+0x5a>
 8006098:	be00      	bkpt	0x0000
 800609a:	2300      	movs	r3, #0
 800609c:	e0d8      	b.n	8006250 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800609e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80060a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060a6:	0052      	lsls	r2, r2, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4a6e      	ldr	r2, [pc, #440]	; (8006268 <dcd_edpt_open+0x228>)
 80060ae:	4413      	add	r3, r2
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	889b      	ldrh	r3, [r3, #4]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c0:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	799a      	ldrb	r2, [r3, #6]
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	895b      	ldrh	r3, [r3, #10]
 80060d2:	3303      	adds	r3, #3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da00      	bge.n	80060da <dcd_edpt_open+0x9a>
 80060d8:	3303      	adds	r3, #3
 80060da:	109b      	asrs	r3, r3, #2
 80060dc:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 80060de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d152      	bne.n	800618c <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 80060e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff fd5d 	bl	8005bac <calc_rx_ff_size>
 80060f2:	4603      	mov	r3, r0
 80060f4:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fa:	8bfb      	ldrh	r3, [r7, #30]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d214      	bcs.n	800612a <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8006100:	8bfb      	ldrh	r3, [r7, #30]
 8006102:	4a5a      	ldr	r2, [pc, #360]	; (800626c <dcd_edpt_open+0x22c>)
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	4413      	add	r3, r2
 8006108:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800610c:	d90a      	bls.n	8006124 <dcd_edpt_open+0xe4>
 800610e:	4b55      	ldr	r3, [pc, #340]	; (8006264 <dcd_edpt_open+0x224>)
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d000      	beq.n	8006120 <dcd_edpt_open+0xe0>
 800611e:	be00      	bkpt	0x0000
 8006120:	2300      	movs	r3, #0
 8006122:	e095      	b.n	8006250 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 8006124:	8bfa      	ldrh	r2, [r7, #30]
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 800612a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800612e:	015b      	lsls	r3, r3, #5
 8006130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006132:	4413      	add	r3, r2
 8006134:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800613e:	b2db      	uxtb	r3, r3
 8006140:	049b      	lsls	r3, r3, #18
 8006142:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	78db      	ldrb	r3, [r3, #3]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d002      	beq.n	8006158 <dcd_edpt_open+0x118>
 8006152:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006156:	e000      	b.n	800615a <dcd_edpt_open+0x11a>
 8006158:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 800615a:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 800615c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800615e:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8006160:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8006162:	431a      	orrs	r2, r3
 8006164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006168:	015b      	lsls	r3, r3, #5
 800616a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800616c:	440b      	add	r3, r1
 800616e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006172:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800617c:	3210      	adds	r2, #16
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f202 	lsl.w	r2, r1, r2
 8006184:	431a      	orrs	r2, r3
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	61da      	str	r2, [r3, #28]
 800618a:	e060      	b.n	800624e <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 800618c:	4b37      	ldr	r3, [pc, #220]	; (800626c <dcd_edpt_open+0x22c>)
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006194:	4413      	add	r3, r2
 8006196:	461a      	mov	r2, r3
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4413      	add	r3, r2
 800619e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80061a2:	d90a      	bls.n	80061ba <dcd_edpt_open+0x17a>
 80061a4:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <dcd_edpt_open+0x224>)
 80061a6:	623b      	str	r3, [r7, #32]
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d000      	beq.n	80061b6 <dcd_edpt_open+0x176>
 80061b4:	be00      	bkpt	0x0000
 80061b6:	2300      	movs	r3, #0
 80061b8:	e04a      	b.n	8006250 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <dcd_edpt_open+0x22c>)
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061c0:	4413      	add	r3, r2
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	4b29      	ldr	r3, [pc, #164]	; (800626c <dcd_edpt_open+0x22c>)
 80061c6:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	4619      	mov	r1, r3
 80061ce:	4b27      	ldr	r3, [pc, #156]	; (800626c <dcd_edpt_open+0x22c>)
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 80061d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061da:	3b01      	subs	r3, #1
 80061dc:	430a      	orrs	r2, r1
 80061de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061e0:	3340      	adds	r3, #64	; 0x40
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80061e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ec:	015b      	lsls	r3, r3, #5
 80061ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f0:	4413      	add	r3, r2
 80061f2:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 80061f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061f8:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80061fa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800620a:	4313      	orrs	r3, r2
 800620c:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	78db      	ldrb	r3, [r3, #3]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d002      	beq.n	8006222 <dcd_edpt_open+0x1e2>
 800621c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006220:	e000      	b.n	8006224 <dcd_edpt_open+0x1e4>
 8006222:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8006224:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8006226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006228:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800622a:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800622c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006230:	015b      	lsls	r3, r3, #5
 8006232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006234:	4403      	add	r3, r0
 8006236:	430a      	orrs	r2, r1
 8006238:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006242:	2101      	movs	r1, #1
 8006244:	fa01 f202 	lsl.w	r2, r1, r2
 8006248:	431a      	orrs	r2, r3
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	61da      	str	r2, [r3, #28]
  }

  return true;
 800624e:	2301      	movs	r3, #1
}
 8006250:	4618      	mov	r0, r3
 8006252:	3740      	adds	r7, #64	; 0x40
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	50000800 	.word	0x50000800
 800625c:	50000b00 	.word	0x50000b00
 8006260:	50000900 	.word	0x50000900
 8006264:	e000edf0 	.word	0xe000edf0
 8006268:	20001a10 	.word	0x20001a10
 800626c:	20001a94 	.word	0x20001a94

08006270 <dcd_edpt_xfer>:
  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
}

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b089      	sub	sp, #36	; 0x24
 8006274:	af02      	add	r7, sp, #8
 8006276:	603a      	str	r2, [r7, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
 800627e:	460b      	mov	r3, r1
 8006280:	71bb      	strb	r3, [r7, #6]
 8006282:	4613      	mov	r3, r2
 8006284:	80bb      	strh	r3, [r7, #4]
 8006286:	79bb      	ldrb	r3, [r7, #6]
 8006288:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800628a:	7b3b      	ldrb	r3, [r7, #12]
 800628c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006290:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006292:	757b      	strb	r3, [r7, #21]
 8006294:	79bb      	ldrb	r3, [r7, #6]
 8006296:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006298:	7b7b      	ldrb	r3, [r7, #13]
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800629e:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80062a0:	7d7a      	ldrb	r2, [r7, #21]
 80062a2:	7d3b      	ldrb	r3, [r7, #20]
 80062a4:	0052      	lsls	r2, r2, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4a23      	ldr	r2, [pc, #140]	; (8006338 <dcd_edpt_xfer+0xc8>)
 80062ac:	4413      	add	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2200      	movs	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	88ba      	ldrh	r2, [r7, #4]
 80062c0:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 80062c2:	7d7b      	ldrb	r3, [r7, #21]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d111      	bne.n	80062ec <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 80062c8:	7d3b      	ldrb	r3, [r7, #20]
 80062ca:	491c      	ldr	r1, [pc, #112]	; (800633c <dcd_edpt_xfer+0xcc>)
 80062cc:	88ba      	ldrh	r2, [r7, #4]
 80062ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80062d2:	7d3b      	ldrb	r3, [r7, #20]
 80062d4:	4a19      	ldr	r2, [pc, #100]	; (800633c <dcd_edpt_xfer+0xcc>)
 80062d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062da:	7d3a      	ldrb	r2, [r7, #20]
 80062dc:	7d79      	ldrb	r1, [r7, #21]
 80062de:	79f8      	ldrb	r0, [r7, #7]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	2301      	movs	r3, #1
 80062e4:	f7ff fdba 	bl	8005e5c <edpt_schedule_packets>
    return true;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e021      	b.n	8006330 <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	895b      	ldrh	r3, [r3, #10]
 80062f0:	88ba      	ldrh	r2, [r7, #4]
 80062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f6:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	895a      	ldrh	r2, [r3, #10]
 80062fc:	88bb      	ldrh	r3, [r7, #4]
 80062fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006302:	fb01 f202 	mul.w	r2, r1, r2
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 800630a:	89fb      	ldrh	r3, [r7, #14]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <dcd_edpt_xfer+0xa6>
 8006310:	88bb      	ldrh	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <dcd_edpt_xfer+0xac>
    num_packets++;
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	3301      	adds	r3, #1
 800631a:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 800631c:	8afc      	ldrh	r4, [r7, #22]
 800631e:	7d3a      	ldrb	r2, [r7, #20]
 8006320:	7d79      	ldrb	r1, [r7, #21]
 8006322:	79f8      	ldrb	r0, [r7, #7]
 8006324:	88bb      	ldrh	r3, [r7, #4]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4623      	mov	r3, r4
 800632a:	f7ff fd97 	bl	8005e5c <edpt_schedule_packets>

  return true;
 800632e:	2301      	movs	r3, #1
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd90      	pop	{r4, r7, pc}
 8006338:	20001a10 	.word	0x20001a10
 800633c:	20001a90 	.word	0x20001a90

08006340 <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b08b      	sub	sp, #44	; 0x2c
 8006344:	af02      	add	r7, sp, #8
 8006346:	603a      	str	r2, [r7, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
 800634e:	460b      	mov	r3, r1
 8006350:	71bb      	strb	r3, [r7, #6]
 8006352:	4613      	mov	r3, r2
 8006354:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	88db      	ldrh	r3, [r3, #6]
 800635a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d00a      	beq.n	800637a <dcd_edpt_xfer_fifo+0x3a>
 8006364:	4b27      	ldr	r3, [pc, #156]	; (8006404 <dcd_edpt_xfer_fifo+0xc4>)
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d000      	beq.n	8006376 <dcd_edpt_xfer_fifo+0x36>
 8006374:	be00      	bkpt	0x0000
 8006376:	2300      	movs	r3, #0
 8006378:	e03f      	b.n	80063fa <dcd_edpt_xfer_fifo+0xba>
 800637a:	79bb      	ldrb	r3, [r7, #6]
 800637c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006386:	777b      	strb	r3, [r7, #29]
 8006388:	79bb      	ldrb	r3, [r7, #6]
 800638a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006392:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8006394:	7f7a      	ldrb	r2, [r7, #29]
 8006396:	7f3b      	ldrb	r3, [r7, #28]
 8006398:	0052      	lsls	r2, r2, #1
 800639a:	4413      	add	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <dcd_edpt_xfer_fifo+0xc8>)
 80063a0:	4413      	add	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	88ba      	ldrh	r2, [r7, #4]
 80063b4:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	895b      	ldrh	r3, [r3, #10]
 80063ba:	88ba      	ldrh	r2, [r7, #4]
 80063bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c0:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	895a      	ldrh	r2, [r3, #10]
 80063c6:	88bb      	ldrh	r3, [r7, #4]
 80063c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80063cc:	fb01 f202 	mul.w	r2, r1, r2
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80063d4:	8afb      	ldrh	r3, [r7, #22]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <dcd_edpt_xfer_fifo+0xa0>
 80063da:	88bb      	ldrh	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <dcd_edpt_xfer_fifo+0xa6>
 80063e0:	8bfb      	ldrh	r3, [r7, #30]
 80063e2:	3301      	adds	r3, #1
 80063e4:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80063e6:	8bfc      	ldrh	r4, [r7, #30]
 80063e8:	7f3a      	ldrb	r2, [r7, #28]
 80063ea:	7f79      	ldrb	r1, [r7, #29]
 80063ec:	79f8      	ldrb	r0, [r7, #7]
 80063ee:	88bb      	ldrh	r3, [r7, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4623      	mov	r3, r4
 80063f4:	f7ff fd32 	bl	8005e5c <edpt_schedule_packets>

  return true;
 80063f8:	2301      	movs	r3, #1
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd90      	pop	{r4, r7, pc}
 8006402:	bf00      	nop
 8006404:	e000edf0 	.word	0xe000edf0
 8006408:	20001a10 	.word	0x20001a10

0800640c <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 800640c:	b480      	push	{r7}
 800640e:	b089      	sub	sp, #36	; 0x24
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
 8006416:	460b      	mov	r3, r1
 8006418:	71bb      	strb	r3, [r7, #6]
 800641a:	4613      	mov	r3, r2
 800641c:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800641e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006422:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006424:	4b6c      	ldr	r3, [pc, #432]	; (80065d8 <dcd_edpt_disable+0x1cc>)
 8006426:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006428:	4b6c      	ldr	r3, [pc, #432]	; (80065dc <dcd_edpt_disable+0x1d0>)
 800642a:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800642c:	4b6c      	ldr	r3, [pc, #432]	; (80065e0 <dcd_edpt_disable+0x1d4>)
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	79bb      	ldrb	r3, [r7, #6]
 8006432:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006434:	7b3b      	ldrb	r3, [r7, #12]
 8006436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800643c:	73fb      	strb	r3, [r7, #15]
 800643e:	79bb      	ldrb	r3, [r7, #6]
 8006440:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006442:	7b7b      	ldrb	r3, [r7, #13]
 8006444:	09db      	lsrs	r3, r3, #7
 8006446:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006448:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d16a      	bne.n	8006526 <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d006      	beq.n	8006464 <dcd_edpt_disable+0x58>
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	015b      	lsls	r3, r3, #5
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4413      	add	r3, r2
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	db13      	blt.n	800648c <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	015b      	lsls	r3, r3, #5
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	797b      	ldrb	r3, [r7, #5]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <dcd_edpt_disable+0x6e>
 8006474:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8006478:	e001      	b.n	800647e <dcd_edpt_disable+0x72>
 800647a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	015b      	lsls	r3, r3, #5
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	4403      	add	r3, r0
 8006486:	430a      	orrs	r2, r1
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e037      	b.n	80064fc <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	015b      	lsls	r3, r3, #5
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	015b      	lsls	r3, r3, #5
 800649a:	6939      	ldr	r1, [r7, #16]
 800649c:	440b      	add	r3, r1
 800649e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80064a2:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80064a4:	bf00      	nop
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	015b      	lsls	r3, r3, #5
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4413      	add	r3, r2
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f6      	beq.n	80064a6 <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	015b      	lsls	r3, r3, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4413      	add	r3, r2
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	797b      	ldrb	r3, [r7, #5]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <dcd_edpt_disable+0xc0>
 80064c8:	4946      	ldr	r1, [pc, #280]	; (80065e4 <dcd_edpt_disable+0x1d8>)
 80064ca:	e001      	b.n	80064d0 <dcd_edpt_disable+0xc4>
 80064cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	015b      	lsls	r3, r3, #5
 80064d4:	6938      	ldr	r0, [r7, #16]
 80064d6:	4403      	add	r3, r0
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80064dc:	bf00      	nop
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	015b      	lsls	r3, r3, #5
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4413      	add	r3, r2
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f6      	beq.n	80064de <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	015b      	lsls	r3, r3, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	2202      	movs	r2, #2
 80064fa:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	7bfa      	ldrb	r2, [r7, #15]
 8006502:	0192      	lsls	r2, r2, #6
 8006504:	431a      	orrs	r2, r3
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8006516:	bf00      	nop
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f9      	bne.n	8006518 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8006524:	e051      	b.n	80065ca <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <dcd_edpt_disable+0x12e>
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	015b      	lsls	r3, r3, #5
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4413      	add	r3, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db12      	blt.n	8006560 <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	015b      	lsls	r3, r3, #5
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	797b      	ldrb	r3, [r7, #5]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <dcd_edpt_disable+0x144>
 800654a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654e:	e000      	b.n	8006552 <dcd_edpt_disable+0x146>
 8006550:	2100      	movs	r1, #0
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	015b      	lsls	r3, r3, #5
 8006556:	6978      	ldr	r0, [r7, #20]
 8006558:	4403      	add	r3, r0
 800655a:	430a      	orrs	r2, r1
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	e034      	b.n	80065ca <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 800656c:	bf00      	nop
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f9      	beq.n	800656e <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	015b      	lsls	r3, r3, #5
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	797b      	ldrb	r3, [r7, #5]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <dcd_edpt_disable+0x182>
 800658a:	4916      	ldr	r1, [pc, #88]	; (80065e4 <dcd_edpt_disable+0x1d8>)
 800658c:	e001      	b.n	8006592 <dcd_edpt_disable+0x186>
 800658e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	015b      	lsls	r3, r3, #5
 8006596:	6978      	ldr	r0, [r7, #20]
 8006598:	4403      	add	r3, r0
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 800659e:	bf00      	nop
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	015b      	lsls	r3, r3, #5
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f6      	beq.n	80065a0 <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	015b      	lsls	r3, r3, #5
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	2202      	movs	r2, #2
 80065bc:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	605a      	str	r2, [r3, #4]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	50000800 	.word	0x50000800
 80065dc:	50000b00 	.word	0x50000b00
 80065e0:	50000900 	.word	0x50000900
 80065e4:	40200000 	.word	0x40200000

080065e8 <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	460a      	mov	r2, r1
 80065f2:	71fb      	strb	r3, [r7, #7]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80065f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	79bb      	ldrb	r3, [r7, #6]
 8006600:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006608:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800660a:	76fb      	strb	r3, [r7, #27]
 800660c:	79bb      	ldrb	r3, [r7, #6]
 800660e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006616:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 8006618:	79b9      	ldrb	r1, [r7, #6]
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	2200      	movs	r2, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fef4 	bl	800640c <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8006624:	7efa      	ldrb	r2, [r7, #27]
 8006626:	7ebb      	ldrb	r3, [r7, #26]
 8006628:	491e      	ldr	r1, [pc, #120]	; (80066a4 <dcd_edpt_close+0xbc>)
 800662a:	0052      	lsls	r2, r2, #1
 800662c:	4413      	add	r3, r2
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	440b      	add	r3, r1
 8006632:	330a      	adds	r3, #10
 8006634:	2200      	movs	r2, #0
 8006636:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 8006638:	7ebb      	ldrb	r3, [r7, #26]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d129      	bne.n	8006692 <dcd_edpt_close+0xaa>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 800663e:	7efb      	ldrb	r3, [r7, #27]
 8006640:	3b01      	subs	r3, #1
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	3340      	adds	r3, #64	; 0x40
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 8006650:	7efb      	ldrb	r3, [r7, #27]
 8006652:	3b01      	subs	r3, #1
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	3340      	adds	r3, #64	; 0x40
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8006660:	8afa      	ldrh	r2, [r7, #22]
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <dcd_edpt_close+0xc0>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800666a:	429a      	cmp	r2, r3
 800666c:	d009      	beq.n	8006682 <dcd_edpt_close+0x9a>
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <dcd_edpt_close+0xc4>)
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <dcd_edpt_close+0xb2>
 800667e:	be00      	bkpt	0x0000
 8006680:	e00b      	b.n	800669a <dcd_edpt_close+0xb2>
    _allocated_fifo_words_tx -= fifo_size;
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <dcd_edpt_close+0xc0>)
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	8b3b      	ldrh	r3, [r7, #24]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	b29a      	uxth	r2, r3
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <dcd_edpt_close+0xc0>)
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e004      	b.n	800669c <dcd_edpt_close+0xb4>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <dcd_edpt_close+0xc8>)
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e000      	b.n	800669c <dcd_edpt_close+0xb4>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 800669a:	bf00      	nop
  }
}
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20001a10 	.word	0x20001a10
 80066a8:	20001a94 	.word	0x20001a94
 80066ac:	e000edf0 	.word	0xe000edf0
 80066b0:	20001a96 	.word	0x20001a96

080066b4 <dcd_edpt_clear_stall>:
{
  dcd_edpt_disable(rhport, ep_addr, true);
}

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	460a      	mov	r2, r1
 80066be:	71fb      	strb	r3, [r7, #7]
 80066c0:	4613      	mov	r3, r2
 80066c2:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80066c4:	4b25      	ldr	r3, [pc, #148]	; (800675c <dcd_edpt_clear_stall+0xa8>)
 80066c6:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80066c8:	4b25      	ldr	r3, [pc, #148]	; (8006760 <dcd_edpt_clear_stall+0xac>)
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	79bb      	ldrb	r3, [r7, #6]
 80066ce:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80066d0:	7b3b      	ldrb	r3, [r7, #12]
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80066d8:	73fb      	strb	r3, [r7, #15]
 80066da:	79bb      	ldrb	r3, [r7, #6]
 80066dc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80066de:	7b7b      	ldrb	r3, [r7, #13]
 80066e0:	09db      	lsrs	r3, r3, #7
 80066e2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80066e4:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d118      	bne.n	800671e <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	015b      	lsls	r3, r3, #5
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	015b      	lsls	r3, r3, #5
 80066fa:	6939      	ldr	r1, [r7, #16]
 80066fc:	440b      	add	r3, r1
 80066fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006702:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	015b      	lsls	r3, r3, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	015b      	lsls	r3, r3, #5
 8006712:	6939      	ldr	r1, [r7, #16]
 8006714:	440b      	add	r3, r1
 8006716:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 800671c:	e017      	b.n	800674e <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	015b      	lsls	r3, r3, #5
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4413      	add	r3, r2
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	6979      	ldr	r1, [r7, #20]
 800672e:	440b      	add	r3, r1
 8006730:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006734:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	015b      	lsls	r3, r3, #5
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	015b      	lsls	r3, r3, #5
 8006744:	6979      	ldr	r1, [r7, #20]
 8006746:	440b      	add	r3, r1
 8006748:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	50000b00 	.word	0x50000b00
 8006760:	50000900 	.word	0x50000900

08006764 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8006764:	b480      	push	{r7}
 8006766:	b089      	sub	sp, #36	; 0x24
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	4613      	mov	r3, r2
 8006772:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8006774:	4b28      	ldr	r3, [pc, #160]	; (8006818 <read_fifo_packet+0xb4>)
 8006776:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8006778:	88bb      	ldrh	r3, [r7, #4]
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 800677e:	2300      	movs	r3, #0
 8006780:	83fb      	strh	r3, [r7, #30]
 8006782:	e01e      	b.n	80067c2 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0a1a      	lsrs	r2, r3, #8
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	0c1a      	lsrs	r2, r3, #16
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	3302      	adds	r3, #2
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	0e1a      	lsrs	r2, r3, #24
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	3303      	adds	r3, #3
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
    dst += 4;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	3304      	adds	r3, #4
 80067ba:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 80067bc:	8bfb      	ldrh	r3, [r7, #30]
 80067be:	3301      	adds	r3, #1
 80067c0:	83fb      	strh	r3, [r7, #30]
 80067c2:	8bfa      	ldrh	r2, [r7, #30]
 80067c4:	8afb      	ldrh	r3, [r7, #22]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3dc      	bcc.n	8006784 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 80067ca:	88bb      	ldrh	r3, [r7, #4]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 80067d4:	7d7b      	ldrb	r3, [r7, #21]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d018      	beq.n	800680c <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 80067e8:	7d7b      	ldrb	r3, [r7, #21]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d905      	bls.n	80067fa <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	0a1a      	lsrs	r2, r3, #8
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 80067fa:	7d7b      	ldrb	r3, [r7, #21]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d905      	bls.n	800680c <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	0c1a      	lsrs	r2, r3, #16
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	3302      	adds	r3, #2
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800680c:	bf00      	nop
 800680e:	3724      	adds	r7, #36	; 0x24
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	50001000 	.word	0x50001000

0800681c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	603a      	str	r2, [r7, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
 800682a:	460b      	mov	r3, r1
 800682c:	71bb      	strb	r3, [r7, #6]
 800682e:	4613      	mov	r3, r2
 8006830:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8006832:	79bb      	ldrb	r3, [r7, #6]
 8006834:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8006838:	3301      	adds	r3, #1
 800683a:	031b      	lsls	r3, r3, #12
 800683c:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800683e:	88bb      	ldrh	r3, [r7, #4]
 8006840:	089b      	lsrs	r3, r3, #2
 8006842:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8006844:	2300      	movs	r3, #0
 8006846:	82fb      	strh	r3, [r7, #22]
 8006848:	e019      	b.n	800687e <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	3303      	adds	r3, #3
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	061a      	lsls	r2, r3, #24
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3302      	adds	r3, #2
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	431a      	orrs	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4313      	orrs	r3, r2
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	461a      	mov	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
    src += 4;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8006878:	8afb      	ldrh	r3, [r7, #22]
 800687a:	3301      	adds	r3, #1
 800687c:	82fb      	strh	r3, [r7, #22]
 800687e:	8afa      	ldrh	r2, [r7, #22]
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	429a      	cmp	r2, r3
 8006884:	d3e1      	bcc.n	800684a <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8006890:	7a7b      	ldrb	r3, [r7, #9]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d020      	beq.n	80068d8 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 80068a6:	7a7b      	ldrb	r3, [r7, #9]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d907      	bls.n	80068bc <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	461a      	mov	r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 80068bc:	7a7b      	ldrb	r3, [r7, #9]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d907      	bls.n	80068d2 <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	3302      	adds	r3, #2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	041b      	lsls	r3, r3, #16
 80068ca:	461a      	mov	r2, r3
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	601a      	str	r2, [r3, #0]
  }
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80068f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068f4:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 80068f6:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <handle_rxflvl_ints+0x138>)
 80068f8:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	0c5b      	lsrs	r3, r3, #17
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	b29b      	uxth	r3, r3
 800691c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006920:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	3b01      	subs	r3, #1
 8006926:	2b05      	cmp	r3, #5
 8006928:	d864      	bhi.n	80069f4 <handle_rxflvl_ints+0x110>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <handle_rxflvl_ints+0x4c>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006a09 	.word	0x08006a09
 8006934:	08006949 	.word	0x08006949
 8006938:	08006a09 	.word	0x08006a09
 800693c:	080069c9 	.word	0x080069c9
 8006940:	080069f5 	.word	0x080069f5
 8006944:	080069e3 	.word	0x080069e3
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8006948:	7cbb      	ldrb	r3, [r7, #18]
 800694a:	015b      	lsls	r3, r3, #5
 800694c:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <handle_rxflvl_ints+0x13c>)
 800694e:	4413      	add	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	8a3a      	ldrh	r2, [r7, #16]
 8006960:	69b9      	ldr	r1, [r7, #24]
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fb07 	bl	8004f76 <tu_fifo_write_n_const_addr_full_words>
 8006968:	e00c      	b.n	8006984 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	8a3a      	ldrh	r2, [r7, #16]
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fef6 	bl	8006764 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	8a3b      	ldrh	r3, [r7, #16]
 800697e:	441a      	add	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	895b      	ldrh	r3, [r3, #10]
 8006988:	8a3a      	ldrh	r2, [r7, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d23e      	bcs.n	8006a0c <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 800698e:	7cbb      	ldrb	r3, [r7, #18]
 8006990:	015b      	lsls	r3, r3, #5
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4413      	add	r3, r2
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f3c3 0112 	ubfx	r1, r3, #0, #19
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	891a      	ldrh	r2, [r3, #8]
 80069a0:	b28b      	uxth	r3, r1
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 80069aa:	7cbb      	ldrb	r3, [r7, #18]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d12d      	bne.n	8006a0c <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	891a      	ldrh	r2, [r3, #8]
 80069b4:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <handle_rxflvl_ints+0x140>)
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80069c0:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <handle_rxflvl_ints+0x140>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 80069c6:	e021      	b.n	8006a0c <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80069c8:	7cbb      	ldrb	r3, [r7, #18]
 80069ca:	015b      	lsls	r3, r3, #5
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	4413      	add	r3, r2
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	7cbb      	ldrb	r3, [r7, #18]
 80069d4:	015b      	lsls	r3, r3, #5
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	440b      	add	r3, r1
 80069da:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80069de:	611a      	str	r2, [r3, #16]
      break;
 80069e0:	e017      	b.n	8006a12 <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <handle_rxflvl_ints+0x144>)
 80069e8:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a0e      	ldr	r2, [pc, #56]	; (8006a28 <handle_rxflvl_ints+0x144>)
 80069f0:	6053      	str	r3, [r2, #4]
      break;
 80069f2:	e00e      	b.n	8006a12 <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 80069f4:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <handle_rxflvl_ints+0x148>)
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <handle_rxflvl_ints+0x12c>
 8006a04:	be00      	bkpt	0x0000
      break;
 8006a06:	e003      	b.n	8006a10 <handle_rxflvl_ints+0x12c>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e002      	b.n	8006a12 <handle_rxflvl_ints+0x12e>
    break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <handle_rxflvl_ints+0x12e>
      break;
 8006a10:	bf00      	nop
  }
}
 8006a12:	bf00      	nop
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	50001000 	.word	0x50001000
 8006a20:	20001a10 	.word	0x20001a10
 8006a24:	20001a90 	.word	0x20001a90
 8006a28:	20001a08 	.word	0x20001a08
 8006a2c:	e000edf0 	.word	0xe000edf0

08006a30 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b094      	sub	sp, #80	; 0x50
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	4603      	mov	r3, r0
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a44:	e09e      	b.n	8006b84 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8006a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a4a:	015b      	lsls	r3, r3, #5
 8006a4c:	4a52      	ldr	r2, [pc, #328]	; (8006b98 <handle_epout_ints+0x168>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006a5a:	3210      	adds	r2, #16
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8088 	beq.w	8006b7a <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8006a6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a6e:	015b      	lsls	r3, r3, #5
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d028      	beq.n	8006ad0 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8006a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a82:	015b      	lsls	r3, r3, #5
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	2208      	movs	r2, #8
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006a92:	4b42      	ldr	r3, [pc, #264]	; (8006b9c <handle_epout_ints+0x16c>)
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	605a      	str	r2, [r3, #4]
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aac:	753b      	strb	r3, [r7, #20]
 8006aae:	2306      	movs	r3, #6
 8006ab0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8006ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab4:	f107 0318 	add.w	r3, r7, #24
 8006ab8:	6810      	ldr	r0, [r2, #0]
 8006aba:	6851      	ldr	r1, [r2, #4]
 8006abc:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8006abe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006ac2:	f107 0314 	add.w	r3, r7, #20
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fae7 	bl	800509c <dcd_event_handler>
}
 8006ace:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8006ad0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ad4:	015b      	lsls	r3, r3, #5
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d04a      	beq.n	8006b7a <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8006ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ae8:	015b      	lsls	r3, r3, #5
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	2201      	movs	r2, #1
 8006af0:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8006af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10e      	bne.n	8006b18 <handle_epout_ints+0xe8>
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <handle_epout_ints+0x170>)
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <handle_epout_ints+0x170>)
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8006b0a:	7bf8      	ldrb	r0, [r7, #15]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	2200      	movs	r2, #0
 8006b12:	f7ff f9a3 	bl	8005e5c <edpt_schedule_packets>
 8006b16:	e030      	b.n	8006b7a <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	891b      	ldrh	r3, [r3, #8]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006b24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8006b3a:	f107 0320 	add.w	r3, r7, #32
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	609a      	str	r2, [r3, #8]
 8006b46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006b4a:	f887 3020 	strb.w	r3, [r7, #32]
 8006b4e:	2307      	movs	r3, #7
 8006b50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 8006b54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006b58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8006b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 8006b68:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006b6c:	f107 0320 	add.w	r3, r7, #32
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fa92 	bl	800509c <dcd_event_handler>
}
 8006b78:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006b7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b7e:	3301      	adds	r3, #1
 8006b80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	f67f af5c 	bls.w	8006a46 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	3748      	adds	r7, #72	; 0x48
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20001a10 	.word	0x20001a10
 8006b9c:	20001a08 	.word	0x20001a08
 8006ba0:	20001a90 	.word	0x20001a90

08006ba4 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b092      	sub	sp, #72	; 0x48
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	4603      	mov	r3, r0
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006bb8:	e0ec      	b.n	8006d94 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8006bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bbe:	015b      	lsls	r3, r3, #5
 8006bc0:	3310      	adds	r3, #16
 8006bc2:	4a79      	ldr	r2, [pc, #484]	; (8006da8 <handle_epin_ints+0x204>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80d6 	beq.w	8006d8a <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8006bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006be2:	015b      	lsls	r3, r3, #5
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04a      	beq.n	8006c88 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8006bf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8006c00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10e      	bne.n	8006c26 <handle_epin_ints+0x82>
 8006c08:	4b68      	ldr	r3, [pc, #416]	; (8006dac <handle_epin_ints+0x208>)
 8006c0a:	885b      	ldrh	r3, [r3, #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8006c10:	4b66      	ldr	r3, [pc, #408]	; (8006dac <handle_epin_ints+0x208>)
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006c18:	7bf8      	ldrb	r0, [r7, #15]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f7ff f91c 	bl	8005e5c <edpt_schedule_packets>
 8006c24:	e030      	b.n	8006c88 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8006c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	891b      	ldrh	r3, [r3, #8]
 8006c34:	461a      	mov	r2, r3
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006c42:	627a      	str	r2, [r7, #36]	; 0x24
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
 8006c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c60:	743b      	strb	r3, [r7, #16]
 8006c62:	2307      	movs	r3, #7
 8006c64:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8006c66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006c6a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8006c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c74:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8006c76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fa0b 	bl	800509c <dcd_event_handler>
}
 8006c86:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8006c88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c8c:	015b      	lsls	r3, r3, #5
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d076      	beq.n	8006d8a <handle_epin_ints+0x1e6>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d06c      	beq.n	8006d8a <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8006cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cb4:	015b      	lsls	r3, r3, #5
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	0cdb      	lsrs	r3, r3, #19
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc4:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006cca:	e043      	b.n	8006d54 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8006ccc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cd0:	015b      	lsls	r3, r3, #5
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	895a      	ldrh	r2, [r3, #10]
 8006cde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ce0:	843b      	strh	r3, [r7, #32]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	83fb      	strh	r3, [r7, #30]
 8006ce6:	8c3a      	ldrh	r2, [r7, #32]
 8006ce8:	8bfb      	ldrh	r3, [r7, #30]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bf28      	it	cs
 8006cee:	4613      	movcs	r3, r2
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8006cf4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006cf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cfa:	015b      	lsls	r3, r3, #5
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	440b      	add	r3, r1
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	0099      	lsls	r1, r3, #2
 8006d04:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <handle_epin_ints+0x20c>)
 8006d06:	400b      	ands	r3, r1
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d828      	bhi.n	8006d5e <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8006d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	031b      	lsls	r3, r3, #12
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe f8bc 	bl	8004ea8 <tu_fifo_read_n_const_addr_full_words>
 8006d30:	e00d      	b.n	8006d4e <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d38:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006d3c:	7bf8      	ldrb	r0, [r7, #15]
 8006d3e:	f7ff fd6d 	bl	800681c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d48:	441a      	add	r2, r3
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8006d4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d50:	3301      	adds	r3, #1
 8006d52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d54:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006d56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d3b7      	bcc.n	8006ccc <handle_epin_ints+0x128>
 8006d5c:	e000      	b.n	8006d60 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8006d5e:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8006d60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d64:	015b      	lsls	r3, r3, #5
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d82:	43d2      	mvns	r2, r2
 8006d84:	401a      	ands	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8006d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	f67f af0e 	bls.w	8006bba <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	3740      	adds	r7, #64	; 0x40
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20001a10 	.word	0x20001a10
 8006dac:	20001a90 	.word	0x20001a90
 8006db0:	0003fffc 	.word	0x0003fffc

08006db4 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b09c      	sub	sp, #112	; 0x70
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006dc4:	4b9e      	ldr	r3, [pc, #632]	; (8007040 <dcd_int_handler+0x28c>)
 8006dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006dc8:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <dcd_int_handler+0x290>)
 8006dca:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006dcc:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <dcd_int_handler+0x294>)
 8006dce:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8006dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8006ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8006de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dec:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe ff1f 	bl	8005c34 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8006df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d031      	beq.n	8006e64 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e06:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff f80a 	bl	8005e24 <get_speed>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8006e16:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e1e:	f7fe ff7f 	bl	8005d20 <set_turnaround>
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8006e28:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006e2c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8006e36:	f107 0314 	add.w	r3, r7, #20
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	609a      	str	r2, [r3, #8]
 8006e42:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006e46:	753b      	strb	r3, [r7, #20]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8006e4c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8006e50:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8006e52:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8006e56:	f107 0314 	add.w	r3, r7, #20
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe f91d 	bl	800509c <dcd_event_handler>
}
 8006e62:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8006e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d023      	beq.n	8006eb6 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e74:	615a      	str	r2, [r3, #20]
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006e88:	f107 0320 	add.w	r3, r7, #32
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006e98:	f887 3020 	strb.w	r3, [r7, #32]
 8006e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ea0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8006ea4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006ea8:	f107 0320 	add.w	r3, r7, #32
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe f8f4 	bl	800509c <dcd_event_handler>
}
 8006eb4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da23      	bge.n	8006f04 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ec2:	615a      	str	r2, [r3, #20]
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8006eca:	2305      	movs	r3, #5
 8006ecc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ee6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006eea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006eee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8006ef2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe f8cd 	bl	800509c <dcd_event_handler>
}
 8006f02:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8006f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d028      	beq.n	8006f60 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8006f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01d      	beq.n	8006f5a <dcd_int_handler+0x1a6>
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006f30:	f107 0308 	add.w	r3, r7, #8
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006f40:	723b      	strb	r3, [r7, #8]
 8006f42:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006f46:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8006f48:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe f8a2 	bl	800509c <dcd_event_handler>
}
 8006f58:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8006f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f5e:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8006f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d028      	beq.n	8006fbc <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8006f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8006f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f023 0208 	bic.w	r2, r3, #8
 8006f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7a:	619a      	str	r2, [r3, #24]
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f82:	2303      	movs	r3, #3
 8006f84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006f8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	605a      	str	r2, [r3, #4]
 8006f98:	609a      	str	r2, [r3, #8]
 8006f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006fa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006fa6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8006faa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006fae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe f871 	bl	800509c <dcd_event_handler>
}
 8006fba:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8006fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d021      	beq.n	800700a <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8006fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f023 0210 	bic.w	r2, r3, #16
 8006fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd0:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fc84 	bl	80068e4 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f4      	bne.n	8006fd2 <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <dcd_int_handler+0x298>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fdec 	bl	8005bd0 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8006ff8:	4b14      	ldr	r3, [pc, #80]	; (800704c <dcd_int_handler+0x298>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f043 0210 	orr.w	r2, r3, #16
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007018:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fd08 	bl	8006a30 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8007020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fdb7 	bl	8006ba4 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8007036:	bf00      	nop
 8007038:	3770      	adds	r7, #112	; 0x70
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	50000800 	.word	0x50000800
 8007044:	50000b00 	.word	0x50000b00
 8007048:	50000900 	.word	0x50000900
 800704c:	20001a96 	.word	0x20001a96

08007050 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <tu_edpt_claim+0x26>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <tu_edpt_claim+0x2a>
 8007076:	2300      	movs	r3, #0
 8007078:	e01e      	b.n	80070b8 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <tu_edpt_claim+0x4a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <tu_edpt_claim+0x4a>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <tu_edpt_claim+0x4c>
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	73fb      	strb	r3, [r7, #15]
  if (available)
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7813      	ldrb	r3, [r2, #0]
 80070b0:	f043 0304 	orr.w	r3, r3, #4
 80070b4:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d108      	bne.n	80070ee <tu_edpt_release+0x2a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <tu_edpt_release+0x2a>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <tu_edpt_release+0x2c>
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	73fb      	strb	r3, [r7, #15]
  if (ret)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	7813      	ldrb	r3, [r2, #0]
 8007104:	f36f 0382 	bfc	r3, #2, #1
 8007108:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8007118:	b480      	push	{r7}
 800711a:	b08b      	sub	sp, #44	; 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	889b      	ldrh	r3, [r3, #4]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007132:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8007134:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b03      	cmp	r3, #3
 8007142:	d03e      	beq.n	80071c2 <tu_edpt_validate+0xaa>
 8007144:	2b03      	cmp	r3, #3
 8007146:	dc53      	bgt.n	80071f0 <tu_edpt_validate+0xd8>
 8007148:	2b01      	cmp	r3, #1
 800714a:	d002      	beq.n	8007152 <tu_edpt_validate+0x3a>
 800714c:	2b02      	cmp	r3, #2
 800714e:	d018      	beq.n	8007182 <tu_edpt_validate+0x6a>
 8007150:	e04e      	b.n	80071f0 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d102      	bne.n	800715e <tu_edpt_validate+0x46>
 8007158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800715c:	e001      	b.n	8007162 <tu_edpt_validate+0x4a>
 800715e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007162:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8007164:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007166:	8afb      	ldrh	r3, [r7, #22]
 8007168:	429a      	cmp	r2, r3
 800716a:	d943      	bls.n	80071f4 <tu_edpt_validate+0xdc>
 800716c:	4b27      	ldr	r3, [pc, #156]	; (800720c <tu_edpt_validate+0xf4>)
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d000      	beq.n	800717e <tu_edpt_validate+0x66>
 800717c:	be00      	bkpt	0x0000
 800717e:	2300      	movs	r3, #0
 8007180:	e03e      	b.n	8007200 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d10e      	bne.n	80071a6 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8007188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	d033      	beq.n	80071f8 <tu_edpt_validate+0xe0>
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <tu_edpt_validate+0xf4>)
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d000      	beq.n	80071a2 <tu_edpt_validate+0x8a>
 80071a0:	be00      	bkpt	0x0000
 80071a2:	2300      	movs	r3, #0
 80071a4:	e02c      	b.n	8007200 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 80071a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d925      	bls.n	80071f8 <tu_edpt_validate+0xe0>
 80071ac:	4b17      	ldr	r3, [pc, #92]	; (800720c <tu_edpt_validate+0xf4>)
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d000      	beq.n	80071be <tu_edpt_validate+0xa6>
 80071bc:	be00      	bkpt	0x0000
 80071be:	2300      	movs	r3, #0
 80071c0:	e01e      	b.n	8007200 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d102      	bne.n	80071ce <tu_edpt_validate+0xb6>
 80071c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071cc:	e000      	b.n	80071d0 <tu_edpt_validate+0xb8>
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 80071d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d910      	bls.n	80071fc <tu_edpt_validate+0xe4>
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <tu_edpt_validate+0xf4>)
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d000      	beq.n	80071ec <tu_edpt_validate+0xd4>
 80071ea:	be00      	bkpt	0x0000
 80071ec:	2300      	movs	r3, #0
 80071ee:	e007      	b.n	8007200 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e005      	b.n	8007200 <tu_edpt_validate+0xe8>
    break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <tu_edpt_validate+0xe6>
    break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <tu_edpt_validate+0xe6>
    break;
 80071fc:	bf00      	nop
  }

  return true;
 80071fe:	2301      	movs	r3, #1
}
 8007200:	4618      	mov	r0, r3
 8007202:	372c      	adds	r7, #44	; 0x2c
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	e000edf0 	.word	0xe000edf0

08007210 <__libc_init_array>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4d0d      	ldr	r5, [pc, #52]	; (8007248 <__libc_init_array+0x38>)
 8007214:	4c0d      	ldr	r4, [pc, #52]	; (800724c <__libc_init_array+0x3c>)
 8007216:	1b64      	subs	r4, r4, r5
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	2600      	movs	r6, #0
 800721c:	42a6      	cmp	r6, r4
 800721e:	d109      	bne.n	8007234 <__libc_init_array+0x24>
 8007220:	4d0b      	ldr	r5, [pc, #44]	; (8007250 <__libc_init_array+0x40>)
 8007222:	4c0c      	ldr	r4, [pc, #48]	; (8007254 <__libc_init_array+0x44>)
 8007224:	f000 fd8a 	bl	8007d3c <_init>
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	2600      	movs	r6, #0
 800722e:	42a6      	cmp	r6, r4
 8007230:	d105      	bne.n	800723e <__libc_init_array+0x2e>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	f855 3b04 	ldr.w	r3, [r5], #4
 8007238:	4798      	blx	r3
 800723a:	3601      	adds	r6, #1
 800723c:	e7ee      	b.n	800721c <__libc_init_array+0xc>
 800723e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007242:	4798      	blx	r3
 8007244:	3601      	adds	r6, #1
 8007246:	e7f2      	b.n	800722e <__libc_init_array+0x1e>
 8007248:	08008194 	.word	0x08008194
 800724c:	08008194 	.word	0x08008194
 8007250:	08008194 	.word	0x08008194
 8007254:	08008198 	.word	0x08008198

08007258 <memcpy>:
 8007258:	440a      	add	r2, r1
 800725a:	4291      	cmp	r1, r2
 800725c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007260:	d100      	bne.n	8007264 <memcpy+0xc>
 8007262:	4770      	bx	lr
 8007264:	b510      	push	{r4, lr}
 8007266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726e:	4291      	cmp	r1, r2
 8007270:	d1f9      	bne.n	8007266 <memcpy+0xe>
 8007272:	bd10      	pop	{r4, pc}

08007274 <memset>:
 8007274:	4402      	add	r2, r0
 8007276:	4603      	mov	r3, r0
 8007278:	4293      	cmp	r3, r2
 800727a:	d100      	bne.n	800727e <memset+0xa>
 800727c:	4770      	bx	lr
 800727e:	f803 1b01 	strb.w	r1, [r3], #1
 8007282:	e7f9      	b.n	8007278 <memset+0x4>

08007284 <sinf>:
 8007284:	ee10 3a10 	vmov	r3, s0
 8007288:	b507      	push	{r0, r1, r2, lr}
 800728a:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <sinf+0x84>)
 800728c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007290:	4293      	cmp	r3, r2
 8007292:	dc07      	bgt.n	80072a4 <sinf+0x20>
 8007294:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800730c <sinf+0x88>
 8007298:	2000      	movs	r0, #0
 800729a:	b003      	add	sp, #12
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	f000 bc48 	b.w	8007b34 <__kernel_sinf>
 80072a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072a8:	db04      	blt.n	80072b4 <sinf+0x30>
 80072aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80072ae:	b003      	add	sp, #12
 80072b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b4:	4668      	mov	r0, sp
 80072b6:	f000 f82b 	bl	8007310 <__ieee754_rem_pio2f>
 80072ba:	f000 0003 	and.w	r0, r0, #3
 80072be:	2801      	cmp	r0, #1
 80072c0:	d00a      	beq.n	80072d8 <sinf+0x54>
 80072c2:	2802      	cmp	r0, #2
 80072c4:	d00f      	beq.n	80072e6 <sinf+0x62>
 80072c6:	b9c0      	cbnz	r0, 80072fa <sinf+0x76>
 80072c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80072cc:	ed9d 0a00 	vldr	s0, [sp]
 80072d0:	2001      	movs	r0, #1
 80072d2:	f000 fc2f 	bl	8007b34 <__kernel_sinf>
 80072d6:	e7ea      	b.n	80072ae <sinf+0x2a>
 80072d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80072dc:	ed9d 0a00 	vldr	s0, [sp]
 80072e0:	f000 f952 	bl	8007588 <__kernel_cosf>
 80072e4:	e7e3      	b.n	80072ae <sinf+0x2a>
 80072e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80072ea:	ed9d 0a00 	vldr	s0, [sp]
 80072ee:	2001      	movs	r0, #1
 80072f0:	f000 fc20 	bl	8007b34 <__kernel_sinf>
 80072f4:	eeb1 0a40 	vneg.f32	s0, s0
 80072f8:	e7d9      	b.n	80072ae <sinf+0x2a>
 80072fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80072fe:	ed9d 0a00 	vldr	s0, [sp]
 8007302:	f000 f941 	bl	8007588 <__kernel_cosf>
 8007306:	e7f5      	b.n	80072f4 <sinf+0x70>
 8007308:	3f490fd8 	.word	0x3f490fd8
 800730c:	00000000 	.word	0x00000000

08007310 <__ieee754_rem_pio2f>:
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	ee10 6a10 	vmov	r6, s0
 8007316:	4b8e      	ldr	r3, [pc, #568]	; (8007550 <__ieee754_rem_pio2f+0x240>)
 8007318:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800731c:	429d      	cmp	r5, r3
 800731e:	b087      	sub	sp, #28
 8007320:	eef0 7a40 	vmov.f32	s15, s0
 8007324:	4604      	mov	r4, r0
 8007326:	dc05      	bgt.n	8007334 <__ieee754_rem_pio2f+0x24>
 8007328:	2300      	movs	r3, #0
 800732a:	ed80 0a00 	vstr	s0, [r0]
 800732e:	6043      	str	r3, [r0, #4]
 8007330:	2000      	movs	r0, #0
 8007332:	e01a      	b.n	800736a <__ieee754_rem_pio2f+0x5a>
 8007334:	4b87      	ldr	r3, [pc, #540]	; (8007554 <__ieee754_rem_pio2f+0x244>)
 8007336:	429d      	cmp	r5, r3
 8007338:	dc46      	bgt.n	80073c8 <__ieee754_rem_pio2f+0xb8>
 800733a:	2e00      	cmp	r6, #0
 800733c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007558 <__ieee754_rem_pio2f+0x248>
 8007340:	4b86      	ldr	r3, [pc, #536]	; (800755c <__ieee754_rem_pio2f+0x24c>)
 8007342:	f025 050f 	bic.w	r5, r5, #15
 8007346:	dd1f      	ble.n	8007388 <__ieee754_rem_pio2f+0x78>
 8007348:	429d      	cmp	r5, r3
 800734a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800734e:	d00e      	beq.n	800736e <__ieee754_rem_pio2f+0x5e>
 8007350:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007560 <__ieee754_rem_pio2f+0x250>
 8007354:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007358:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800735c:	ed80 0a00 	vstr	s0, [r0]
 8007360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007364:	2001      	movs	r0, #1
 8007366:	edc4 7a01 	vstr	s15, [r4, #4]
 800736a:	b007      	add	sp, #28
 800736c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007564 <__ieee754_rem_pio2f+0x254>
 8007372:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007568 <__ieee754_rem_pio2f+0x258>
 8007376:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800737a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800737e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007382:	edc0 6a00 	vstr	s13, [r0]
 8007386:	e7eb      	b.n	8007360 <__ieee754_rem_pio2f+0x50>
 8007388:	429d      	cmp	r5, r3
 800738a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800738e:	d00e      	beq.n	80073ae <__ieee754_rem_pio2f+0x9e>
 8007390:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007560 <__ieee754_rem_pio2f+0x250>
 8007394:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007398:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800739c:	ed80 0a00 	vstr	s0, [r0]
 80073a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	edc4 7a01 	vstr	s15, [r4, #4]
 80073ac:	e7dd      	b.n	800736a <__ieee754_rem_pio2f+0x5a>
 80073ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007564 <__ieee754_rem_pio2f+0x254>
 80073b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007568 <__ieee754_rem_pio2f+0x258>
 80073b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80073ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80073be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073c2:	edc0 6a00 	vstr	s13, [r0]
 80073c6:	e7eb      	b.n	80073a0 <__ieee754_rem_pio2f+0x90>
 80073c8:	4b68      	ldr	r3, [pc, #416]	; (800756c <__ieee754_rem_pio2f+0x25c>)
 80073ca:	429d      	cmp	r5, r3
 80073cc:	dc72      	bgt.n	80074b4 <__ieee754_rem_pio2f+0x1a4>
 80073ce:	f000 fbf9 	bl	8007bc4 <fabsf>
 80073d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007570 <__ieee754_rem_pio2f+0x260>
 80073d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80073da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80073de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073e6:	ee17 0a90 	vmov	r0, s15
 80073ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007558 <__ieee754_rem_pio2f+0x248>
 80073ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80073f2:	281f      	cmp	r0, #31
 80073f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007560 <__ieee754_rem_pio2f+0x250>
 80073f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fc:	eeb1 6a47 	vneg.f32	s12, s14
 8007400:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007404:	ee16 2a90 	vmov	r2, s13
 8007408:	dc1c      	bgt.n	8007444 <__ieee754_rem_pio2f+0x134>
 800740a:	495a      	ldr	r1, [pc, #360]	; (8007574 <__ieee754_rem_pio2f+0x264>)
 800740c:	1e47      	subs	r7, r0, #1
 800740e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007412:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007416:	428b      	cmp	r3, r1
 8007418:	d014      	beq.n	8007444 <__ieee754_rem_pio2f+0x134>
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	ed94 7a00 	vldr	s14, [r4]
 8007420:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007424:	2e00      	cmp	r6, #0
 8007426:	ee30 0a67 	vsub.f32	s0, s0, s15
 800742a:	ed84 0a01 	vstr	s0, [r4, #4]
 800742e:	da9c      	bge.n	800736a <__ieee754_rem_pio2f+0x5a>
 8007430:	eeb1 7a47 	vneg.f32	s14, s14
 8007434:	eeb1 0a40 	vneg.f32	s0, s0
 8007438:	ed84 7a00 	vstr	s14, [r4]
 800743c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007440:	4240      	negs	r0, r0
 8007442:	e792      	b.n	800736a <__ieee754_rem_pio2f+0x5a>
 8007444:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007448:	15eb      	asrs	r3, r5, #23
 800744a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800744e:	2d08      	cmp	r5, #8
 8007450:	dde3      	ble.n	800741a <__ieee754_rem_pio2f+0x10a>
 8007452:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007564 <__ieee754_rem_pio2f+0x254>
 8007456:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007568 <__ieee754_rem_pio2f+0x258>
 800745a:	eef0 6a40 	vmov.f32	s13, s0
 800745e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007462:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007466:	eea6 0a27 	vfma.f32	s0, s12, s15
 800746a:	eef0 7a40 	vmov.f32	s15, s0
 800746e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007472:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007476:	ee15 2a90 	vmov	r2, s11
 800747a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800747e:	1a5b      	subs	r3, r3, r1
 8007480:	2b19      	cmp	r3, #25
 8007482:	dc04      	bgt.n	800748e <__ieee754_rem_pio2f+0x17e>
 8007484:	edc4 5a00 	vstr	s11, [r4]
 8007488:	eeb0 0a66 	vmov.f32	s0, s13
 800748c:	e7c6      	b.n	800741c <__ieee754_rem_pio2f+0x10c>
 800748e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007578 <__ieee754_rem_pio2f+0x268>
 8007492:	eeb0 0a66 	vmov.f32	s0, s13
 8007496:	eea6 0a25 	vfma.f32	s0, s12, s11
 800749a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800749e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800757c <__ieee754_rem_pio2f+0x26c>
 80074a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80074a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80074aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80074ae:	ed84 7a00 	vstr	s14, [r4]
 80074b2:	e7b3      	b.n	800741c <__ieee754_rem_pio2f+0x10c>
 80074b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80074b8:	db06      	blt.n	80074c8 <__ieee754_rem_pio2f+0x1b8>
 80074ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80074be:	edc0 7a01 	vstr	s15, [r0, #4]
 80074c2:	edc0 7a00 	vstr	s15, [r0]
 80074c6:	e733      	b.n	8007330 <__ieee754_rem_pio2f+0x20>
 80074c8:	15ea      	asrs	r2, r5, #23
 80074ca:	3a86      	subs	r2, #134	; 0x86
 80074cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007580 <__ieee754_rem_pio2f+0x270>
 80074dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80074e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80074ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80074fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007500:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007508:	edcd 7a05 	vstr	s15, [sp, #20]
 800750c:	d11e      	bne.n	800754c <__ieee754_rem_pio2f+0x23c>
 800750e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007516:	bf14      	ite	ne
 8007518:	2302      	movne	r3, #2
 800751a:	2301      	moveq	r3, #1
 800751c:	4919      	ldr	r1, [pc, #100]	; (8007584 <__ieee754_rem_pio2f+0x274>)
 800751e:	9101      	str	r1, [sp, #4]
 8007520:	2102      	movs	r1, #2
 8007522:	9100      	str	r1, [sp, #0]
 8007524:	a803      	add	r0, sp, #12
 8007526:	4621      	mov	r1, r4
 8007528:	f000 f88e 	bl	8007648 <__kernel_rem_pio2f>
 800752c:	2e00      	cmp	r6, #0
 800752e:	f6bf af1c 	bge.w	800736a <__ieee754_rem_pio2f+0x5a>
 8007532:	edd4 7a00 	vldr	s15, [r4]
 8007536:	eef1 7a67 	vneg.f32	s15, s15
 800753a:	edc4 7a00 	vstr	s15, [r4]
 800753e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007542:	eef1 7a67 	vneg.f32	s15, s15
 8007546:	edc4 7a01 	vstr	s15, [r4, #4]
 800754a:	e779      	b.n	8007440 <__ieee754_rem_pio2f+0x130>
 800754c:	2303      	movs	r3, #3
 800754e:	e7e5      	b.n	800751c <__ieee754_rem_pio2f+0x20c>
 8007550:	3f490fd8 	.word	0x3f490fd8
 8007554:	4016cbe3 	.word	0x4016cbe3
 8007558:	3fc90f80 	.word	0x3fc90f80
 800755c:	3fc90fd0 	.word	0x3fc90fd0
 8007560:	37354443 	.word	0x37354443
 8007564:	37354400 	.word	0x37354400
 8007568:	2e85a308 	.word	0x2e85a308
 800756c:	43490f80 	.word	0x43490f80
 8007570:	3f22f984 	.word	0x3f22f984
 8007574:	08007dbc 	.word	0x08007dbc
 8007578:	2e85a300 	.word	0x2e85a300
 800757c:	248d3132 	.word	0x248d3132
 8007580:	43800000 	.word	0x43800000
 8007584:	08007e3c 	.word	0x08007e3c

08007588 <__kernel_cosf>:
 8007588:	ee10 3a10 	vmov	r3, s0
 800758c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007590:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007594:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007598:	da05      	bge.n	80075a6 <__kernel_cosf+0x1e>
 800759a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800759e:	ee17 2a90 	vmov	r2, s15
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	d03d      	beq.n	8007622 <__kernel_cosf+0x9a>
 80075a6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80075aa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007628 <__kernel_cosf+0xa0>
 80075ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800762c <__kernel_cosf+0xa4>
 80075b2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007630 <__kernel_cosf+0xa8>
 80075b6:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <__kernel_cosf+0xac>)
 80075b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80075bc:	4293      	cmp	r3, r2
 80075be:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007638 <__kernel_cosf+0xb0>
 80075c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80075c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800763c <__kernel_cosf+0xb4>
 80075ca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80075ce:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007640 <__kernel_cosf+0xb8>
 80075d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80075d6:	eeb0 7a66 	vmov.f32	s14, s13
 80075da:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80075de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80075e2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80075e6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80075ea:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80075ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80075f2:	dc04      	bgt.n	80075fe <__kernel_cosf+0x76>
 80075f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80075f8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80075fc:	4770      	bx	lr
 80075fe:	4a11      	ldr	r2, [pc, #68]	; (8007644 <__kernel_cosf+0xbc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	bfda      	itte	le
 8007604:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007608:	ee06 3a90 	vmovle	s13, r3
 800760c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007614:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800761c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007620:	4770      	bx	lr
 8007622:	eeb0 0a46 	vmov.f32	s0, s12
 8007626:	4770      	bx	lr
 8007628:	ad47d74e 	.word	0xad47d74e
 800762c:	310f74f6 	.word	0x310f74f6
 8007630:	3d2aaaab 	.word	0x3d2aaaab
 8007634:	3e999999 	.word	0x3e999999
 8007638:	b493f27c 	.word	0xb493f27c
 800763c:	37d00d01 	.word	0x37d00d01
 8007640:	bab60b61 	.word	0xbab60b61
 8007644:	3f480000 	.word	0x3f480000

08007648 <__kernel_rem_pio2f>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	ed2d 8b04 	vpush	{d8-d9}
 8007650:	b0d9      	sub	sp, #356	; 0x164
 8007652:	4688      	mov	r8, r1
 8007654:	9002      	str	r0, [sp, #8]
 8007656:	49bb      	ldr	r1, [pc, #748]	; (8007944 <__kernel_rem_pio2f+0x2fc>)
 8007658:	9866      	ldr	r0, [sp, #408]	; 0x198
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007660:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007664:	1e59      	subs	r1, r3, #1
 8007666:	1d13      	adds	r3, r2, #4
 8007668:	db27      	blt.n	80076ba <__kernel_rem_pio2f+0x72>
 800766a:	f1b2 0b03 	subs.w	fp, r2, #3
 800766e:	bf48      	it	mi
 8007670:	f102 0b04 	addmi.w	fp, r2, #4
 8007674:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007678:	1c45      	adds	r5, r0, #1
 800767a:	00ec      	lsls	r4, r5, #3
 800767c:	1a47      	subs	r7, r0, r1
 800767e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007682:	9403      	str	r4, [sp, #12]
 8007684:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007688:	eb0a 0c01 	add.w	ip, sl, r1
 800768c:	ae1c      	add	r6, sp, #112	; 0x70
 800768e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007692:	2400      	movs	r4, #0
 8007694:	4564      	cmp	r4, ip
 8007696:	dd12      	ble.n	80076be <__kernel_rem_pio2f+0x76>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	ac1c      	add	r4, sp, #112	; 0x70
 800769c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80076a0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80076a4:	f04f 0c00 	mov.w	ip, #0
 80076a8:	45d4      	cmp	ip, sl
 80076aa:	dc27      	bgt.n	80076fc <__kernel_rem_pio2f+0xb4>
 80076ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80076b0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007954 <__kernel_rem_pio2f+0x30c>
 80076b4:	4627      	mov	r7, r4
 80076b6:	2600      	movs	r6, #0
 80076b8:	e016      	b.n	80076e8 <__kernel_rem_pio2f+0xa0>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e7dc      	b.n	8007678 <__kernel_rem_pio2f+0x30>
 80076be:	42e7      	cmn	r7, r4
 80076c0:	bf5d      	ittte	pl
 80076c2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80076c6:	ee07 3a90 	vmovpl	s15, r3
 80076ca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80076ce:	eef0 7a47 	vmovmi.f32	s15, s14
 80076d2:	ece6 7a01 	vstmia	r6!, {s15}
 80076d6:	3401      	adds	r4, #1
 80076d8:	e7dc      	b.n	8007694 <__kernel_rem_pio2f+0x4c>
 80076da:	ecf9 6a01 	vldmia	r9!, {s13}
 80076de:	ed97 7a00 	vldr	s14, [r7]
 80076e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80076e6:	3601      	adds	r6, #1
 80076e8:	428e      	cmp	r6, r1
 80076ea:	f1a7 0704 	sub.w	r7, r7, #4
 80076ee:	ddf4      	ble.n	80076da <__kernel_rem_pio2f+0x92>
 80076f0:	eceb 7a01 	vstmia	fp!, {s15}
 80076f4:	f10c 0c01 	add.w	ip, ip, #1
 80076f8:	3404      	adds	r4, #4
 80076fa:	e7d5      	b.n	80076a8 <__kernel_rem_pio2f+0x60>
 80076fc:	ab08      	add	r3, sp, #32
 80076fe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007702:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007950 <__kernel_rem_pio2f+0x308>
 8007706:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800794c <__kernel_rem_pio2f+0x304>
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007710:	4656      	mov	r6, sl
 8007712:	00b3      	lsls	r3, r6, #2
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	ab58      	add	r3, sp, #352	; 0x160
 8007718:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800771c:	ac08      	add	r4, sp, #32
 800771e:	ab44      	add	r3, sp, #272	; 0x110
 8007720:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007724:	46a4      	mov	ip, r4
 8007726:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800772a:	4637      	mov	r7, r6
 800772c:	2f00      	cmp	r7, #0
 800772e:	f1a0 0004 	sub.w	r0, r0, #4
 8007732:	dc4f      	bgt.n	80077d4 <__kernel_rem_pio2f+0x18c>
 8007734:	4628      	mov	r0, r5
 8007736:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800773a:	f000 fa8d 	bl	8007c58 <scalbnf>
 800773e:	eeb0 8a40 	vmov.f32	s16, s0
 8007742:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007746:	ee28 0a00 	vmul.f32	s0, s16, s0
 800774a:	f000 fa43 	bl	8007bd4 <floorf>
 800774e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007752:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007756:	2d00      	cmp	r5, #0
 8007758:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800775c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007760:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007764:	ee17 9a90 	vmov	r9, s15
 8007768:	ee38 8a40 	vsub.f32	s16, s16, s0
 800776c:	dd44      	ble.n	80077f8 <__kernel_rem_pio2f+0x1b0>
 800776e:	f106 3cff 	add.w	ip, r6, #4294967295
 8007772:	ab08      	add	r3, sp, #32
 8007774:	f1c5 0e08 	rsb	lr, r5, #8
 8007778:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800777c:	fa47 f00e 	asr.w	r0, r7, lr
 8007780:	4481      	add	r9, r0
 8007782:	fa00 f00e 	lsl.w	r0, r0, lr
 8007786:	1a3f      	subs	r7, r7, r0
 8007788:	f1c5 0007 	rsb	r0, r5, #7
 800778c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007790:	4107      	asrs	r7, r0
 8007792:	2f00      	cmp	r7, #0
 8007794:	dd3f      	ble.n	8007816 <__kernel_rem_pio2f+0x1ce>
 8007796:	f04f 0e00 	mov.w	lr, #0
 800779a:	f109 0901 	add.w	r9, r9, #1
 800779e:	4673      	mov	r3, lr
 80077a0:	4576      	cmp	r6, lr
 80077a2:	dc6b      	bgt.n	800787c <__kernel_rem_pio2f+0x234>
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	dd04      	ble.n	80077b2 <__kernel_rem_pio2f+0x16a>
 80077a8:	2d01      	cmp	r5, #1
 80077aa:	d078      	beq.n	800789e <__kernel_rem_pio2f+0x256>
 80077ac:	2d02      	cmp	r5, #2
 80077ae:	f000 8081 	beq.w	80078b4 <__kernel_rem_pio2f+0x26c>
 80077b2:	2f02      	cmp	r7, #2
 80077b4:	d12f      	bne.n	8007816 <__kernel_rem_pio2f+0x1ce>
 80077b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077ba:	ee30 8a48 	vsub.f32	s16, s0, s16
 80077be:	b353      	cbz	r3, 8007816 <__kernel_rem_pio2f+0x1ce>
 80077c0:	4628      	mov	r0, r5
 80077c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80077c6:	f000 fa47 	bl	8007c58 <scalbnf>
 80077ca:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80077ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80077d2:	e020      	b.n	8007816 <__kernel_rem_pio2f+0x1ce>
 80077d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80077d8:	3f01      	subs	r7, #1
 80077da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80077e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077ea:	ecac 0a01 	vstmia	ip!, {s0}
 80077ee:	ed90 0a00 	vldr	s0, [r0]
 80077f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80077f6:	e799      	b.n	800772c <__kernel_rem_pio2f+0xe4>
 80077f8:	d105      	bne.n	8007806 <__kernel_rem_pio2f+0x1be>
 80077fa:	1e70      	subs	r0, r6, #1
 80077fc:	ab08      	add	r3, sp, #32
 80077fe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007802:	11ff      	asrs	r7, r7, #7
 8007804:	e7c5      	b.n	8007792 <__kernel_rem_pio2f+0x14a>
 8007806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800780a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007812:	da31      	bge.n	8007878 <__kernel_rem_pio2f+0x230>
 8007814:	2700      	movs	r7, #0
 8007816:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	f040 809b 	bne.w	8007958 <__kernel_rem_pio2f+0x310>
 8007822:	1e74      	subs	r4, r6, #1
 8007824:	46a4      	mov	ip, r4
 8007826:	2000      	movs	r0, #0
 8007828:	45d4      	cmp	ip, sl
 800782a:	da4a      	bge.n	80078c2 <__kernel_rem_pio2f+0x27a>
 800782c:	2800      	cmp	r0, #0
 800782e:	d07a      	beq.n	8007926 <__kernel_rem_pio2f+0x2de>
 8007830:	ab08      	add	r3, sp, #32
 8007832:	3d08      	subs	r5, #8
 8007834:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8081 	beq.w	8007940 <__kernel_rem_pio2f+0x2f8>
 800783e:	4628      	mov	r0, r5
 8007840:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007844:	00a5      	lsls	r5, r4, #2
 8007846:	f000 fa07 	bl	8007c58 <scalbnf>
 800784a:	aa44      	add	r2, sp, #272	; 0x110
 800784c:	1d2b      	adds	r3, r5, #4
 800784e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007950 <__kernel_rem_pio2f+0x308>
 8007852:	18d1      	adds	r1, r2, r3
 8007854:	4622      	mov	r2, r4
 8007856:	2a00      	cmp	r2, #0
 8007858:	f280 80ae 	bge.w	80079b8 <__kernel_rem_pio2f+0x370>
 800785c:	4622      	mov	r2, r4
 800785e:	2a00      	cmp	r2, #0
 8007860:	f2c0 80cc 	blt.w	80079fc <__kernel_rem_pio2f+0x3b4>
 8007864:	a944      	add	r1, sp, #272	; 0x110
 8007866:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800786a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007948 <__kernel_rem_pio2f+0x300>
 800786e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007872:	2000      	movs	r0, #0
 8007874:	1aa1      	subs	r1, r4, r2
 8007876:	e0b6      	b.n	80079e6 <__kernel_rem_pio2f+0x39e>
 8007878:	2702      	movs	r7, #2
 800787a:	e78c      	b.n	8007796 <__kernel_rem_pio2f+0x14e>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	b94b      	cbnz	r3, 8007894 <__kernel_rem_pio2f+0x24c>
 8007880:	b118      	cbz	r0, 800788a <__kernel_rem_pio2f+0x242>
 8007882:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	2001      	movs	r0, #1
 800788a:	f10e 0e01 	add.w	lr, lr, #1
 800788e:	3404      	adds	r4, #4
 8007890:	4603      	mov	r3, r0
 8007892:	e785      	b.n	80077a0 <__kernel_rem_pio2f+0x158>
 8007894:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007898:	6020      	str	r0, [r4, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	e7f5      	b.n	800788a <__kernel_rem_pio2f+0x242>
 800789e:	1e74      	subs	r4, r6, #1
 80078a0:	a808      	add	r0, sp, #32
 80078a2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80078a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80078aa:	f10d 0c20 	add.w	ip, sp, #32
 80078ae:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80078b2:	e77e      	b.n	80077b2 <__kernel_rem_pio2f+0x16a>
 80078b4:	1e74      	subs	r4, r6, #1
 80078b6:	a808      	add	r0, sp, #32
 80078b8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80078bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80078c0:	e7f3      	b.n	80078aa <__kernel_rem_pio2f+0x262>
 80078c2:	ab08      	add	r3, sp, #32
 80078c4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80078c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80078cc:	4318      	orrs	r0, r3
 80078ce:	e7ab      	b.n	8007828 <__kernel_rem_pio2f+0x1e0>
 80078d0:	f10c 0c01 	add.w	ip, ip, #1
 80078d4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80078d8:	2c00      	cmp	r4, #0
 80078da:	d0f9      	beq.n	80078d0 <__kernel_rem_pio2f+0x288>
 80078dc:	9b05      	ldr	r3, [sp, #20]
 80078de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80078e2:	eb0d 0003 	add.w	r0, sp, r3
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	18f4      	adds	r4, r6, r3
 80078ea:	ab1c      	add	r3, sp, #112	; 0x70
 80078ec:	1c77      	adds	r7, r6, #1
 80078ee:	384c      	subs	r0, #76	; 0x4c
 80078f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078f4:	4466      	add	r6, ip
 80078f6:	42be      	cmp	r6, r7
 80078f8:	f6ff af0b 	blt.w	8007712 <__kernel_rem_pio2f+0xca>
 80078fc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8007900:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800790c:	f04f 0c00 	mov.w	ip, #0
 8007910:	ece4 7a01 	vstmia	r4!, {s15}
 8007914:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007918:	46a1      	mov	r9, r4
 800791a:	458c      	cmp	ip, r1
 800791c:	dd07      	ble.n	800792e <__kernel_rem_pio2f+0x2e6>
 800791e:	ece0 7a01 	vstmia	r0!, {s15}
 8007922:	3701      	adds	r7, #1
 8007924:	e7e7      	b.n	80078f6 <__kernel_rem_pio2f+0x2ae>
 8007926:	9804      	ldr	r0, [sp, #16]
 8007928:	f04f 0c01 	mov.w	ip, #1
 800792c:	e7d2      	b.n	80078d4 <__kernel_rem_pio2f+0x28c>
 800792e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007932:	ed39 7a01 	vldmdb	r9!, {s14}
 8007936:	f10c 0c01 	add.w	ip, ip, #1
 800793a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800793e:	e7ec      	b.n	800791a <__kernel_rem_pio2f+0x2d2>
 8007940:	3c01      	subs	r4, #1
 8007942:	e775      	b.n	8007830 <__kernel_rem_pio2f+0x1e8>
 8007944:	08008180 	.word	0x08008180
 8007948:	08008154 	.word	0x08008154
 800794c:	43800000 	.word	0x43800000
 8007950:	3b800000 	.word	0x3b800000
 8007954:	00000000 	.word	0x00000000
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	eeb0 0a48 	vmov.f32	s0, s16
 800795e:	1a98      	subs	r0, r3, r2
 8007960:	f000 f97a 	bl	8007c58 <scalbnf>
 8007964:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800794c <__kernel_rem_pio2f+0x304>
 8007968:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007970:	db19      	blt.n	80079a6 <__kernel_rem_pio2f+0x35e>
 8007972:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007950 <__kernel_rem_pio2f+0x308>
 8007976:	ee60 7a27 	vmul.f32	s15, s0, s15
 800797a:	aa08      	add	r2, sp, #32
 800797c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007980:	1c74      	adds	r4, r6, #1
 8007982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007986:	3508      	adds	r5, #8
 8007988:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800798c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007990:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007994:	ee10 3a10 	vmov	r3, s0
 8007998:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800799c:	ee17 3a90 	vmov	r3, s15
 80079a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80079a4:	e74b      	b.n	800783e <__kernel_rem_pio2f+0x1f6>
 80079a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80079aa:	aa08      	add	r2, sp, #32
 80079ac:	ee10 3a10 	vmov	r3, s0
 80079b0:	4634      	mov	r4, r6
 80079b2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80079b6:	e742      	b.n	800783e <__kernel_rem_pio2f+0x1f6>
 80079b8:	a808      	add	r0, sp, #32
 80079ba:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80079be:	9001      	str	r0, [sp, #4]
 80079c0:	ee07 0a90 	vmov	s15, r0
 80079c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c8:	3a01      	subs	r2, #1
 80079ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80079ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80079d2:	ed61 7a01 	vstmdb	r1!, {s15}
 80079d6:	e73e      	b.n	8007856 <__kernel_rem_pio2f+0x20e>
 80079d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80079dc:	ecb6 7a01 	vldmia	r6!, {s14}
 80079e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079e4:	3001      	adds	r0, #1
 80079e6:	4550      	cmp	r0, sl
 80079e8:	dc01      	bgt.n	80079ee <__kernel_rem_pio2f+0x3a6>
 80079ea:	4288      	cmp	r0, r1
 80079ec:	ddf4      	ble.n	80079d8 <__kernel_rem_pio2f+0x390>
 80079ee:	a858      	add	r0, sp, #352	; 0x160
 80079f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079f4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80079f8:	3a01      	subs	r2, #1
 80079fa:	e730      	b.n	800785e <__kernel_rem_pio2f+0x216>
 80079fc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80079fe:	2a02      	cmp	r2, #2
 8007a00:	dc09      	bgt.n	8007a16 <__kernel_rem_pio2f+0x3ce>
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	dc2a      	bgt.n	8007a5c <__kernel_rem_pio2f+0x414>
 8007a06:	d043      	beq.n	8007a90 <__kernel_rem_pio2f+0x448>
 8007a08:	f009 0007 	and.w	r0, r9, #7
 8007a0c:	b059      	add	sp, #356	; 0x164
 8007a0e:	ecbd 8b04 	vpop	{d8-d9}
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d1f5      	bne.n	8007a08 <__kernel_rem_pio2f+0x3c0>
 8007a1c:	ab30      	add	r3, sp, #192	; 0xc0
 8007a1e:	442b      	add	r3, r5
 8007a20:	461a      	mov	r2, r3
 8007a22:	4619      	mov	r1, r3
 8007a24:	4620      	mov	r0, r4
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f1a1 0104 	sub.w	r1, r1, #4
 8007a2c:	dc51      	bgt.n	8007ad2 <__kernel_rem_pio2f+0x48a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	2901      	cmp	r1, #1
 8007a32:	f1a2 0204 	sub.w	r2, r2, #4
 8007a36:	dc5c      	bgt.n	8007af2 <__kernel_rem_pio2f+0x4aa>
 8007a38:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	2c01      	cmp	r4, #1
 8007a40:	dc67      	bgt.n	8007b12 <__kernel_rem_pio2f+0x4ca>
 8007a42:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007a46:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d167      	bne.n	8007b1e <__kernel_rem_pio2f+0x4d6>
 8007a4e:	edc8 6a00 	vstr	s13, [r8]
 8007a52:	ed88 7a01 	vstr	s14, [r8, #4]
 8007a56:	edc8 7a02 	vstr	s15, [r8, #8]
 8007a5a:	e7d5      	b.n	8007a08 <__kernel_rem_pio2f+0x3c0>
 8007a5c:	aa30      	add	r2, sp, #192	; 0xc0
 8007a5e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007a62:	4413      	add	r3, r2
 8007a64:	4622      	mov	r2, r4
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	da24      	bge.n	8007ab4 <__kernel_rem_pio2f+0x46c>
 8007a6a:	b34f      	cbz	r7, 8007ac0 <__kernel_rem_pio2f+0x478>
 8007a6c:	eef1 7a47 	vneg.f32	s15, s14
 8007a70:	edc8 7a00 	vstr	s15, [r8]
 8007a74:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a7c:	aa31      	add	r2, sp, #196	; 0xc4
 8007a7e:	2301      	movs	r3, #1
 8007a80:	429c      	cmp	r4, r3
 8007a82:	da20      	bge.n	8007ac6 <__kernel_rem_pio2f+0x47e>
 8007a84:	b10f      	cbz	r7, 8007a8a <__kernel_rem_pio2f+0x442>
 8007a86:	eef1 7a67 	vneg.f32	s15, s15
 8007a8a:	edc8 7a01 	vstr	s15, [r8, #4]
 8007a8e:	e7bb      	b.n	8007a08 <__kernel_rem_pio2f+0x3c0>
 8007a90:	aa30      	add	r2, sp, #192	; 0xc0
 8007a92:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8007954 <__kernel_rem_pio2f+0x30c>
 8007a96:	4413      	add	r3, r2
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	da05      	bge.n	8007aa8 <__kernel_rem_pio2f+0x460>
 8007a9c:	b10f      	cbz	r7, 8007aa2 <__kernel_rem_pio2f+0x45a>
 8007a9e:	eef1 7a67 	vneg.f32	s15, s15
 8007aa2:	edc8 7a00 	vstr	s15, [r8]
 8007aa6:	e7af      	b.n	8007a08 <__kernel_rem_pio2f+0x3c0>
 8007aa8:	ed33 7a01 	vldmdb	r3!, {s14}
 8007aac:	3c01      	subs	r4, #1
 8007aae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ab2:	e7f1      	b.n	8007a98 <__kernel_rem_pio2f+0x450>
 8007ab4:	ed73 7a01 	vldmdb	r3!, {s15}
 8007ab8:	3a01      	subs	r2, #1
 8007aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007abe:	e7d2      	b.n	8007a66 <__kernel_rem_pio2f+0x41e>
 8007ac0:	eef0 7a47 	vmov.f32	s15, s14
 8007ac4:	e7d4      	b.n	8007a70 <__kernel_rem_pio2f+0x428>
 8007ac6:	ecb2 7a01 	vldmia	r2!, {s14}
 8007aca:	3301      	adds	r3, #1
 8007acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ad0:	e7d6      	b.n	8007a80 <__kernel_rem_pio2f+0x438>
 8007ad2:	edd1 7a00 	vldr	s15, [r1]
 8007ad6:	edd1 6a01 	vldr	s13, [r1, #4]
 8007ada:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ade:	3801      	subs	r0, #1
 8007ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ae4:	ed81 7a00 	vstr	s14, [r1]
 8007ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aec:	edc1 7a01 	vstr	s15, [r1, #4]
 8007af0:	e799      	b.n	8007a26 <__kernel_rem_pio2f+0x3de>
 8007af2:	edd2 7a00 	vldr	s15, [r2]
 8007af6:	edd2 6a01 	vldr	s13, [r2, #4]
 8007afa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007afe:	3901      	subs	r1, #1
 8007b00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b04:	ed82 7a00 	vstr	s14, [r2]
 8007b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007b10:	e78e      	b.n	8007a30 <__kernel_rem_pio2f+0x3e8>
 8007b12:	ed33 7a01 	vldmdb	r3!, {s14}
 8007b16:	3c01      	subs	r4, #1
 8007b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b1c:	e78f      	b.n	8007a3e <__kernel_rem_pio2f+0x3f6>
 8007b1e:	eef1 6a66 	vneg.f32	s13, s13
 8007b22:	eeb1 7a47 	vneg.f32	s14, s14
 8007b26:	edc8 6a00 	vstr	s13, [r8]
 8007b2a:	ed88 7a01 	vstr	s14, [r8, #4]
 8007b2e:	eef1 7a67 	vneg.f32	s15, s15
 8007b32:	e790      	b.n	8007a56 <__kernel_rem_pio2f+0x40e>

08007b34 <__kernel_sinf>:
 8007b34:	ee10 3a10 	vmov	r3, s0
 8007b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007b40:	da04      	bge.n	8007b4c <__kernel_sinf+0x18>
 8007b42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007b46:	ee17 3a90 	vmov	r3, s15
 8007b4a:	b35b      	cbz	r3, 8007ba4 <__kernel_sinf+0x70>
 8007b4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007b50:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007ba8 <__kernel_sinf+0x74>
 8007b54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007bac <__kernel_sinf+0x78>
 8007b58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007bb0 <__kernel_sinf+0x7c>
 8007b60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007bb4 <__kernel_sinf+0x80>
 8007b68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007b6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007bb8 <__kernel_sinf+0x84>
 8007b70:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007b74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b78:	b930      	cbnz	r0, 8007b88 <__kernel_sinf+0x54>
 8007b7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007bbc <__kernel_sinf+0x88>
 8007b7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b82:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007b86:	4770      	bx	lr
 8007b88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007b90:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b98:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007bc0 <__kernel_sinf+0x8c>
 8007b9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007ba0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	2f2ec9d3 	.word	0x2f2ec9d3
 8007bac:	b2d72f34 	.word	0xb2d72f34
 8007bb0:	3638ef1b 	.word	0x3638ef1b
 8007bb4:	b9500d01 	.word	0xb9500d01
 8007bb8:	3c088889 	.word	0x3c088889
 8007bbc:	be2aaaab 	.word	0xbe2aaaab
 8007bc0:	3e2aaaab 	.word	0x3e2aaaab

08007bc4 <fabsf>:
 8007bc4:	ee10 3a10 	vmov	r3, s0
 8007bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	ee00 3a10 	vmov	s0, r3
 8007bd0:	4770      	bx	lr
	...

08007bd4 <floorf>:
 8007bd4:	ee10 3a10 	vmov	r3, s0
 8007bd8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007bdc:	3a7f      	subs	r2, #127	; 0x7f
 8007bde:	2a16      	cmp	r2, #22
 8007be0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007be4:	dc2a      	bgt.n	8007c3c <floorf+0x68>
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	da11      	bge.n	8007c0e <floorf+0x3a>
 8007bea:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c4c <floorf+0x78>
 8007bee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	dd05      	ble.n	8007c08 <floorf+0x34>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da23      	bge.n	8007c48 <floorf+0x74>
 8007c00:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <floorf+0x7c>)
 8007c02:	2900      	cmp	r1, #0
 8007c04:	bf18      	it	ne
 8007c06:	4613      	movne	r3, r2
 8007c08:	ee00 3a10 	vmov	s0, r3
 8007c0c:	4770      	bx	lr
 8007c0e:	4911      	ldr	r1, [pc, #68]	; (8007c54 <floorf+0x80>)
 8007c10:	4111      	asrs	r1, r2
 8007c12:	420b      	tst	r3, r1
 8007c14:	d0fa      	beq.n	8007c0c <floorf+0x38>
 8007c16:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c4c <floorf+0x78>
 8007c1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c1e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c26:	ddef      	ble.n	8007c08 <floorf+0x34>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bfbe      	ittt	lt
 8007c2c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007c30:	fa40 f202 	asrlt.w	r2, r0, r2
 8007c34:	189b      	addlt	r3, r3, r2
 8007c36:	ea23 0301 	bic.w	r3, r3, r1
 8007c3a:	e7e5      	b.n	8007c08 <floorf+0x34>
 8007c3c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c40:	d3e4      	bcc.n	8007c0c <floorf+0x38>
 8007c42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c46:	4770      	bx	lr
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e7dd      	b.n	8007c08 <floorf+0x34>
 8007c4c:	7149f2ca 	.word	0x7149f2ca
 8007c50:	bf800000 	.word	0xbf800000
 8007c54:	007fffff 	.word	0x007fffff

08007c58 <scalbnf>:
 8007c58:	ee10 3a10 	vmov	r3, s0
 8007c5c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c60:	d025      	beq.n	8007cae <scalbnf+0x56>
 8007c62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c66:	d302      	bcc.n	8007c6e <scalbnf+0x16>
 8007c68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c6c:	4770      	bx	lr
 8007c6e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c72:	d122      	bne.n	8007cba <scalbnf+0x62>
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <scalbnf+0xc8>)
 8007c76:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007d24 <scalbnf+0xcc>
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c80:	db16      	blt.n	8007cb0 <scalbnf+0x58>
 8007c82:	ee10 3a10 	vmov	r3, s0
 8007c86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c8a:	3a19      	subs	r2, #25
 8007c8c:	4402      	add	r2, r0
 8007c8e:	2afe      	cmp	r2, #254	; 0xfe
 8007c90:	dd15      	ble.n	8007cbe <scalbnf+0x66>
 8007c92:	ee10 3a10 	vmov	r3, s0
 8007c96:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007d28 <scalbnf+0xd0>
 8007c9a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007d2c <scalbnf+0xd4>
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	eeb0 7a67 	vmov.f32	s14, s15
 8007ca4:	bfb8      	it	lt
 8007ca6:	eef0 7a66 	vmovlt.f32	s15, s13
 8007caa:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007cae:	4770      	bx	lr
 8007cb0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007d30 <scalbnf+0xd8>
 8007cb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cb8:	4770      	bx	lr
 8007cba:	0dd2      	lsrs	r2, r2, #23
 8007cbc:	e7e6      	b.n	8007c8c <scalbnf+0x34>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	dd06      	ble.n	8007cd0 <scalbnf+0x78>
 8007cc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cc6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cca:	ee00 3a10 	vmov	s0, r3
 8007cce:	4770      	bx	lr
 8007cd0:	f112 0f16 	cmn.w	r2, #22
 8007cd4:	da1a      	bge.n	8007d0c <scalbnf+0xb4>
 8007cd6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cda:	4298      	cmp	r0, r3
 8007cdc:	ee10 3a10 	vmov	r3, s0
 8007ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce4:	dd0a      	ble.n	8007cfc <scalbnf+0xa4>
 8007ce6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007d28 <scalbnf+0xd0>
 8007cea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007d2c <scalbnf+0xd4>
 8007cee:	eef0 7a40 	vmov.f32	s15, s0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bf18      	it	ne
 8007cf6:	eeb0 0a47 	vmovne.f32	s0, s14
 8007cfa:	e7db      	b.n	8007cb4 <scalbnf+0x5c>
 8007cfc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007d30 <scalbnf+0xd8>
 8007d00:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007d34 <scalbnf+0xdc>
 8007d04:	eef0 7a40 	vmov.f32	s15, s0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	e7f3      	b.n	8007cf4 <scalbnf+0x9c>
 8007d0c:	3219      	adds	r2, #25
 8007d0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d16:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d38 <scalbnf+0xe0>
 8007d1a:	ee07 3a10 	vmov	s14, r3
 8007d1e:	e7c4      	b.n	8007caa <scalbnf+0x52>
 8007d20:	ffff3cb0 	.word	0xffff3cb0
 8007d24:	4c000000 	.word	0x4c000000
 8007d28:	7149f2ca 	.word	0x7149f2ca
 8007d2c:	f149f2ca 	.word	0xf149f2ca
 8007d30:	0da24260 	.word	0x0da24260
 8007d34:	8da24260 	.word	0x8da24260
 8007d38:	33000000 	.word	0x33000000

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
