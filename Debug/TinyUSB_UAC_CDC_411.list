
TinyUSB_UAC_CDC_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005218  08005218  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08005220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000048  08005268  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  08005268  00021b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b774  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e6  00000000  00000000  0003b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000156c2  00000000  00000000  0003f8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  00054f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003540  00000000  00000000  00055aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dc4  00000000  00000000  00058fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017851  00000000  00000000  00071dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000993ad  00000000  00000000  000895fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001229aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ee0  00000000  00000000  001229fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004fb0 	.word	0x08004fb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	08004fb0 	.word	0x08004fb0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <tud_mount_cb>:
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
	blink_interval_ms = BLINK_MOUNTED;
 80004ec:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <tud_mount_cb+0xc>)
 80004ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000004 	.word	0x20000004

080004fc <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
	blink_interval_ms = BLINK_NOT_MOUNTED;
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <tud_umount_cb+0x8>)
 80004fe:	22fa      	movs	r2, #250	; 0xfa
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	4770      	bx	lr
 8000504:	20000004 	.word	0x20000004

08000508 <tud_suspend_cb>:
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <tud_suspend_cb+0xc>)
 800050a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000004 	.word	0x20000004

08000518 <tud_resume_cb>:
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <tud_resume_cb+0xc>)
 800051a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000004 	.word	0x20000004

08000528 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800052a:	794d      	ldrb	r5, [r1, #5]
 800052c:	2d04      	cmp	r5, #4
{
 800052e:	b08f      	sub	sp, #60	; 0x3c
 8000530:	460c      	mov	r4, r1
 8000532:	4606      	mov	r6, r0
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000534:	d004      	beq.n	8000540 <tud_audio_get_req_entity_cb+0x18>
		return tud_audio_clock_get_request(rhport, request);
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000536:	2d02      	cmp	r5, #2
 8000538:	d010      	beq.n	800055c <tud_audio_get_req_entity_cb+0x34>
	return false;
 800053a:	2000      	movs	r0, #0
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
}
 800053c:	b00f      	add	sp, #60	; 0x3c
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8000540:	78cf      	ldrb	r7, [r1, #3]
 8000542:	2f01      	cmp	r7, #1
 8000544:	d01e      	beq.n	8000584 <tud_audio_get_req_entity_cb+0x5c>
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000546:	2f02      	cmp	r7, #2
 8000548:	d1f7      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
 800054a:	784b      	ldrb	r3, [r1, #1]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d1f4      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8000550:	aa01      	add	r2, sp, #4
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8000552:	f88d 3004 	strb.w	r3, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8000556:	f001 fe0d 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 800055a:	e7ef      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 800055c:	78cb      	ldrb	r3, [r1, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d04c      	beq.n	80005fc <tud_audio_get_req_entity_cb+0xd4>
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000562:	2b02      	cmp	r3, #2
 8000564:	d1e9      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000566:	784a      	ldrb	r2, [r1, #1]
 8000568:	2a02      	cmp	r2, #2
 800056a:	d05b      	beq.n	8000624 <tud_audio_get_req_entity_cb+0xfc>
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 800056c:	2a01      	cmp	r2, #1
 800056e:	d1e4      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8000570:	788c      	ldrb	r4, [r1, #2]
 8000572:	4a32      	ldr	r2, [pc, #200]	; (800063c <tud_audio_get_req_entity_cb+0x114>)
 8000574:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
 8000578:	f8ad 4004 	strh.w	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 800057c:	aa01      	add	r2, sp, #4
 800057e:	f001 fdf9 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 8000582:	e7db      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000584:	784b      	ldrb	r3, [r1, #1]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d044      	beq.n	8000614 <tud_audio_get_req_entity_cb+0xec>
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1d5      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 800058e:	222a      	movs	r2, #42	; 0x2a
 8000590:	2100      	movs	r1, #0
 8000592:	a803      	add	r0, sp, #12
 8000594:	f004 fd04 	bl	8004fa0 <memset>
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8000598:	2300      	movs	r3, #0
 800059a:	f645 0288 	movw	r2, #22664	; 0x5888
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 800059e:	4621      	mov	r1, r4
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80005a4:	f64a 4444 	movw	r4, #44100	; 0xac44
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005a8:	f8ad 300c 	strh.w	r3, [sp, #12]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005ac:	f8ad 3014 	strh.w	r3, [sp, #20]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005b0:	f8ad 3018 	strh.w	r3, [sp, #24]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005b4:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
 80005b8:	f8ad 201e 	strh.w	r2, [sp, #30]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005bc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005c4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005c8:	f8ad 4006 	strh.w	r4, [sp, #6]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005cc:	f8ad 400a 	strh.w	r4, [sp, #10]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80005d0:	4630      	mov	r0, r6
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005d2:	f64b 3480 	movw	r4, #48000	; 0xbb80
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80005d6:	2332      	movs	r3, #50	; 0x32
 80005d8:	aa01      	add	r2, sp, #4
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 80005da:	f8ad 5004 	strh.w	r5, [sp, #4]
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005de:	f8ad 7020 	strh.w	r7, [sp, #32]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005e2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005e6:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005ea:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 80005ee:	f8ad 4012 	strh.w	r4, [sp, #18]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80005f2:	f8ad 4016 	strh.w	r4, [sp, #22]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 80005f6:	f001 fdbd 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 80005fa:	e79f      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80005fc:	784b      	ldrb	r3, [r1, #1]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d19b      	bne.n	800053a <tud_audio_get_req_entity_cb+0x12>
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000602:	788a      	ldrb	r2, [r1, #2]
 8000604:	4c0e      	ldr	r4, [pc, #56]	; (8000640 <tud_audio_get_req_entity_cb+0x118>)
 8000606:	5ca4      	ldrb	r4, [r4, r2]
 8000608:	f88d 4004 	strb.w	r4, [sp, #4]
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800060c:	aa01      	add	r2, sp, #4
 800060e:	f001 fdb1 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 8000612:	e793      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <tud_audio_get_req_entity_cb+0x11c>)
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000616:	462b      	mov	r3, r5
			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 8000618:	6814      	ldr	r4, [r2, #0]
 800061a:	9401      	str	r4, [sp, #4]
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 800061c:	aa01      	add	r2, sp, #4
 800061e:	f001 fda9 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 8000622:	e78b      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
			audio_control_range_2_n_t(1) range_vol = {
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <tud_audio_get_req_entity_cb+0x120>)
 8000626:	e893 0003 	ldmia.w	r3, {r0, r1}
 800062a:	aa01      	add	r2, sp, #4
 800062c:	e882 0003 	stmia.w	r2, {r0, r1}
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 8000630:	2308      	movs	r3, #8
 8000632:	4621      	mov	r1, r4
 8000634:	4630      	mov	r0, r6
 8000636:	f001 fd9d 	bl	8002174 <tud_audio_buffer_and_schedule_control_xfer>
 800063a:	e77f      	b.n	800053c <tud_audio_get_req_entity_cb+0x14>
 800063c:	20000ea4 	.word	0x20000ea4
 8000640:	20000888 	.word	0x20000888
 8000644:	20000008 	.word	0x20000008
 8000648:	08004fc8 	.word	0x08004fc8

0800064c <tud_audio_set_req_entity_cb>:
// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 800064c:	794b      	ldrb	r3, [r1, #5]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d010      	beq.n	8000674 <tud_audio_set_req_entity_cb+0x28>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000652:	2b04      	cmp	r3, #4
 8000654:	d001      	beq.n	800065a <tud_audio_set_req_entity_cb+0xe>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8000656:	2000      	movs	r0, #0
		return tud_audio_clock_set_request(rhport, request, buf);
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
}
 8000658:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 800065a:	784b      	ldrb	r3, [r1, #1]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d1fa      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8000660:	78c8      	ldrb	r0, [r1, #3]
 8000662:	2801      	cmp	r0, #1
 8000664:	d1f7      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8000666:	88cb      	ldrh	r3, [r1, #6]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d1f4      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <tud_audio_set_req_entity_cb+0x64>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	601a      	str	r2, [r3, #0]
		return true;
 8000672:	4770      	bx	lr
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8000674:	7848      	ldrb	r0, [r1, #1]
 8000676:	2801      	cmp	r0, #1
 8000678:	d1ed      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 800067a:	78cb      	ldrb	r3, [r1, #3]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00b      	beq.n	8000698 <tud_audio_set_req_entity_cb+0x4c>
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000680:	2b02      	cmp	r3, #2
 8000682:	d1e8      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 8000684:	88cb      	ldrh	r3, [r1, #6]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d1e5      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <tud_audio_set_req_entity_cb+0x68>)
 800068c:	7889      	ldrb	r1, [r1, #2]
 800068e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000692:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		return true;
 8000696:	4770      	bx	lr
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 8000698:	88c8      	ldrh	r0, [r1, #6]
 800069a:	2801      	cmp	r0, #1
 800069c:	d1db      	bne.n	8000656 <tud_audio_set_req_entity_cb+0xa>
{
 800069e:	b410      	push	{r4}
		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 80006a0:	4c05      	ldr	r4, [pc, #20]	; (80006b8 <tud_audio_set_req_entity_cb+0x6c>)
 80006a2:	788b      	ldrb	r3, [r1, #2]
 80006a4:	f992 2000 	ldrsb.w	r2, [r2]
 80006a8:	54e2      	strb	r2, [r4, r3]
}
 80006aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000ea4 	.word	0x20000ea4
 80006b8:	20000888 	.word	0x20000888

080006bc <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 80006bc:	888b      	ldrh	r3, [r1, #4]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d001      	beq.n	80006c8 <tud_audio_set_itf_close_EP_cb+0xc>
		blink_interval_ms = BLINK_MOUNTED;

	return true;
}
 80006c4:	2001      	movs	r0, #1
 80006c6:	4770      	bx	lr
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 80006c8:	884b      	ldrh	r3, [r1, #2]
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f9      	bne.n	80006c4 <tud_audio_set_itf_close_EP_cb+0x8>
		blink_interval_ms = BLINK_MOUNTED;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <tud_audio_set_itf_close_EP_cb+0x20>)
 80006d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	2001      	movs	r0, #1
 80006da:	4770      	bx	lr
 80006dc:	20000004 	.word	0x20000004

080006e0 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80006e0:	b410      	push	{r4}
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 80006e2:	888a      	ldrh	r2, [r1, #4]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 80006e4:	884b      	ldrh	r3, [r1, #2]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	2a01      	cmp	r2, #1

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	d00d      	beq.n	800070a <tud_audio_set_itf_cb+0x2a>
		blink_interval_ms = BLINK_STREAMING;

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 80006ee:	4a11      	ldr	r2, [pc, #68]	; (8000734 <tud_audio_set_itf_cb+0x54>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	6011      	str	r1, [r2, #0]
	if(alt != 0)
 80006f4:	b12b      	cbz	r3, 8000702 <tud_audio_set_itf_cb+0x22>
	{
		current_resolution = resolutions_per_format[alt-1];
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <tud_audio_set_itf_cb+0x58>)
 80006f8:	4910      	ldr	r1, [pc, #64]	; (800073c <tud_audio_set_itf_cb+0x5c>)
 80006fa:	4413      	add	r3, r2
 80006fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000700:	700b      	strb	r3, [r1, #0]
	}

	return true;
}
 8000702:	2001      	movs	r0, #1
 8000704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000708:	4770      	bx	lr
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 800070a:	b163      	cbz	r3, 8000726 <tud_audio_set_itf_cb+0x46>
	spk_data_size = 0;
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <tud_audio_set_itf_cb+0x54>)
		blink_interval_ms = BLINK_STREAMING;
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <tud_audio_set_itf_cb+0x60>)
	spk_data_size = 0;
 8000710:	2100      	movs	r1, #0
 8000712:	6011      	str	r1, [r2, #0]
		current_resolution = resolutions_per_format[alt-1];
 8000714:	4a08      	ldr	r2, [pc, #32]	; (8000738 <tud_audio_set_itf_cb+0x58>)
 8000716:	4909      	ldr	r1, [pc, #36]	; (800073c <tud_audio_set_itf_cb+0x5c>)
 8000718:	4413      	add	r3, r2
		blink_interval_ms = BLINK_STREAMING;
 800071a:	2419      	movs	r4, #25
		current_resolution = resolutions_per_format[alt-1];
 800071c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
		blink_interval_ms = BLINK_STREAMING;
 8000720:	6004      	str	r4, [r0, #0]
		current_resolution = resolutions_per_format[alt-1];
 8000722:	700b      	strb	r3, [r1, #0]
 8000724:	e7ed      	b.n	8000702 <tud_audio_set_itf_cb+0x22>
	spk_data_size = 0;
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <tud_audio_set_itf_cb+0x54>)
}
 8000728:	f85d 4b04 	ldr.w	r4, [sp], #4
	spk_data_size = 0;
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	2001      	movs	r0, #1
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000e9c 	.word	0x20000e9c
 8000738:	08004fdc 	.word	0x08004fdc
 800073c:	2000006c 	.word	0x2000006c
 8000740:	20000004 	.word	0x20000004

08000744 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 8000744:	b508      	push	{r3, lr}
 8000746:	460a      	mov	r2, r1
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
  return tud_audio_n_read(0, buffer, bufsize);
 8000748:	2000      	movs	r0, #0
 800074a:	4904      	ldr	r1, [pc, #16]	; (800075c <tud_audio_rx_done_pre_read_cb+0x18>)
 800074c:	f001 f9d4 	bl	8001af8 <tud_audio_n_read>
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <tud_audio_rx_done_pre_read_cb+0x1c>)
 8000752:	4602      	mov	r2, r0
 8000754:	601a      	str	r2, [r3, #0]
	return true;
}
 8000756:	2001      	movs	r0, #1
 8000758:	bd08      	pop	{r3, pc}
 800075a:	bf00      	nop
 800075c:	2000088c 	.word	0x2000088c
 8000760:	20000e9c 	.word	0x20000e9c

08000764 <tud_audio_tx_done_pre_load_cb>:
  (void) cur_alt_setting;



  return true;
}
 8000764:	2001      	movs	r0, #1
 8000766:	4770      	bx	lr

08000768 <tud_audio_tx_done_post_load_cb>:
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	static uint16_t LastBytesCopied;
	int16_t *dst = (int16_t*)mic_buf;
	if (n_bytes_copied != 96 && n_bytes_copied != 0)
 8000768:	2960      	cmp	r1, #96	; 0x60
{
 800076a:	b538      	push	{r3, r4, r5, lr}
	if (n_bytes_copied != 96 && n_bytes_copied != 0)
 800076c:	d000      	beq.n	8000770 <tud_audio_tx_done_post_load_cb+0x8>
 800076e:	bb59      	cbnz	r1, 80007c8 <tud_audio_tx_done_post_load_cb+0x60>
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <tud_audio_tx_done_post_load_cb+0x64>)
 8000772:	4817      	ldr	r0, [pc, #92]	; (80007d0 <tud_audio_tx_done_post_load_cb+0x68>)
	}
#if 1
	for (uint16_t i = 0; i < 48000/1000; i++ )
	{
		//	*dst ++ = (int16_t)(20000.0f * (float)sinf((float)(432.0f * 6.28f * AudioCounter++ / 48000)));
		*dst ++ = (int16_t)(-10000 + (AudioCounter+=500) % 20000);
 8000774:	4c17      	ldr	r4, [pc, #92]	; (80007d4 <tud_audio_tx_done_post_load_cb+0x6c>)
 8000776:	f101 0e60 	add.w	lr, r1, #96	; 0x60
 800077a:	f644 6c20 	movw	ip, #20000	; 0x4e20
 800077e:	6802      	ldr	r2, [r0, #0]
 8000780:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8000784:	fba4 5302 	umull	r5, r3, r4, r2
 8000788:	0b9b      	lsrs	r3, r3, #14
 800078a:	fb0c 2313 	mls	r3, ip, r3, r2
 800078e:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000792:	3b10      	subs	r3, #16
 8000794:	f821 3b02 	strh.w	r3, [r1], #2
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000798:	4571      	cmp	r1, lr
		*dst ++ = (int16_t)(-10000 + (AudioCounter+=500) % 20000);
 800079a:	6002      	str	r2, [r0, #0]
	for (uint16_t i = 0; i < 48000/1000; i++ )
 800079c:	d1ef      	bne.n	800077e <tud_audio_tx_done_post_load_cb+0x16>
	 * @brief  This function provides a delay (in microseconds)
	 * @param  microseconds: delay in microseconds
	 */
	__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
	{
		uint32_t clk_cycle_start = DWT->CYCCNT;
 800079e:	4c0e      	ldr	r4, [pc, #56]	; (80007d8 <tud_audio_tx_done_post_load_cb+0x70>)

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
  return tud_audio_n_write(0, data, len);
 80007a0:	490a      	ldr	r1, [pc, #40]	; (80007cc <tud_audio_tx_done_post_load_cb+0x64>)
 80007a2:	2260      	movs	r2, #96	; 0x60
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 f9b3 	bl	8001b10 <tud_audio_n_write>
 80007aa:	6865      	ldr	r5, [r4, #4]

		/* Go to number of cycles for system */
		microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80007ac:	f000 ff54 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <tud_audio_tx_done_post_load_cb+0x74>)
 80007b2:	fba3 2300 	umull	r2, r3, r3, r0
 80007b6:	0c9b      	lsrs	r3, r3, #18
 80007b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80007bc:	fb03 f202 	mul.w	r2, r3, r2

		/* Delay till end */
		while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80007c0:	6863      	ldr	r3, [r4, #4]
 80007c2:	1b5b      	subs	r3, r3, r5
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d3fb      	bcc.n	80007c0 <tud_audio_tx_done_post_load_cb+0x58>
}
 80007c8:	2001      	movs	r0, #1
 80007ca:	bd38      	pop	{r3, r4, r5, pc}
 80007cc:	20000580 	.word	0x20000580
 80007d0:	20000064 	.word	0x20000064
 80007d4:	d1b71759 	.word	0xd1b71759
 80007d8:	e0001000 	.word	0xe0001000
 80007dc:	431bde83 	.word	0x431bde83

080007e0 <tud_cdc_line_state_cb>:
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <tud_cdc_rx_cb>:
}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <cdc_task>:
{
 80007e8:	b510      	push	{r4, lr}
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
 80007ea:	2000      	movs	r0, #0
 80007ec:	b090      	sub	sp, #64	; 0x40
 80007ee:	f001 fd49 	bl	8002284 <tud_cdc_n_connected>
	if ( tud_cdc_connected() )
 80007f2:	b130      	cbz	r0, 8000802 <cdc_task+0x1a>
		if (SendGreetings && tud_cdc_write_available())
 80007f4:	4c13      	ldr	r4, [pc, #76]	; (8000844 <cdc_task+0x5c>)
 80007f6:	7823      	ldrb	r3, [r4, #0]
 80007f8:	b9a3      	cbnz	r3, 8000824 <cdc_task+0x3c>
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f001 fd58 	bl	80022b0 <tud_cdc_n_available>
		if ( tud_cdc_available() )
 8000800:	b908      	cbnz	r0, 8000806 <cdc_task+0x1e>
}
 8000802:	b010      	add	sp, #64	; 0x40
 8000804:	bd10      	pop	{r4, pc}
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
 8000806:	4669      	mov	r1, sp
 8000808:	2240      	movs	r2, #64	; 0x40
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fd5c 	bl	80022c8 <tud_cdc_n_read>
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
 8000810:	4669      	mov	r1, sp
  return tud_cdc_n_read(0, buffer, bufsize);
 8000812:	4602      	mov	r2, r0
  return tud_cdc_n_write(0, buffer, bufsize);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fdd5 	bl	80023c4 <tud_cdc_n_write>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
 800081a:	2000      	movs	r0, #0
 800081c:	f001 fd90 	bl	8002340 <tud_cdc_n_write_flush>
 8000820:	b010      	add	sp, #64	; 0x40
 8000822:	bd10      	pop	{r4, pc}
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
 8000824:	2000      	movs	r0, #0
 8000826:	f001 fde9 	bl	80023fc <tud_cdc_n_write_available>
		if (SendGreetings && tud_cdc_write_available())
 800082a:	2800      	cmp	r0, #0
 800082c:	d0e5      	beq.n	80007fa <cdc_task+0x12>
  return tud_cdc_n_write(0, buffer, bufsize);
 800082e:	4906      	ldr	r1, [pc, #24]	; (8000848 <cdc_task+0x60>)
 8000830:	2208      	movs	r2, #8
 8000832:	2000      	movs	r0, #0
 8000834:	f001 fdc6 	bl	80023c4 <tud_cdc_n_write>
  return tud_cdc_n_write_flush(0);
 8000838:	2000      	movs	r0, #0
 800083a:	f001 fd81 	bl	8002340 <tud_cdc_n_write_flush>
			SendGreetings = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	7023      	strb	r3, [r4, #0]
 8000842:	e7da      	b.n	80007fa <cdc_task+0x12>
 8000844:	20000000 	.word	0x20000000
 8000848:	08004fd0 	.word	0x08004fd0

0800084c <DWT_Delay_Init>:
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <DWT_Delay_Init+0x40>)
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <DWT_Delay_Init+0x44>)
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000850:	f8d2 10fc 	ldr.w	r1, [r2, #252]	; 0xfc
 8000854:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000858:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800085c:	f8d2 10fc 	ldr.w	r1, [r2, #252]	; 0xfc
 8000860:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000864:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f022 0201 	bic.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000870:	681a      	ldr	r2, [r3, #0]
	DWT->CYCCNT = 0;
 8000872:	2000      	movs	r0, #0
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000874:	f042 0201 	orr.w	r2, r2, #1
 8000878:	601a      	str	r2, [r3, #0]
	DWT->CYCCNT = 0;
 800087a:	6058      	str	r0, [r3, #4]
	asm("NOP");
 800087c:	bf00      	nop
	asm("NOP");
 800087e:	bf00      	nop
	asm("NOP");
 8000880:	bf00      	nop
	if(DWT->CYCCNT)
 8000882:	6858      	ldr	r0, [r3, #4]
}
 8000884:	fab0 f080 	clz	r0, r0
 8000888:	0940      	lsrs	r0, r0, #5
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e0001000 	.word	0xe0001000
 8000894:	00000000 	.word	0x00000000

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	2300      	movs	r3, #0
{
 800089c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80008a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80008aa:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4926      	ldr	r1, [pc, #152]	; (8000948 <SystemClock_Config+0xb0>)
 80008b0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80008bc:	6408      	str	r0, [r1, #64]	; 0x40
 80008be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80008c0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80008c4:	9100      	str	r1, [sp, #0]
 80008c6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000930 <SystemClock_Config+0x98>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008de:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e4:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ea:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f0:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f2:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f6:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fa:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f000 fbf5 	bl	80010ec <HAL_RCC_OscConfig>
 8000902:	b108      	cbz	r0, 8000908 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8000906:	e7fe      	b.n	8000906 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000938 <SystemClock_Config+0xa0>
 800090c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000910:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000940 <SystemClock_Config+0xa8>
 8000914:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000916:	2103      	movs	r1, #3
 8000918:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000920:	f000 fdfc 	bl	800151c <HAL_RCC_ClockConfig>
 8000924:	b108      	cbz	r0, 800092a <SystemClock_Config+0x92>
 8000926:	b672      	cpsid	i
		while (1)
 8000928:	e7fe      	b.n	8000928 <SystemClock_Config+0x90>
}
 800092a:	b014      	add	sp, #80	; 0x50
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	00000001 	.word	0x00000001
 8000934:	00010000 	.word	0x00010000
 8000938:	0000000f 	.word	0x0000000f
 800093c:	00000002 	.word	0x00000002
 8000940:	00000000 	.word	0x00000000
 8000944:	00001000 	.word	0x00001000
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <main>:
{
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	b083      	sub	sp, #12
  HAL_Init();
 8000954:	f000 f990 	bl	8000c78 <HAL_Init>
  SystemClock_Config();
 8000958:	f7ff ff9e 	bl	8000898 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095c:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <main+0xfc>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095e:	483c      	ldr	r0, [pc, #240]	; (8000a50 <main+0x100>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	2200      	movs	r2, #0
 8000962:	9200      	str	r2, [sp, #0]
 8000964:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000966:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800096a:	6319      	str	r1, [r3, #48]	; 0x30
 800096c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800096e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000972:	9100      	str	r1, [sp, #0]
 8000974:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	6b19      	ldr	r1, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800097a:	6102      	str	r2, [r0, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	f041 0101 	orr.w	r1, r1, #1
 8000980:	6319      	str	r1, [r3, #48]	; 0x30
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000988:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800098c:	2204      	movs	r2, #4
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800098e:	2500      	movs	r5, #0
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000990:	e9c0 4200 	strd	r4, r2, [r0]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000994:	2402      	movs	r4, #2
 8000996:	e9c0 4506 	strd	r4, r5, [r0, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	f003 0301 	and.w	r3, r3, #1
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099e:	2400      	movs	r4, #0
 80009a0:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	9301      	str	r3, [sp, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a4:	e9c0 4508 	strd	r4, r5, [r0, #32]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a8:	2302      	movs	r3, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	9901      	ldr	r1, [sp, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ac:	60c3      	str	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ae:	f000 fb0f 	bl	8000fd0 <HAL_PCD_Init>
 80009b2:	b108      	cbz	r0, 80009b8 <main+0x68>
 80009b4:	b672      	cpsid	i
		while (1)
 80009b6:	e7fe      	b.n	80009b6 <main+0x66>
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80009b8:	4602      	mov	r2, r0
 80009ba:	4601      	mov	r1, r0
 80009bc:	2043      	movs	r0, #67	; 0x43
 80009be:	f000 f9ab 	bl	8000d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80009c2:	2043      	movs	r0, #67	; 0x43
 80009c4:	f000 f9e6 	bl	8000d94 <HAL_NVIC_EnableIRQ>
		if(DWT_Delay_Init())
 80009c8:	f7ff ff40 	bl	800084c <DWT_Delay_Init>
 80009cc:	4604      	mov	r4, r0
 80009ce:	b108      	cbz	r0, 80009d4 <main+0x84>
 80009d0:	b672      	cpsid	i
		while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x82>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2201      	movs	r2, #1
 80009da:	481e      	ldr	r0, [pc, #120]	; (8000a54 <main+0x104>)
 80009dc:	f000 faf4 	bl	8000fc8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009e0:	2064      	movs	r0, #100	; 0x64
 80009e2:	f000 f975 	bl	8000cd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <main+0x104>)
 80009e8:	4622      	mov	r2, r4
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	f000 faeb 	bl	8000fc8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009f2:	2064      	movs	r0, #100	; 0x64
 80009f4:	f000 f96c 	bl	8000cd0 <HAL_Delay>
		TU_ASSERT(tusb_init());
 80009f8:	f004 fa0a 	bl	8004e10 <tusb_init>
 80009fc:	b1d8      	cbz	r0, 8000a36 <main+0xe6>
 80009fe:	4c16      	ldr	r4, [pc, #88]	; (8000a58 <main+0x108>)
 8000a00:	4e16      	ldr	r6, [pc, #88]	; (8000a5c <main+0x10c>)
 8000a02:	4f17      	ldr	r7, [pc, #92]	; (8000a60 <main+0x110>)
 8000a04:	4d17      	ldr	r5, [pc, #92]	; (8000a64 <main+0x114>)

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000a06:	2100      	movs	r1, #0
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f002 fb06 	bl	800301c <tud_task_ext>
			MainLoopCounter++;  //used with debugger to check frequency of main loop
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	6023      	str	r3, [r4, #0]
			cdc_task();
 8000a16:	f7ff fee7 	bl	80007e8 <cdc_task>
	return HAL_GetTick();
 8000a1a:	f000 f953 	bl	8000cc4 <HAL_GetTick>
	if (board_millis() - start_ms < blink_interval_ms) return;
 8000a1e:	6833      	ldr	r3, [r6, #0]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	1ac0      	subs	r0, r0, r3
 8000a24:	4290      	cmp	r0, r2
	start_ms += blink_interval_ms;
 8000a26:	4413      	add	r3, r2
	if (board_millis() - start_ms < blink_interval_ms) return;
 8000a28:	d3ed      	bcc.n	8000a06 <main+0xb6>
	led_state = 1 - led_state;
 8000a2a:	782a      	ldrb	r2, [r5, #0]
	start_ms += blink_interval_ms;
 8000a2c:	6033      	str	r3, [r6, #0]
	led_state = 1 - led_state;
 8000a2e:	f082 0301 	eor.w	r3, r2, #1
 8000a32:	702b      	strb	r3, [r5, #0]
 8000a34:	e7e7      	b.n	8000a06 <main+0xb6>
		TU_ASSERT(tusb_init());
 8000a36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a3a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000a3e:	07db      	lsls	r3, r3, #31
 8000a40:	d500      	bpl.n	8000a44 <main+0xf4>
 8000a42:	be00      	bkpt	0x0000
}
 8000a44:	2000      	movs	r0, #0
 8000a46:	b003      	add	sp, #12
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	20000070 	.word	0x20000070
 8000a54:	40020000 	.word	0x40020000
 8000a58:	20000068 	.word	0x20000068
 8000a5c:	20000ea0 	.word	0x20000ea0
 8000a60:	20000004 	.word	0x20000004
 8000a64:	2000057c 	.word	0x2000057c

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x34>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	9100      	str	r1, [sp, #0]
 8000a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a76:	645a      	str	r2, [r3, #68]	; 0x44
 8000a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a7a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	9101      	str	r1, [sp, #4]
 8000a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	b002      	add	sp, #8
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hpcd->Instance==USB_OTG_FS)
 8000aa2:	6803      	ldr	r3, [r0, #0]
{
 8000aa4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	2400      	movs	r4, #0
  if(hpcd->Instance==USB_OTG_FS)
 8000aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000ab0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000ab4:	9406      	str	r4, [sp, #24]
  if(hpcd->Instance==USB_OTG_FS)
 8000ab6:	d001      	beq.n	8000abc <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ab8:	b009      	add	sp, #36	; 0x24
 8000aba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4d13      	ldr	r5, [pc, #76]	; (8000b0c <HAL_PCD_MspInit+0x6c>)
 8000abe:	9400      	str	r4, [sp, #0]
 8000ac0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <HAL_PCD_MspInit+0x70>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	632b      	str	r3, [r5, #48]	; 0x30
 8000aca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f000 f97c 	bl	8000de4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af2:	636b      	str	r3, [r5, #52]	; 0x34
 8000af4:	9401      	str	r4, [sp, #4]
 8000af6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	646b      	str	r3, [r5, #68]	; 0x44
 8000afe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	9b01      	ldr	r3, [sp, #4]
}
 8000b08:	b009      	add	sp, #36	; 0x24
 8000b0a:	bd30      	pop	{r4, r5, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler>
 8000b16:	bf00      	nop

08000b18 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <HardFault_Handler>
 8000b1a:	bf00      	nop

08000b1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler>
 8000b1e:	bf00      	nop

08000b20 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <BusFault_Handler>
 8000b22:	bf00      	nop

08000b24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler>
 8000b26:	bf00      	nop

08000b28 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <DebugMon_Handler>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <PendSV_Handler>:
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 b8ba 	b.w	8000cac <HAL_IncTick>

08000b38 <OTG_FS_IRQHandler>:
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f003 bde5 	b.w	8004708 <dcd_int_handler>
 8000b3e:	bf00      	nop

08000b40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SystemInit+0x18>)
 8000b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000b46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000b52:	6099      	str	r1, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
	return (uint8_t const *)&desc_device;
}
 8000b5c:	4800      	ldr	r0, [pc, #0]	; (8000b60 <tud_descriptor_device_cb+0x4>)
 8000b5e:	4770      	bx	lr
 8000b60:	080051cc 	.word	0x080051cc

08000b64 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
	(void)index; // for multiple configurations
	return desc_configuration;
}
 8000b64:	4800      	ldr	r0, [pc, #0]	; (8000b68 <tud_descriptor_configuration_cb+0x4>)
 8000b66:	4770      	bx	lr
 8000b68:	08005048 	.word	0x08005048

08000b6c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8000b6e:	b948      	cbnz	r0, 8000b84 <tud_descriptor_string_cb+0x18>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <tud_descriptor_string_cb+0x68>)
 8000b72:	4d19      	ldr	r5, [pc, #100]	; (8000bd8 <tud_descriptor_string_cb+0x6c>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	8812      	ldrh	r2, [r2, #0]
 8000b78:	806a      	strh	r2, [r5, #2]
		chr_count = 1;
 8000b7a:	f44f 7341 	mov.w	r3, #772	; 0x304
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));

	return _desc_str;
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000b80:	802b      	strh	r3, [r5, #0]
}
 8000b82:	bd38      	pop	{r3, r4, r5, pc}
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8000b84:	2806      	cmp	r0, #6
 8000b86:	d81f      	bhi.n	8000bc8 <tud_descriptor_string_cb+0x5c>
		const char* str = string_desc_arr[index];
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <tud_descriptor_string_cb+0x68>)
 8000b8a:	4d13      	ldr	r5, [pc, #76]	; (8000bd8 <tud_descriptor_string_cb+0x6c>)
 8000b8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
		chr_count = (uint8_t) strlen(str);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f7ff fb21 	bl	80001d8 <strlen>
 8000b96:	b2c0      	uxtb	r0, r0
		if (chr_count > 31) chr_count = 31;
 8000b98:	281f      	cmp	r0, #31
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	bf28      	it	cs
 8000b9e:	221f      	movcs	r2, #31
		for (uint8_t i = 0; i < chr_count; i++)
 8000ba0:	b1a0      	cbz	r0, 8000bcc <tud_descriptor_string_cb+0x60>
 8000ba2:	1e60      	subs	r0, r4, #1
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	2300      	movs	r3, #0
			_desc_str[1 + i] = str[i];
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8000bb0:	f821 4f02 	strh.w	r4, [r1, #2]!
		for (uint8_t i = 0; i < chr_count; i++)
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <tud_descriptor_string_cb+0x3c>
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000bb8:	1c53      	adds	r3, r2, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
	return _desc_str;
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <tud_descriptor_string_cb+0x6c>)
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8000bc4:	802b      	strh	r3, [r5, #0]
	return _desc_str;
 8000bc6:	e7dc      	b.n	8000b82 <tud_descriptor_string_cb+0x16>
		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8000bc8:	2000      	movs	r0, #0
}
 8000bca:	bd38      	pop	{r3, r4, r5, pc}
		for (uint8_t i = 0; i < chr_count; i++)
 8000bcc:	f240 3302 	movw	r3, #770	; 0x302
 8000bd0:	e7d5      	b.n	8000b7e <tud_descriptor_string_cb+0x12>
 8000bd2:	bf00      	nop
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	20000eac 	.word	0x20000eac

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ff9b 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f004 f997 	bl	8004f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fe9f 	bl	8000950 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000c20:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 8000c24:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000c28:	20001b88 	.word	0x20001b88

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_InitTick+0x3c>)
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_InitTick+0x40>)
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
{
 8000c3a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c40:	fbb0 f0f2 	udiv	r0, r0, r2
 8000c44:	fbb3 f0f0 	udiv	r0, r3, r0
 8000c48:	f000 f8b2 	bl	8000db0 <HAL_SYSTICK_Config>
 8000c4c:	b908      	cbnz	r0, 8000c52 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	2d0f      	cmp	r5, #15
 8000c50:	d901      	bls.n	8000c56 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f85a 	bl	8000d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_InitTick+0x44>)
 8000c66:	4620      	mov	r0, r4
 8000c68:	601d      	str	r5, [r3, #0]
}
 8000c6a:	bd38      	pop	{r3, r4, r5, pc}
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	20000030 	.word	0x20000030

08000c78 <HAL_Init>:
{
 8000c78:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x30>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c92:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f82d 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f7ff ffc8 	bl	8000c30 <HAL_InitTick>
  HAL_MspInit();
 8000ca0:	f7ff fee2 	bl	8000a68 <HAL_MspInit>
}
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	bd08      	pop	{r3, pc}
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <HAL_IncTick+0x10>)
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_IncTick+0x14>)
 8000cb0:	6811      	ldr	r1, [r2, #0]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000eec 	.word	0x20000eec
 8000cc0:	2000002c 	.word	0x2000002c

08000cc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <HAL_GetTick+0x8>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000eec 	.word	0x20000eec

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff fff6 	bl	8000cc4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000cda:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000cdc:	d002      	beq.n	8000ce4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_Delay+0x20>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	1b43      	subs	r3, r0, r5
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d3fa      	bcc.n	8000ce4 <HAL_Delay+0x14>
  {
  }
}
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	2000002c 	.word	0x2000002c

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cf6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d06:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000d0e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_NVIC_SetPriority+0x74>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d22:	f1c3 0e07 	rsb	lr, r3, #7
 8000d26:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2e:	bf28      	it	cs
 8000d30:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d34:	f1bc 0f06 	cmp.w	ip, #6
 8000d38:	d91b      	bls.n	8000d72 <HAL_NVIC_SetPriority+0x5a>
 8000d3a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d40:	fa0c fc03 	lsl.w	ip, ip, r3
 8000d44:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 3cff 	mov.w	ip, #4294967295
 8000d4c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000d50:	ea21 010c 	bic.w	r1, r1, ip
 8000d54:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000d56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	db0c      	blt.n	8000d78 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d62:	0109      	lsls	r1, r1, #4
 8000d64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d68:	b2c9      	uxtb	r1, r1
 8000d6a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d72:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d74:	4613      	mov	r3, r2
 8000d76:	e7e7      	b.n	8000d48 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_NVIC_SetPriority+0x78>)
 8000d7a:	f000 000f 	and.w	r0, r0, #15
 8000d7e:	0109      	lsls	r1, r1, #4
 8000d80:	4403      	add	r3, r0
 8000d82:	b2c9      	uxtb	r1, r1
 8000d84:	7619      	strb	r1, [r3, #24]
 8000d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	e000ecfc 	.word	0xe000ecfc

08000d94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d94:	2800      	cmp	r0, #0
 8000d96:	db08      	blt.n	8000daa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d98:	0941      	lsrs	r1, r0, #5
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_NVIC_EnableIRQ+0x18>)
 8000d9c:	f000 001f 	and.w	r0, r0, #31
 8000da0:	2301      	movs	r3, #1
 8000da2:	fa03 f000 	lsl.w	r0, r3, r0
 8000da6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	3801      	subs	r0, #1
 8000db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000db6:	d210      	bcs.n	8000dda <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	4c08      	ldr	r4, [pc, #32]	; (8000de0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8000dc6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dcc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	6119      	str	r1, [r3, #16]
 8000dd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2001      	movs	r0, #1
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de8:	2200      	movs	r2, #0
 8000dea:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dec:	4e70      	ldr	r6, [pc, #448]	; (8000fb0 <HAL_GPIO_Init+0x1cc>)
{
 8000dee:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8000df2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4689      	mov	r9, r1
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	f102 0202 	add.w	r2, r2, #2
 8000e02:	d078      	beq.n	8000ef6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8000e04:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e08:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8000e0c:	43a1      	bics	r1, r4
 8000e0e:	d1f4      	bne.n	8000dfa <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e10:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8000e14:	f00c 0103 	and.w	r1, ip, #3
 8000e18:	1e4d      	subs	r5, r1, #1
 8000e1a:	2d01      	cmp	r5, #1
 8000e1c:	d96e      	bls.n	8000efc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	2903      	cmp	r1, #3
 8000e20:	f040 80ae 	bne.w	8000f80 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	4091      	lsls	r1, r2
 8000e26:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8000e28:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000e32:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e34:	d0e1      	beq.n	8000dfa <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4d5f      	ldr	r5, [pc, #380]	; (8000fb4 <HAL_GPIO_Init+0x1d0>)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	9103      	str	r1, [sp, #12]
 8000e3c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000e3e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e42:	6469      	str	r1, [r5, #68]	; 0x44
 8000e44:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000e46:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000e4a:	9103      	str	r1, [sp, #12]
 8000e4c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	f023 0103 	bic.w	r1, r3, #3
 8000e52:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000e56:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e62:	00bf      	lsls	r7, r7, #2
 8000e64:	250f      	movs	r5, #15
 8000e66:	40bd      	lsls	r5, r7
 8000e68:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6c:	4d52      	ldr	r5, [pc, #328]	; (8000fb8 <HAL_GPIO_Init+0x1d4>)
 8000e6e:	42a8      	cmp	r0, r5
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xbe>
 8000e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e76:	42a8      	cmp	r0, r5
 8000e78:	f000 8086 	beq.w	8000f88 <HAL_GPIO_Init+0x1a4>
 8000e7c:	4d4f      	ldr	r5, [pc, #316]	; (8000fbc <HAL_GPIO_Init+0x1d8>)
 8000e7e:	42a8      	cmp	r0, r5
 8000e80:	f000 8087 	beq.w	8000f92 <HAL_GPIO_Init+0x1ae>
 8000e84:	4d4e      	ldr	r5, [pc, #312]	; (8000fc0 <HAL_GPIO_Init+0x1dc>)
 8000e86:	42a8      	cmp	r0, r5
 8000e88:	f000 808a 	beq.w	8000fa0 <HAL_GPIO_Init+0x1bc>
 8000e8c:	4d4d      	ldr	r5, [pc, #308]	; (8000fc4 <HAL_GPIO_Init+0x1e0>)
 8000e8e:	42a8      	cmp	r0, r5
 8000e90:	bf0c      	ite	eq
 8000e92:	f04f 0e04 	moveq.w	lr, #4
 8000e96:	f04f 0e07 	movne.w	lr, #7
 8000e9a:	fa0e f707 	lsl.w	r7, lr, r7
 8000e9e:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea2:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8000ea6:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eac:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	bf0c      	ite	eq
 8000eb2:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8000eb4:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8000eb8:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8000eba:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	bf0c      	ite	eq
 8000ec2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ec4:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8000ec8:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8000eca:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ecc:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	bf0c      	ite	eq
 8000ed2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ed4:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8000ed8:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eda:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000edc:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	bf0c      	ite	eq
 8000ee6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8000ee8:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eec:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8000eee:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef0:	f102 0202 	add.w	r2, r2, #2
 8000ef4:	d186      	bne.n	8000e04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ef6:	b005      	add	sp, #20
 8000ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efc:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8000f00:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f06:	2503      	movs	r5, #3
 8000f08:	fa05 fe02 	lsl.w	lr, r5, r2
 8000f0c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f10:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8000f14:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f16:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8000f24:	409f      	lsls	r7, r3
 8000f26:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f2a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000f2c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f32:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8000f36:	4097      	lsls	r7, r2
 8000f38:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8000f3e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f40:	fa01 f102 	lsl.w	r1, r1, r2
 8000f44:	f47f af70 	bne.w	8000e28 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000f4c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f50:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	f8de 7020 	ldr.w	r7, [lr, #32]
 8000f58:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f62:	fa07 f708 	lsl.w	r7, r7, r8
 8000f66:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f68:	270f      	movs	r7, #15
 8000f6a:	fa07 f808 	lsl.w	r8, r7, r8
 8000f6e:	9f00      	ldr	r7, [sp, #0]
 8000f70:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	9f01      	ldr	r7, [sp, #4]
 8000f76:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	f8ce 7020 	str.w	r7, [lr, #32]
 8000f7e:	e753      	b.n	8000e28 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f80:	2503      	movs	r5, #3
 8000f82:	4095      	lsls	r5, r2
 8000f84:	43ed      	mvns	r5, r5
 8000f86:	e7d1      	b.n	8000f2c <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f88:	fa0a f707 	lsl.w	r7, sl, r7
 8000f8c:	ea48 0807 	orr.w	r8, r8, r7
 8000f90:	e787      	b.n	8000ea2 <HAL_GPIO_Init+0xbe>
 8000f92:	f04f 0e02 	mov.w	lr, #2
 8000f96:	fa0e f707 	lsl.w	r7, lr, r7
 8000f9a:	ea48 0807 	orr.w	r8, r8, r7
 8000f9e:	e780      	b.n	8000ea2 <HAL_GPIO_Init+0xbe>
 8000fa0:	f04f 0e03 	mov.w	lr, #3
 8000fa4:	fa0e f707 	lsl.w	r7, lr, r7
 8000fa8:	ea48 0807 	orr.w	r8, r8, r7
 8000fac:	e779      	b.n	8000ea2 <HAL_GPIO_Init+0xbe>
 8000fae:	bf00      	nop
 8000fb0:	40013c00 	.word	0x40013c00
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	b902      	cbnz	r2, 8000fcc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fca:	0409      	lsls	r1, r1, #16
 8000fcc:	6181      	str	r1, [r0, #24]
  }
}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f000 8085 	beq.w	80010e4 <HAL_PCD_Init+0x114>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fda:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8000fde:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe0:	4605      	mov	r5, r0
 8000fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d076      	beq.n	80010d8 <HAL_PCD_Init+0x108>
 8000fea:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff4:	462e      	mov	r6, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ff6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8000ffa:	bf08      	it	eq
 8000ffc:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000ffe:	f000 fbb3 	bl	8001768 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001002:	f856 eb10 	ldr.w	lr, [r6], #16
 8001006:	46b4      	mov	ip, r6
 8001008:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800100c:	466c      	mov	r4, sp
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800101a:	e884 0003 	stmia.w	r4, {r0, r1}
 800101e:	1d2f      	adds	r7, r5, #4
 8001020:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001024:	4670      	mov	r0, lr
 8001026:	f000 fb1d 	bl	8001664 <USB_CoreInit>
 800102a:	4604      	mov	r4, r0
 800102c:	b130      	cbz	r0, 800103c <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800102e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001030:	2302      	movs	r3, #2
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001032:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001034:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8001038:	b00b      	add	sp, #44	; 0x2c
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800103c:	4601      	mov	r1, r0
 800103e:	6828      	ldr	r0, [r5, #0]
 8001040:	f000 fb9a 	bl	8001778 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	6868      	ldr	r0, [r5, #4]
 8001046:	b358      	cbz	r0, 80010a0 <HAL_PCD_Init+0xd0>
 8001048:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800104a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800104e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001050:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8001054:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001058:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001064:	fa5f f28c 	uxtb.w	r2, ip
 8001068:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106a:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 800106e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001072:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001076:	6559      	str	r1, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	d3ea      	bcc.n	8001050 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800107a:	2200      	movs	r2, #0
 800107c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001080:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].num = i;
 8001086:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	b2cc      	uxtb	r4, r1
 800108c:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800108e:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8001092:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001096:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800109a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109e:	d3ed      	bcc.n	800107c <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010a2:	466c      	mov	r4, sp
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80010ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80010b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010b6:	6828      	ldr	r0, [r5, #0]
 80010b8:	f000 fb96 	bl	80017e8 <USB_DevInit>
 80010bc:	4604      	mov	r4, r0
 80010be:	2800      	cmp	r0, #0
 80010c0:	d1b5      	bne.n	800102e <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80010c2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80010c4:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 80010c8:	6828      	ldr	r0, [r5, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80010ca:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ce:	f000 fca5 	bl	8001a1c <USB_DevDisconnect>
}
 80010d2:	4620      	mov	r0, r4
 80010d4:	b00b      	add	sp, #44	; 0x2c
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80010d8:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 80010dc:	f7ff fce0 	bl	8000aa0 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 80010e0:	6828      	ldr	r0, [r5, #0]
 80010e2:	e783      	b.n	8000fec <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 80010e4:	2401      	movs	r4, #1
}
 80010e6:	4620      	mov	r0, r4
 80010e8:	b00b      	add	sp, #44	; 0x2c
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ec:	2800      	cmp	r0, #0
 80010ee:	f000 81a2 	beq.w	8001436 <HAL_RCC_OscConfig+0x34a>
{
 80010f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	6803      	ldr	r3, [r0, #0]
 80010f8:	07dd      	lsls	r5, r3, #31
{
 80010fa:	b082      	sub	sp, #8
 80010fc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	d52f      	bpl.n	8001160 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001100:	499e      	ldr	r1, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001102:	688a      	ldr	r2, [r1, #8]
 8001104:	f002 020c 	and.w	r2, r2, #12
 8001108:	2a04      	cmp	r2, #4
 800110a:	f000 80ed 	beq.w	80012e8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	688a      	ldr	r2, [r1, #8]
 8001110:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001114:	2a08      	cmp	r2, #8
 8001116:	f000 80e3 	beq.w	80012e0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	f000 80ec 	beq.w	80012fc <HAL_RCC_OscConfig+0x210>
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001128:	f000 8175 	beq.w	8001416 <HAL_RCC_OscConfig+0x32a>
 800112c:	4d93      	ldr	r5, [pc, #588]	; (800137c <HAL_RCC_OscConfig+0x290>)
 800112e:	682a      	ldr	r2, [r5, #0]
 8001130:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001134:	602a      	str	r2, [r5, #0]
 8001136:	682a      	ldr	r2, [r5, #0]
 8001138:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800113c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 80e1 	bne.w	8001306 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fdbe 	bl	8000cc4 <HAL_GetTick>
 8001148:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e005      	b.n	8001158 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fdba 	bl	8000cc4 <HAL_GetTick>
 8001150:	1b80      	subs	r0, r0, r6
 8001152:	2864      	cmp	r0, #100	; 0x64
 8001154:	f200 8101 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	039b      	lsls	r3, r3, #14
 800115c:	d4f6      	bmi.n	800114c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	079f      	lsls	r7, r3, #30
 8001162:	d528      	bpl.n	80011b6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001164:	4a85      	ldr	r2, [pc, #532]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001166:	6891      	ldr	r1, [r2, #8]
 8001168:	f011 0f0c 	tst.w	r1, #12
 800116c:	f000 8090 	beq.w	8001290 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001170:	6891      	ldr	r1, [r2, #8]
 8001172:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	2908      	cmp	r1, #8
 8001178:	f000 8086 	beq.w	8001288 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800117c:	68e3      	ldr	r3, [r4, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 810e 	beq.w	80013a0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4e7d      	ldr	r6, [pc, #500]	; (800137c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800118c:	f7ff fd9a 	bl	8000cc4 <HAL_GetTick>
 8001190:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	e005      	b.n	80011a0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fd96 	bl	8000cc4 <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	2802      	cmp	r0, #2
 800119c:	f200 80dd 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	0798      	lsls	r0, r3, #30
 80011a4:	d5f6      	bpl.n	8001194 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	6833      	ldr	r3, [r6, #0]
 80011a8:	6922      	ldr	r2, [r4, #16]
 80011aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011b2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	071a      	lsls	r2, r3, #28
 80011b8:	d451      	bmi.n	800125e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ba:	0758      	lsls	r0, r3, #29
 80011bc:	d52f      	bpl.n	800121e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011be:	4a6f      	ldr	r2, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x290>)
 80011c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011c2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80011c6:	d07f      	beq.n	80012c8 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80011c8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4e6e      	ldr	r6, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x298>)
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	05d9      	lsls	r1, r3, #23
 80011d0:	f140 80b3 	bpl.w	800133a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	68a3      	ldr	r3, [r4, #8]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	f000 80c3 	beq.w	8001362 <HAL_RCC_OscConfig+0x276>
 80011dc:	2b05      	cmp	r3, #5
 80011de:	f000 812c 	beq.w	800143a <HAL_RCC_OscConfig+0x34e>
 80011e2:	4e66      	ldr	r6, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x290>)
 80011e4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	6732      	str	r2, [r6, #112]	; 0x70
 80011ec:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80011ee:	f022 0204 	bic.w	r2, r2, #4
 80011f2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 80b9 	bne.w	800136c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fd63 	bl	8000cc4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001202:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001204:	e005      	b.n	8001212 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fd5d 	bl	8000cc4 <HAL_GetTick>
 800120a:	1bc0      	subs	r0, r0, r7
 800120c:	4540      	cmp	r0, r8
 800120e:	f200 80a4 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001212:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001214:	0798      	lsls	r0, r3, #30
 8001216:	d4f6      	bmi.n	8001206 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001218:	2d00      	cmp	r5, #0
 800121a:	f040 8106 	bne.w	800142a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121e:	69a0      	ldr	r0, [r4, #24]
 8001220:	b1c8      	cbz	r0, 8001256 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001222:	4d56      	ldr	r5, [pc, #344]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001224:	68ab      	ldr	r3, [r5, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	f000 80c9 	beq.w	80013c2 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_RCC_OscConfig+0x294>)
 8001232:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001234:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001236:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001238:	f000 8109 	beq.w	800144e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fd42 	bl	8000cc4 <HAL_GetTick>
 8001240:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001242:	e005      	b.n	8001250 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fd3e 	bl	8000cc4 <HAL_GetTick>
 8001248:	1b00      	subs	r0, r0, r4
 800124a:	2802      	cmp	r0, #2
 800124c:	f200 8085 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	d4f6      	bmi.n	8001244 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001256:	2000      	movs	r0, #0
}
 8001258:	b002      	add	sp, #8
 800125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125e:	6963      	ldr	r3, [r4, #20]
 8001260:	b30b      	cbz	r3, 80012a6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001264:	4e45      	ldr	r6, [pc, #276]	; (800137c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8001266:	2201      	movs	r2, #1
 8001268:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800126c:	f7ff fd2a 	bl	8000cc4 <HAL_GetTick>
 8001270:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e004      	b.n	800127e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fd26 	bl	8000cc4 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2802      	cmp	r0, #2
 800127c:	d86d      	bhi.n	800135a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001280:	079b      	lsls	r3, r3, #30
 8001282:	d5f7      	bpl.n	8001274 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	e798      	b.n	80011ba <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001288:	6852      	ldr	r2, [r2, #4]
 800128a:	0256      	lsls	r6, r2, #9
 800128c:	f53f af76 	bmi.w	800117c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001290:	4a3a      	ldr	r2, [pc, #232]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	0795      	lsls	r5, r2, #30
 8001296:	d544      	bpl.n	8001322 <HAL_RCC_OscConfig+0x236>
 8001298:	68e2      	ldr	r2, [r4, #12]
 800129a:	2a01      	cmp	r2, #1
 800129c:	d041      	beq.n	8001322 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800129e:	2001      	movs	r0, #1
}
 80012a0:	b002      	add	sp, #8
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80012a6:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	4e34      	ldr	r6, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80012aa:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80012ae:	f7ff fd09 	bl	8000cc4 <HAL_GetTick>
 80012b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	e004      	b.n	80012c0 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fd05 	bl	8000cc4 <HAL_GetTick>
 80012ba:	1b40      	subs	r0, r0, r5
 80012bc:	2802      	cmp	r0, #2
 80012be:	d84c      	bhi.n	800135a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80012c2:	079f      	lsls	r7, r3, #30
 80012c4:	d4f7      	bmi.n	80012b6 <HAL_RCC_OscConfig+0x1ca>
 80012c6:	e7dd      	b.n	8001284 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012dc:	2501      	movs	r5, #1
 80012de:	e774      	b.n	80011ca <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e0:	684a      	ldr	r2, [r1, #4]
 80012e2:	0250      	lsls	r0, r2, #9
 80012e4:	f57f af19 	bpl.w	800111a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_RCC_OscConfig+0x290>)
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	0391      	lsls	r1, r2, #14
 80012ee:	f57f af37 	bpl.w	8001160 <HAL_RCC_OscConfig+0x74>
 80012f2:	6862      	ldr	r2, [r4, #4]
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	f47f af33 	bne.w	8001160 <HAL_RCC_OscConfig+0x74>
 80012fa:	e7d0      	b.n	800129e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_RCC_OscConfig+0x290>)
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001306:	f7ff fcdd 	bl	8000cc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4e1c      	ldr	r6, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800130c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e004      	b.n	800131a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcd8 	bl	8000cc4 <HAL_GetTick>
 8001314:	1b40      	subs	r0, r0, r5
 8001316:	2864      	cmp	r0, #100	; 0x64
 8001318:	d81f      	bhi.n	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	6833      	ldr	r3, [r6, #0]
 800131c:	039a      	lsls	r2, r3, #14
 800131e:	d5f7      	bpl.n	8001310 <HAL_RCC_OscConfig+0x224>
 8001320:	e71d      	b.n	800115e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4916      	ldr	r1, [pc, #88]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001324:	6920      	ldr	r0, [r4, #16]
 8001326:	680a      	ldr	r2, [r1, #0]
 8001328:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800132c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001330:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	071a      	lsls	r2, r3, #28
 8001334:	f57f af41 	bpl.w	80011ba <HAL_RCC_OscConfig+0xce>
 8001338:	e791      	b.n	800125e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	6833      	ldr	r3, [r6, #0]
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001342:	f7ff fcbf 	bl	8000cc4 <HAL_GetTick>
 8001346:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	6833      	ldr	r3, [r6, #0]
 800134a:	05da      	lsls	r2, r3, #23
 800134c:	f53f af42 	bmi.w	80011d4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001350:	f7ff fcb8 	bl	8000cc4 <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	2802      	cmp	r0, #2
 8001358:	d9f6      	bls.n	8001348 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
}
 800135c:	b002      	add	sp, #8
 800135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001362:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_RCC_OscConfig+0x290>)
 8001364:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800136c:	f7ff fcaa 	bl	8000cc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4f02      	ldr	r7, [pc, #8]	; (800137c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001372:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e00b      	b.n	8001392 <HAL_RCC_OscConfig+0x2a6>
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	42470000 	.word	0x42470000
 8001384:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fc9c 	bl	8000cc4 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	4540      	cmp	r0, r8
 8001390:	d8e3      	bhi.n	800135a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001394:	079b      	lsls	r3, r3, #30
 8001396:	d5f7      	bpl.n	8001388 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001398:	2d00      	cmp	r5, #0
 800139a:	f43f af40 	beq.w	800121e <HAL_RCC_OscConfig+0x132>
 800139e:	e044      	b.n	800142a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80013a0:	4a42      	ldr	r2, [pc, #264]	; (80014ac <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4e43      	ldr	r6, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80013a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc8d 	bl	8000cc4 <HAL_GetTick>
 80013aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ac:	e004      	b.n	80013b8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc89 	bl	8000cc4 <HAL_GetTick>
 80013b2:	1b40      	subs	r0, r0, r5
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d8d0      	bhi.n	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b8:	6833      	ldr	r3, [r6, #0]
 80013ba:	0799      	lsls	r1, r3, #30
 80013bc:	d4f7      	bmi.n	80013ae <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	e6f9      	b.n	80011b6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c2:	2801      	cmp	r0, #1
 80013c4:	f43f af48 	beq.w	8001258 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80013c8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ca:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013cc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d0:	4291      	cmp	r1, r2
 80013d2:	f47f af64 	bne.w	800129e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013dc:	4291      	cmp	r1, r2
 80013de:	f47f af5e 	bne.w	800129e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013e4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80013e8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ea:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80013ee:	f47f af56 	bne.w	800129e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013f4:	0852      	lsrs	r2, r2, #1
 80013f6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80013fa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013fc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001400:	f47f af4d 	bne.w	800129e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001406:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800140a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800140e:	bf14      	ite	ne
 8001410:	2001      	movne	r0, #1
 8001412:	2000      	moveq	r0, #0
 8001414:	e720      	b.n	8001258 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x3c4>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001426:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001428:	e76d      	b.n	8001306 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_RCC_OscConfig+0x3c4>)
 800142c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	e6f3      	b.n	800121e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8001436:	2001      	movs	r0, #1
}
 8001438:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_RCC_OscConfig+0x3c4>)
 800143c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800143e:	f042 0204 	orr.w	r2, r2, #4
 8001442:	671a      	str	r2, [r3, #112]	; 0x70
 8001444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144c:	e78e      	b.n	800136c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800144e:	f7ff fc39 	bl	8000cc4 <HAL_GetTick>
 8001452:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	e005      	b.n	8001462 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fc35 	bl	8000cc4 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2802      	cmp	r0, #2
 800145e:	f63f af7c 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	0199      	lsls	r1, r3, #6
 8001466:	d4f6      	bmi.n	8001456 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001468:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800146c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800146e:	430b      	orrs	r3, r1
 8001470:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001474:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001478:	0852      	lsrs	r2, r2, #1
 800147a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800147e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001480:	490a      	ldr	r1, [pc, #40]	; (80014ac <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001486:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001488:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800148a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800148c:	f7ff fc1a 	bl	8000cc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	4d07      	ldr	r5, [pc, #28]	; (80014b0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001492:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	e005      	b.n	80014a2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fc15 	bl	8000cc4 <HAL_GetTick>
 800149a:	1b00      	subs	r0, r0, r4
 800149c:	2802      	cmp	r0, #2
 800149e:	f63f af5c 	bhi.w	800135a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	019a      	lsls	r2, r3, #6
 80014a6:	d5f6      	bpl.n	8001496 <HAL_RCC_OscConfig+0x3aa>
 80014a8:	e6d5      	b.n	8001256 <HAL_RCC_OscConfig+0x16a>
 80014aa:	bf00      	nop
 80014ac:	42470000 	.word	0x42470000
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b4:	4916      	ldr	r1, [pc, #88]	; (8001510 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80014b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b8:	688b      	ldr	r3, [r1, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d01b      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0x46>
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d117      	bne.n	80014f6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014cc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d4:	d113      	bne.n	80014fe <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <HAL_RCC_GetSysClockFreq+0x60>)
 80014d8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014dc:	fba1 0100 	umull	r0, r1, r1, r0
 80014e0:	f7fe fe82 	bl	80001e8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_RCC_GetSysClockFreq+0x5c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014ec:	3301      	adds	r3, #1
 80014ee:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80014f0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014f4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80014f8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80014fc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <HAL_RCC_GetSysClockFreq+0x64>)
 8001500:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001504:	2300      	movs	r3, #0
 8001506:	fba1 0100 	umull	r0, r1, r1, r0
 800150a:	f7fe fe6d 	bl	80001e8 <__aeabi_uldivmod>
 800150e:	e7e9      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x30>
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	007a1200 	.word	0x007a1200

0800151c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800151c:	2800      	cmp	r0, #0
 800151e:	f000 8087 	beq.w	8001630 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001522:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 8001524:	6813      	ldr	r3, [r2, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	428b      	cmp	r3, r1
{
 800152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001530:	460d      	mov	r5, r1
 8001532:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	d209      	bcs.n	800154a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	b2cb      	uxtb	r3, r1
 8001538:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	428b      	cmp	r3, r1
 8001542:	d002      	beq.n	800154a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001544:	2001      	movs	r0, #1
}
 8001546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	0798      	lsls	r0, r3, #30
 800154e:	d514      	bpl.n	800157a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	0759      	lsls	r1, r3, #29
 8001552:	d504      	bpl.n	800155e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	493c      	ldr	r1, [pc, #240]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 8001556:	688a      	ldr	r2, [r1, #8]
 8001558:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800155c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	071a      	lsls	r2, r3, #28
 8001560:	d504      	bpl.n	800156c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001562:	4939      	ldr	r1, [pc, #228]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 8001564:	688a      	ldr	r2, [r1, #8]
 8001566:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800156a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4936      	ldr	r1, [pc, #216]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 800156e:	68a0      	ldr	r0, [r4, #8]
 8001570:	688a      	ldr	r2, [r1, #8]
 8001572:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001576:	4302      	orrs	r2, r0
 8001578:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	07df      	lsls	r7, r3, #31
 800157c:	d521      	bpl.n	80015c2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	6862      	ldr	r2, [r4, #4]
 8001580:	2a01      	cmp	r2, #1
 8001582:	d057      	beq.n	8001634 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001584:	1e93      	subs	r3, r2, #2
 8001586:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 800158a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158c:	d94d      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	0799      	lsls	r1, r3, #30
 8001590:	d5d8      	bpl.n	8001544 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	4e2d      	ldr	r6, [pc, #180]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 8001594:	68b3      	ldr	r3, [r6, #8]
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	4313      	orrs	r3, r2
 800159c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800159e:	f7ff fb91 	bl	8000cc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a8:	e004      	b.n	80015b4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015aa:	f7ff fb8b 	bl	8000cc4 <HAL_GetTick>
 80015ae:	1bc0      	subs	r0, r0, r7
 80015b0:	4540      	cmp	r0, r8
 80015b2:	d844      	bhi.n	800163e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b4:	68b3      	ldr	r3, [r6, #8]
 80015b6:	6862      	ldr	r2, [r4, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015c0:	d1f3      	bne.n	80015aa <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_RCC_ClockConfig+0x128>)
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	42ab      	cmp	r3, r5
 80015cc:	d906      	bls.n	80015dc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	b2eb      	uxtb	r3, r5
 80015d0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	42ab      	cmp	r3, r5
 80015da:	d1b3      	bne.n	8001544 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	075a      	lsls	r2, r3, #29
 80015e0:	d506      	bpl.n	80015f0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e2:	4919      	ldr	r1, [pc, #100]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 80015e4:	68e0      	ldr	r0, [r4, #12]
 80015e6:	688a      	ldr	r2, [r1, #8]
 80015e8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80015ec:	4302      	orrs	r2, r0
 80015ee:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	071b      	lsls	r3, r3, #28
 80015f2:	d507      	bpl.n	8001604 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 80015f6:	6921      	ldr	r1, [r4, #16]
 80015f8:	6893      	ldr	r3, [r2, #8]
 80015fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001602:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001604:	f7ff ff56 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 800160a:	4c10      	ldr	r4, [pc, #64]	; (800164c <HAL_RCC_ClockConfig+0x130>)
 800160c:	6892      	ldr	r2, [r2, #8]
 800160e:	4910      	ldr	r1, [pc, #64]	; (8001650 <HAL_RCC_ClockConfig+0x134>)
 8001610:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001614:	4603      	mov	r3, r0
 8001616:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001618:	480e      	ldr	r0, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800161c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001620:	f7ff fb06 	bl	8000c30 <HAL_InitTick>
  return HAL_OK;
 8001624:	2000      	movs	r0, #0
}
 8001626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	0198      	lsls	r0, r3, #6
 800162c:	d4b1      	bmi.n	8001592 <HAL_RCC_ClockConfig+0x76>
 800162e:	e789      	b.n	8001544 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001630:	2001      	movs	r0, #1
}
 8001632:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_RCC_ClockConfig+0x12c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	039e      	lsls	r6, r3, #14
 800163a:	d4aa      	bmi.n	8001592 <HAL_RCC_ClockConfig+0x76>
 800163c:	e782      	b.n	8001544 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
 8001640:	e781      	b.n	8001546 <HAL_RCC_ClockConfig+0x2a>
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00
 8001648:	40023800 	.word	0x40023800
 800164c:	08004fe0 	.word	0x08004fe0
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000030 	.word	0x20000030

08001658 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000000c 	.word	0x2000000c

08001664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001664:	b084      	sub	sp, #16
 8001666:	b082      	sub	sp, #8
 8001668:	f10d 0c0c 	add.w	ip, sp, #12
 800166c:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001670:	9a08      	ldr	r2, [sp, #32]
 8001672:	2a01      	cmp	r2, #1
{
 8001674:	4603      	mov	r3, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001676:	d12c      	bne.n	80016d2 <USB_CoreInit+0x6e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001678:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800167a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800167c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001680:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001682:	68c2      	ldr	r2, [r0, #12]
 8001684:	f422 0284 	bic.w	r2, r2, #4325376	; 0x420000
 8001688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168c:	60c2      	str	r2, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800168e:	68c2      	ldr	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001690:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001692:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001696:	60c2      	str	r2, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001698:	d05f      	beq.n	800175a <USB_CoreInit+0xf6>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800169a:	2200      	movs	r2, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800169c:	4931      	ldr	r1, [pc, #196]	; (8001764 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	e002      	b.n	80016a8 <USB_CoreInit+0x44>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	db2d      	blt.n	8001704 <USB_CoreInit+0xa0>
    count++;
 80016a8:	9a00      	ldr	r2, [sp, #0]
 80016aa:	3201      	adds	r2, #1
 80016ac:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 80016ae:	9a00      	ldr	r2, [sp, #0]
 80016b0:	428a      	cmp	r2, r1
 80016b2:	d9f6      	bls.n	80016a2 <USB_CoreInit+0x3e>
      return HAL_TIMEOUT;
 80016b4:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 80016b6:	9a06      	ldr	r2, [sp, #24]
 80016b8:	2a01      	cmp	r2, #1
 80016ba:	d107      	bne.n	80016cc <USB_CoreInit+0x68>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	f042 0206 	orr.w	r2, r2, #6
 80016c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	609a      	str	r2, [r3, #8]
}
 80016cc:	b002      	add	sp, #8
 80016ce:	b004      	add	sp, #16
 80016d0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80016d2:	68c2      	ldr	r2, [r0, #12]
    if (count > 200000U)
 80016d4:	4923      	ldr	r1, [pc, #140]	; (8001764 <USB_CoreInit+0x100>)
  __IO uint32_t count = 0U;
 80016d6:	2000      	movs	r0, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80016d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016dc:	60da      	str	r2, [r3, #12]
  __IO uint32_t count = 0U;
 80016de:	9001      	str	r0, [sp, #4]
 80016e0:	e002      	b.n	80016e8 <USB_CoreInit+0x84>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	db25      	blt.n	8001734 <USB_CoreInit+0xd0>
    count++;
 80016e8:	9a01      	ldr	r2, [sp, #4]
 80016ea:	3201      	adds	r2, #1
 80016ec:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 80016ee:	9a01      	ldr	r2, [sp, #4]
 80016f0:	428a      	cmp	r2, r1
 80016f2:	d9f6      	bls.n	80016e2 <USB_CoreInit+0x7e>
      return HAL_TIMEOUT;
 80016f4:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 80016f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016f8:	b9ba      	cbnz	r2, 800172a <USB_CoreInit+0xc6>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
 8001702:	e7d8      	b.n	80016b6 <USB_CoreInit+0x52>

  /* Core Soft Reset */
  count = 0U;
 8001704:	2200      	movs	r2, #0
 8001706:	9200      	str	r2, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001708:	691a      	ldr	r2, [r3, #16]

  do
  {
    count++;

    if (count > 200000U)
 800170a:	4916      	ldr	r1, [pc, #88]	; (8001764 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	e003      	b.n	800171c <USB_CoreInit+0xb8>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001714:	6918      	ldr	r0, [r3, #16]
 8001716:	f010 0001 	ands.w	r0, r0, #1
 800171a:	d0cc      	beq.n	80016b6 <USB_CoreInit+0x52>
    count++;
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	3201      	adds	r2, #1
 8001720:	9200      	str	r2, [sp, #0]
    if (count > 200000U)
 8001722:	9a00      	ldr	r2, [sp, #0]
 8001724:	428a      	cmp	r2, r1
 8001726:	d9f5      	bls.n	8001714 <USB_CoreInit+0xb0>
 8001728:	e7c4      	b.n	80016b4 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800172a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800172c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
 8001732:	e7c0      	b.n	80016b6 <USB_CoreInit+0x52>
  count = 0U;
 8001734:	2200      	movs	r2, #0
 8001736:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001738:	691a      	ldr	r2, [r3, #16]
    if (count > 200000U)
 800173a:	490a      	ldr	r1, [pc, #40]	; (8001764 <USB_CoreInit+0x100>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	e003      	b.n	800174c <USB_CoreInit+0xe8>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001744:	6918      	ldr	r0, [r3, #16]
 8001746:	f010 0001 	ands.w	r0, r0, #1
 800174a:	d0d4      	beq.n	80016f6 <USB_CoreInit+0x92>
    count++;
 800174c:	9a01      	ldr	r2, [sp, #4]
 800174e:	3201      	adds	r2, #1
 8001750:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 8001752:	9a01      	ldr	r2, [sp, #4]
 8001754:	428a      	cmp	r2, r1
 8001756:	d9f5      	bls.n	8001744 <USB_CoreInit+0xe0>
 8001758:	e7cc      	b.n	80016f4 <USB_CoreInit+0x90>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800175a:	68c2      	ldr	r2, [r0, #12]
 800175c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001760:	60c2      	str	r2, [r0, #12]
 8001762:	e79a      	b.n	800169a <USB_CoreInit+0x36>
 8001764:	00030d40 	.word	0x00030d40

08001768 <USB_DisableGlobalInt>:
{
 8001768:	4603      	mov	r3, r0
}
 800176a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	609a      	str	r2, [r3, #8]
}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop

08001778 <USB_SetCurrentMode>:
{
 8001778:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800177a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800177c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800177e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8001782:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001784:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001786:	d018      	beq.n	80017ba <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 8001788:	b9a9      	cbnz	r1, 80017b6 <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800178a:	68c3      	ldr	r3, [r0, #12]
 800178c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t ms = 0U;
 8001790:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001792:	60c3      	str	r3, [r0, #12]
 8001794:	e001      	b.n	800179a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8001796:	2c32      	cmp	r4, #50	; 0x32
 8001798:	d00d      	beq.n	80017b6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff fa98 	bl	8000cd0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80017a0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80017a2:	07db      	lsls	r3, r3, #31
      ms++;
 80017a4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80017a8:	d4f5      	bmi.n	8001796 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80017aa:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80017ae:	fab0 f080 	clz	r0, r0
 80017b2:	0940      	lsrs	r0, r0, #5
}
 80017b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017b6:	2001      	movs	r0, #1
}
 80017b8:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80017ba:	68c3      	ldr	r3, [r0, #12]
 80017bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  uint32_t ms = 0U;
 80017c0:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80017c2:	60c3      	str	r3, [r0, #12]
 80017c4:	e001      	b.n	80017ca <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80017c6:	2c32      	cmp	r4, #50	; 0x32
 80017c8:	d0f5      	beq.n	80017b6 <USB_SetCurrentMode+0x3e>
      HAL_Delay(1U);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fa80 	bl	8000cd0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80017d0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80017d2:	07da      	lsls	r2, r3, #31
      ms++;
 80017d4:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80017d8:	d5f5      	bpl.n	80017c6 <USB_SetCurrentMode+0x4e>
    return HAL_ERROR;
 80017da:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80017de:	fab0 f080 	clz	r0, r0
 80017e2:	0940      	lsrs	r0, r0, #5
 80017e4:	e7e6      	b.n	80017b4 <USB_SetCurrentMode+0x3c>
 80017e6:	bf00      	nop

080017e8 <USB_DevInit>:
{
 80017e8:	b084      	sub	sp, #16
 80017ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	ac0b      	add	r4, sp, #44	; 0x2c
 80017f2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80017f4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80017fe:	460c      	mov	r4, r1
 8001800:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8001804:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001808:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800180c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8001810:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001814:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 8001818:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800181c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8001820:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8001824:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 8001828:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800182c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 8001830:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 8001834:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8001838:	2d00      	cmp	r5, #0
 800183a:	f040 80ae 	bne.w	800199a <USB_DevInit+0x1b2>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800183e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001842:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800184e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001854:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001856:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001858:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800185c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800185e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001864:	6383      	str	r3, [r0, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800186c:	f8dc 3000 	ldr.w	r3, [ip]
 8001870:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001876:	2b01      	cmp	r3, #1
 8001878:	f000 80be 	beq.w	80019f8 <USB_DevInit+0x210>
  USBx_DEVICE->DCFG |= speed;
 800187c:	f8dc 3000 	ldr.w	r3, [ip]
 8001880:	f043 0303 	orr.w	r3, r3, #3
 8001884:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 8001888:	2300      	movs	r3, #0
    if (count > 200000U)
 800188a:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	e003      	b.n	8001898 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001890:	6903      	ldr	r3, [r0, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f2c0 809d 	blt.w	80019d2 <USB_DevInit+0x1ea>
    count++;
 8001898:	9b00      	ldr	r3, [sp, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800189e:	9b00      	ldr	r3, [sp, #0]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d9f5      	bls.n	8001890 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 80018a4:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 80018a6:	2300      	movs	r3, #0
    if (count > 200000U)
 80018a8:	4a5a      	ldr	r2, [pc, #360]	; (8001a14 <USB_DevInit+0x22c>)
  __IO uint32_t count = 0U;
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	e002      	b.n	80018b4 <USB_DevInit+0xcc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80018ae:	6903      	ldr	r3, [r0, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db7d      	blt.n	80019b0 <USB_DevInit+0x1c8>
    count++;
 80018b4:	9b01      	ldr	r3, [sp, #4]
 80018b6:	3301      	adds	r3, #1
 80018b8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80018ba:	9b01      	ldr	r3, [sp, #4]
 80018bc:	4293      	cmp	r3, r2
 80018be:	d9f6      	bls.n	80018ae <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 80018c0:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80018c8:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80018cc:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80018d0:	b1e4      	cbz	r4, 800190c <USB_DevInit+0x124>
 80018d2:	f500 6310 	add.w	r3, r0, #2304	; 0x900
      USBx_INEP(i)->DIEPCTL = 0U;
 80018d6:	4617      	mov	r7, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80018d8:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018dc:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80018e0:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80018e4:	e008      	b.n	80018f8 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 80018e6:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80018e8:	3201      	adds	r2, #1
 80018ea:	4294      	cmp	r4, r2
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80018ec:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80018ee:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80018f2:	f103 0320 	add.w	r3, r3, #32
 80018f6:	d032      	beq.n	800195e <USB_DevInit+0x176>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80018f8:	681e      	ldr	r6, [r3, #0]
 80018fa:	2e00      	cmp	r6, #0
 80018fc:	daf3      	bge.n	80018e6 <USB_DevInit+0xfe>
      if (i == 0U)
 80018fe:	b112      	cbz	r2, 8001906 <USB_DevInit+0x11e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001900:	f8c3 8000 	str.w	r8, [r3]
 8001904:	e7f0      	b.n	80018e8 <USB_DevInit+0x100>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001906:	f8c3 9000 	str.w	r9, [r3]
 800190a:	e7ed      	b.n	80018e8 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800190c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8001910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001914:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8001918:	2200      	movs	r2, #0
  if (cfg.dma_enable == 0U)
 800191a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  USBx->GINTMSK = 0U;
 800191c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800191e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001922:	6142      	str	r2, [r0, #20]
  if (cfg.dma_enable == 0U)
 8001924:	b91b      	cbnz	r3, 800192e <USB_DevInit+0x146>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001926:	6983      	ldr	r3, [r0, #24]
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800192e:	6982      	ldr	r2, [r0, #24]
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <USB_DevInit+0x230>)
 8001932:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8001934:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001936:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 8001938:	b11a      	cbz	r2, 8001942 <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800193a:	6983      	ldr	r3, [r0, #24]
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001942:	2d01      	cmp	r5, #1
 8001944:	d105      	bne.n	8001952 <USB_DevInit+0x16a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001946:	6983      	ldr	r3, [r0, #24]
 8001948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6183      	str	r3, [r0, #24]
}
 8001952:	4608      	mov	r0, r1
 8001954:	b003      	add	sp, #12
 8001956:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800195a:	b004      	add	sp, #16
 800195c:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800195e:	2200      	movs	r2, #0
 8001960:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001964:	4617      	mov	r7, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001966:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800196a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800196e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8001972:	e008      	b.n	8001986 <USB_DevInit+0x19e>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001974:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001976:	3201      	adds	r2, #1
 8001978:	4294      	cmp	r4, r2
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800197a:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800197c:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001980:	f103 0320 	add.w	r3, r3, #32
 8001984:	d0c2      	beq.n	800190c <USB_DevInit+0x124>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001986:	681e      	ldr	r6, [r3, #0]
 8001988:	2e00      	cmp	r6, #0
 800198a:	daf3      	bge.n	8001974 <USB_DevInit+0x18c>
      if (i == 0U)
 800198c:	b112      	cbz	r2, 8001994 <USB_DevInit+0x1ac>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800198e:	f8c3 8000 	str.w	r8, [r3]
 8001992:	e7f0      	b.n	8001976 <USB_DevInit+0x18e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001994:	f8c3 9000 	str.w	r9, [r3]
 8001998:	e7ed      	b.n	8001976 <USB_DevInit+0x18e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800199a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800199c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019a0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80019a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80019a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80019a8:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80019ac:	6383      	str	r3, [r0, #56]	; 0x38
 80019ae:	e75a      	b.n	8001866 <USB_DevInit+0x7e>
  count = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80019b4:	2310      	movs	r3, #16
    if (count > 200000U)
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80019b8:	6103      	str	r3, [r0, #16]
 80019ba:	e003      	b.n	80019c4 <USB_DevInit+0x1dc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80019bc:	6903      	ldr	r3, [r0, #16]
 80019be:	06db      	lsls	r3, r3, #27
 80019c0:	f57f af7f 	bpl.w	80018c2 <USB_DevInit+0xda>
    count++;
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d9f5      	bls.n	80019bc <USB_DevInit+0x1d4>
 80019d0:	e776      	b.n	80018c0 <USB_DevInit+0xd8>
  count = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80019d6:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (count > 200000U)
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <USB_DevInit+0x22c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80019dc:	6103      	str	r3, [r0, #16]
 80019de:	e004      	b.n	80019ea <USB_DevInit+0x202>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80019e0:	6901      	ldr	r1, [r0, #16]
 80019e2:	f011 0120 	ands.w	r1, r1, #32
 80019e6:	f43f af5e 	beq.w	80018a6 <USB_DevInit+0xbe>
    count++;
 80019ea:	9b00      	ldr	r3, [sp, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d9f4      	bls.n	80019e0 <USB_DevInit+0x1f8>
 80019f6:	e755      	b.n	80018a4 <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 80019f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019fa:	b923      	cbnz	r3, 8001a06 <USB_DevInit+0x21e>
  USBx_DEVICE->DCFG |= speed;
 80019fc:	f8dc 3000 	ldr.w	r3, [ip]
 8001a00:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 8001a04:	e740      	b.n	8001888 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 8001a06:	f8dc 3000 	ldr.w	r3, [ip]
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 8001a12:	e739      	b.n	8001888 <USB_DevInit+0xa0>
 8001a14:	00030d40 	.word	0x00030d40
 8001a18:	803c3800 	.word	0x803c3800

08001a1c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8001a1c:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	; 0xe00
{
 8001a20:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8001a22:	f022 0203 	bic.w	r2, r2, #3
 8001a26:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001a2a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8001a2e:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 8001a32:	f043 0302 	orr.w	r3, r3, #2
}
 8001a36:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001a38:	604b      	str	r3, [r1, #4]
}
 8001a3a:	4770      	bx	lr

08001a3c <audiod_tx_done_cb.constprop.0>:
// This function is called once a transmit of an audio packet was successfully completed. Here, we encode samples and place it in IN EP's buffer for next transmission.
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
  if (audio->p_desc)
 8001a3e:	4c2a      	ldr	r4, [pc, #168]	; (8001ae8 <audiod_tx_done_cb.constprop.0+0xac>)
 8001a40:	6862      	ldr	r2, [r4, #4]
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
 8001a42:	b083      	sub	sp, #12
  if (audio->p_desc)
 8001a44:	b312      	cbz	r2, 8001a8c <audiod_tx_done_cb.constprop.0+0x50>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001a46:	7813      	ldrb	r3, [r2, #0]
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001a48:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8001a52:	4494      	add	ip, r2

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001a54:	88da      	ldrh	r2, [r3, #6]
 8001a56:	4413      	add	r3, r2

    uint8_t tmp = 0;
    while (p_desc < p_desc_end)
 8001a58:	459c      	cmp	ip, r3
 8001a5a:	d917      	bls.n	8001a8c <audiod_tx_done_cb.constprop.0+0x50>
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001a5c:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8001a60:	4605      	mov	r5, r0
    uint8_t tmp = 0;
 8001a62:	2600      	movs	r6, #0
 8001a64:	e003      	b.n	8001a6e <audiod_tx_done_cb.constprop.0+0x32>
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 8001a6a:	459c      	cmp	ip, r3
 8001a6c:	d90e      	bls.n	8001a8c <audiod_tx_done_cb.constprop.0+0x50>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001a6e:	785a      	ldrb	r2, [r3, #1]
 8001a70:	2a04      	cmp	r2, #4
 8001a72:	d1f8      	bne.n	8001a66 <audiod_tx_done_cb.constprop.0+0x2a>
 8001a74:	78d9      	ldrb	r1, [r3, #3]
          *idxItf = tmp;
          *pp_desc_int = p_desc;
          return true;
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8001a76:	1c72      	adds	r2, r6, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	d1f4      	bne.n	8001a66 <audiod_tx_done_cb.constprop.0+0x2a>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8001a7c:	7898      	ldrb	r0, [r3, #2]
 8001a7e:	4570      	cmp	r0, lr
 8001a80:	d007      	beq.n	8001a92 <audiod_tx_done_cb.constprop.0+0x56>
        tmp++;
 8001a82:	b2d6      	uxtb	r6, r2
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 8001a88:	459c      	cmp	ip, r3
 8001a8a:	d8f0      	bhi.n	8001a6e <audiod_tx_done_cb.constprop.0+0x32>
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001a8c:	2000      	movs	r0, #0
}
 8001a8e:	b003      	add	sp, #12
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 8001a92:	69e3      	ldr	r3, [r4, #28]
 8001a94:	5d9b      	ldrb	r3, [r3, r6]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f8      	beq.n	8001a8c <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001a9a:	4a14      	ldr	r2, [pc, #80]	; (8001aec <audiod_tx_done_cb.constprop.0+0xb0>)
 8001a9c:	b12a      	cbz	r2, 8001aaa <audiod_tx_done_cb.constprop.0+0x6e>
 8001a9e:	7a22      	ldrb	r2, [r4, #8]
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f7fe fe5f 	bl	8000764 <tud_audio_tx_done_pre_load_cb>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0f0      	beq.n	8001a8c <audiod_tx_done_cb.constprop.0+0x50>
  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 8001aaa:	4811      	ldr	r0, [pc, #68]	; (8001af0 <audiod_tx_done_cb.constprop.0+0xb4>)
 8001aac:	f000 fe86 	bl	80027bc <tu_fifo_count>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8001ab0:	8963      	ldrh	r3, [r4, #10]
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <audiod_tx_done_cb.constprop.0+0xb4>)
 8001ab4:	7a21      	ldrb	r1, [r4, #8]
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	bf28      	it	cs
 8001aba:	4618      	movcs	r0, r3
 8001abc:	b287      	uxth	r7, r0
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f002 f84b 	bl	8003b5c <usbd_edpt_xfer_fifo>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d0e0      	beq.n	8001a8c <audiod_tx_done_cb.constprop.0+0x50>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <audiod_tx_done_cb.constprop.0+0xb8>)
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0de      	beq.n	8001a8e <audiod_tx_done_cb.constprop.0+0x52>
 8001ad0:	69e2      	ldr	r2, [r4, #28]
 8001ad2:	7a23      	ldrb	r3, [r4, #8]
 8001ad4:	5d92      	ldrb	r2, [r2, r6]
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	4639      	mov	r1, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	4628      	mov	r0, r5
 8001ade:	f7fe fe43 	bl	8000768 <tud_audio_tx_done_post_load_cb>
}
 8001ae2:	b003      	add	sp, #12
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000ef0 	.word	0x20000ef0
 8001aec:	08000765 	.word	0x08000765
 8001af0:	20000f1c 	.word	0x20000f1c
 8001af4:	08000769 	.word	0x08000769

08001af8 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8001af8:	b928      	cbnz	r0, 8001b06 <tud_audio_n_read+0xe>
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <tud_audio_n_read+0x14>)
 8001afc:	6843      	ldr	r3, [r0, #4]
 8001afe:	b113      	cbz	r3, 8001b06 <tud_audio_n_read+0xe>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 8001b00:	3020      	adds	r0, #32
 8001b02:	f000 becd 	b.w	80028a0 <tu_fifo_read_n>
}
 8001b06:	2000      	movs	r0, #0
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000ef0 	.word	0x20000ef0

08001b10 <tud_audio_n_write>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8001b10:	b928      	cbnz	r0, 8001b1e <tud_audio_n_write+0xe>
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <tud_audio_n_write+0x14>)
 8001b14:	6843      	ldr	r3, [r0, #4]
 8001b16:	b113      	cbz	r3, 8001b1e <tud_audio_n_write+0xe>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8001b18:	302c      	adds	r0, #44	; 0x2c
 8001b1a:	f001 b80b 	b.w	8002b34 <tu_fifo_write_n>
}
 8001b1e:	2000      	movs	r0, #0
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000ef0 	.word	0x20000ef0

08001b28 <audiod_init>:
{
 8001b28:	b530      	push	{r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8001b2a:	4c11      	ldr	r4, [pc, #68]	; (8001b70 <audiod_init+0x48>)
{
 8001b2c:	b083      	sub	sp, #12
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8001b2e:	2238      	movs	r2, #56	; 0x38
 8001b30:	2100      	movs	r1, #0
 8001b32:	4620      	mov	r0, r4
 8001b34:	f003 fa34 	bl	8004fa0 <memset>
        audio->ctrl_buf = ctrl_buf_1;
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <audiod_init+0x4c>)
 8001b3a:	6160      	str	r0, [r4, #20]
        audio->alt_setting = alt_setting_1;
 8001b3c:	480e      	ldr	r0, [pc, #56]	; (8001b78 <audiod_init+0x50>)
 8001b3e:	61e0      	str	r0, [r4, #28]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8001b40:	2501      	movs	r5, #1
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8001b42:	2040      	movs	r0, #64	; 0x40
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8001b44:	462b      	mov	r3, r5
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8001b46:	7620      	strb	r0, [r4, #24]
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <audiod_init+0x54>)
 8001b4a:	9500      	str	r5, [sp, #0]
 8001b4c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001b50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001b54:	f000 fe1c 	bl	8002790 <tu_fifo_config>
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 8001b58:	4909      	ldr	r1, [pc, #36]	; (8001b80 <audiod_init+0x58>)
 8001b5a:	9500      	str	r5, [sp, #0]
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001b62:	f104 0020 	add.w	r0, r4, #32
 8001b66:	f000 fe13 	bl	8002790 <tu_fifo_config>
}
 8001b6a:	b003      	add	sp, #12
 8001b6c:	bd30      	pop	{r4, r5, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000ef0 	.word	0x20000ef0
 8001b74:	20001844 	.word	0x20001844
 8001b78:	20000f28 	.word	0x20000f28
 8001b7c:	20000f2c 	.word	0x20000f2c
 8001b80:	20001234 	.word	0x20001234

08001b84 <audiod_reset>:
{
 8001b84:	b510      	push	{r4, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8001b86:	4c08      	ldr	r4, [pc, #32]	; (8001ba8 <audiod_reset+0x24>)
 8001b88:	2300      	movs	r3, #0
    tu_fifo_clear(&audio->ep_in_ff);
 8001b8a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8001b8e:	e9c4 3300 	strd	r3, r3, [r4]
 8001b92:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8001b96:	6123      	str	r3, [r4, #16]
    tu_fifo_clear(&audio->ep_in_ff);
 8001b98:	f001 f94c 	bl	8002e34 <tu_fifo_clear>
    tu_fifo_clear(&audio->ep_out_ff);
 8001b9c:	f104 0020 	add.w	r0, r4, #32
}
 8001ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&audio->ep_out_ff);
 8001ba4:	f001 b946 	b.w	8002e34 <tu_fifo_clear>
 8001ba8:	20000ef0 	.word	0x20000ef0

08001bac <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8001bac:	794b      	ldrb	r3, [r1, #5]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <audiod_open+0xc>
 8001bb2:	798b      	ldrb	r3, [r1, #6]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d001      	beq.n	8001bbc <audiod_open+0x10>
 8001bb8:	2000      	movs	r0, #0
}
 8001bba:	4770      	bx	lr
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8001bbc:	79cb      	ldrb	r3, [r1, #7]
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d1fa      	bne.n	8001bb8 <audiod_open+0xc>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8001bc2:	790b      	ldrb	r3, [r1, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d0f7      	beq.n	8001bb8 <audiod_open+0xc>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8001bc8:	78ca      	ldrb	r2, [r1, #3]
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d1f4      	bne.n	8001bb8 <audiod_open+0xc>
    if (!_audiod_fct[i].p_desc)
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <audiod_open+0x54>)
{
 8001bd0:	b410      	push	{r4}
    if (!_audiod_fct[i].p_desc)
 8001bd2:	685c      	ldr	r4, [r3, #4]
 8001bd4:	b94c      	cbnz	r4, 8001bea <audiod_open+0x3e>
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001bd6:	f44f 729c 	mov.w	r2, #312	; 0x138
      _audiod_fct[i].rhport = rhport;
 8001bda:	7018      	strb	r0, [r3, #0]
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8001bdc:	6059      	str	r1, [r3, #4]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001bde:	825a      	strh	r2, [r3, #18]
  return drv_len;
 8001be0:	f44f 7098 	mov.w	r0, #304	; 0x130
}
 8001be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be8:	4770      	bx	lr
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8001bea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bee:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8001bf2:	f010 0001 	ands.w	r0, r0, #1
 8001bf6:	d0f5      	beq.n	8001be4 <audiod_open+0x38>
 8001bf8:	be00      	bkpt	0x0000
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	e7f2      	b.n	8001be4 <audiod_open+0x38>
 8001bfe:	bf00      	nop
 8001c00:	20000ef0 	.word	0x20000ef0

08001c04 <audiod_control_xfer_cb>:
{
 8001c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( stage == CONTROL_STAGE_SETUP )
 8001c08:	2901      	cmp	r1, #1
{
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	4614      	mov	r4, r2
  if ( stage == CONTROL_STAGE_SETUP )
 8001c10:	d006      	beq.n	8001c20 <audiod_control_xfer_cb+0x1c>
  else if ( stage == CONTROL_STAGE_DATA )
 8001c12:	2902      	cmp	r1, #2
 8001c14:	d041      	beq.n	8001c9a <audiod_control_xfer_cb+0x96>
  return true;
 8001c16:	2201      	movs	r2, #1
}
 8001c18:	4610      	mov	r0, r2
 8001c1a:	b003      	add	sp, #12
 8001c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8001c20:	7810      	ldrb	r0, [r2, #0]
 8001c22:	f010 0860 	ands.w	r8, r0, #96	; 0x60
 8001c26:	d129      	bne.n	8001c7c <audiod_control_xfer_cb+0x78>
    switch (p_request->bRequest)
 8001c28:	7853      	ldrb	r3, [r2, #1]
 8001c2a:	2b0a      	cmp	r3, #10
 8001c2c:	f000 8090 	beq.w	8001d50 <audiod_control_xfer_cb+0x14c>
 8001c30:	2b0b      	cmp	r3, #11
 8001c32:	d126      	bne.n	8001c82 <audiod_control_xfer_cb+0x7e>
  if (audio->p_desc)
 8001c34:	4f9d      	ldr	r7, [pc, #628]	; (8001eac <audiod_control_xfer_cb+0x2a8>)
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	b352      	cbz	r2, 8001c90 <audiod_control_xfer_cb+0x8c>
 8001c3a:	7816      	ldrb	r6, [r2, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001c3c:	8a7b      	ldrh	r3, [r7, #18]
 8001c3e:	4416      	add	r6, r2
 8001c40:	3b08      	subs	r3, #8
 8001c42:	441a      	add	r2, r3
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001c44:	88f3      	ldrh	r3, [r6, #6]
 8001c46:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 8001c48:	42b2      	cmp	r2, r6
 8001c4a:	d921      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8001c4c:	f8b4 a004 	ldrh.w	sl, [r4, #4]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001c50:	fa5f fa8a 	uxtb.w	sl, sl
 8001c54:	e003      	b.n	8001c5e <audiod_control_xfer_cb+0x5a>
 8001c56:	7833      	ldrb	r3, [r6, #0]
 8001c58:	441e      	add	r6, r3
    while (p_desc < p_desc_end)
 8001c5a:	42b2      	cmp	r2, r6
 8001c5c:	d918      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001c5e:	7873      	ldrb	r3, [r6, #1]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d1f8      	bne.n	8001c56 <audiod_control_xfer_cb+0x52>
 8001c64:	78f3      	ldrb	r3, [r6, #3]
        tmp++;
 8001c66:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f3      	bne.n	8001c56 <audiod_control_xfer_cb+0x52>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8001c6e:	78b0      	ldrb	r0, [r6, #2]
 8001c70:	4550      	cmp	r0, sl
 8001c72:	f000 808f 	beq.w	8001d94 <audiod_control_xfer_cb+0x190>
        tmp++;
 8001c76:	fa5f f881 	uxtb.w	r8, r1
 8001c7a:	e7ec      	b.n	8001c56 <audiod_control_xfer_cb+0x52>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8001c7c:	f1b8 0f20 	cmp.w	r8, #32
 8001c80:	d03a      	beq.n	8001cf8 <audiod_control_xfer_cb+0xf4>
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8001c82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001c86:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001c8a:	07d8      	lsls	r0, r3, #31
 8001c8c:	d500      	bpl.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001c8e:	be00      	bkpt	0x0000
 8001c90:	2200      	movs	r2, #0
}
 8001c92:	4610      	mov	r0, r2
 8001c94:	b003      	add	sp, #12
 8001c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8001c9a:	7813      	ldrb	r3, [r2, #0]
 8001c9c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8001ca0:	2a20      	cmp	r2, #32
 8001ca2:	d1b8      	bne.n	8001c16 <audiod_control_xfer_cb+0x12>
    switch (p_request->bmRequestType_bit.recipient)
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f000 80d4 	beq.w	8001e56 <audiod_control_xfer_cb+0x252>
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d1e7      	bne.n	8001c82 <audiod_control_xfer_cb+0x7e>
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8001cb2:	88a0      	ldrh	r0, [r4, #4]
        if (tud_audio_set_req_ep_cb)
 8001cb4:	4b7e      	ldr	r3, [pc, #504]	; (8001eb0 <audiod_control_xfer_cb+0x2ac>)
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8001cb6:	b2c0      	uxtb	r0, r0
        if (tud_audio_set_req_ep_cb)
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0e9      	beq.n	8001c90 <audiod_control_xfer_cb+0x8c>
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 8001cbc:	4f7b      	ldr	r7, [pc, #492]	; (8001eac <audiod_control_xfer_cb+0x2a8>)
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2900      	cmp	r1, #0
 8001cc2:	d0e5      	beq.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001cc4:	780b      	ldrb	r3, [r1, #0]
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8001cc6:	8a7a      	ldrh	r2, [r7, #18]
 8001cc8:	440b      	add	r3, r1
 8001cca:	4411      	add	r1, r2

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001ccc:	88da      	ldrh	r2, [r3, #6]
 8001cce:	4413      	add	r3, r2

      while (p_desc < p_desc_end)
 8001cd0:	4299      	cmp	r1, r3
 8001cd2:	d804      	bhi.n	8001cde <audiod_control_xfer_cb+0xda>
 8001cd4:	e7dc      	b.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4299      	cmp	r1, r3
 8001cdc:	d9d8      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8001cde:	785a      	ldrb	r2, [r3, #1]
 8001ce0:	2a05      	cmp	r2, #5
 8001ce2:	d1f8      	bne.n	8001cd6 <audiod_control_xfer_cb+0xd2>
 8001ce4:	789a      	ldrb	r2, [r3, #2]
 8001ce6:	4282      	cmp	r2, r0
 8001ce8:	d1f5      	bne.n	8001cd6 <audiod_control_xfer_cb+0xd2>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4621      	mov	r1, r4
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f3af 8000 	nop.w
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	e78f      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8001cf8:	8893      	ldrh	r3, [r2, #4]
    switch (p_request->bmRequestType_bit.recipient)
 8001cfa:	f000 021f 	and.w	r2, r0, #31
 8001cfe:	2a01      	cmp	r2, #1
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8001d00:	b2de      	uxtb	r6, r3
    switch (p_request->bmRequestType_bit.recipient)
 8001d02:	f000 80ec 	beq.w	8001ede <audiod_control_xfer_cb+0x2da>
 8001d06:	2a02      	cmp	r2, #2
 8001d08:	d1bb      	bne.n	8001c82 <audiod_control_xfer_cb+0x7e>
    if (_audiod_fct[i].p_desc)
 8001d0a:	4f68      	ldr	r7, [pc, #416]	; (8001eac <audiod_control_xfer_cb+0x2a8>)
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	2900      	cmp	r1, #0
 8001d10:	d0be      	beq.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001d12:	780b      	ldrb	r3, [r1, #0]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8001d14:	8a7a      	ldrh	r2, [r7, #18]
 8001d16:	440b      	add	r3, r1
 8001d18:	4411      	add	r1, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001d1a:	88da      	ldrh	r2, [r3, #6]
 8001d1c:	4413      	add	r3, r2
      while (p_desc < p_desc_end)
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	d804      	bhi.n	8001d2c <audiod_control_xfer_cb+0x128>
 8001d22:	e7b5      	b.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4299      	cmp	r1, r3
 8001d2a:	d9b1      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8001d2c:	785a      	ldrb	r2, [r3, #1]
 8001d2e:	2a05      	cmp	r2, #5
 8001d30:	d1f8      	bne.n	8001d24 <audiod_control_xfer_cb+0x120>
 8001d32:	789a      	ldrb	r2, [r3, #2]
 8001d34:	42b2      	cmp	r2, r6
 8001d36:	d1f5      	bne.n	8001d24 <audiod_control_xfer_cb+0x120>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8001d38:	0603      	lsls	r3, r0, #24
 8001d3a:	f100 816f 	bmi.w	800201c <audiod_control_xfer_cb+0x418>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8001d3e:	7e3b      	ldrb	r3, [r7, #24]
 8001d40:	697a      	ldr	r2, [r7, #20]
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8001d42:	4621      	mov	r1, r4
 8001d44:	4628      	mov	r0, r5
}
 8001d46:	b003      	add	sp, #12
 8001d48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8001d4c:	f001 bfa0 	b.w	8003c90 <tud_control_xfer>
  if (audio->p_desc)
 8001d50:	4f56      	ldr	r7, [pc, #344]	; (8001eac <audiod_control_xfer_cb+0x2a8>)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d09b      	beq.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001d58:	7803      	ldrb	r3, [r0, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001d5a:	8a7a      	ldrh	r2, [r7, #18]
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3a08      	subs	r2, #8
 8001d60:	4410      	add	r0, r2
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001d62:	88da      	ldrh	r2, [r3, #6]
 8001d64:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d992      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8001d6a:	88a6      	ldrh	r6, [r4, #4]
 8001d6c:	b2f6      	uxtb	r6, r6
 8001d6e:	e003      	b.n	8001d78 <audiod_control_xfer_cb+0x174>
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4413      	add	r3, r2
    while (p_desc < p_desc_end)
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d98b      	bls.n	8001c90 <audiod_control_xfer_cb+0x8c>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001d78:	785a      	ldrb	r2, [r3, #1]
 8001d7a:	2a04      	cmp	r2, #4
 8001d7c:	d1f8      	bne.n	8001d70 <audiod_control_xfer_cb+0x16c>
 8001d7e:	78da      	ldrb	r2, [r3, #3]
        tmp++;
 8001d80:	f108 0101 	add.w	r1, r8, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d1f3      	bne.n	8001d70 <audiod_control_xfer_cb+0x16c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8001d88:	789a      	ldrb	r2, [r3, #2]
 8001d8a:	42b2      	cmp	r2, r6
 8001d8c:	d05f      	beq.n	8001e4e <audiod_control_xfer_cb+0x24a>
        tmp++;
 8001d8e:	fa5f f881 	uxtb.w	r8, r1
 8001d92:	e7ed      	b.n	8001d70 <audiod_control_xfer_cb+0x16c>
  if (audio->ep_in_as_intf_num == itf)
 8001d94:	4699      	mov	r9, r3
 8001d96:	7b3b      	ldrb	r3, [r7, #12]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8001d98:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  if (audio->ep_in_as_intf_num == itf)
 8001d9c:	4553      	cmp	r3, sl
 8001d9e:	f000 8113 	beq.w	8001fc8 <audiod_control_xfer_cb+0x3c4>
  if (audio->ep_out_as_intf_num == itf)
 8001da2:	7c3b      	ldrb	r3, [r7, #16]
 8001da4:	4553      	cmp	r3, sl
 8001da6:	f000 8124 	beq.w	8001ff2 <audiod_control_xfer_cb+0x3ee>
  audio->alt_setting[idxItf] = alt;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa5f f28b 	uxtb.w	r2, fp
 8001db0:	f803 2008 	strb.w	r2, [r3, r8]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001db4:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1a8 0808 	sub.w	r8, r8, #8
 8001dbe:	4498      	add	r8, r3
  while (p_desc < p_desc_end)
 8001dc0:	45b0      	cmp	r8, r6
 8001dc2:	d805      	bhi.n	8001dd0 <audiod_control_xfer_cb+0x1cc>
 8001dc4:	e085      	b.n	8001ed2 <audiod_control_xfer_cb+0x2ce>
 8001dc6:	7833      	ldrb	r3, [r6, #0]
 8001dc8:	441e      	add	r6, r3
 8001dca:	45b0      	cmp	r8, r6
 8001dcc:	f240 8081 	bls.w	8001ed2 <audiod_control_xfer_cb+0x2ce>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8001dd0:	7873      	ldrb	r3, [r6, #1]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d1f7      	bne.n	8001dc6 <audiod_control_xfer_cb+0x1c2>
 8001dd6:	78b3      	ldrb	r3, [r6, #2]
 8001dd8:	4553      	cmp	r3, sl
 8001dda:	d1f4      	bne.n	8001dc6 <audiod_control_xfer_cb+0x1c2>
 8001ddc:	78f3      	ldrb	r3, [r6, #3]
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d1f1      	bne.n	8001dc6 <audiod_control_xfer_cb+0x1c2>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8001de2:	f896 b004 	ldrb.w	fp, [r6, #4]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8001de6:	f1bb 0f00 	cmp.w	fp, #0
 8001dea:	d069      	beq.n	8001ec0 <audiod_control_xfer_cb+0x2bc>
 8001dec:	45b0      	cmp	r8, r6
 8001dee:	f67f af4f 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
 8001df2:	7833      	ldrb	r3, [r6, #0]
 8001df4:	45cb      	cmp	fp, r9
 8001df6:	441e      	add	r6, r3
 8001df8:	d960      	bls.n	8001ebc <audiod_control_xfer_cb+0x2b8>
 8001dfa:	45b0      	cmp	r8, r6
 8001dfc:	f67f af48 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8001e00:	7873      	ldrb	r3, [r6, #1]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d1f5      	bne.n	8001df2 <audiod_control_xfer_cb+0x1ee>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8001e06:	4631      	mov	r1, r6
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f001 fe31 	bl	8003a70 <usbd_edpt_open>
 8001e0e:	4602      	mov	r2, r0
          usbd_edpt_clear_stall(rhport, ep_addr);
 8001e10:	4628      	mov	r0, r5
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	f000 811f 	beq.w	8002056 <audiod_control_xfer_cb+0x452>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8001e18:	78b1      	ldrb	r1, [r6, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 8001e1a:	9101      	str	r1, [sp, #4]
 8001e1c:	f001 fed4 	bl	8003bc8 <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8001e20:	9901      	ldr	r1, [sp, #4]
 8001e22:	09cb      	lsrs	r3, r1, #7
 8001e24:	f040 8104 	bne.w	8002030 <audiod_control_xfer_cb+0x42c>
            audio->ep_out = ep_addr;
 8001e28:	7379      	strb	r1, [r7, #13]
            audio->ep_out_as_intf_num = itf;
 8001e2a:	f887 a010 	strb.w	sl, [r7, #16]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8001e2e:	88b3      	ldrh	r3, [r6, #4]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8001e30:	4a20      	ldr	r2, [pc, #128]	; (8001eb4 <audiod_control_xfer_cb+0x2b0>)
 8001e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e36:	4628      	mov	r0, r5
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8001e38:	81fb      	strh	r3, [r7, #14]
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8001e3a:	f001 fe8f 	bl	8003b5c <usbd_edpt_xfer_fifo>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	f43f af26 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
          foundEPs += 1;
 8001e44:	f109 0901 	add.w	r9, r9, #1
 8001e48:	fa5f f989 	uxtb.w	r9, r9
 8001e4c:	e7d1      	b.n	8001df2 <audiod_control_xfer_cb+0x1ee>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	2301      	movs	r3, #1
 8001e52:	4442      	add	r2, r8
 8001e54:	e775      	b.n	8001d42 <audiod_control_xfer_cb+0x13e>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8001e56:	88a3      	ldrh	r3, [r4, #4]
 8001e58:	b2de      	uxtb	r6, r3
        if (entityID != 0)
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f000 8091 	beq.w	8001f82 <audiod_control_xfer_cb+0x37e>
          if (tud_audio_set_req_entity_cb)
 8001e60:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <audiod_control_xfer_cb+0x2b4>)
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	f43f af14 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001e68:	4f10      	ldr	r7, [pc, #64]	; (8001eac <audiod_control_xfer_cb+0x2a8>)
 8001e6a:	6879      	ldr	r1, [r7, #4]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	f43f af0e 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001e74:	788b      	ldrb	r3, [r1, #2]
 8001e76:	42b3      	cmp	r3, r6
 8001e78:	f47f af0a 	bne.w	8001c90 <audiod_control_xfer_cb+0x8c>
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001e7c:	780b      	ldrb	r3, [r1, #0]
 8001e7e:	18c8      	adds	r0, r1, r3
 8001e80:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8001e82:	88c1      	ldrh	r1, [r0, #6]
 8001e84:	4403      	add	r3, r0
 8001e86:	4408      	add	r0, r1
      while (p_desc < p_desc_end)
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	d805      	bhi.n	8001e98 <audiod_control_xfer_cb+0x294>
 8001e8c:	e700      	b.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001e8e:	7819      	ldrb	r1, [r3, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	4298      	cmp	r0, r3
 8001e94:	f67f aefc 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8001e98:	78d9      	ldrb	r1, [r3, #3]
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	d1f7      	bne.n	8001e8e <audiod_control_xfer_cb+0x28a>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	f7fe fbd2 	bl	800064c <tud_audio_set_req_entity_cb>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	e6b5      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
 8001eac:	20000ef0 	.word	0x20000ef0
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	20000f10 	.word	0x20000f10
 8001eb8:	0800064d 	.word	0x0800064d
      TU_VERIFY(foundEPs == nEps);
 8001ebc:	f47f aee8 	bne.w	8001c90 <audiod_control_xfer_cb+0x8c>
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <audiod_control_xfer_cb+0x464>)
 8001ec2:	b133      	cbz	r3, 8001ed2 <audiod_control_xfer_cb+0x2ce>
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f7fe fc0a 	bl	80006e0 <tud_audio_set_itf_cb>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	f43f aedf 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
  tud_control_status(rhport, p_request);
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	f001 fec1 	bl	8003c5c <tud_control_status>
  return true;
 8001eda:	2201      	movs	r2, #1
 8001edc:	e69c      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
        if (entityID != 0)
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	d027      	beq.n	8001f32 <audiod_control_xfer_cb+0x32e>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001ee2:	4f62      	ldr	r7, [pc, #392]	; (800206c <audiod_control_xfer_cb+0x468>)
 8001ee4:	6879      	ldr	r1, [r7, #4]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	2900      	cmp	r1, #0
 8001eea:	f43f aed1 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001eee:	788b      	ldrb	r3, [r1, #2]
 8001ef0:	42b3      	cmp	r3, r6
 8001ef2:	f47f aecd 	bne.w	8001c90 <audiod_control_xfer_cb+0x8c>
 8001ef6:	780b      	ldrb	r3, [r1, #0]
 8001ef8:	18ce      	adds	r6, r1, r3
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8001efc:	88f1      	ldrh	r1, [r6, #6]
 8001efe:	4433      	add	r3, r6
 8001f00:	440e      	add	r6, r1
      while (p_desc < p_desc_end)
 8001f02:	429e      	cmp	r6, r3
 8001f04:	d805      	bhi.n	8001f12 <audiod_control_xfer_cb+0x30e>
 8001f06:	e6c3      	b.n	8001c90 <audiod_control_xfer_cb+0x8c>
 8001f08:	7819      	ldrb	r1, [r3, #0]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	429e      	cmp	r6, r3
 8001f0e:	f67f aebf 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8001f12:	78d9      	ldrb	r1, [r3, #3]
 8001f14:	4291      	cmp	r1, r2
 8001f16:	d1f7      	bne.n	8001f08 <audiod_control_xfer_cb+0x304>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8001f18:	0601      	lsls	r1, r0, #24
 8001f1a:	f57f af10 	bpl.w	8001d3e <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_entity_cb)
 8001f1e:	4b54      	ldr	r3, [pc, #336]	; (8002070 <audiod_control_xfer_cb+0x46c>)
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f43f aeb5 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8001f26:	4621      	mov	r1, r4
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f7fe fafd 	bl	8000528 <tud_audio_get_req_entity_cb>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	e672      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
    if (_audiod_fct[i].p_desc)
 8001f32:	4f4e      	ldr	r7, [pc, #312]	; (800206c <audiod_control_xfer_cb+0x468>)
 8001f34:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001f38:	f1bc 0f00 	cmp.w	ip, #0
 8001f3c:	f43f aea8 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001f40:	8a79      	ldrh	r1, [r7, #18]
 8001f42:	3908      	subs	r1, #8
 8001f44:	4461      	add	r1, ip
      while (p_desc < p_desc_end)
 8001f46:	458c      	cmp	ip, r1
 8001f48:	f4bf aea2 	bcs.w	8001c90 <audiod_control_xfer_cb+0x8c>
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	e004      	b.n	8001f5a <audiod_control_xfer_cb+0x356>
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4299      	cmp	r1, r3
 8001f56:	f67f ae9b 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001f5a:	785a      	ldrb	r2, [r3, #1]
 8001f5c:	2a04      	cmp	r2, #4
 8001f5e:	d1f7      	bne.n	8001f50 <audiod_control_xfer_cb+0x34c>
 8001f60:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8001f64:	42b2      	cmp	r2, r6
 8001f66:	d1f3      	bne.n	8001f50 <audiod_control_xfer_cb+0x34c>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8001f68:	0602      	lsls	r2, r0, #24
 8001f6a:	f57f aee8 	bpl.w	8001d3e <audiod_control_xfer_cb+0x13a>
            if (tud_audio_get_req_itf_cb)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <audiod_control_xfer_cb+0x470>)
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f43f ae8d 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f3af 8000 	nop.w
 8001f7e:	4602      	mov	r2, r0
 8001f80:	e64a      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
          if (tud_audio_set_req_itf_cb)
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <audiod_control_xfer_cb+0x474>)
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f43f ae83 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    if (_audiod_fct[i].p_desc)
 8001f8a:	4f38      	ldr	r7, [pc, #224]	; (800206c <audiod_control_xfer_cb+0x468>)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	f43f ae7e 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001f94:	8a79      	ldrh	r1, [r7, #18]
 8001f96:	3908      	subs	r1, #8
 8001f98:	4401      	add	r1, r0
      while (p_desc < p_desc_end)
 8001f9a:	4288      	cmp	r0, r1
 8001f9c:	f4bf ae78 	bcs.w	8001c90 <audiod_control_xfer_cb+0x8c>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	e004      	b.n	8001fae <audiod_control_xfer_cb+0x3aa>
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4299      	cmp	r1, r3
 8001faa:	f67f ae71 	bls.w	8001c90 <audiod_control_xfer_cb+0x8c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001fae:	785a      	ldrb	r2, [r3, #1]
 8001fb0:	2a04      	cmp	r2, #4
 8001fb2:	d1f7      	bne.n	8001fa4 <audiod_control_xfer_cb+0x3a0>
 8001fb4:	7882      	ldrb	r2, [r0, #2]
 8001fb6:	42b2      	cmp	r2, r6
 8001fb8:	d1f4      	bne.n	8001fa4 <audiod_control_xfer_cb+0x3a0>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f3af 8000 	nop.w
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	e627      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
    usbd_edpt_close(rhport, audio->ep_in);
 8001fc8:	7a39      	ldrb	r1, [r7, #8]
    audio->ep_in_as_intf_num = 0;
 8001fca:	f887 900c 	strb.w	r9, [r7, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f001 fe18 	bl	8003c04 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_in_ff);
 8001fd4:	4829      	ldr	r0, [pc, #164]	; (800207c <audiod_control_xfer_cb+0x478>)
 8001fd6:	f000 ff2d 	bl	8002e34 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <audiod_control_xfer_cb+0x47c>)
 8001fdc:	b133      	cbz	r3, 8001fec <audiod_control_xfer_cb+0x3e8>
 8001fde:	4621      	mov	r1, r4
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f7fe fb6b 	bl	80006bc <tud_audio_set_itf_close_EP_cb>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f43f ae52 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    audio->ep_in = 0;                           // Necessary?
 8001fec:	2300      	movs	r3, #0
 8001fee:	723b      	strb	r3, [r7, #8]
 8001ff0:	e6d7      	b.n	8001da2 <audiod_control_xfer_cb+0x19e>
    audio->ep_out_as_intf_num = 0;
 8001ff2:	2300      	movs	r3, #0
    usbd_edpt_close(rhport, audio->ep_out);
 8001ff4:	7b79      	ldrb	r1, [r7, #13]
    audio->ep_out_as_intf_num = 0;
 8001ff6:	743b      	strb	r3, [r7, #16]
    usbd_edpt_close(rhport, audio->ep_out);
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f001 fe03 	bl	8003c04 <usbd_edpt_close>
    tu_fifo_clear(&audio->ep_out_ff);
 8001ffe:	4821      	ldr	r0, [pc, #132]	; (8002084 <audiod_control_xfer_cb+0x480>)
 8002000:	f000 ff18 	bl	8002e34 <tu_fifo_clear>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <audiod_control_xfer_cb+0x47c>)
 8002006:	b133      	cbz	r3, 8002016 <audiod_control_xfer_cb+0x412>
 8002008:	4621      	mov	r1, r4
 800200a:	4628      	mov	r0, r5
 800200c:	f7fe fb56 	bl	80006bc <tud_audio_set_itf_close_EP_cb>
 8002010:	2800      	cmp	r0, #0
 8002012:	f43f ae3d 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
    audio->ep_out = 0;                          // Necessary?
 8002016:	2300      	movs	r3, #0
 8002018:	737b      	strb	r3, [r7, #13]
 800201a:	e6c6      	b.n	8001daa <audiod_control_xfer_cb+0x1a6>
          if (tud_audio_get_req_ep_cb)
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <audiod_control_xfer_cb+0x484>)
 800201e:	2b00      	cmp	r3, #0
 8002020:	f43f ae36 	beq.w	8001c90 <audiod_control_xfer_cb+0x8c>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8002024:	4621      	mov	r1, r4
 8002026:	4628      	mov	r0, r5
 8002028:	f3af 8000 	nop.w
 800202c:	4602      	mov	r2, r0
 800202e:	e5f3      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8002030:	78f3      	ldrb	r3, [r6, #3]
 8002032:	f013 0f30 	tst.w	r3, #48	; 0x30
 8002036:	f47f af05 	bne.w	8001e44 <audiod_control_xfer_cb+0x240>
            audio->ep_in = ep_addr;
 800203a:	7239      	strb	r1, [r7, #8]
            audio->ep_in_as_intf_num = itf;
 800203c:	f887 a00c 	strb.w	sl, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8002040:	88b3      	ldrh	r3, [r6, #4]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002042:	4628      	mov	r0, r5
 8002044:	f3c3 030a 	ubfx	r3, r3, #0, #11
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8002048:	817b      	strh	r3, [r7, #10]
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 800204a:	f7ff fcf7 	bl	8001a3c <audiod_tx_done_cb.constprop.0>
 800204e:	2800      	cmp	r0, #0
 8002050:	f47f aef8 	bne.w	8001e44 <audiod_control_xfer_cb+0x240>
 8002054:	e61c      	b.n	8001c90 <audiod_control_xfer_cb+0x8c>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8002056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800205a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800205e:	07dc      	lsls	r4, r3, #31
 8002060:	f57f ae16 	bpl.w	8001c90 <audiod_control_xfer_cb+0x8c>
 8002064:	be00      	bkpt	0x0000
 8002066:	e5d7      	b.n	8001c18 <audiod_control_xfer_cb+0x14>
 8002068:	080006e1 	.word	0x080006e1
 800206c:	20000ef0 	.word	0x20000ef0
 8002070:	08000529 	.word	0x08000529
	...
 800207c:	20000f1c 	.word	0x20000f1c
 8002080:	080006bd 	.word	0x080006bd
 8002084:	20000f10 	.word	0x20000f10
 8002088:	00000000 	.word	0x00000000

0800208c <audiod_xfer_cb>:
{
 800208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 8002090:	4c33      	ldr	r4, [pc, #204]	; (8002160 <audiod_xfer_cb+0xd4>)
 8002092:	7a22      	ldrb	r2, [r4, #8]
 8002094:	428a      	cmp	r2, r1
{
 8002096:	b082      	sub	sp, #8
 8002098:	4605      	mov	r5, r0
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 800209a:	d059      	beq.n	8002150 <audiod_xfer_cb+0xc4>
    if (audio->ep_out == ep_addr)
 800209c:	7b62      	ldrb	r2, [r4, #13]
 800209e:	428a      	cmp	r2, r1
 80020a0:	d12b      	bne.n	80020fa <audiod_xfer_cb+0x6e>
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 80020a2:	4f30      	ldr	r7, [pc, #192]	; (8002164 <audiod_xfer_cb+0xd8>)
 80020a4:	b36f      	cbz	r7, 8002102 <audiod_xfer_cb+0x76>
  if (audio->p_desc)
 80020a6:	6860      	ldr	r0, [r4, #4]
 80020a8:	b338      	cbz	r0, 80020fa <audiod_xfer_cb+0x6e>
  return desc8 + desc8[DESC_OFFSET_LEN];
 80020aa:	7802      	ldrb	r2, [r0, #0]
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80020ac:	f8b4 e012 	ldrh.w	lr, [r4, #18]
 80020b0:	4402      	add	r2, r0
 80020b2:	f1ae 0e08 	sub.w	lr, lr, #8
 80020b6:	4486      	add	lr, r0
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 80020b8:	88d0      	ldrh	r0, [r2, #6]
 80020ba:	4402      	add	r2, r0
    while (p_desc < p_desc_end)
 80020bc:	4596      	cmp	lr, r2
 80020be:	d91c      	bls.n	80020fa <audiod_xfer_cb+0x6e>
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 80020c0:	f894 8010 	ldrb.w	r8, [r4, #16]
    uint8_t tmp = 0;
 80020c4:	2600      	movs	r6, #0
 80020c6:	e004      	b.n	80020d2 <audiod_xfer_cb+0x46>
 80020c8:	f892 c000 	ldrb.w	ip, [r2]
 80020cc:	4462      	add	r2, ip
    while (p_desc < p_desc_end)
 80020ce:	4596      	cmp	lr, r2
 80020d0:	d913      	bls.n	80020fa <audiod_xfer_cb+0x6e>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 80020d2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80020d6:	f1bc 0f04 	cmp.w	ip, #4
 80020da:	d1f5      	bne.n	80020c8 <audiod_xfer_cb+0x3c>
 80020dc:	78d0      	ldrb	r0, [r2, #3]
        tmp++;
 80020de:	f106 0c01 	add.w	ip, r6, #1
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d1f0      	bne.n	80020c8 <audiod_xfer_cb+0x3c>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 80020e6:	7890      	ldrb	r0, [r2, #2]
 80020e8:	4540      	cmp	r0, r8
 80020ea:	d00e      	beq.n	800210a <audiod_xfer_cb+0x7e>
        tmp++;
 80020ec:	fa5f f68c 	uxtb.w	r6, ip
 80020f0:	f892 c000 	ldrb.w	ip, [r2]
 80020f4:	4462      	add	r2, ip
    while (p_desc < p_desc_end)
 80020f6:	4596      	cmp	lr, r2
 80020f8:	d8eb      	bhi.n	80020d2 <audiod_xfer_cb+0x46>
  return false;
 80020fa:	2000      	movs	r0, #0
}
 80020fc:	b002      	add	sp, #8
 80020fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <audiod_xfer_cb+0xdc>)
 8002104:	2a00      	cmp	r2, #0
 8002106:	d1ce      	bne.n	80020a6 <audiod_xfer_cb+0x1a>
  uint8_t idxItf = 0;
 8002108:	463e      	mov	r6, r7
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 800210a:	fa1f f883 	uxth.w	r8, r3
  if (tud_audio_rx_done_pre_read_cb)
 800210e:	b15f      	cbz	r7, 8002128 <audiod_xfer_cb+0x9c>
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8002110:	69e2      	ldr	r2, [r4, #28]
 8002112:	5d92      	ldrb	r2, [r2, r6]
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	460b      	mov	r3, r1
 8002118:	2200      	movs	r2, #0
 800211a:	4641      	mov	r1, r8
 800211c:	4628      	mov	r0, r5
 800211e:	f7fe fb11 	bl	8000744 <tud_audio_rx_done_pre_read_cb>
 8002122:	2800      	cmp	r0, #0
 8002124:	d0e9      	beq.n	80020fa <audiod_xfer_cb+0x6e>
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8002126:	7b61      	ldrb	r1, [r4, #13]
 8002128:	89e3      	ldrh	r3, [r4, #14]
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <audiod_xfer_cb+0xe0>)
 800212c:	4628      	mov	r0, r5
 800212e:	f001 fd15 	bl	8003b5c <usbd_edpt_xfer_fifo>
 8002132:	2800      	cmp	r0, #0
 8002134:	d0e1      	beq.n	80020fa <audiod_xfer_cb+0x6e>
  if (tud_audio_rx_done_post_read_cb)
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <audiod_xfer_cb+0xdc>)
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0df      	beq.n	80020fc <audiod_xfer_cb+0x70>
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 800213c:	69e2      	ldr	r2, [r4, #28]
 800213e:	7b63      	ldrb	r3, [r4, #13]
 8002140:	5d92      	ldrb	r2, [r2, r6]
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	4641      	mov	r1, r8
 8002146:	2200      	movs	r2, #0
 8002148:	4628      	mov	r0, r5
 800214a:	f3af 8000 	nop.w
 800214e:	e7d5      	b.n	80020fc <audiod_xfer_cb+0x70>
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 8002150:	69e2      	ldr	r2, [r4, #28]
 8002152:	2a00      	cmp	r2, #0
 8002154:	d0a2      	beq.n	800209c <audiod_xfer_cb+0x10>
}
 8002156:	b002      	add	sp, #8
 8002158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800215c:	f7ff bc6e 	b.w	8001a3c <audiod_tx_done_cb.constprop.0>
 8002160:	20000ef0 	.word	0x20000ef0
 8002164:	08000745 	.word	0x08000745
 8002168:	00000000 	.word	0x00000000
 800216c:	20000f10 	.word	0x20000f10

08002170 <audiod_sof_isr>:
}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <tud_audio_buffer_and_schedule_control_xfer>:
{
 8002174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8002178:	f991 5000 	ldrsb.w	r5, [r1]
 800217c:	2d00      	cmp	r5, #0
{
 800217e:	b082      	sub	sp, #8
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8002180:	da46      	bge.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002182:	460c      	mov	r4, r1
 8002184:	4611      	mov	r1, r2
  switch (p_request->bmRequestType_bit.recipient)
 8002186:	7822      	ldrb	r2, [r4, #0]
 8002188:	4606      	mov	r6, r0
 800218a:	f002 021f 	and.w	r2, r2, #31
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800218e:	88a0      	ldrh	r0, [r4, #4]
  switch (p_request->bmRequestType_bit.recipient)
 8002190:	2a01      	cmp	r2, #1
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002192:	fa5f f880 	uxtb.w	r8, r0
  switch (p_request->bmRequestType_bit.recipient)
 8002196:	d032      	beq.n	80021fe <tud_audio_buffer_and_schedule_control_xfer+0x8a>
 8002198:	2a02      	cmp	r2, #2
 800219a:	d13d      	bne.n	8002218 <tud_audio_buffer_and_schedule_control_xfer+0xa4>
    if (_audiod_fct[i].p_desc)
 800219c:	4d38      	ldr	r5, [pc, #224]	; (8002280 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800219e:	686f      	ldr	r7, [r5, #4]
 80021a0:	2f00      	cmp	r7, #0
 80021a2:	d035      	beq.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80021a4:	f897 c000 	ldrb.w	ip, [r7]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 80021a8:	8a6a      	ldrh	r2, [r5, #18]
 80021aa:	44bc      	add	ip, r7
 80021ac:	4417      	add	r7, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 80021ae:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80021b2:	4494      	add	ip, r2
      while (p_desc < p_desc_end)
 80021b4:	4567      	cmp	r7, ip
 80021b6:	d805      	bhi.n	80021c4 <tud_audio_buffer_and_schedule_control_xfer+0x50>
 80021b8:	e02a      	b.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80021ba:	f89c 0000 	ldrb.w	r0, [ip]
 80021be:	4484      	add	ip, r0
 80021c0:	4567      	cmp	r7, ip
 80021c2:	d925      	bls.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 80021c4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80021c8:	f1be 0f05 	cmp.w	lr, #5
 80021cc:	d1f5      	bne.n	80021ba <tud_audio_buffer_and_schedule_control_xfer+0x46>
 80021ce:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80021d2:	4542      	cmp	r2, r8
 80021d4:	d1f1      	bne.n	80021ba <tud_audio_buffer_and_schedule_control_xfer+0x46>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 80021d6:	7e2a      	ldrb	r2, [r5, #24]
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 80021d8:	6968      	ldr	r0, [r5, #20]
 80021da:	4293      	cmp	r3, r2
 80021dc:	bf28      	it	cs
 80021de:	4613      	movcs	r3, r2
  if (count > destsz) {
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d315      	bcc.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
  memcpy(dest, src, count);
 80021e4:	461a      	mov	r2, r3
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	f002 fecc 	bl	8004f84 <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 80021ec:	9b01      	ldr	r3, [sp, #4]
 80021ee:	696a      	ldr	r2, [r5, #20]
 80021f0:	4621      	mov	r1, r4
 80021f2:	4630      	mov	r0, r6
}
 80021f4:	b002      	add	sp, #8
 80021f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 80021fa:	f001 bd49 	b.w	8003c90 <tud_control_xfer>
      if (entityID != 0)
 80021fe:	0a00      	lsrs	r0, r0, #8
 8002200:	d012      	beq.n	8002228 <tud_audio_buffer_and_schedule_control_xfer+0xb4>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8002202:	4d1f      	ldr	r5, [pc, #124]	; (8002280 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 8002204:	686f      	ldr	r7, [r5, #4]
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002206:	b2c0      	uxtb	r0, r0
 8002208:	b117      	cbz	r7, 8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800220a:	78ba      	ldrb	r2, [r7, #2]
 800220c:	4542      	cmp	r2, r8
 800220e:	d023      	beq.n	8002258 <tud_audio_buffer_and_schedule_control_xfer+0xe4>
}
 8002210:	2000      	movs	r0, #0
 8002212:	b002      	add	sp, #8
 8002214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002218:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800221c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8002220:	07db      	lsls	r3, r3, #31
 8002222:	d5f5      	bpl.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 8002224:	be00      	bkpt	0x0000
 8002226:	e7f3      	b.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
    if (_audiod_fct[i].p_desc)
 8002228:	4d15      	ldr	r5, [pc, #84]	; (8002280 <tud_audio_buffer_and_schedule_control_xfer+0x10c>)
 800222a:	686f      	ldr	r7, [r5, #4]
 800222c:	2f00      	cmp	r7, #0
 800222e:	d0ef      	beq.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002230:	8a68      	ldrh	r0, [r5, #18]
 8002232:	3808      	subs	r0, #8
 8002234:	4438      	add	r0, r7
      while (p_desc < p_desc_end)
 8002236:	4287      	cmp	r7, r0
 8002238:	d2ea      	bcs.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800223a:	46bc      	mov	ip, r7
 800223c:	e004      	b.n	8002248 <tud_audio_buffer_and_schedule_control_xfer+0xd4>
 800223e:	f89c 2000 	ldrb.w	r2, [ip]
 8002242:	4494      	add	ip, r2
 8002244:	4560      	cmp	r0, ip
 8002246:	d9e3      	bls.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8002248:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800224c:	2a04      	cmp	r2, #4
 800224e:	d1f6      	bne.n	800223e <tud_audio_buffer_and_schedule_control_xfer+0xca>
 8002250:	78ba      	ldrb	r2, [r7, #2]
 8002252:	4542      	cmp	r2, r8
 8002254:	d1f3      	bne.n	800223e <tud_audio_buffer_and_schedule_control_xfer+0xca>
 8002256:	e7be      	b.n	80021d6 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 8002258:	783a      	ldrb	r2, [r7, #0]
 800225a:	eb07 0c02 	add.w	ip, r7, r2
 800225e:	5cba      	ldrb	r2, [r7, r2]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8002260:	f8bc 7006 	ldrh.w	r7, [ip, #6]
 8002264:	4462      	add	r2, ip
 8002266:	44bc      	add	ip, r7
      while (p_desc < p_desc_end)
 8002268:	4594      	cmp	ip, r2
 800226a:	d804      	bhi.n	8002276 <tud_audio_buffer_and_schedule_control_xfer+0x102>
 800226c:	e7d0      	b.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 800226e:	7817      	ldrb	r7, [r2, #0]
 8002270:	443a      	add	r2, r7
 8002272:	4594      	cmp	ip, r2
 8002274:	d9cc      	bls.n	8002210 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8002276:	78d7      	ldrb	r7, [r2, #3]
 8002278:	4287      	cmp	r7, r0
 800227a:	d1f8      	bne.n	800226e <tud_audio_buffer_and_schedule_control_xfer+0xfa>
 800227c:	e7ab      	b.n	80021d6 <tud_audio_buffer_and_schedule_control_xfer+0x62>
 800227e:	bf00      	nop
 8002280:	20000ef0 	.word	0x20000ef0

08002284 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8002284:	b510      	push	{r4, lr}
 8002286:	4604      	mov	r4, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8002288:	f000 fe48 	bl	8002f1c <tud_mounted>
 800228c:	b908      	cbnz	r0, 8002292 <tud_cdc_n_connected+0xe>
 800228e:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
 8002290:	bd10      	pop	{r4, pc}
 8002292:	f000 fe4b 	bl	8002f2c <tud_suspended>
 8002296:	2800      	cmp	r0, #0
 8002298:	d1f9      	bne.n	800228e <tud_cdc_n_connected+0xa>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <tud_cdc_n_connected+0x28>)
 800229c:	f44f 7394 	mov.w	r3, #296	; 0x128
 80022a0:	fb03 0004 	mla	r0, r3, r4, r0
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80022a4:	7900      	ldrb	r0, [r0, #4]
 80022a6:	f000 0001 	and.w	r0, r0, #1
}
 80022aa:	bd10      	pop	{r4, pc}
 80022ac:	20001884 	.word	0x20001884

080022b0 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80022b0:	b508      	push	{r3, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <tud_cdc_n_available+0x14>)
 80022b4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80022b8:	fb02 3000 	mla	r0, r2, r0, r3
 80022bc:	3010      	adds	r0, #16
 80022be:	f000 fa7d 	bl	80027bc <tu_fifo_count>
}
 80022c2:	bd08      	pop	{r3, pc}
 80022c4:	20001884 	.word	0x20001884

080022c8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80022c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022cc:	f44f 7594 	mov.w	r5, #296	; 0x128
 80022d0:	fb00 f505 	mul.w	r5, r0, r5
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 80022d4:	4f19      	ldr	r7, [pc, #100]	; (800233c <tud_cdc_n_read+0x74>)
 80022d6:	f105 0410 	add.w	r4, r5, #16
 80022da:	443c      	add	r4, r7
 80022dc:	b292      	uxth	r2, r2
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 fade 	bl	80028a0 <tu_fifo_read_n>
 80022e4:	4606      	mov	r6, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 fa82 	bl	80027f0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80022ec:	283f      	cmp	r0, #63	; 0x3f
 80022ee:	d802      	bhi.n	80022f6 <tud_cdc_n_read+0x2e>
  _prep_out_transaction(p_cdc);
  return num_read;
}
 80022f0:	4630      	mov	r0, r6
 80022f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80022f6:	eb07 0805 	add.w	r8, r7, r5
 80022fa:	2000      	movs	r0, #0
 80022fc:	f898 1003 	ldrb.w	r1, [r8, #3]
 8002300:	f001 fbda 	bl	8003ab8 <usbd_edpt_claim>
 8002304:	2800      	cmp	r0, #0
 8002306:	d0f3      	beq.n	80022f0 <tud_cdc_n_read+0x28>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8002308:	4620      	mov	r0, r4
 800230a:	f000 fa71 	bl	80027f0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 800230e:	283f      	cmp	r0, #63	; 0x3f
 8002310:	d90b      	bls.n	800232a <tud_cdc_n_read+0x62>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8002312:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
 8002316:	f898 1003 	ldrb.w	r1, [r8, #3]
 800231a:	2340      	movs	r3, #64	; 0x40
 800231c:	443a      	add	r2, r7
 800231e:	2000      	movs	r0, #0
 8002320:	f001 fbe6 	bl	8003af0 <usbd_edpt_xfer>
}
 8002324:	4630      	mov	r0, r6
 8002326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800232a:	f898 1003 	ldrb.w	r1, [r8, #3]
 800232e:	2000      	movs	r0, #0
 8002330:	f001 fbd0 	bl	8003ad4 <usbd_edpt_release>
}
 8002334:	4630      	mov	r0, r6
 8002336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800233a:	bf00      	nop
 800233c:	20001884 	.word	0x20001884

08002340 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8002340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002344:	4604      	mov	r4, r0
 8002346:	f000 fde9 	bl	8002f1c <tud_mounted>
 800234a:	b910      	cbnz	r0, 8002352 <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 800234c:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
 800234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002352:	f000 fdeb 	bl	8002f2c <tud_suspended>
 8002356:	4606      	mov	r6, r0
 8002358:	2800      	cmp	r0, #0
 800235a:	d1f7      	bne.n	800234c <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800235c:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002360:	fb00 f404 	mul.w	r4, r0, r4
 8002364:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80023c0 <tud_cdc_n_write_flush+0x80>
 8002368:	f104 051c 	add.w	r5, r4, #28
 800236c:	4445      	add	r5, r8
 800236e:	4628      	mov	r0, r5
 8002370:	f000 fa24 	bl	80027bc <tu_fifo_count>
 8002374:	2800      	cmp	r0, #0
 8002376:	d0e9      	beq.n	800234c <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8002378:	eb08 0704 	add.w	r7, r8, r4
 800237c:	4630      	mov	r0, r6
 800237e:	78b9      	ldrb	r1, [r7, #2]
 8002380:	f001 fb9a 	bl	8003ab8 <usbd_edpt_claim>
 8002384:	2800      	cmp	r0, #0
 8002386:	d0e1      	beq.n	800234c <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8002388:	34e8      	adds	r4, #232	; 0xe8
 800238a:	4444      	add	r4, r8
 800238c:	4628      	mov	r0, r5
 800238e:	4621      	mov	r1, r4
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	f000 fa85 	bl	80028a0 <tu_fifo_read_n>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8002396:	78b9      	ldrb	r1, [r7, #2]
  if ( count )
 8002398:	4605      	mov	r5, r0
 800239a:	b168      	cbz	r0, 80023b8 <tud_cdc_n_write_flush+0x78>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800239c:	4603      	mov	r3, r0
 800239e:	4622      	mov	r2, r4
 80023a0:	4630      	mov	r0, r6
 80023a2:	f001 fba5 	bl	8003af0 <usbd_edpt_xfer>
 80023a6:	b948      	cbnz	r0, 80023bc <tud_cdc_n_write_flush+0x7c>
 80023a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80023ac:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80023b0:	07db      	lsls	r3, r3, #31
 80023b2:	d5cb      	bpl.n	800234c <tud_cdc_n_write_flush+0xc>
 80023b4:	be00      	bkpt	0x0000
 80023b6:	e7ca      	b.n	800234e <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80023b8:	f001 fb8c 	bl	8003ad4 <usbd_edpt_release>
    return 0;
 80023bc:	4628      	mov	r0, r5
 80023be:	e7c6      	b.n	800234e <tud_cdc_n_write_flush+0xe>
 80023c0:	20001884 	.word	0x20001884

080023c4 <tud_cdc_n_write>:
{
 80023c4:	b538      	push	{r3, r4, r5, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80023c6:	4c0c      	ldr	r4, [pc, #48]	; (80023f8 <tud_cdc_n_write+0x34>)
 80023c8:	f44f 7394 	mov.w	r3, #296	; 0x128
 80023cc:	fb03 4400 	mla	r4, r3, r0, r4
 80023d0:	341c      	adds	r4, #28
 80023d2:	b292      	uxth	r2, r2
{
 80023d4:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80023d6:	4620      	mov	r0, r4
 80023d8:	f000 fbac 	bl	8002b34 <tu_fifo_write_n>
 80023dc:	4603      	mov	r3, r0
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 80023de:	4620      	mov	r0, r4
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80023e0:	461c      	mov	r4, r3
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 80023e2:	f000 f9eb 	bl	80027bc <tu_fifo_count>
 80023e6:	283f      	cmp	r0, #63	; 0x3f
 80023e8:	d801      	bhi.n	80023ee <tud_cdc_n_write+0x2a>
}
 80023ea:	4620      	mov	r0, r4
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
    tud_cdc_n_write_flush(itf);
 80023ee:	4628      	mov	r0, r5
 80023f0:	f7ff ffa6 	bl	8002340 <tud_cdc_n_write_flush>
}
 80023f4:	4620      	mov	r0, r4
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	20001884 	.word	0x20001884

080023fc <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 80023fc:	b508      	push	{r3, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <tud_cdc_n_write_available+0x14>)
 8002400:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002404:	fb02 3000 	mla	r0, r2, r0, r3
 8002408:	301c      	adds	r0, #28
 800240a:	f000 f9f1 	bl	80027f0 <tu_fifo_remaining>
}
 800240e:	bd08      	pop	{r3, pc}
 8002410:	20001884 	.word	0x20001884

08002414 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8002414:	b530      	push	{r4, r5, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8002416:	4c12      	ldr	r4, [pc, #72]	; (8002460 <cdcd_init+0x4c>)
{
 8002418:	b083      	sub	sp, #12
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800241a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800241e:	2100      	movs	r1, #0
 8002420:	4620      	mov	r0, r4
 8002422:	f002 fdbd 	bl	8004fa0 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = (char) -1;
 8002426:	20ff      	movs	r0, #255	; 0xff
 8002428:	7160      	strb	r0, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 800242a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800242e:	60a0      	str	r0, [r4, #8]
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8002430:	2500      	movs	r5, #0
    p_cdc->line_coding.data_bits = 8;
 8002432:	2008      	movs	r0, #8
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8002434:	f104 0128 	add.w	r1, r4, #40	; 0x28
    p_cdc->line_coding.data_bits = 8;
 8002438:	73a0      	strb	r0, [r4, #14]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800243a:	2301      	movs	r3, #1
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	9500      	str	r5, [sp, #0]
 8002440:	f104 0010 	add.w	r0, r4, #16
 8002444:	f000 f9a4 	bl	8002790 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8002448:	2301      	movs	r3, #1
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8002452:	f104 001c 	add.w	r0, r4, #28
 8002456:	f000 f99b 	bl	8002790 <tu_fifo_config>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 800245a:	b003      	add	sp, #12
 800245c:	bd30      	pop	{r4, r5, pc}
 800245e:	bf00      	nop
 8002460:	20001884 	.word	0x20001884

08002464 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8002464:	b510      	push	{r4, lr}

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <cdcd_reset+0x28>)
 8002468:	2200      	movs	r2, #0
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
 800246a:	f103 041c 	add.w	r4, r3, #28
    tu_fifo_clear(&p_cdc->rx_ff);
 800246e:	f103 0010 	add.w	r0, r3, #16
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	711a      	strb	r2, [r3, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
 8002476:	f000 fcdd 	bl	8002e34 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800247a:	4620      	mov	r0, r4
 800247c:	f000 fcda 	bl	8002e34 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8002480:	4620      	mov	r0, r4
 8002482:	2101      	movs	r1, #1
  }
}
 8002484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8002488:	f000 bcda 	b.w	8002e40 <tu_fifo_set_overwritable>
 800248c:	20001884 	.word	0x20001884

08002490 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8002494:	794b      	ldrb	r3, [r1, #5]
 8002496:	2b02      	cmp	r3, #2
{
 8002498:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800249a:	d102      	bne.n	80024a2 <cdcd_open+0x12>
 800249c:	798b      	ldrb	r3, [r1, #6]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d004      	beq.n	80024ac <cdcd_open+0x1c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
      break;
    }
  }
  TU_ASSERT(p_cdc, 0);
 80024a2:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
 80024a4:	4628      	mov	r0, r5
 80024a6:	b002      	add	sp, #8
 80024a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 80024ac:	4e33      	ldr	r6, [pc, #204]	; (800257c <cdcd_open+0xec>)
 80024ae:	78b3      	ldrb	r3, [r6, #2]
 80024b0:	b13b      	cbz	r3, 80024c2 <cdcd_open+0x32>
  TU_ASSERT(p_cdc, 0);
 80024b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024b6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80024ba:	07db      	lsls	r3, r3, #31
 80024bc:	d5f1      	bpl.n	80024a2 <cdcd_open+0x12>
 80024be:	be00      	bkpt	0x0000
 80024c0:	e7ef      	b.n	80024a2 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80024c2:	788b      	ldrb	r3, [r1, #2]
 80024c4:	7033      	strb	r3, [r6, #0]
 80024c6:	780c      	ldrb	r4, [r1, #0]
 80024c8:	440c      	add	r4, r1
 80024ca:	4607      	mov	r7, r0
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80024cc:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80024ce:	2924      	cmp	r1, #36	; 0x24
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80024d0:	f04f 0509 	mov.w	r5, #9
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80024d4:	d10b      	bne.n	80024ee <cdcd_open+0x5e>
 80024d6:	2a08      	cmp	r2, #8
 80024d8:	d802      	bhi.n	80024e0 <cdcd_open+0x50>
 80024da:	e00f      	b.n	80024fc <cdcd_open+0x6c>
 80024dc:	42aa      	cmp	r2, r5
 80024de:	d30d      	bcc.n	80024fc <cdcd_open+0x6c>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80024e0:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80024e2:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 80024e4:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80024e6:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80024e8:	2924      	cmp	r1, #36	; 0x24
    drv_len += tu_desc_len(p_desc);
 80024ea:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80024ec:	d0f6      	beq.n	80024dc <cdcd_open+0x4c>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80024ee:	2905      	cmp	r1, #5
 80024f0:	d01b      	beq.n	800252a <cdcd_open+0x9a>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80024f2:	2904      	cmp	r1, #4
 80024f4:	d102      	bne.n	80024fc <cdcd_open+0x6c>
 80024f6:	7963      	ldrb	r3, [r4, #5]
 80024f8:	2b0a      	cmp	r3, #10
 80024fa:	d029      	beq.n	8002550 <cdcd_open+0xc0>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80024fc:	4820      	ldr	r0, [pc, #128]	; (8002580 <cdcd_open+0xf0>)
 80024fe:	f000 f977 	bl	80027f0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8002502:	283f      	cmp	r0, #63	; 0x3f
 8002504:	d9ce      	bls.n	80024a4 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8002506:	78f1      	ldrb	r1, [r6, #3]
 8002508:	2000      	movs	r0, #0
 800250a:	f001 fad5 	bl	8003ab8 <usbd_edpt_claim>
 800250e:	2800      	cmp	r0, #0
 8002510:	d0c8      	beq.n	80024a4 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8002512:	481b      	ldr	r0, [pc, #108]	; (8002580 <cdcd_open+0xf0>)
 8002514:	f000 f96c 	bl	80027f0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 8002518:	283f      	cmp	r0, #63	; 0x3f
 800251a:	d914      	bls.n	8002546 <cdcd_open+0xb6>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <cdcd_open+0xf4>)
 800251e:	78f1      	ldrb	r1, [r6, #3]
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	2000      	movs	r0, #0
 8002524:	f001 fae4 	bl	8003af0 <usbd_edpt_xfer>
 8002528:	e7bc      	b.n	80024a4 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800252a:	4621      	mov	r1, r4
 800252c:	4638      	mov	r0, r7
 800252e:	f001 fa9f 	bl	8003a70 <usbd_edpt_open>
 8002532:	2800      	cmp	r0, #0
 8002534:	d0bd      	beq.n	80024b2 <cdcd_open+0x22>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8002536:	78a3      	ldrb	r3, [r4, #2]
 8002538:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800253a:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800253c:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
 800253e:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002540:	7861      	ldrb	r1, [r4, #1]
 8002542:	b29d      	uxth	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002544:	e7d5      	b.n	80024f2 <cdcd_open+0x62>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8002546:	78f1      	ldrb	r1, [r6, #3]
 8002548:	2000      	movs	r0, #0
 800254a:	f001 fac3 	bl	8003ad4 <usbd_edpt_release>
    return false;
 800254e:	e7a9      	b.n	80024a4 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <cdcd_open+0xf8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8002552:	f894 8000 	ldrb.w	r8, [r4]
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	3301      	adds	r3, #1
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2302      	movs	r3, #2
 800255e:	4638      	mov	r0, r7
 8002560:	eb04 0108 	add.w	r1, r4, r8
 8002564:	461a      	mov	r2, r3
 8002566:	f001 fa33 	bl	80039d0 <usbd_open_edpt_pair>
 800256a:	2800      	cmp	r0, #0
 800256c:	d0a1      	beq.n	80024b2 <cdcd_open+0x22>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 800256e:	f105 030e 	add.w	r3, r5, #14
 8002572:	fa18 f383 	uxtah	r3, r8, r3
 8002576:	b29d      	uxth	r5, r3
 8002578:	e7c0      	b.n	80024fc <cdcd_open+0x6c>
 800257a:	bf00      	nop
 800257c:	20001884 	.word	0x20001884
 8002580:	20001894 	.word	0x20001894
 8002584:	2000192c 	.word	0x2000192c
 8002588:	20001886 	.word	0x20001886

0800258c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800258c:	b538      	push	{r3, r4, r5, lr}
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800258e:	7813      	ldrb	r3, [r2, #0]
 8002590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002594:	2b20      	cmp	r3, #32
 8002596:	d110      	bne.n	80025ba <cdcd_control_xfer_cb+0x2e>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
 8002598:	4694      	mov	ip, r2
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <cdcd_control_xfer_cb+0xb8>)
 800259c:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 80025a0:	f892 e000 	ldrb.w	lr, [r2]
 80025a4:	459e      	cmp	lr, r3
 80025a6:	d108      	bne.n	80025ba <cdcd_control_xfer_cb+0x2e>
  }

  switch ( request->bRequest )
 80025a8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80025ac:	3b20      	subs	r3, #32
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d803      	bhi.n	80025ba <cdcd_control_xfer_cb+0x2e>
 80025b2:	e8df f003 	tbb	[pc, r3]
 80025b6:	170a      	.short	0x170a
 80025b8:	0420      	.short	0x0420
 80025ba:	2000      	movs	r0, #0

    default: return false; // stall unsupported request
  }

  return true;
}
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
 80025be:	2901      	cmp	r1, #1
 80025c0:	d031      	beq.n	8002626 <cdcd_control_xfer_cb+0x9a>
      else if (stage == CONTROL_STAGE_ACK)
 80025c2:	2903      	cmp	r1, #3
 80025c4:	d034      	beq.n	8002630 <cdcd_control_xfer_cb+0xa4>
  return true;
 80025c6:	2001      	movs	r0, #1
}
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
 80025ca:	2901      	cmp	r1, #1
 80025cc:	d00c      	beq.n	80025e8 <cdcd_control_xfer_cb+0x5c>
      else if ( stage == CONTROL_STAGE_ACK)
 80025ce:	2903      	cmp	r1, #3
 80025d0:	d1f9      	bne.n	80025c6 <cdcd_control_xfer_cb+0x3a>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <cdcd_control_xfer_cb+0xbc>)
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f6      	beq.n	80025c6 <cdcd_control_xfer_cb+0x3a>
 80025d8:	491c      	ldr	r1, [pc, #112]	; (800264c <cdcd_control_xfer_cb+0xc0>)
 80025da:	2000      	movs	r0, #0
 80025dc:	f3af 8000 	nop.w
  return true;
 80025e0:	2001      	movs	r0, #1
}
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
 80025e4:	2901      	cmp	r1, #1
 80025e6:	d1ee      	bne.n	80025c6 <cdcd_control_xfer_cb+0x3a>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80025e8:	4a18      	ldr	r2, [pc, #96]	; (800264c <cdcd_control_xfer_cb+0xc0>)
 80025ea:	2307      	movs	r3, #7
 80025ec:	4661      	mov	r1, ip
 80025ee:	f001 fb4f 	bl	8003c90 <tud_control_xfer>
  return true;
 80025f2:	2001      	movs	r0, #1
}
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
 80025f6:	2901      	cmp	r1, #1
 80025f8:	d015      	beq.n	8002626 <cdcd_control_xfer_cb+0x9a>
      else if (stage == CONTROL_STAGE_ACK)
 80025fa:	2903      	cmp	r1, #3
 80025fc:	d1e3      	bne.n	80025c6 <cdcd_control_xfer_cb+0x3a>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80025fe:	f8bc 4002 	ldrh.w	r4, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8002602:	4813      	ldr	r0, [pc, #76]	; (8002650 <cdcd_control_xfer_cb+0xc4>)
        p_cdc->line_state = (uint8_t) request->wValue;
 8002604:	7114      	strb	r4, [r2, #4]
 8002606:	f004 0501 	and.w	r5, r4, #1
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800260a:	f085 0101 	eor.w	r1, r5, #1
 800260e:	f000 fc17 	bl	8002e40 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <cdcd_control_xfer_cb+0xc8>)
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0d6      	beq.n	80025c6 <cdcd_control_xfer_cb+0x3a>
 8002618:	f3c4 0240 	ubfx	r2, r4, #1, #1
 800261c:	4629      	mov	r1, r5
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe f8de 	bl	80007e0 <tud_cdc_line_state_cb>
 8002624:	e7cf      	b.n	80025c6 <cdcd_control_xfer_cb+0x3a>
        tud_control_status(rhport, request);
 8002626:	4661      	mov	r1, ip
 8002628:	f001 fb18 	bl	8003c5c <tud_control_status>
  return true;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd38      	pop	{r3, r4, r5, pc}
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <cdcd_control_xfer_cb+0xcc>)
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0c7      	beq.n	80025c6 <cdcd_control_xfer_cb+0x3a>
 8002636:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800263a:	2000      	movs	r0, #0
 800263c:	f3af 8000 	nop.w
  return true;
 8002640:	2001      	movs	r0, #1
}
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	20001884 	.word	0x20001884
 8002648:	00000000 	.word	0x00000000
 800264c:	2000188c 	.word	0x2000188c
 8002650:	200018a0 	.word	0x200018a0
 8002654:	080007e1 	.word	0x080007e1
 8002658:	00000000 	.word	0x00000000

0800265c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8002660:	4e44      	ldr	r6, [pc, #272]	; (8002774 <cdcd_xfer_cb+0x118>)
 8002662:	78f2      	ldrb	r2, [r6, #3]
 8002664:	428a      	cmp	r2, r1
{
 8002666:	460c      	mov	r4, r1
 8002668:	4607      	mov	r7, r0
 800266a:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800266c:	d15e      	bne.n	800272c <cdcd_xfer_cb+0xd0>
  TU_ASSERT(itf < CFG_TUD_CDC);

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 800266e:	b29a      	uxth	r2, r3
 8002670:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8002674:	f106 0010 	add.w	r0, r6, #16
 8002678:	f000 fa5c 	bl	8002b34 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800267c:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <cdcd_xfer_cb+0x11c>)
 800267e:	b1d3      	cbz	r3, 80026b6 <cdcd_xfer_cb+0x5a>
 8002680:	7973      	ldrb	r3, [r6, #5]
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d017      	beq.n	80026b6 <cdcd_xfer_cb+0x5a>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8002686:	b1b5      	cbz	r5, 80026b6 <cdcd_xfer_cb+0x5a>
 8002688:	f106 08a7 	add.w	r8, r6, #167	; 0xa7
 800268c:	eb08 0a05 	add.w	sl, r8, r5
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8002690:	f1a8 0997 	sub.w	r9, r8, #151	; 0x97
 8002694:	e002      	b.n	800269c <cdcd_xfer_cb+0x40>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8002696:	45d0      	cmp	r8, sl
 8002698:	d00d      	beq.n	80026b6 <cdcd_xfer_cb+0x5a>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 800269a:	7973      	ldrb	r3, [r6, #5]
 800269c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1f8      	bne.n	8002696 <cdcd_xfer_cb+0x3a>
 80026a4:	4648      	mov	r0, r9
 80026a6:	f000 f899 	bl	80027dc <tu_fifo_empty>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d1f3      	bne.n	8002696 <cdcd_xfer_cb+0x3a>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80026ae:	7971      	ldrb	r1, [r6, #5]
 80026b0:	f3af 8000 	nop.w
 80026b4:	e7ef      	b.n	8002696 <cdcd_xfer_cb+0x3a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <cdcd_xfer_cb+0x120>)
 80026b8:	b123      	cbz	r3, 80026c4 <cdcd_xfer_cb+0x68>
 80026ba:	4831      	ldr	r0, [pc, #196]	; (8002780 <cdcd_xfer_cb+0x124>)
 80026bc:	f000 f88e 	bl	80027dc <tu_fifo_empty>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d04f      	beq.n	8002764 <cdcd_xfer_cb+0x108>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80026c4:	482e      	ldr	r0, [pc, #184]	; (8002780 <cdcd_xfer_cb+0x124>)
 80026c6:	f000 f893 	bl	80027f0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80026ca:	283f      	cmp	r0, #63	; 0x3f
 80026cc:	d905      	bls.n	80026da <cdcd_xfer_cb+0x7e>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80026ce:	78f1      	ldrb	r1, [r6, #3]
 80026d0:	2000      	movs	r0, #0
 80026d2:	f001 f9f1 	bl	8003ab8 <usbd_edpt_claim>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d137      	bne.n	800274a <cdcd_xfer_cb+0xee>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 80026da:	78b3      	ldrb	r3, [r6, #2]
 80026dc:	42a3      	cmp	r3, r4
 80026de:	d003      	beq.n	80026e8 <cdcd_xfer_cb+0x8c>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80026e0:	2401      	movs	r4, #1
}
 80026e2:	4620      	mov	r0, r4
 80026e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 80026e8:	4b26      	ldr	r3, [pc, #152]	; (8002784 <cdcd_xfer_cb+0x128>)
 80026ea:	b113      	cbz	r3, 80026f2 <cdcd_xfer_cb+0x96>
 80026ec:	2000      	movs	r0, #0
 80026ee:	f3af 8000 	nop.w
    if ( 0 == tud_cdc_n_write_flush(itf) )
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7ff fe24 	bl	8002340 <tud_cdc_n_write_flush>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d1f1      	bne.n	80026e0 <cdcd_xfer_cb+0x84>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 80026fc:	4822      	ldr	r0, [pc, #136]	; (8002788 <cdcd_xfer_cb+0x12c>)
 80026fe:	f000 f85d 	bl	80027bc <tu_fifo_count>
 8002702:	2800      	cmp	r0, #0
 8002704:	d1ec      	bne.n	80026e0 <cdcd_xfer_cb+0x84>
 8002706:	2d00      	cmp	r5, #0
 8002708:	d0ea      	beq.n	80026e0 <cdcd_xfer_cb+0x84>
 800270a:	f015 053f 	ands.w	r5, r5, #63	; 0x3f
 800270e:	d1e7      	bne.n	80026e0 <cdcd_xfer_cb+0x84>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8002710:	78b1      	ldrb	r1, [r6, #2]
 8002712:	4638      	mov	r0, r7
 8002714:	f001 f9d0 	bl	8003ab8 <usbd_edpt_claim>
 8002718:	4604      	mov	r4, r0
 800271a:	2800      	cmp	r0, #0
 800271c:	d0e0      	beq.n	80026e0 <cdcd_xfer_cb+0x84>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 800271e:	78b1      	ldrb	r1, [r6, #2]
 8002720:	462b      	mov	r3, r5
 8002722:	462a      	mov	r2, r5
 8002724:	4638      	mov	r0, r7
 8002726:	f001 f9e3 	bl	8003af0 <usbd_edpt_xfer>
 800272a:	e7da      	b.n	80026e2 <cdcd_xfer_cb+0x86>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800272c:	78b3      	ldrb	r3, [r6, #2]
 800272e:	428b      	cmp	r3, r1
 8002730:	d0da      	beq.n	80026e8 <cdcd_xfer_cb+0x8c>
  TU_ASSERT(itf < CFG_TUD_CDC);
 8002732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002736:	f8d3 4df0 	ldr.w	r4, [r3, #3568]	; 0xdf0
 800273a:	f014 0401 	ands.w	r4, r4, #1
 800273e:	d0d0      	beq.n	80026e2 <cdcd_xfer_cb+0x86>
 8002740:	be00      	bkpt	0x0000
 8002742:	2400      	movs	r4, #0
}
 8002744:	4620      	mov	r0, r4
 8002746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <cdcd_xfer_cb+0x124>)
 800274c:	f000 f850 	bl	80027f0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
 8002750:	283f      	cmp	r0, #63	; 0x3f
 8002752:	d90a      	bls.n	800276a <cdcd_xfer_cb+0x10e>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8002754:	2340      	movs	r3, #64	; 0x40
 8002756:	4a0d      	ldr	r2, [pc, #52]	; (800278c <cdcd_xfer_cb+0x130>)
 8002758:	78f1      	ldrb	r1, [r6, #3]
 800275a:	2000      	movs	r0, #0
 800275c:	f001 f9c8 	bl	8003af0 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
 8002760:	78b3      	ldrb	r3, [r6, #2]
 8002762:	e7bb      	b.n	80026dc <cdcd_xfer_cb+0x80>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8002764:	f7fe f83e 	bl	80007e4 <tud_cdc_rx_cb>
 8002768:	e7ac      	b.n	80026c4 <cdcd_xfer_cb+0x68>
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800276a:	78f1      	ldrb	r1, [r6, #3]
 800276c:	2000      	movs	r0, #0
 800276e:	f001 f9b1 	bl	8003ad4 <usbd_edpt_release>
 8002772:	e7b2      	b.n	80026da <cdcd_xfer_cb+0x7e>
 8002774:	20001884 	.word	0x20001884
 8002778:	00000000 	.word	0x00000000
 800277c:	080007e5 	.word	0x080007e5
 8002780:	20001894 	.word	0x20001894
 8002784:	00000000 	.word	0x00000000
 8002788:	200018a0 	.word	0x200018a0
 800278c:	2000192c 	.word	0x2000192c

08002790 <tu_fifo_config>:
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8002790:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
{
 8002794:	f89d c000 	ldrb.w	ip, [sp]
  if (depth > 0x8000) return false;
 8002798:	d80e      	bhi.n	80027b8 <tu_fifo_config+0x28>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
  f->depth        = depth;
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800279a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800279e:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
  f->overwritable = overwritable;
  f->rd_idx       = 0;
 80027a2:	f04f 0c00 	mov.w	ip, #0
 80027a6:	f8a0 c00a 	strh.w	ip, [r0, #10]
  f->buffer       = (uint8_t*) buffer;
 80027aa:	6001      	str	r1, [r0, #0]
  f->depth        = depth;
 80027ac:	8082      	strh	r2, [r0, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80027ae:	80c3      	strh	r3, [r0, #6]
  f->wr_idx       = 0;
 80027b0:	f8a0 c008 	strh.w	ip, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80027b4:	2001      	movs	r0, #1
 80027b6:	4770      	bx	lr
  if (depth > 0x8000) return false;
 80027b8:	2000      	movs	r0, #0
}
 80027ba:	4770      	bx	lr

080027bc <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80027bc:	8903      	ldrh	r3, [r0, #8]
 80027be:	8942      	ldrh	r2, [r0, #10]
 80027c0:	8880      	ldrh	r0, [r0, #4]
 80027c2:	b292      	uxth	r2, r2
 80027c4:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 80027c6:	4293      	cmp	r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80027c8:	bf36      	itet	cc
 80027ca:	ebc2 0240 	rsbcc	r2, r2, r0, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 80027ce:	1a9b      	subcs	r3, r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80027d0:	189b      	addcc	r3, r3, r2
 80027d2:	b29b      	uxth	r3, r3
}
 80027d4:	4298      	cmp	r0, r3
 80027d6:	bf28      	it	cs
 80027d8:	4618      	movcs	r0, r3
 80027da:	4770      	bx	lr

080027dc <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return f->wr_idx == f->rd_idx;
 80027dc:	8902      	ldrh	r2, [r0, #8]
 80027de:	8943      	ldrh	r3, [r0, #10]
 80027e0:	b290      	uxth	r0, r2
 80027e2:	b29b      	uxth	r3, r3
}
 80027e4:	1ac0      	subs	r0, r0, r3
 80027e6:	fab0 f080 	clz	r0, r0
 80027ea:	0940      	lsrs	r0, r0, #5
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80027f0:	8903      	ldrh	r3, [r0, #8]
 80027f2:	8942      	ldrh	r2, [r0, #10]
 80027f4:	8880      	ldrh	r0, [r0, #4]
 80027f6:	b292      	uxth	r2, r2
 80027f8:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 80027fa:	4293      	cmp	r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80027fc:	bf36      	itet	cc
 80027fe:	ebc2 0240 	rsbcc	r2, r2, r0, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002802:	1a9b      	subcs	r3, r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002804:	189b      	addcc	r3, r3, r2
 8002806:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 8002808:	4298      	cmp	r0, r3
 800280a:	bf86      	itte	hi
 800280c:	1ac0      	subhi	r0, r0, r3
 800280e:	b280      	uxthhi	r0, r0
 8002810:	2000      	movls	r0, #0
}
 8002812:	4770      	bx	lr

08002814 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8002814:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8002816:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800281a:	8943      	ldrh	r3, [r0, #10]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800281c:	8882      	ldrh	r2, [r0, #4]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800281e:	fa1f fc8c 	uxth.w	ip, ip
 8002822:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 8002824:	459c      	cmp	ip, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002826:	bf36      	itet	cc
 8002828:	ebc3 0542 	rsbcc	r5, r3, r2, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 800282c:	ebac 0503 	subcs.w	r5, ip, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002830:	4465      	addcc	r5, ip
 8002832:	b2ad      	uxth	r5, r5
{
 8002834:	4604      	mov	r4, r0
 8002836:	4608      	mov	r0, r1
  if ( cnt == 0 ) return false;
 8002838:	b33d      	cbz	r5, 800288a <tu_fifo_read+0x76>
  if ( cnt > f->depth )
 800283a:	42aa      	cmp	r2, r5
 800283c:	d20b      	bcs.n	8002856 <tu_fifo_read+0x42>
  if ( wr_idx >= f->depth )
 800283e:	4594      	cmp	ip, r2
    rd_idx = wr_idx - f->depth;
 8002840:	bf2c      	ite	cs
 8002842:	ebac 0302 	subcs.w	r3, ip, r2
    rd_idx = wr_idx + f->depth;
 8002846:	eb0c 0302 	addcc.w	r3, ip, r2
 800284a:	b29b      	uxth	r3, r3
  while ( idx >= depth ) idx -= depth;
 800284c:	429a      	cmp	r2, r3
  f->rd_idx = rd_idx;
 800284e:	8163      	strh	r3, [r4, #10]
  while ( idx >= depth ) idx -= depth;
 8002850:	d803      	bhi.n	800285a <tu_fifo_read+0x46>
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	429a      	cmp	r2, r3
 8002858:	d9fb      	bls.n	8002852 <tu_fifo_read+0x3e>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800285a:	88e2      	ldrh	r2, [r4, #6]
 800285c:	6821      	ldr	r1, [r4, #0]
 800285e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002862:	fb02 1103 	mla	r1, r2, r3, r1
 8002866:	f002 fb8d 	bl	8004f84 <memcpy>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800286a:	8961      	ldrh	r1, [r4, #10]
 800286c:	88a2      	ldrh	r2, [r4, #4]
 800286e:	b289      	uxth	r1, r1
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002870:	1c4b      	adds	r3, r1, #1
 8002872:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002874:	4299      	cmp	r1, r3
  return true;
 8002876:	f04f 0001 	mov.w	r0, #1
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800287a:	d909      	bls.n	8002890 <tu_fifo_read+0x7c>
 800287c:	2300      	movs	r3, #0
 800287e:	fa02 f100 	lsl.w	r1, r2, r0
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8002886:	8163      	strh	r3, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 8002888:	bd38      	pop	{r3, r4, r5, pc}
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800288a:	8963      	ldrh	r3, [r4, #10]
  if ( cnt == 0 ) return false;
 800288c:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800288e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002890:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002894:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8002898:	daf3      	bge.n	8002882 <tu_fifo_read+0x6e>
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800289a:	8163      	strh	r3, [r4, #10]
}
 800289c:	bd38      	pop	{r3, r4, r5, pc}
 800289e:	bf00      	nop

080028a0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80028a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80028a4:	8903      	ldrh	r3, [r0, #8]
 80028a6:	8944      	ldrh	r4, [r0, #10]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80028a8:	8885      	ldrh	r5, [r0, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 80028ae:	42a3      	cmp	r3, r4
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80028b0:	bf36      	itet	cc
 80028b2:	ebc4 0745 	rsbcc	r7, r4, r5, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 80028b6:	1b1f      	subcs	r7, r3, r4
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80028b8:	18ff      	addcc	r7, r7, r3
 80028ba:	b2bf      	uxth	r7, r7
{
 80028bc:	4606      	mov	r6, r0
 80028be:	4688      	mov	r8, r1
  if ( cnt == 0 ) return 0;
 80028c0:	2f00      	cmp	r7, #0
 80028c2:	d044      	beq.n	800294e <tu_fifo_read_n+0xae>
  if ( cnt > f->depth )
 80028c4:	42bd      	cmp	r5, r7
 80028c6:	d33a      	bcc.n	800293e <tu_fifo_read_n+0x9e>
  if ( cnt < n ) n = cnt;
 80028c8:	42ba      	cmp	r2, r7
 80028ca:	bf28      	it	cs
 80028cc:	463a      	movcs	r2, r7
  while ( idx >= depth ) idx -= depth;
 80028ce:	42a5      	cmp	r5, r4
 80028d0:	b297      	uxth	r7, r2
 80028d2:	d803      	bhi.n	80028dc <tu_fifo_read_n+0x3c>
 80028d4:	1b64      	subs	r4, r4, r5
 80028d6:	b2a4      	uxth	r4, r4
 80028d8:	42a5      	cmp	r5, r4
 80028da:	d9fb      	bls.n	80028d4 <tu_fifo_read_n+0x34>
  uint16_t lin_bytes = lin_count * f->item_size;
 80028dc:	88f2      	ldrh	r2, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80028de:	6831      	ldr	r1, [r6, #0]
  uint16_t const lin_count = f->depth - rd_ptr;
 80028e0:	1b2b      	subs	r3, r5, r4
 80028e2:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 80028e4:	f3c2 000e 	ubfx	r0, r2, #0, #15
      if ( n <= lin_count )
 80028e8:	429f      	cmp	r7, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 80028ea:	4682      	mov	sl, r0
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80028ec:	fb00 1104 	mla	r1, r0, r4, r1
      if ( n <= lin_count )
 80028f0:	d91f      	bls.n	8002932 <tu_fifo_read_n+0x92>
  uint16_t lin_bytes = lin_count * f->item_size;
 80028f2:	fb13 f300 	smulbb	r3, r3, r0
        memcpy(app_buf, ff_buf, lin_bytes);
 80028f6:	fa1f f983 	uxth.w	r9, r3
 80028fa:	464a      	mov	r2, r9
 80028fc:	4640      	mov	r0, r8
 80028fe:	f002 fb41 	bl	8004f84 <memcpy>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8002902:	1b7a      	subs	r2, r7, r5
 8002904:	4422      	add	r2, r4
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002906:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800290a:	6831      	ldr	r1, [r6, #0]
 800290c:	eb08 0009 	add.w	r0, r8, r9
 8002910:	b292      	uxth	r2, r2
 8002912:	f002 fb37 	bl	8004f84 <memcpy>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8002916:	8972      	ldrh	r2, [r6, #10]
 8002918:	88b5      	ldrh	r5, [r6, #4]
 800291a:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 800291c:	19d3      	adds	r3, r2, r7
 800291e:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002920:	429a      	cmp	r2, r3
 8002922:	d916      	bls.n	8002952 <tu_fifo_read_n+0xb2>
 8002924:	006a      	lsls	r2, r5, #1
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	b29b      	uxth	r3, r3
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800292a:	8173      	strh	r3, [r6, #10]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
 800292c:	4638      	mov	r0, r7
 800292e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
 8002932:	fb00 f207 	mul.w	r2, r0, r7
 8002936:	4640      	mov	r0, r8
 8002938:	f002 fb24 	bl	8004f84 <memcpy>
 800293c:	e7eb      	b.n	8002916 <tu_fifo_read_n+0x76>
  if ( wr_idx >= f->depth )
 800293e:	42ab      	cmp	r3, r5
    rd_idx = wr_idx - f->depth;
 8002940:	bf2c      	ite	cs
 8002942:	1b5b      	subcs	r3, r3, r5
    rd_idx = wr_idx + f->depth;
 8002944:	195b      	addcc	r3, r3, r5
 8002946:	b29c      	uxth	r4, r3
  f->rd_idx = rd_idx;
 8002948:	8144      	strh	r4, [r0, #10]
 800294a:	462f      	mov	r7, r5
 800294c:	e7bc      	b.n	80028c8 <tu_fifo_read_n+0x28>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800294e:	8943      	ldrh	r3, [r0, #10]
 8002950:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002952:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 8002956:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800295a:	dae4      	bge.n	8002926 <tu_fifo_read_n+0x86>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 800295c:	8173      	strh	r3, [r6, #10]
}
 800295e:	4638      	mov	r0, r7
 8002960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002964 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	4606      	mov	r6, r0
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 800296a:	8900      	ldrh	r0, [r0, #8]
 800296c:	8973      	ldrh	r3, [r6, #10]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800296e:	88b4      	ldrh	r4, [r6, #4]
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8002970:	b280      	uxth	r0, r0
 8002972:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 8002974:	4298      	cmp	r0, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002976:	bf36      	itet	cc
 8002978:	ebc3 0544 	rsbcc	r5, r3, r4, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 800297c:	1ac5      	subcs	r5, r0, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800297e:	182d      	addcc	r5, r5, r0
 8002980:	b2ad      	uxth	r5, r5
{
 8002982:	b083      	sub	sp, #12
 8002984:	460f      	mov	r7, r1
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002986:	ea4f 0944 	mov.w	r9, r4, lsl #1
  if ( cnt == 0 ) return 0;
 800298a:	2d00      	cmp	r5, #0
 800298c:	f000 8090 	beq.w	8002ab0 <tu_fifo_read_n_const_addr_full_words+0x14c>
  if ( cnt > f->depth )
 8002990:	42ac      	cmp	r4, r5
 8002992:	f0c0 8085 	bcc.w	8002aa0 <tu_fifo_read_n_const_addr_full_words+0x13c>
  if ( cnt < n ) n = cnt;
 8002996:	4295      	cmp	r5, r2
 8002998:	bf28      	it	cs
 800299a:	4615      	movcs	r5, r2
  while ( idx >= depth ) idx -= depth;
 800299c:	429c      	cmp	r4, r3
 800299e:	d803      	bhi.n	80029a8 <tu_fifo_read_n_const_addr_full_words+0x44>
 80029a0:	1b1b      	subs	r3, r3, r4
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d9fb      	bls.n	80029a0 <tu_fifo_read_n_const_addr_full_words+0x3c>
  uint16_t lin_bytes = lin_count * f->item_size;
 80029a8:	f8b6 e006 	ldrh.w	lr, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80029ac:	f8d6 8000 	ldr.w	r8, [r6]
  uint16_t const lin_count = f->depth - rd_ptr;
 80029b0:	1ae2      	subs	r2, r4, r3
 80029b2:	b292      	uxth	r2, r2
  uint16_t lin_bytes = lin_count * f->item_size;
 80029b4:	f3ce 0c0e 	ubfx	ip, lr, #0, #15
      if ( n <= lin_count )
 80029b8:	4295      	cmp	r5, r2
  uint16_t lin_bytes = lin_count * f->item_size;
 80029ba:	46e6      	mov	lr, ip
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80029bc:	fb0c 8c03 	mla	ip, ip, r3, r8
      if ( n <= lin_count )
 80029c0:	d81e      	bhi.n	8002a00 <tu_fifo_read_n_const_addr_full_words+0x9c>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80029c2:	fb15 f40e 	smulbb	r4, r5, lr
  uint16_t full_words = len >> 2;
 80029c6:	f3c4 018d 	ubfx	r1, r4, #2, #14
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80029ca:	b2a2      	uxth	r2, r4
  while(full_words--)
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d078      	beq.n	8002ac2 <tu_fifo_read_n_const_addr_full_words+0x15e>
 80029d0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 80029d4:	f85c 3b04 	ldr.w	r3, [ip], #4
    *reg_tx = tu_unaligned_read32(ff_buf);
 80029d8:	603b      	str	r3, [r7, #0]
  while(full_words--)
 80029da:	4561      	cmp	r1, ip
 80029dc:	d1fa      	bne.n	80029d4 <tu_fifo_read_n_const_addr_full_words+0x70>
  if ( bytes_rem )
 80029de:	f012 0203 	ands.w	r2, r2, #3
 80029e2:	d155      	bne.n	8002a90 <tu_fifo_read_n_const_addr_full_words+0x12c>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80029e4:	8972      	ldrh	r2, [r6, #10]
 80029e6:	b292      	uxth	r2, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 80029e8:	1953      	adds	r3, r2, r5
 80029ea:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d961      	bls.n	8002ab4 <tu_fifo_read_n_const_addr_full_words+0x150>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80029f0:	eba3 0309 	sub.w	r3, r3, r9
 80029f4:	b29b      	uxth	r3, r3
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 80029f6:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80029f8:	8173      	strh	r3, [r6, #10]
}
 80029fa:	b003      	add	sp, #12
 80029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t lin_bytes = lin_count * f->item_size;
 8002a00:	fb12 f20e 	smulbb	r2, r2, lr
 8002a04:	b292      	uxth	r2, r2
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8002a06:	f022 0003 	bic.w	r0, r2, #3
 8002a0a:	fa1f fa80 	uxth.w	sl, r0
  while(full_words--)
 8002a0e:	ea4f 0b90 	mov.w	fp, r0, lsr #2
 8002a12:	b138      	cbz	r0, 8002a24 <tu_fifo_read_n_const_addr_full_words+0xc0>
 8002a14:	eb0c 0b8b 	add.w	fp, ip, fp, lsl #2
 8002a18:	4660      	mov	r0, ip
 8002a1a:	f850 1b04 	ldr.w	r1, [r0], #4
    *reg_tx = tu_unaligned_read32(ff_buf);
 8002a1e:	6039      	str	r1, [r7, #0]
  while(full_words--)
 8002a20:	4583      	cmp	fp, r0
 8002a22:	d1fa      	bne.n	8002a1a <tu_fifo_read_n_const_addr_full_words+0xb6>
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8002a24:	1b2c      	subs	r4, r5, r4
 8002a26:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002a28:	fb14 f40e 	smulbb	r4, r4, lr
        if (rem > 0)
 8002a2c:	f012 0b03 	ands.w	fp, r2, #3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002a30:	b2a4      	uxth	r4, r4
        if (rem > 0)
 8002a32:	d01f      	beq.n	8002a74 <tu_fifo_read_n_const_addr_full_words+0x110>
          while(rem--) *dst_u8++ = *ff_buf++;
 8002a34:	eb0c 010a 	add.w	r1, ip, sl
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8002a38:	f1cb 0a04 	rsb	sl, fp, #4
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002a3c:	fa1f fa8a 	uxth.w	sl, sl
 8002a40:	45a2      	cmp	sl, r4
 8002a42:	bf28      	it	cs
 8002a44:	46a2      	movcs	sl, r4
          uint32_t tmp32=0;
 8002a46:	2300      	movs	r3, #0
          while(rem--) *dst_u8++ = *ff_buf++;
 8002a48:	465a      	mov	r2, fp
 8002a4a:	a801      	add	r0, sp, #4
          uint32_t tmp32=0;
 8002a4c:	9301      	str	r3, [sp, #4]
          wrap_bytes -= remrem;
 8002a4e:	eba4 040a 	sub.w	r4, r4, sl
          while(rem--) *dst_u8++ = *ff_buf++;
 8002a52:	f002 fa97 	bl	8004f84 <memcpy>
 8002a56:	ab01      	add	r3, sp, #4
          wrap_bytes -= remrem;
 8002a58:	b2a4      	uxth	r4, r4
          while(rem--) *dst_u8++ = *ff_buf++;
 8002a5a:	eb03 000b 	add.w	r0, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8002a5e:	fa5f f28a 	uxtb.w	r2, sl
          while(remrem--) *dst_u8++ = *ff_buf++;
 8002a62:	f1ba 0f00 	cmp.w	sl, #0
 8002a66:	d003      	beq.n	8002a70 <tu_fifo_read_n_const_addr_full_words+0x10c>
 8002a68:	4641      	mov	r1, r8
 8002a6a:	4490      	add	r8, r2
 8002a6c:	f002 fa8a 	bl	8004f84 <memcpy>
          *reg_tx = tmp32;
 8002a70:	9b01      	ldr	r3, [sp, #4]
 8002a72:	603b      	str	r3, [r7, #0]
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8002a74:	2c00      	cmp	r4, #0
 8002a76:	d0b5      	beq.n	80029e4 <tu_fifo_read_n_const_addr_full_words+0x80>
  while(full_words--)
 8002a78:	08a1      	lsrs	r1, r4, #2
 8002a7a:	d024      	beq.n	8002ac6 <tu_fifo_read_n_const_addr_full_words+0x162>
 8002a7c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8002a80:	f858 3b04 	ldr.w	r3, [r8], #4
    *reg_tx = tu_unaligned_read32(ff_buf);
 8002a84:	603b      	str	r3, [r7, #0]
  while(full_words--)
 8002a86:	4588      	cmp	r8, r1
 8002a88:	d1fa      	bne.n	8002a80 <tu_fifo_read_n_const_addr_full_words+0x11c>
  if ( bytes_rem )
 8002a8a:	f014 0203 	ands.w	r2, r4, #3
 8002a8e:	d0a9      	beq.n	80029e4 <tu_fifo_read_n_const_addr_full_words+0x80>
    uint32_t tmp32 = 0;
 8002a90:	2300      	movs	r3, #0
    memcpy(&tmp32, ff_buf, bytes_rem);
 8002a92:	a801      	add	r0, sp, #4
    uint32_t tmp32 = 0;
 8002a94:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8002a96:	f002 fa75 	bl	8004f84 <memcpy>
    *reg_tx = tmp32;
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	e7a1      	b.n	80029e4 <tu_fifo_read_n_const_addr_full_words+0x80>
  if ( wr_idx >= f->depth )
 8002aa0:	42a0      	cmp	r0, r4
    rd_idx = wr_idx - f->depth;
 8002aa2:	bf2c      	ite	cs
 8002aa4:	1b03      	subcs	r3, r0, r4
    rd_idx = wr_idx + f->depth;
 8002aa6:	1903      	addcc	r3, r0, r4
 8002aa8:	b29b      	uxth	r3, r3
  f->rd_idx = rd_idx;
 8002aaa:	8173      	strh	r3, [r6, #10]
 8002aac:	4625      	mov	r5, r4
 8002aae:	e772      	b.n	8002996 <tu_fifo_read_n_const_addr_full_words+0x32>
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8002ab0:	8973      	ldrh	r3, [r6, #10]
 8002ab2:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002ab4:	454b      	cmp	r3, r9
 8002ab6:	da9b      	bge.n	80029f0 <tu_fifo_read_n_const_addr_full_words+0x8c>
}
 8002ab8:	4628      	mov	r0, r5
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8002aba:	8173      	strh	r3, [r6, #10]
}
 8002abc:	b003      	add	sp, #12
 8002abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while(full_words--)
 8002ac2:	4661      	mov	r1, ip
 8002ac4:	e78b      	b.n	80029de <tu_fifo_read_n_const_addr_full_words+0x7a>
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	e7df      	b.n	8002a8a <tu_fifo_read_n_const_addr_full_words+0x126>
 8002aca:	bf00      	nop

08002acc <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8002acc:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8002ace:	8905      	ldrh	r5, [r0, #8]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8002ad0:	8903      	ldrh	r3, [r0, #8]
{
 8002ad2:	4604      	mov	r4, r0
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8002ad4:	8940      	ldrh	r0, [r0, #10]
 8002ad6:	88a2      	ldrh	r2, [r4, #4]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b280      	uxth	r0, r0
  if (wr_idx >= rd_idx)
 8002adc:	4283      	cmp	r3, r0
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002ade:	bf36      	itet	cc
 8002ae0:	ebc0 0042 	rsbcc	r0, r0, r2, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002ae4:	1a1b      	subcs	r3, r3, r0
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002ae6:	181b      	addcc	r3, r3, r0
 8002ae8:	b29b      	uxth	r3, r3

  if ( tu_fifo_full(f) && !f->overwritable )
 8002aea:	429a      	cmp	r2, r3
  uint16_t const wr_idx = f->wr_idx;
 8002aec:	b2ad      	uxth	r5, r5
  if ( tu_fifo_full(f) && !f->overwritable )
 8002aee:	d802      	bhi.n	8002af6 <tu_fifo_write+0x2a>
 8002af0:	79e0      	ldrb	r0, [r4, #7]
 8002af2:	09c0      	lsrs	r0, r0, #7
 8002af4:	d019      	beq.n	8002b2a <tu_fifo_write+0x5e>
  while ( idx >= depth ) idx -= depth;
 8002af6:	4295      	cmp	r5, r2
 8002af8:	462b      	mov	r3, r5
 8002afa:	d303      	bcc.n	8002b04 <tu_fifo_write+0x38>
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d2fb      	bcs.n	8002afc <tu_fifo_write+0x30>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8002b04:	88e2      	ldrh	r2, [r4, #6]
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002b0c:	fb02 0003 	mla	r0, r2, r3, r0
 8002b10:	f002 fa38 	bl	8004f84 <memcpy>
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002b14:	1c6b      	adds	r3, r5, #1

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8002b16:	88a2      	ldrh	r2, [r4, #4]
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002b18:	b29b      	uxth	r3, r3
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002b1a:	429d      	cmp	r5, r3
 8002b1c:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8002b20:	d904      	bls.n	8002b2c <tu_fifo_write+0x60>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002b22:	1a5b      	subs	r3, r3, r1
 8002b24:	b29b      	uxth	r3, r3
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8002b26:	8123      	strh	r3, [r4, #8]

    ret = true;
 8002b28:	2001      	movs	r0, #1
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002b2c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002b30:	dbf9      	blt.n	8002b26 <tu_fifo_write+0x5a>
 8002b32:	e7f6      	b.n	8002b22 <tu_fifo_write+0x56>

08002b34 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b083      	sub	sp, #12
  if ( n == 0 ) return 0;
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	d045      	beq.n	8002bca <tu_fifo_write_n+0x96>
  uint16_t wr_idx = f->wr_idx;
 8002b3e:	8907      	ldrh	r7, [r0, #8]
  uint16_t rd_idx = f->rd_idx;
 8002b40:	8943      	ldrh	r3, [r0, #10]
 8002b42:	4606      	mov	r6, r0
  if ( !f->overwritable )
 8002b44:	79c0      	ldrb	r0, [r0, #7]
 8002b46:	09c0      	lsrs	r0, r0, #7
  uint16_t wr_idx = f->wr_idx;
 8002b48:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 8002b4a:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 8002b4c:	d143      	bne.n	8002bd6 <tu_fifo_write_n+0xa2>
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8002b4e:	88b5      	ldrh	r5, [r6, #4]
  if (wr_idx >= rd_idx)
 8002b50:	429f      	cmp	r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002b52:	bf36      	itet	cc
 8002b54:	ebc3 0345 	rsbcc	r3, r3, r5, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002b58:	1afb      	subcs	r3, r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002b5a:	19db      	addcc	r3, r3, r7
 8002b5c:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	d933      	bls.n	8002bca <tu_fifo_write_n+0x96>
 8002b62:	eba5 0803 	sub.w	r8, r5, r3
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002b66:	fa1f f888 	uxth.w	r8, r8
 8002b6a:	4590      	cmp	r8, r2
 8002b6c:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 8002b70:	bf28      	it	cs
 8002b72:	4690      	movcs	r8, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002b74:	eb08 0907 	add.w	r9, r8, r7
 8002b78:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 8002b7c:	42bd      	cmp	r5, r7
 8002b7e:	463c      	mov	r4, r7
 8002b80:	d803      	bhi.n	8002b8a <tu_fifo_write_n+0x56>
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	b2a4      	uxth	r4, r4
 8002b86:	42ac      	cmp	r4, r5
 8002b88:	d2fb      	bcs.n	8002b82 <tu_fifo_write_n+0x4e>
  uint16_t const lin_count = f->depth - wr_ptr;
 8002b8a:	1b2b      	subs	r3, r5, r4
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8002b8c:	6830      	ldr	r0, [r6, #0]
  uint16_t const lin_count = f->depth - wr_ptr;
 8002b8e:	b29b      	uxth	r3, r3
  uint16_t lin_bytes = lin_count * f->item_size;
 8002b90:	f3ca 020e 	ubfx	r2, sl, #0, #15
      if(n <= lin_count)
 8002b94:	4543      	cmp	r3, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 8002b96:	4692      	mov	sl, r2
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8002b98:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= lin_count)
 8002b9c:	d34d      	bcc.n	8002c3a <tu_fifo_write_n+0x106>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8002b9e:	fb02 f208 	mul.w	r2, r2, r8
 8002ba2:	f002 f9ef 	bl	8004f84 <memcpy>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8002ba6:	88b2      	ldrh	r2, [r6, #4]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002ba8:	454f      	cmp	r7, r9
 8002baa:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8002bae:	d802      	bhi.n	8002bb6 <tu_fifo_write_n+0x82>
 8002bb0:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
 8002bb4:	db03      	blt.n	8002bbe <tu_fifo_write_n+0x8a>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002bb6:	eba9 0903 	sub.w	r9, r9, r3
 8002bba:	fa1f f989 	uxth.w	r9, r9
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 8002bbe:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8002bc0:	f8a6 9008 	strh.w	r9, [r6, #8]
}
 8002bc4:	b003      	add	sp, #12
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 8002bca:	f04f 0800 	mov.w	r8, #0
}
 8002bce:	4640      	mov	r0, r8
 8002bd0:	b003      	add	sp, #12
 8002bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 8002bd6:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8002bda:	4542      	cmp	r2, r8
 8002bdc:	d30d      	bcc.n	8002bfa <tu_fifo_write_n+0xc6>
        buf8 += (n - f->depth) * f->item_size;
 8002bde:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 8002be2:	eba2 0208 	sub.w	r2, r2, r8
 8002be6:	f3ca 000e 	ubfx	r0, sl, #0, #15
 8002bea:	fb00 1102 	mla	r1, r0, r2, r1
  if (n)
 8002bee:	f1b8 0f00 	cmp.w	r8, #0
 8002bf2:	d0ec      	beq.n	8002bce <tu_fifo_write_n+0x9a>
  uint16_t rd_idx = f->rd_idx;
 8002bf4:	461f      	mov	r7, r3
 8002bf6:	4645      	mov	r5, r8
 8002bf8:	e7bc      	b.n	8002b74 <tu_fifo_write_n+0x40>
  if (wr_idx >= rd_idx)
 8002bfa:	429f      	cmp	r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002bfc:	bf36      	itet	cc
 8002bfe:	ebc3 0048 	rsbcc	r0, r3, r8, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002c02:	1af8      	subcs	r0, r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002c04:	19c0      	addcc	r0, r0, r7
 8002c06:	b280      	uxth	r0, r0
 8002c08:	ea4f 0448 	mov.w	r4, r8, lsl #1
      if (overflowable_count + n >= 2*f->depth)
 8002c0c:	4410      	add	r0, r2
 8002c0e:	42a0      	cmp	r0, r4
 8002c10:	db0a      	blt.n	8002c28 <tu_fifo_write_n+0xf4>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8002c12:	eb03 0908 	add.w	r9, r3, r8
 8002c16:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002c1a:	eba9 0702 	sub.w	r7, r9, r2
 8002c1e:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002c20:	42bb      	cmp	r3, r7
 8002c22:	d91e      	bls.n	8002c62 <tu_fifo_write_n+0x12e>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002c24:	1b3f      	subs	r7, r7, r4
 8002c26:	b2bf      	uxth	r7, r7
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002c28:	eb02 0907 	add.w	r9, r2, r7
 8002c2c:	4645      	mov	r5, r8
 8002c2e:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 8002c32:	fa1f f989 	uxth.w	r9, r9
 8002c36:	4690      	mov	r8, r2
 8002c38:	e7a0      	b.n	8002b7c <tu_fifo_write_n+0x48>
  uint16_t lin_bytes = lin_count * f->item_size;
 8002c3a:	fb13 f302 	smulbb	r3, r3, r2
        memcpy(ff_buf, app_buf, lin_bytes);
 8002c3e:	fa1f fb83 	uxth.w	fp, r3
 8002c42:	465a      	mov	r2, fp
 8002c44:	9101      	str	r1, [sp, #4]
 8002c46:	f002 f99d 	bl	8004f84 <memcpy>
  uint16_t const wrap_count = n - lin_count;
 8002c4a:	eba8 0205 	sub.w	r2, r8, r5
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8002c4e:	9901      	ldr	r1, [sp, #4]
 8002c50:	6830      	ldr	r0, [r6, #0]
  uint16_t const wrap_count = n - lin_count;
 8002c52:	4422      	add	r2, r4
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002c54:	fb12 f20a 	smulbb	r2, r2, sl
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8002c58:	4459      	add	r1, fp
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	f002 f992 	bl	8004f84 <memcpy>
 8002c60:	e7a1      	b.n	8002ba6 <tu_fifo_write_n+0x72>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002c62:	42bc      	cmp	r4, r7
 8002c64:	ddde      	ble.n	8002c24 <tu_fifo_write_n+0xf0>
 8002c66:	4645      	mov	r5, r8
 8002c68:	f8b6 a006 	ldrh.w	sl, [r6, #6]
 8002c6c:	4690      	mov	r8, r2
 8002c6e:	e785      	b.n	8002b7c <tu_fifo_write_n+0x48>

08002c70 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b085      	sub	sp, #20
  if ( n == 0 ) return 0;
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d057      	beq.n	8002d2a <tu_fifo_write_n_const_addr_full_words+0xba>
 8002c7a:	460e      	mov	r6, r1
  if ( !f->overwritable )
 8002c7c:	79c1      	ldrb	r1, [r0, #7]
  uint16_t wr_idx = f->wr_idx;
 8002c7e:	8907      	ldrh	r7, [r0, #8]
  uint16_t rd_idx = f->rd_idx;
 8002c80:	8943      	ldrh	r3, [r0, #10]
  if ( !f->overwritable )
 8002c82:	09c9      	lsrs	r1, r1, #7
 8002c84:	4605      	mov	r5, r0
  uint16_t wr_idx = f->wr_idx;
 8002c86:	b2bf      	uxth	r7, r7
  uint16_t rd_idx = f->rd_idx;
 8002c88:	b29b      	uxth	r3, r3
  if ( !f->overwritable )
 8002c8a:	d154      	bne.n	8002d36 <tu_fifo_write_n_const_addr_full_words+0xc6>
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8002c8c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  if (wr_idx >= rd_idx)
 8002c90:	429f      	cmp	r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002c92:	bf36      	itet	cc
 8002c94:	ebc3 034c 	rsbcc	r3, r3, ip, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002c98:	1afb      	subcs	r3, r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002c9a:	19db      	addcc	r3, r3, r7
 8002c9c:	b29b      	uxth	r3, r3
  return (depth > count) ? (depth - count) : 0;
 8002c9e:	459c      	cmp	ip, r3
 8002ca0:	d943      	bls.n	8002d2a <tu_fifo_write_n_const_addr_full_words+0xba>
 8002ca2:	ebac 0803 	sub.w	r8, ip, r3
 8002ca6:	fa1f f888 	uxth.w	r8, r8
 8002caa:	4590      	cmp	r8, r2
 8002cac:	bf28      	it	cs
 8002cae:	4690      	movcs	r8, r2
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002cb0:	eb08 0907 	add.w	r9, r8, r7
 8002cb4:	fa1f f989 	uxth.w	r9, r9
  while ( idx >= depth ) idx -= depth;
 8002cb8:	45bc      	cmp	ip, r7
 8002cba:	463b      	mov	r3, r7
 8002cbc:	d804      	bhi.n	8002cc8 <tu_fifo_write_n_const_addr_full_words+0x58>
 8002cbe:	eba3 030c 	sub.w	r3, r3, ip
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4563      	cmp	r3, ip
 8002cc6:	d2fa      	bcs.n	8002cbe <tu_fifo_write_n_const_addr_full_words+0x4e>
  uint16_t lin_bytes = lin_count * f->item_size;
 8002cc8:	88e9      	ldrh	r1, [r5, #6]
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8002cca:	f8d5 a000 	ldr.w	sl, [r5]
  uint16_t const lin_count = f->depth - wr_ptr;
 8002cce:	ebac 0003 	sub.w	r0, ip, r3
 8002cd2:	b280      	uxth	r0, r0
  uint16_t lin_bytes = lin_count * f->item_size;
 8002cd4:	f3c1 0e0e 	ubfx	lr, r1, #0, #15
      if(n <= lin_count)
 8002cd8:	4540      	cmp	r0, r8
  uint16_t lin_bytes = lin_count * f->item_size;
 8002cda:	4671      	mov	r1, lr
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8002cdc:	fb0e ae03 	mla	lr, lr, r3, sl
      if(n <= lin_count)
 8002ce0:	d351      	bcc.n	8002d86 <tu_fifo_write_n_const_addr_full_words+0x116>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8002ce2:	fb11 f208 	smulbb	r2, r1, r8
  uint16_t full_words = len >> 2;
 8002ce6:	f3c2 008d 	ubfx	r0, r2, #2, #14
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8002cea:	b292      	uxth	r2, r2
  while(full_words--)
 8002cec:	2800      	cmp	r0, #0
 8002cee:	f000 809f 	beq.w	8002e30 <tu_fifo_write_n_const_addr_full_words+0x1c0>
 8002cf2:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 8002cf6:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8002cf8:	f84e 3b04 	str.w	r3, [lr], #4
  while(full_words--)
 8002cfc:	4570      	cmp	r0, lr
 8002cfe:	d1fa      	bne.n	8002cf6 <tu_fifo_write_n_const_addr_full_words+0x86>
  if ( bytes_rem )
 8002d00:	f012 0203 	ands.w	r2, r2, #3
 8002d04:	f040 8087 	bne.w	8002e16 <tu_fifo_write_n_const_addr_full_words+0x1a6>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002d08:	45b9      	cmp	r9, r7
 8002d0a:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8002d0e:	d302      	bcc.n	8002d16 <tu_fifo_write_n_const_addr_full_words+0xa6>
 8002d10:	ebb9 0f4c 	cmp.w	r9, ip, lsl #1
 8002d14:	db03      	blt.n	8002d1e <tu_fifo_write_n_const_addr_full_words+0xae>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002d16:	eba9 0903 	sub.w	r9, r9, r3
 8002d1a:	fa1f f989 	uxth.w	r9, r9
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
}
 8002d1e:	4640      	mov	r0, r8
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8002d20:	f8a5 9008 	strh.w	r9, [r5, #8]
}
 8002d24:	b005      	add	sp, #20
 8002d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( n == 0 ) return 0;
 8002d2a:	f04f 0800 	mov.w	r8, #0
}
 8002d2e:	4640      	mov	r0, r8
 8002d30:	b005      	add	sp, #20
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( n >= f->depth )
 8002d36:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8002d3a:	4542      	cmp	r2, r8
 8002d3c:	d305      	bcc.n	8002d4a <tu_fifo_write_n_const_addr_full_words+0xda>
  if (n)
 8002d3e:	f1b8 0f00 	cmp.w	r8, #0
 8002d42:	d0f4      	beq.n	8002d2e <tu_fifo_write_n_const_addr_full_words+0xbe>
 8002d44:	46c4      	mov	ip, r8
  uint16_t rd_idx = f->rd_idx;
 8002d46:	461f      	mov	r7, r3
 8002d48:	e7b2      	b.n	8002cb0 <tu_fifo_write_n_const_addr_full_words+0x40>
  if (wr_idx >= rd_idx)
 8002d4a:	429f      	cmp	r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002d4c:	bf36      	itet	cc
 8002d4e:	ebc3 0148 	rsbcc	r1, r3, r8, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8002d52:	1af9      	subcs	r1, r7, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8002d54:	19c9      	addcc	r1, r1, r7
 8002d56:	b289      	uxth	r1, r1
 8002d58:	ea4f 0048 	mov.w	r0, r8, lsl #1
      if (overflowable_count + n >= 2*f->depth)
 8002d5c:	4411      	add	r1, r2
 8002d5e:	4281      	cmp	r1, r0
 8002d60:	db0a      	blt.n	8002d78 <tu_fifo_write_n_const_addr_full_words+0x108>
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8002d62:	eb03 0908 	add.w	r9, r3, r8
 8002d66:	fa1f f989 	uxth.w	r9, r9
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002d6a:	eba9 0702 	sub.w	r7, r9, r2
 8002d6e:	b2bf      	uxth	r7, r7
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	d956      	bls.n	8002e22 <tu_fifo_write_n_const_addr_full_words+0x1b2>
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8002d74:	1a3f      	subs	r7, r7, r0
 8002d76:	b2bf      	uxth	r7, r7
  uint16_t new_idx = (uint16_t) (idx + offset);
 8002d78:	eb02 0907 	add.w	r9, r2, r7
 8002d7c:	46c4      	mov	ip, r8
 8002d7e:	fa1f f989 	uxth.w	r9, r9
 8002d82:	4690      	mov	r8, r2
 8002d84:	e798      	b.n	8002cb8 <tu_fifo_write_n_const_addr_full_words+0x48>
  uint16_t lin_bytes = lin_count * f->item_size;
 8002d86:	fb10 f001 	smulbb	r0, r0, r1
 8002d8a:	b280      	uxth	r0, r0
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8002d8c:	f020 0203 	bic.w	r2, r0, #3
 8002d90:	b294      	uxth	r4, r2
 8002d92:	9401      	str	r4, [sp, #4]
  while(full_words--)
 8002d94:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8002d98:	b13a      	cbz	r2, 8002daa <tu_fifo_write_n_const_addr_full_words+0x13a>
 8002d9a:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8002d9e:	4672      	mov	r2, lr
    tu_unaligned_write32(ff_buf, *reg_rx);
 8002da0:	6834      	ldr	r4, [r6, #0]
 8002da2:	f842 4b04 	str.w	r4, [r2], #4
  while(full_words--)
 8002da6:	4593      	cmp	fp, r2
 8002da8:	d1fa      	bne.n	8002da0 <tu_fifo_write_n_const_addr_full_words+0x130>
  uint16_t const wrap_count = n - lin_count;
 8002daa:	eba8 040c 	sub.w	r4, r8, ip
 8002dae:	441c      	add	r4, r3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002db0:	fb14 f401 	smulbb	r4, r4, r1
        if (rem > 0)
 8002db4:	f010 0b03 	ands.w	fp, r0, #3
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8002db8:	b2a4      	uxth	r4, r4
        if (rem > 0)
 8002dba:	d01c      	beq.n	8002df6 <tu_fifo_write_n_const_addr_full_words+0x186>
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8002dbc:	f1cb 0304 	rsb	r3, fp, #4
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002dc0:	b29b      	uxth	r3, r3
          while(rem--) *ff_buf++ = *src_u8++;
 8002dc2:	9801      	ldr	r0, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 8002dc4:	6832      	ldr	r2, [r6, #0]
 8002dc6:	9203      	str	r2, [sp, #12]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	bf28      	it	cs
 8002dcc:	4623      	movcs	r3, r4
          while(rem--) *ff_buf++ = *src_u8++;
 8002dce:	465a      	mov	r2, fp
 8002dd0:	a903      	add	r1, sp, #12
 8002dd2:	4470      	add	r0, lr
          wrap_bytes -= remrem;
 8002dd4:	1ae4      	subs	r4, r4, r3
 8002dd6:	9301      	str	r3, [sp, #4]
          while(rem--) *ff_buf++ = *src_u8++;
 8002dd8:	f002 f8d4 	bl	8004f84 <memcpy>
 8002ddc:	ab03      	add	r3, sp, #12
 8002dde:	eb03 010b 	add.w	r1, r3, fp
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8002de2:	9b01      	ldr	r3, [sp, #4]
          ff_buf = f->buffer;
 8002de4:	f8d5 a000 	ldr.w	sl, [r5]
          wrap_bytes -= remrem;
 8002de8:	b2a4      	uxth	r4, r4
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8002dea:	b2da      	uxtb	r2, r3
          while(remrem--) *ff_buf++ = *src_u8++;
 8002dec:	b11b      	cbz	r3, 8002df6 <tu_fifo_write_n_const_addr_full_words+0x186>
 8002dee:	4650      	mov	r0, sl
 8002df0:	4492      	add	sl, r2
 8002df2:	f002 f8c7 	bl	8004f84 <memcpy>
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8002df6:	b914      	cbnz	r4, 8002dfe <tu_fifo_write_n_const_addr_full_words+0x18e>
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8002df8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8002dfc:	e784      	b.n	8002d08 <tu_fifo_write_n_const_addr_full_words+0x98>
  while(full_words--)
 8002dfe:	08a0      	lsrs	r0, r4, #2
 8002e00:	d014      	beq.n	8002e2c <tu_fifo_write_n_const_addr_full_words+0x1bc>
 8002e02:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    tu_unaligned_write32(ff_buf, *reg_rx);
 8002e06:	6833      	ldr	r3, [r6, #0]
TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8002e08:	f84a 3b04 	str.w	r3, [sl], #4
  while(full_words--)
 8002e0c:	4582      	cmp	sl, r0
 8002e0e:	d1fa      	bne.n	8002e06 <tu_fifo_write_n_const_addr_full_words+0x196>
  if ( bytes_rem )
 8002e10:	f014 0203 	ands.w	r2, r4, #3
 8002e14:	d0f0      	beq.n	8002df8 <tu_fifo_write_n_const_addr_full_words+0x188>
    uint32_t tmp32 = *reg_rx;
 8002e16:	6833      	ldr	r3, [r6, #0]
 8002e18:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8002e1a:	a903      	add	r1, sp, #12
 8002e1c:	f002 f8b2 	bl	8004f84 <memcpy>
 8002e20:	e7ea      	b.n	8002df8 <tu_fifo_write_n_const_addr_full_words+0x188>
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8002e22:	42b8      	cmp	r0, r7
 8002e24:	dda6      	ble.n	8002d74 <tu_fifo_write_n_const_addr_full_words+0x104>
 8002e26:	46c4      	mov	ip, r8
 8002e28:	4690      	mov	r8, r2
 8002e2a:	e745      	b.n	8002cb8 <tu_fifo_write_n_const_addr_full_words+0x48>
  while(full_words--)
 8002e2c:	4650      	mov	r0, sl
 8002e2e:	e7ef      	b.n	8002e10 <tu_fifo_write_n_const_addr_full_words+0x1a0>
 8002e30:	4670      	mov	r0, lr
 8002e32:	e765      	b.n	8002d00 <tu_fifo_write_n_const_addr_full_words+0x90>

08002e34 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8002e34:	4603      	mov	r3, r0
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8002e36:	2200      	movs	r2, #0
 8002e38:	8142      	strh	r2, [r0, #10]
  f->wr_idx = 0;

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 8002e3a:	2001      	movs	r0, #1
  f->wr_idx = 0;
 8002e3c:	811a      	strh	r2, [r3, #8]
}
 8002e3e:	4770      	bx	lr

08002e40 <tu_fifo_set_overwritable>:
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8002e40:	79c2      	ldrb	r2, [r0, #7]
{
 8002e42:	4603      	mov	r3, r0
  f->overwritable = overwritable;
 8002e44:	f361 12c7 	bfi	r2, r1, #7, #1

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
 8002e48:	2001      	movs	r0, #1
  f->overwritable = overwritable;
 8002e4a:	71da      	strb	r2, [r3, #7]
}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <configuration_reset+0xa4>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002e56:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002f04 <configuration_reset+0xb4>
{
 8002e5a:	4607      	mov	r7, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002e5c:	f898 2000 	ldrb.w	r2, [r8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d036      	beq.n	8002ed2 <configuration_reset+0x82>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002e64:	4d24      	ldr	r5, [pc, #144]	; (8002ef8 <configuration_reset+0xa8>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002e66:	4e25      	ldr	r6, [pc, #148]	; (8002efc <configuration_reset+0xac>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002e68:	2400      	movs	r4, #0
    drvid -= _app_driver_count;
 8002e6a:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002e6c:	42a2      	cmp	r2, r4
    drvid -= _app_driver_count;
 8002e6e:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002e70:	d839      	bhi.n	8002ee6 <configuration_reset+0x96>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002e78:	d908      	bls.n	8002e8c <configuration_reset+0x3c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
 8002e7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e7e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8002e82:	07db      	lsls	r3, r3, #31
 8002e84:	d500      	bpl.n	8002e88 <configuration_reset+0x38>
 8002e86:	be00      	bkpt	0x0000
  }

  tu_varclr(&_usbd_dev);
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
}
 8002e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002e8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->reset(rhport);
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4638      	mov	r0, r7
 8002e94:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002e96:	f898 2000 	ldrb.w	r2, [r8]
 8002e9a:	3401      	adds	r4, #1
 8002e9c:	b2e4      	uxtb	r4, r4
 8002e9e:	1c53      	adds	r3, r2, #1
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	dae2      	bge.n	8002e6a <configuration_reset+0x1a>
  tu_varclr(&_usbd_dev);
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <configuration_reset+0xb0>)
 8002ea6:	222b      	movs	r2, #43	; 0x2b
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 f878 	bl	8004fa0 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	f8c0 2003 	str.w	r2, [r0, #3]
 8002eb8:	f8c0 2007 	str.w	r2, [r0, #7]
 8002ebc:	f8c0 200b 	str.w	r2, [r0, #11]
 8002ec0:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8002ec4:	f8c0 2013 	str.w	r2, [r0, #19]
 8002ec8:	f8c0 2017 	str.w	r2, [r0, #23]
 8002ecc:	f8c0 201b 	str.w	r2, [r0, #27]
 8002ed0:	e7da      	b.n	8002e88 <configuration_reset+0x38>
    driver->reset(rhport);
 8002ed2:	f7ff fac7 	bl	8002464 <cdcd_reset>
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	f7fe fe54 	bl	8001b84 <audiod_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002edc:	f898 3000 	ldrb.w	r3, [r8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ca      	bne.n	8002e7a <configuration_reset+0x2a>
 8002ee4:	e7de      	b.n	8002ea4 <configuration_reset+0x54>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002ee6:	6833      	ldr	r3, [r6, #0]
 8002ee8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    TU_ASSERT(driver, );
 8002eec:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 8002ef0:	d1ce      	bne.n	8002e90 <configuration_reset+0x40>
 8002ef2:	e7c2      	b.n	8002e7a <configuration_reset+0x2a>
 8002ef4:	00000000 	.word	0x00000000
 8002ef8:	080051e0 	.word	0x080051e0
 8002efc:	200019ac 	.word	0x200019ac
 8002f00:	200019b4 	.word	0x200019b4
 8002f04:	200019b0 	.word	0x200019b0

08002f08 <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <usbd_int_set+0x10>)
  if (enabled)
 8002f0a:	b110      	cbz	r0, 8002f12 <usbd_int_set+0xa>
    dcd_int_enable(_usbd_rhport);
 8002f0c:	7818      	ldrb	r0, [r3, #0]
 8002f0e:	f000 bfc5 	b.w	8003e9c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 8002f12:	7818      	ldrb	r0, [r3, #0]
 8002f14:	f000 bfc8 	b.w	8003ea8 <dcd_int_disable>
 8002f18:	20000044 	.word	0x20000044

08002f1c <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <tud_mounted+0xc>)
 8002f1e:	7858      	ldrb	r0, [r3, #1]
}
 8002f20:	3800      	subs	r0, #0
 8002f22:	bf18      	it	ne
 8002f24:	2001      	movne	r0, #1
 8002f26:	4770      	bx	lr
 8002f28:	200019b4 	.word	0x200019b4

08002f2c <tud_suspended>:
  return _usbd_dev.suspended;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <tud_suspended+0xc>)
 8002f2e:	7818      	ldrb	r0, [r3, #0]
}
 8002f30:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	200019b4 	.word	0x200019b4

08002f3c <tud_init>:
{
 8002f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8002f40:	4f2e      	ldr	r7, [pc, #184]	; (8002ffc <tud_init+0xc0>)
  if ( tud_inited() ) return true;
 8002f42:	783b      	ldrb	r3, [r7, #0]
 8002f44:	2bff      	cmp	r3, #255	; 0xff
 8002f46:	d002      	beq.n	8002f4e <tud_init+0x12>
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8002f4e:	4e2c      	ldr	r6, [pc, #176]	; (8003000 <tud_init+0xc4>)
  if ( usbd_app_driver_get_cb )
 8002f50:	4d2c      	ldr	r5, [pc, #176]	; (8003004 <tud_init+0xc8>)
  tu_varclr(&_usbd_dev);
 8002f52:	222b      	movs	r2, #43	; 0x2b
 8002f54:	2100      	movs	r1, #0
 8002f56:	4604      	mov	r4, r0
 8002f58:	482b      	ldr	r0, [pc, #172]	; (8003008 <tud_init+0xcc>)
 8002f5a:	f002 f821 	bl	8004fa0 <memset>
 8002f5e:	1d30      	adds	r0, r6, #4
 8002f60:	f7ff ff68 	bl	8002e34 <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <tud_init+0xd0>)
 8002f66:	601e      	str	r6, [r3, #0]
  if ( usbd_app_driver_get_cb )
 8002f68:	b125      	cbz	r5, 8002f74 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8002f6a:	4829      	ldr	r0, [pc, #164]	; (8003010 <tud_init+0xd4>)
 8002f6c:	f3af 8000 	nop.w
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <tud_init+0xd8>)
 8002f72:	6018      	str	r0, [r3, #0]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8002f74:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003010 <tud_init+0xd4>
 8002f78:	f899 2000 	ldrb.w	r2, [r9]
 8002f7c:	b36d      	cbz	r5, 8002fda <tud_init+0x9e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002f7e:	4d26      	ldr	r5, [pc, #152]	; (8003018 <tud_init+0xdc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002f80:	4e24      	ldr	r6, [pc, #144]	; (8003014 <tud_init+0xd8>)
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8002f82:	f04f 0800 	mov.w	r8, #0
    drvid -= _app_driver_count;
 8002f86:	eba8 0302 	sub.w	r3, r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002f8a:	4542      	cmp	r2, r8
    drvid -= _app_driver_count;
 8002f8c:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002f8e:	d82d      	bhi.n	8002fec <tud_init+0xb0>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f96:	d90a      	bls.n	8002fae <tud_init+0x72>
    TU_ASSERT(driver);
 8002f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f9c:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8002fa0:	f010 0001 	ands.w	r0, r0, #1
 8002fa4:	d0d1      	beq.n	8002f4a <tud_init+0xe>
 8002fa6:	be00      	bkpt	0x0000
 8002fa8:	2000      	movs	r0, #0
}
 8002faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002fae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    driver->init();
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8002fb6:	f899 2000 	ldrb.w	r2, [r9]
 8002fba:	f108 0801 	add.w	r8, r8, #1
 8002fbe:	fa5f f888 	uxtb.w	r8, r8
 8002fc2:	1c53      	adds	r3, r2, #1
 8002fc4:	4543      	cmp	r3, r8
 8002fc6:	dade      	bge.n	8002f86 <tud_init+0x4a>
  dcd_init(rhport);
 8002fc8:	4620      	mov	r0, r4
  _usbd_rhport = rhport;
 8002fca:	703c      	strb	r4, [r7, #0]
  dcd_init(rhport);
 8002fcc:	f000 ffc0 	bl	8003f50 <dcd_init>
  dcd_int_enable(rhport);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f000 ff63 	bl	8003e9c <dcd_int_enable>
  return true;
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	e7b7      	b.n	8002f4a <tud_init+0xe>
    driver->init();
 8002fda:	f7ff fa1b 	bl	8002414 <cdcd_init>
 8002fde:	f7fe fda3 	bl	8001b28 <audiod_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8002fe2:	f899 3000 	ldrb.w	r3, [r9]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1d6      	bne.n	8002f98 <tud_init+0x5c>
 8002fea:	e7ed      	b.n	8002fc8 <tud_init+0x8c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002fec:	6833      	ldr	r3, [r6, #0]
 8002fee:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    TU_ASSERT(driver);
 8002ff2:	eb13 03c2 	adds.w	r3, r3, r2, lsl #3
 8002ff6:	d1dc      	bne.n	8002fb2 <tud_init+0x76>
 8002ff8:	e7ce      	b.n	8002f98 <tud_init+0x5c>
 8002ffa:	bf00      	nop
 8002ffc:	20000044 	.word	0x20000044
 8003000:	20000034 	.word	0x20000034
 8003004:	00000000 	.word	0x00000000
 8003008:	200019b4 	.word	0x200019b4
 800300c:	200019e0 	.word	0x200019e0
 8003010:	200019b0 	.word	0x200019b0
 8003014:	200019ac 	.word	0x200019ac
 8003018:	080051e0 	.word	0x080051e0

0800301c <tud_task_ext>:
{
 800301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
 8003020:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80032f4 <tud_task_ext+0x2d8>
  if ( !tud_inited() ) return;
 8003024:	f899 3000 	ldrb.w	r3, [r9]
 8003028:	2bff      	cmp	r3, #255	; 0xff
{
 800302a:	b08b      	sub	sp, #44	; 0x2c
  if ( !tud_inited() ) return;
 800302c:	d04e      	beq.n	80030cc <tud_task_ext+0xb0>
 800302e:	4da9      	ldr	r5, [pc, #676]	; (80032d4 <tud_task_ext+0x2b8>)
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003030:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80032f8 <tud_task_ext+0x2dc>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003034:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 80032fc <tud_task_ext+0x2e0>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8003038:	682e      	ldr	r6, [r5, #0]
  qhdl->interrupt_set(false);
 800303a:	4634      	mov	r4, r6
 800303c:	2000      	movs	r0, #0
 800303e:	f854 3b04 	ldr.w	r3, [r4], #4
 8003042:	4798      	blx	r3
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003044:	4620      	mov	r0, r4
 8003046:	a907      	add	r1, sp, #28
 8003048:	f7ff fbe4 	bl	8002814 <tu_fifo_read>
  qhdl->interrupt_set(true);
 800304c:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
 800304e:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8003050:	2001      	movs	r0, #1
 8003052:	4798      	blx	r3
 8003054:	2c00      	cmp	r4, #0
 8003056:	d039      	beq.n	80030cc <tud_task_ext+0xb0>
    switch ( event.event_id )
 8003058:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800305c:	3b01      	subs	r3, #1
 800305e:	2b07      	cmp	r3, #7
 8003060:	f200 80ac 	bhi.w	80031bc <tud_task_ext+0x1a0>
 8003064:	e8df f003 	tbb	[pc, r3]
 8003068:	83aa929f 	.word	0x83aa929f
 800306c:	040a3577 	.word	0x040a3577
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8003070:	9b08      	ldr	r3, [sp, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0e0      	beq.n	8003038 <tud_task_ext+0x1c>
 8003076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003078:	4798      	blx	r3
 800307a:	e7dd      	b.n	8003038 <tud_task_ext+0x1c>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 800307c:	f89d 1020 	ldrb.w	r1, [sp, #32]
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8003080:	4b95      	ldr	r3, [pc, #596]	; (80032d8 <tud_task_ext+0x2bc>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003082:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003086:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800308a:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800308e:	7fd8      	ldrb	r0, [r3, #31]
 8003090:	f36f 0000 	bfc	r0, #0, #1
 8003094:	77d8      	strb	r0, [r3, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8003096:	7fd8      	ldrb	r0, [r3, #31]
 8003098:	f36f 0082 	bfc	r0, #2, #1
 800309c:	77d8      	strb	r0, [r3, #31]
        if ( 0 == epnum )
 800309e:	2c00      	cmp	r4, #0
 80030a0:	f000 80a9 	beq.w	80031f6 <tud_task_ext+0x1da>
  if ( usbd_app_driver_get_cb )
 80030a4:	4a8d      	ldr	r2, [pc, #564]	; (80032dc <tud_task_ext+0x2c0>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80030a6:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
 80030a8:	b132      	cbz	r2, 80030b8 <tud_task_ext+0x9c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80030aa:	4a8d      	ldr	r2, [pc, #564]	; (80032e0 <tud_task_ext+0x2c4>)
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f0c0 8099 	bcc.w	80031e6 <tud_task_ext+0x1ca>
    drvid -= _app_driver_count;
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f240 8088 	bls.w	80031ce <tud_task_ext+0x1b2>
          TU_ASSERT(driver, );
 80030be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030c2:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80030c6:	07d8      	lsls	r0, r3, #31
 80030c8:	d500      	bpl.n	80030cc <tud_task_ext+0xb0>
 80030ca:	be00      	bkpt	0x0000
}
 80030cc:	b00b      	add	sp, #44	; 0x2c
 80030ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _usbd_dev.connected = 1;
 80030d2:	4c81      	ldr	r4, [pc, #516]	; (80032d8 <tud_task_ext+0x2bc>)
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80030d4:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
 80030d8:	7823      	ldrb	r3, [r4, #0]
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80030e0:	7fe3      	ldrb	r3, [r4, #31]
 80030e2:	f36f 0300 	bfc	r3, #0, #1
 80030e6:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80030e8:	7fe3      	ldrb	r3, [r4, #31]
 80030ea:	f36f 0382 	bfc	r3, #2, #1
 80030ee:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 80030f0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80030f4:	f36f 0300 	bfc	r3, #0, #1
 80030f8:	f884 3020 	strb.w	r3, [r4, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 80030fc:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003100:	f36f 0382 	bfc	r3, #2, #1
 8003104:	f884 3020 	strb.w	r3, [r4, #32]
  usbd_control_set_complete_callback(NULL);
 8003108:	2000      	movs	r0, #0
 800310a:	f000 fe27 	bl	8003d5c <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 800310e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003112:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003116:	2a60      	cmp	r2, #96	; 0x60
 8003118:	d00b      	beq.n	8003132 <tud_task_ext+0x116>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800311a:	2a40      	cmp	r2, #64	; 0x40
 800311c:	d073      	beq.n	8003206 <tud_task_ext+0x1ea>
  switch ( p_request->bmRequestType_bit.recipient )
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2b01      	cmp	r3, #1
 8003124:	f000 80ec 	beq.w	8003300 <tud_task_ext+0x2e4>
 8003128:	2b02      	cmp	r3, #2
 800312a:	d07a      	beq.n	8003222 <tud_task_ext+0x206>
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80b0 	beq.w	8003292 <tud_task_ext+0x276>
    default: TU_BREAKPOINT(); return false;
 8003132:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003136:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800313a:	07dc      	lsls	r4, r3, #31
 800313c:	d500      	bpl.n	8003140 <tud_task_ext+0x124>
 800313e:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 8003140:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003144:	2100      	movs	r1, #0
 8003146:	f001 fa4d 	bl	80045e4 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800314a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	f001 fa48 	bl	80045e4 <dcd_edpt_stall>
 8003154:	e770      	b.n	8003038 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 8003156:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <tud_task_ext+0x2bc>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	07da      	lsls	r2, r3, #31
 800315c:	f57f af6c 	bpl.w	8003038 <tud_task_ext+0x1c>
          if (tud_resume_cb) tud_resume_cb();
 8003160:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <tud_task_ext+0x2c8>)
 8003162:	2b00      	cmp	r3, #0
 8003164:	f43f af68 	beq.w	8003038 <tud_task_ext+0x1c>
 8003168:	f7fd f9d6 	bl	8000518 <tud_resume_cb>
 800316c:	e764      	b.n	8003038 <tud_task_ext+0x1c>
        if ( _usbd_dev.connected )
 800316e:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <tud_task_ext+0x2bc>)
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	07d1      	lsls	r1, r2, #31
 8003174:	f57f af60 	bpl.w	8003038 <tud_task_ext+0x1c>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8003178:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <tud_task_ext+0x2cc>)
 800317a:	2a00      	cmp	r2, #0
 800317c:	f43f af5c 	beq.w	8003038 <tud_task_ext+0x1c>
 8003180:	7818      	ldrb	r0, [r3, #0]
 8003182:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8003186:	f7fd f9bf 	bl	8000508 <tud_suspend_cb>
 800318a:	e755      	b.n	8003038 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 800318c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003190:	f7ff fe5e 	bl	8002e50 <configuration_reset>
  usbd_control_reset();
 8003194:	f000 fdd8 	bl	8003d48 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8003198:	4b54      	ldr	r3, [pc, #336]	; (80032ec <tud_task_ext+0x2d0>)
 800319a:	2b00      	cmp	r3, #0
 800319c:	f43f af4c 	beq.w	8003038 <tud_task_ext+0x1c>
 80031a0:	f7fd f9ac 	bl	80004fc <tud_umount_cb>
 80031a4:	e748      	b.n	8003038 <tud_task_ext+0x1c>
  configuration_reset(rhport);
 80031a6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80031aa:	f7ff fe51 	bl	8002e50 <configuration_reset>
  usbd_control_reset();
 80031ae:	f000 fdcb 	bl	8003d48 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80031b2:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <tud_task_ext+0x2bc>)
 80031b4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80031b8:	709a      	strb	r2, [r3, #2]
      break;
 80031ba:	e73d      	b.n	8003038 <tud_task_ext+0x1c>
        TU_BREAKPOINT();
 80031bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80031c0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80031c4:	07db      	lsls	r3, r3, #31
 80031c6:	f57f af37 	bpl.w	8003038 <tud_task_ext+0x1c>
 80031ca:	be00      	bkpt	0x0000
  {
 80031cc:	e734      	b.n	8003038 <tud_task_ext+0x1c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80031ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031d2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80031d6:	691c      	ldr	r4, [r3, #16]
 80031d8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80031e2:	47a0      	blx	r4
 80031e4:	e728      	b.n	8003038 <tud_task_ext+0x1c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80031e6:	f8db 2000 	ldr.w	r2, [fp]
 80031ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          TU_ASSERT(driver, );
 80031ee:	eb12 03c3 	adds.w	r3, r2, r3, lsl #3
 80031f2:	d1f0      	bne.n	80031d6 <tud_task_ext+0x1ba>
 80031f4:	e763      	b.n	80030be <tud_task_ext+0xa2>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80031f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80031fc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003200:	f000 fdbe 	bl	8003d80 <usbd_control_xfer_cb>
 8003204:	e718      	b.n	8003038 <tud_task_ext+0x1c>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8003206:	483a      	ldr	r0, [pc, #232]	; (80032f0 <tud_task_ext+0x2d4>)
 8003208:	2800      	cmp	r0, #0
 800320a:	d099      	beq.n	8003140 <tud_task_ext+0x124>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800320c:	f000 fda6 	bl	8003d5c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8003210:	4640      	mov	r0, r8
 8003212:	aa08      	add	r2, sp, #32
 8003214:	2101      	movs	r1, #1
 8003216:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800321a:	2800      	cmp	r0, #0
 800321c:	f47f af0c 	bne.w	8003038 <tud_task_ext+0x1c>
 8003220:	e78e      	b.n	8003140 <tud_task_ext+0x124>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003222:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8003226:	f001 037f 	and.w	r3, r1, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800322a:	2b05      	cmp	r3, #5
 800322c:	d881      	bhi.n	8003132 <tud_task_ext+0x116>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800322e:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 8003232:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if ( usbd_app_driver_get_cb )
 8003236:	4e29      	ldr	r6, [pc, #164]	; (80032dc <tud_task_ext+0x2c0>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8003238:	7cc0      	ldrb	r0, [r0, #19]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
  if ( usbd_app_driver_get_cb )
 8003240:	b136      	cbz	r6, 8003250 <tud_task_ext+0x234>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003242:	4e27      	ldr	r6, [pc, #156]	; (80032e0 <tud_task_ext+0x2c4>)
 8003244:	7836      	ldrb	r6, [r6, #0]
 8003246:	42b0      	cmp	r0, r6
 8003248:	f0c0 8196 	bcc.w	8003578 <tud_task_ext+0x55c>
    drvid -= _app_driver_count;
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003250:	2801      	cmp	r0, #1
 8003252:	f240 80b2 	bls.w	80033ba <tud_task_ext+0x39e>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003256:	2a00      	cmp	r2, #0
 8003258:	f47f af72 	bne.w	8003140 <tud_task_ext+0x124>
  return NULL;
 800325c:	4616      	mov	r6, r2
        switch ( p_request->bRequest )
 800325e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8003262:	f002 00fd 	and.w	r0, r2, #253	; 0xfd
 8003266:	2801      	cmp	r0, #1
 8003268:	f000 8193 	beq.w	8003592 <tud_task_ext+0x576>
 800326c:	2a00      	cmp	r2, #0
 800326e:	f47f af60 	bne.w	8003132 <tud_task_ext+0x116>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8003272:	4423      	add	r3, r4
 8003274:	449c      	add	ip, r3
            tud_control_xfer(rhport, p_request, &status, 2);
 8003276:	4640      	mov	r0, r8
  return _usbd_dev.ep_status[epnum][dir].stalled;
 8003278:	f89c 301f 	ldrb.w	r3, [ip, #31]
 800327c:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8003280:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
 8003284:	f10d 021a 	add.w	r2, sp, #26
 8003288:	2302      	movs	r3, #2
 800328a:	a908      	add	r1, sp, #32
 800328c:	f000 fd00 	bl	8003c90 <tud_control_xfer>
          break;
 8003290:	e6d2      	b.n	8003038 <tud_task_ext+0x1c>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8003292:	2a20      	cmp	r2, #32
 8003294:	d06e      	beq.n	8003374 <tud_task_ext+0x358>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003296:	2a00      	cmp	r2, #0
 8003298:	f47f af4b 	bne.w	8003132 <tud_task_ext+0x116>
      switch ( p_request->bRequest )
 800329c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	f63f af46 	bhi.w	8003132 <tud_task_ext+0x116>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <tud_task_ext+0x290>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080034ab 	.word	0x080034ab
 80032b0:	0800348f 	.word	0x0800348f
 80032b4:	08003133 	.word	0x08003133
 80032b8:	080034bd 	.word	0x080034bd
 80032bc:	08003133 	.word	0x08003133
 80032c0:	08003475 	.word	0x08003475
 80032c4:	08003421 	.word	0x08003421
 80032c8:	08003133 	.word	0x08003133
 80032cc:	0800340b 	.word	0x0800340b
 80032d0:	080033e1 	.word	0x080033e1
 80032d4:	200019e0 	.word	0x200019e0
 80032d8:	200019b4 	.word	0x200019b4
 80032dc:	00000000 	.word	0x00000000
 80032e0:	200019b0 	.word	0x200019b0
 80032e4:	08000519 	.word	0x08000519
 80032e8:	08000509 	.word	0x08000509
 80032ec:	080004fd 	.word	0x080004fd
 80032f0:	00000000 	.word	0x00000000
 80032f4:	20000044 	.word	0x20000044
 80032f8:	080051e0 	.word	0x080051e0
 80032fc:	200019ac 	.word	0x200019ac
 8003300:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003304:	2b0f      	cmp	r3, #15
 8003306:	f63f af1b 	bhi.w	8003140 <tud_task_ext+0x124>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800330a:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 800330c:	4abb      	ldr	r2, [pc, #748]	; (80035fc <tud_task_ext+0x5e0>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800330e:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8003310:	b132      	cbz	r2, 8003320 <tud_task_ext+0x304>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003312:	4abb      	ldr	r2, [pc, #748]	; (8003600 <tud_task_ext+0x5e4>)
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	4293      	cmp	r3, r2
 8003318:	f0c0 8125 	bcc.w	8003566 <tud_task_ext+0x54a>
    drvid -= _app_driver_count;
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003320:	2b01      	cmp	r3, #1
 8003322:	f63f af0d 	bhi.w	8003140 <tud_task_ext+0x124>
 8003326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800332a:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800332e:	68e0      	ldr	r0, [r4, #12]
 8003330:	f000 fd14 	bl	8003d5c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8003334:	68e3      	ldr	r3, [r4, #12]
 8003336:	aa08      	add	r2, sp, #32
 8003338:	2101      	movs	r1, #1
 800333a:	4640      	mov	r0, r8
 800333c:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
 800333e:	2800      	cmp	r0, #0
 8003340:	f47f ae7a 	bne.w	8003038 <tud_task_ext+0x1c>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8003344:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003348:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 800334c:	f47f aef8 	bne.w	8003140 <tud_task_ext+0x124>
        switch(p_request->bRequest)
 8003350:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003354:	3b0a      	subs	r3, #10
 8003356:	2b01      	cmp	r3, #1
 8003358:	f63f aef2 	bhi.w	8003140 <tud_task_ext+0x124>
            usbd_control_set_complete_callback(NULL);
 800335c:	f000 fcfe 	bl	8003d5c <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8003360:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003364:	2b0a      	cmp	r3, #10
 8003366:	f000 816a 	beq.w	800363e <tud_task_ext+0x622>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 800336a:	a908      	add	r1, sp, #32
 800336c:	4640      	mov	r0, r8
 800336e:	f000 fc75 	bl	8003c5c <tud_control_status>
 8003372:	e661      	b.n	8003038 <tud_task_ext+0x1c>
 8003374:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003378:	2b0f      	cmp	r3, #15
 800337a:	f63f aee1 	bhi.w	8003140 <tud_task_ext+0x124>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800337e:	4423      	add	r3, r4
  if ( usbd_app_driver_get_cb )
 8003380:	4a9e      	ldr	r2, [pc, #632]	; (80035fc <tud_task_ext+0x5e0>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003382:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
 8003384:	b132      	cbz	r2, 8003394 <tud_task_ext+0x378>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003386:	4a9e      	ldr	r2, [pc, #632]	; (8003600 <tud_task_ext+0x5e4>)
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	4293      	cmp	r3, r2
 800338c:	f0c0 812d 	bcc.w	80035ea <tud_task_ext+0x5ce>
    drvid -= _app_driver_count;
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003394:	2b01      	cmp	r3, #1
 8003396:	f63f aed3 	bhi.w	8003140 <tud_task_ext+0x124>
 800339a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800339e:	eb0a 04c3 	add.w	r4, sl, r3, lsl #3
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80033a2:	68e0      	ldr	r0, [r4, #12]
 80033a4:	f000 fcda 	bl	8003d5c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	4640      	mov	r0, r8
 80033ac:	aa08      	add	r2, sp, #32
 80033ae:	2101      	movs	r1, #1
 80033b0:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f47f ae40 	bne.w	8003038 <tud_task_ext+0x1c>
 80033b8:	e6c2      	b.n	8003140 <tud_task_ext+0x124>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80033ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033be:	eb0a 06c0 	add.w	r6, sl, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	f43f af4b 	beq.w	800325e <tud_task_ext+0x242>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80033c8:	68f0      	ldr	r0, [r6, #12]
 80033ca:	f000 fcc7 	bl	8003d5c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80033ce:	68f3      	ldr	r3, [r6, #12]
 80033d0:	4640      	mov	r0, r8
 80033d2:	aa08      	add	r2, sp, #32
 80033d4:	2101      	movs	r1, #1
 80033d6:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80033d8:	2800      	cmp	r0, #0
 80033da:	f47f ae2d 	bne.w	8003038 <tud_task_ext+0x1c>
 80033de:	e6af      	b.n	8003140 <tud_task_ext+0x124>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80033e0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
          if (_usbd_dev.cfg_num != cfg_num)
 80033e4:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80033e6:	9202      	str	r2, [sp, #8]
          if (_usbd_dev.cfg_num != cfg_num)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d007      	beq.n	80033fc <tud_task_ext+0x3e0>
            if ( _usbd_dev.cfg_num )
 80033ec:	7863      	ldrb	r3, [r4, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 817b 	bne.w	80036ea <tud_task_ext+0x6ce>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80033f4:	9b02      	ldr	r3, [sp, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 812b 	bne.w	8003652 <tud_task_ext+0x636>
          _usbd_dev.cfg_num = cfg_num;
 80033fc:	9b02      	ldr	r3, [sp, #8]
 80033fe:	7063      	strb	r3, [r4, #1]
          tud_control_status(rhport, p_request);
 8003400:	4640      	mov	r0, r8
 8003402:	a908      	add	r1, sp, #32
 8003404:	f000 fc2a 	bl	8003c5c <tud_control_status>
        break;
 8003408:	e616      	b.n	8003038 <tud_task_ext+0x1c>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800340a:	7863      	ldrb	r3, [r4, #1]
 800340c:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8003410:	4640      	mov	r0, r8
 8003412:	2301      	movs	r3, #1
 8003414:	f10d 021a 	add.w	r2, sp, #26
 8003418:	a908      	add	r1, sp, #32
 800341a:	f000 fc39 	bl	8003c90 <tud_control_xfer>
        break;
 800341e:	e60b      	b.n	8003038 <tud_task_ext+0x1c>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8003420:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003424:	0a03      	lsrs	r3, r0, #8
  switch(desc_type)
 8003426:	1e5a      	subs	r2, r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003428:	b2c0      	uxtb	r0, r0
 800342a:	2a0e      	cmp	r2, #14
 800342c:	f63f ae88 	bhi.w	8003140 <tud_task_ext+0x124>
 8003430:	a101      	add	r1, pc, #4	; (adr r1, 8003438 <tud_task_ext+0x41c>)
 8003432:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003436:	bf00      	nop
 8003438:	08003505 	.word	0x08003505
 800343c:	080034d9 	.word	0x080034d9
 8003440:	08003543 	.word	0x08003543
 8003444:	08003141 	.word	0x08003141
 8003448:	08003141 	.word	0x08003141
 800344c:	0800351d 	.word	0x0800351d
 8003450:	080034d9 	.word	0x080034d9
 8003454:	08003141 	.word	0x08003141
 8003458:	08003141 	.word	0x08003141
 800345c:	08003141 	.word	0x08003141
 8003460:	08003141 	.word	0x08003141
 8003464:	08003141 	.word	0x08003141
 8003468:	08003141 	.word	0x08003141
 800346c:	08003141 	.word	0x08003141
 8003470:	08003553 	.word	0x08003553
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8003474:	a808      	add	r0, sp, #32
 8003476:	f000 fc77 	bl	8003d68 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800347a:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 800347e:	4640      	mov	r0, r8
 8003480:	f000 fd1e 	bl	8003ec0 <dcd_set_address>
          _usbd_dev.addressed = 1;
 8003484:	7823      	ldrb	r3, [r4, #0]
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	7023      	strb	r3, [r4, #0]
        break;
 800348c:	e5d4      	b.n	8003038 <tud_task_ext+0x1c>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800348e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8003492:	2b01      	cmp	r3, #1
 8003494:	f47f ae54 	bne.w	8003140 <tud_task_ext+0x124>
          _usbd_dev.remote_wakeup_en = false;
 8003498:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 800349a:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = false;
 800349c:	f36f 03c3 	bfc	r3, #3, #1
          tud_control_status(rhport, p_request);
 80034a0:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
 80034a2:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80034a4:	f000 fbda 	bl	8003c5c <tud_control_status>
        break;
 80034a8:	e5c6      	b.n	8003038 <tud_task_ext+0x1c>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80034aa:	7823      	ldrb	r3, [r4, #0]
 80034ac:	089a      	lsrs	r2, r3, #2
 80034ae:	f002 0202 	and.w	r2, r2, #2
 80034b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
          tud_control_xfer(rhport, p_request, &status, 2);
 80034b6:	4640      	mov	r0, r8
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80034b8:	4313      	orrs	r3, r2
 80034ba:	e6e1      	b.n	8003280 <tud_task_ext+0x264>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80034bc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f47f ae3d 	bne.w	8003140 <tud_task_ext+0x124>
          _usbd_dev.remote_wakeup_en = true;
 80034c6:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80034c8:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = true;
 80034ca:	f043 0308 	orr.w	r3, r3, #8
          tud_control_status(rhport, p_request);
 80034ce:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
 80034d0:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
 80034d2:	f000 fbc3 	bl	8003c5c <tud_control_status>
        break;
 80034d6:	e5af      	b.n	8003038 <tud_task_ext+0x1c>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80034d8:	2b02      	cmp	r3, #2
 80034da:	f000 8151 	beq.w	8003780 <tud_task_ext+0x764>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <tud_task_ext+0x5e8>)
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f43f ae2d 	beq.w	8003140 <tud_task_ext+0x124>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80034e6:	f3af 8000 	nop.w
 80034ea:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 80034ec:	2a00      	cmp	r2, #0
 80034ee:	f43f ae20 	beq.w	8003132 <tud_task_ext+0x116>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80034f2:	8853      	ldrh	r3, [r2, #2]
 80034f4:	4640      	mov	r0, r8
 80034f6:	a908      	add	r1, sp, #32
 80034f8:	f000 fbca 	bl	8003c90 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f47f ad9b 	bne.w	8003038 <tud_task_ext+0x1c>
 8003502:	e61d      	b.n	8003140 <tud_task_ext+0x124>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8003504:	f7fd fb2a 	bl	8000b5c <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8003508:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 800350a:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 800350c:	a908      	add	r1, sp, #32
 800350e:	4640      	mov	r0, r8
 8003510:	f000 fbbe 	bl	8003c90 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003514:	2800      	cmp	r0, #0
 8003516:	f47f ad8f 	bne.w	8003038 <tud_task_ext+0x1c>
 800351a:	e611      	b.n	8003140 <tud_task_ext+0x124>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <tud_task_ext+0x5ec>)
 800351e:	2b00      	cmp	r3, #0
 8003520:	f43f ae0e 	beq.w	8003140 <tud_task_ext+0x124>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8003524:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
 8003528:	4602      	mov	r2, r0
 800352a:	2800      	cmp	r0, #0
 800352c:	f43f ae08 	beq.w	8003140 <tud_task_ext+0x124>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8003530:	7813      	ldrb	r3, [r2, #0]
 8003532:	4640      	mov	r0, r8
 8003534:	a908      	add	r1, sp, #32
 8003536:	f000 fbab 	bl	8003c90 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800353a:	2800      	cmp	r0, #0
 800353c:	f47f ad7c 	bne.w	8003038 <tud_task_ext+0x1c>
 8003540:	e5fe      	b.n	8003140 <tud_task_ext+0x124>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8003542:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003546:	f7fd fb11 	bl	8000b6c <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
 800354a:	4602      	mov	r2, r0
 800354c:	2800      	cmp	r0, #0
 800354e:	d1ef      	bne.n	8003530 <tud_task_ext+0x514>
 8003550:	e5f6      	b.n	8003140 <tud_task_ext+0x124>
      if (!tud_descriptor_bos_cb) return false;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <tud_task_ext+0x5f0>)
 8003554:	2b00      	cmp	r3, #0
 8003556:	f43f adf3 	beq.w	8003140 <tud_task_ext+0x124>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 800355a:	f3af 8000 	nop.w
      TU_ASSERT(desc_bos);
 800355e:	4602      	mov	r2, r0
 8003560:	2800      	cmp	r0, #0
 8003562:	d1c6      	bne.n	80034f2 <tud_task_ext+0x4d6>
 8003564:	e5e5      	b.n	8003132 <tud_task_ext+0x116>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003566:	f8db 4000 	ldr.w	r4, [fp]
 800356a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      TU_VERIFY(driver);
 800356e:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 8003572:	f43f ade5 	beq.w	8003140 <tud_task_ext+0x124>
 8003576:	e6da      	b.n	800332e <tud_task_ext+0x312>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003578:	f8db 6000 	ldr.w	r6, [fp]
 800357c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003580:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003584:	2a00      	cmp	r2, #0
 8003586:	f43f ae6a 	beq.w	800325e <tud_task_ext+0x242>
        TU_VERIFY(driver);
 800358a:	2e00      	cmp	r6, #0
 800358c:	f47f af1c 	bne.w	80033c8 <tud_task_ext+0x3ac>
 8003590:	e5d6      	b.n	8003140 <tud_task_ext+0x124>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8003592:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8003596:	b93f      	cbnz	r7, 80035a8 <tud_task_ext+0x58c>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8003598:	2a01      	cmp	r2, #1
 800359a:	d039      	beq.n	8003610 <tud_task_ext+0x5f4>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 800359c:	18e7      	adds	r7, r4, r3
 800359e:	4467      	add	r7, ip
 80035a0:	3718      	adds	r7, #24
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	079b      	lsls	r3, r3, #30
 80035a6:	d513      	bpl.n	80035d0 <tud_task_ext+0x5b4>
            if (driver)
 80035a8:	2e00      	cmp	r6, #0
 80035aa:	f43f ad45 	beq.w	8003038 <tud_task_ext+0x1c>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80035ae:	68f0      	ldr	r0, [r6, #12]
 80035b0:	f000 fbd4 	bl	8003d5c <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80035b4:	68f3      	ldr	r3, [r6, #12]
 80035b6:	aa08      	add	r2, sp, #32
 80035b8:	2101      	movs	r1, #1
 80035ba:	4640      	mov	r0, r8
 80035bc:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
 80035be:	2000      	movs	r0, #0
 80035c0:	f000 fbcc 	bl	8003d5c <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80035c4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80035c8:	07de      	lsls	r6, r3, #31
 80035ca:	f53f ad35 	bmi.w	8003038 <tud_task_ext+0x1c>
 80035ce:	e6cc      	b.n	800336a <tud_task_ext+0x34e>
    dcd_edpt_stall(rhport, ep_addr);
 80035d0:	f899 0000 	ldrb.w	r0, [r9]
 80035d4:	f001 f806 	bl	80045e4 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	71fb      	strb	r3, [r7, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	e7de      	b.n	80035a8 <tud_task_ext+0x58c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80035ea:	f8db 4000 	ldr.w	r4, [fp]
 80035ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        TU_VERIFY(driver);
 80035f2:	eb14 04c3 	adds.w	r4, r4, r3, lsl #3
 80035f6:	f43f ada3 	beq.w	8003140 <tud_task_ext+0x124>
 80035fa:	e6d2      	b.n	80033a2 <tud_task_ext+0x386>
 80035fc:	00000000 	.word	0x00000000
 8003600:	200019b0 	.word	0x200019b0
	...
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003610:	4423      	add	r3, r4
 8003612:	449c      	add	ip, r3
 8003614:	f10c 0218 	add.w	r2, ip, #24
 8003618:	f89c 301f 	ldrb.w	r3, [ip, #31]
 800361c:	0798      	lsls	r0, r3, #30
 800361e:	d5c3      	bpl.n	80035a8 <tud_task_ext+0x58c>
    dcd_edpt_clear_stall(rhport, ep_addr);
 8003620:	f899 0000 	ldrb.w	r0, [r9]
 8003624:	9200      	str	r2, [sp, #0]
 8003626:	f001 f84d 	bl	80046c4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800362a:	9a00      	ldr	r2, [sp, #0]
 800362c:	79d3      	ldrb	r3, [r2, #7]
 800362e:	f367 0341 	bfi	r3, r7, #1, #1
 8003632:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8003634:	79d3      	ldrb	r3, [r2, #7]
 8003636:	f367 0300 	bfi	r3, r7, #0, #1
 800363a:	71d3      	strb	r3, [r2, #7]
 800363c:	e7b4      	b.n	80035a8 <tud_task_ext+0x58c>
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800363e:	a908      	add	r1, sp, #32
 8003640:	4640      	mov	r0, r8
 8003642:	2301      	movs	r3, #1
 8003644:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
 8003648:	f88d 401a 	strb.w	r4, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800364c:	f000 fb20 	bl	8003c90 <tud_control_xfer>
 8003650:	e4f2      	b.n	8003038 <tud_task_ext+0x1c>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	b2c0      	uxtb	r0, r0
 8003656:	f7fd fa85 	bl	8000b64 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 800365a:	2800      	cmp	r0, #0
 800365c:	d03c      	beq.n	80036d8 <tud_task_ext+0x6bc>
 800365e:	7843      	ldrb	r3, [r0, #1]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d139      	bne.n	80036d8 <tud_task_ext+0x6bc>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8003664:	7823      	ldrb	r3, [r4, #0]
 8003666:	79c2      	ldrb	r2, [r0, #7]
 8003668:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800366c:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8003676:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800367a:	430b      	orrs	r3, r1
 800367c:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800367e:	8843      	ldrh	r3, [r0, #2]
 8003680:	f8cd 8004 	str.w	r8, [sp, #4]
 8003684:	18c3      	adds	r3, r0, r3
 8003686:	9303      	str	r3, [sp, #12]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003688:	f100 0709 	add.w	r7, r0, #9
  while( p_desc < desc_end )
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	42bb      	cmp	r3, r7
 8003690:	f240 80a0 	bls.w	80037d4 <tud_task_ext+0x7b8>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b0b      	cmp	r3, #11
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003698:	bf03      	ittte	eq
 800369a:	783a      	ldrbeq	r2, [r7, #0]
      assoc_itf_count = desc_iad->bInterfaceCount;
 800369c:	78fb      	ldrbeq	r3, [r7, #3]
 800369e:	18bf      	addeq	r7, r7, r2
    uint8_t assoc_itf_count = 1;
 80036a0:	2301      	movne	r3, #1
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 80036a2:	787a      	ldrb	r2, [r7, #1]
 80036a4:	2a04      	cmp	r2, #4
 80036a6:	d117      	bne.n	80036d8 <tud_task_ext+0x6bc>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80036a8:	9a03      	ldr	r2, [sp, #12]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80036aa:	4952      	ldr	r1, [pc, #328]	; (80037f4 <tud_task_ext+0x7d8>)
 80036ac:	4852      	ldr	r0, [pc, #328]	; (80037f8 <tud_task_ext+0x7dc>)
 80036ae:	7809      	ldrb	r1, [r1, #0]
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 80036b0:	1bd2      	subs	r2, r2, r7
 80036b2:	b292      	uxth	r2, r2
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d067      	beq.n	8003788 <tud_task_ext+0x76c>
 80036b8:	4618      	mov	r0, r3
 80036ba:	f04f 0800 	mov.w	r8, #0
 80036be:	463b      	mov	r3, r7
 80036c0:	f8cd 8000 	str.w	r8, [sp]
 80036c4:	4607      	mov	r7, r0
    drvid -= _app_driver_count;
 80036c6:	eba8 0601 	sub.w	r6, r8, r1
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80036ca:	4541      	cmp	r1, r8
    drvid -= _app_driver_count;
 80036cc:	b2f6      	uxtb	r6, r6
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80036ce:	d879      	bhi.n	80037c4 <tud_task_ext+0x7a8>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80036d0:	2e01      	cmp	r6, #1
 80036d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80036d6:	d911      	bls.n	80036fc <tud_task_ext+0x6e0>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80036d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80036dc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80036e0:	07dc      	lsls	r4, r3, #31
 80036e2:	f57f ad26 	bpl.w	8003132 <tud_task_ext+0x116>
 80036e6:	be00      	bkpt	0x0000
 80036e8:	e523      	b.n	8003132 <tud_task_ext+0x116>
              dcd_edpt_close_all(rhport);
 80036ea:	4640      	mov	r0, r8
 80036ec:	f000 fd20 	bl	8004130 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 80036f0:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 80036f2:	4640      	mov	r0, r8
 80036f4:	f7ff fbac 	bl	8002e50 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 80036f8:	70a6      	strb	r6, [r4, #2]
 80036fa:	e67b      	b.n	80033f4 <tud_task_ext+0x3d8>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80036fc:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003700:	4619      	mov	r1, r3
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	9801      	ldr	r0, [sp, #4]
 8003706:	68b3      	ldr	r3, [r6, #8]
 8003708:	9205      	str	r2, [sp, #20]
 800370a:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 800370c:	2808      	cmp	r0, #8
 800370e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003712:	f108 0101 	add.w	r1, r8, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003716:	d901      	bls.n	800371c <tud_task_ext+0x700>
 8003718:	4282      	cmp	r2, r0
 800371a:	d209      	bcs.n	8003730 <tud_task_ext+0x714>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800371c:	fa5f f881 	uxtb.w	r8, r1
 8003720:	4934      	ldr	r1, [pc, #208]	; (80037f4 <tud_task_ext+0x7d8>)
 8003722:	f8cd 8000 	str.w	r8, [sp]
 8003726:	7809      	ldrb	r1, [r1, #0]
 8003728:	1c48      	adds	r0, r1, #1
 800372a:	4540      	cmp	r0, r8
 800372c:	dacb      	bge.n	80036c6 <tud_task_ext+0x6aa>
 800372e:	e7d3      	b.n	80036d8 <tud_task_ext+0x6bc>
 8003730:	463a      	mov	r2, r7
 8003732:	461f      	mov	r7, r3
 8003734:	4613      	mov	r3, r2
        if ( assoc_itf_count == 1)
 8003736:	2b01      	cmp	r3, #1
 8003738:	d104      	bne.n	8003744 <tud_task_ext+0x728>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800373a:	68b1      	ldr	r1, [r6, #8]
 800373c:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <tud_task_ext+0x7e0>)
 800373e:	4291      	cmp	r1, r2
 8003740:	bf08      	it	eq
 8003742:	2302      	moveq	r3, #2
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003744:	2100      	movs	r1, #0
 8003746:	e008      	b.n	800375a <tud_task_ext+0x73e>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8003748:	78be      	ldrb	r6, [r7, #2]
 800374a:	4432      	add	r2, r6
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 800374c:	fa54 f282 	uxtab	r2, r4, r2
 8003750:	78d6      	ldrb	r6, [r2, #3]
 8003752:	2eff      	cmp	r6, #255	; 0xff
 8003754:	d1c0      	bne.n	80036d8 <tud_task_ext+0x6bc>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8003756:	f882 8003 	strb.w	r8, [r2, #3]
 800375a:	b2ca      	uxtb	r2, r1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800375c:	4293      	cmp	r3, r2
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 800375e:	f101 0101 	add.w	r1, r1, #1
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003762:	d8f1      	bhi.n	8003748 <tud_task_ext+0x72c>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8003764:	4602      	mov	r2, r0
 8003766:	4643      	mov	r3, r8
 8003768:	4639      	mov	r1, r7
        p_desc += drv_len;
 800376a:	4407      	add	r7, r0
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800376c:	4824      	ldr	r0, [pc, #144]	; (8003800 <tud_task_ext+0x7e4>)
 800376e:	f001 fbb9 	bl	8004ee4 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <tud_task_ext+0x7d8>)
 8003774:	9a00      	ldr	r2, [sp, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4293      	cmp	r3, r2
 800377c:	da86      	bge.n	800368c <tud_task_ext+0x670>
 800377e:	e7ab      	b.n	80036d8 <tud_task_ext+0x6bc>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8003780:	f7fd f9f0 	bl	8000b64 <tud_descriptor_configuration_cb>
 8003784:	4602      	mov	r2, r0
 8003786:	e6b1      	b.n	80034ec <tud_task_ext+0x4d0>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003788:	9801      	ldr	r0, [sp, #4]
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	4639      	mov	r1, r7
 800378e:	9200      	str	r2, [sp, #0]
 8003790:	f7fe fe7e 	bl	8002490 <cdcd_open>
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003794:	2808      	cmp	r0, #8
 8003796:	9a00      	ldr	r2, [sp, #0]
 8003798:	9b04      	ldr	r3, [sp, #16]
 800379a:	d901      	bls.n	80037a0 <tud_task_ext+0x784>
 800379c:	4282      	cmp	r2, r0
 800379e:	d222      	bcs.n	80037e6 <tud_task_ext+0x7ca>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80037a0:	9801      	ldr	r0, [sp, #4]
 80037a2:	9304      	str	r3, [sp, #16]
 80037a4:	4639      	mov	r1, r7
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	f7fe fa00 	bl	8001bac <audiod_open>
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80037ac:	2808      	cmp	r0, #8
 80037ae:	d993      	bls.n	80036d8 <tud_task_ext+0x6bc>
 80037b0:	9a00      	ldr	r2, [sp, #0]
 80037b2:	9b04      	ldr	r3, [sp, #16]
 80037b4:	4282      	cmp	r2, r0
 80037b6:	d38f      	bcc.n	80036d8 <tud_task_ext+0x6bc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80037b8:	f04f 0801 	mov.w	r8, #1
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80037bc:	4e11      	ldr	r6, [pc, #68]	; (8003804 <tud_task_ext+0x7e8>)
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80037be:	f8cd 8000 	str.w	r8, [sp]
 80037c2:	e7b8      	b.n	8003736 <tud_task_ext+0x71a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80037c4:	f8db 6000 	ldr.w	r6, [fp]
 80037c8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
      TU_ASSERT(driver);
 80037cc:	eb16 06c1 	adds.w	r6, r6, r1, lsl #3
 80037d0:	d196      	bne.n	8003700 <tud_task_ext+0x6e4>
 80037d2:	e781      	b.n	80036d8 <tud_task_ext+0x6bc>
  if (tud_mount_cb) tud_mount_cb();
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <tud_task_ext+0x7ec>)
 80037d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f43f ae0e 	beq.w	80033fc <tud_task_ext+0x3e0>
 80037e0:	f7fc fe84 	bl	80004ec <tud_mount_cb>
 80037e4:	e60a      	b.n	80033fc <tud_task_ext+0x3e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80037e6:	f8df 8010 	ldr.w	r8, [pc, #16]	; 80037f8 <tud_task_ext+0x7dc>
 80037ea:	f8cd 8000 	str.w	r8, [sp]
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80037ee:	4656      	mov	r6, sl
 80037f0:	e7a1      	b.n	8003736 <tud_task_ext+0x71a>
 80037f2:	bf00      	nop
 80037f4:	200019b0 	.word	0x200019b0
 80037f8:	00000000 	.word	0x00000000
 80037fc:	08002491 	.word	0x08002491
 8003800:	200019c7 	.word	0x200019c7
 8003804:	080051f8 	.word	0x080051f8
 8003808:	080004ed 	.word	0x080004ed

0800380c <dcd_event_handler>:
{
 800380c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (event->event_id)
 8003810:	7843      	ldrb	r3, [r0, #1]
 8003812:	3b02      	subs	r3, #2
{
 8003814:	b085      	sub	sp, #20
 8003816:	4605      	mov	r5, r0
 8003818:	4688      	mov	r8, r1
  switch (event->event_id)
 800381a:	2b03      	cmp	r3, #3
 800381c:	f200 80c6 	bhi.w	80039ac <dcd_event_handler+0x1a0>
 8003820:	e8df f003 	tbb	[pc, r3]
 8003824:	02214b36 	.word	0x02214b36
      if ( _usbd_dev.connected )
 8003828:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <dcd_event_handler+0x1ac>)
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	07d1      	lsls	r1, r2, #31
 800382e:	d517      	bpl.n	8003860 <dcd_event_handler+0x54>
        _usbd_dev.suspended = 0;
 8003830:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8003832:	4962      	ldr	r1, [pc, #392]	; (80039bc <dcd_event_handler+0x1b0>)
        _usbd_dev.suspended = 0;
 8003834:	f36f 0282 	bfc	r2, #2, #1
        osal_queue_send(_usbd_q, event, in_isr);
 8003838:	680e      	ldr	r6, [r1, #0]
        _usbd_dev.suspended = 0;
 800383a:	701a      	strb	r2, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 800383c:	f1b8 0f00 	cmp.w	r8, #0
 8003840:	d11e      	bne.n	8003880 <dcd_event_handler+0x74>
  qhdl->interrupt_set(false);
 8003842:	4634      	mov	r4, r6
 8003844:	4640      	mov	r0, r8
 8003846:	f854 3b04 	ldr.w	r3, [r4], #4
 800384a:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	f7ff f93c 	bl	8002acc <tu_fifo_write>
  qhdl->interrupt_set(true);
 8003854:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
 8003856:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8003858:	2001      	movs	r0, #1
 800385a:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 800385c:	2c00      	cmp	r4, #0
 800385e:	d077      	beq.n	8003950 <dcd_event_handler+0x144>
}
 8003860:	b005      	add	sp, #20
 8003862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ( _usbd_dev.connected )
 8003866:	4b54      	ldr	r3, [pc, #336]	; (80039b8 <dcd_event_handler+0x1ac>)
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	07d0      	lsls	r0, r2, #31
 800386c:	d5f8      	bpl.n	8003860 <dcd_event_handler+0x54>
        _usbd_dev.suspended = 1;
 800386e:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8003870:	4952      	ldr	r1, [pc, #328]	; (80039bc <dcd_event_handler+0x1b0>)
        _usbd_dev.suspended = 1;
 8003872:	f042 0204 	orr.w	r2, r2, #4
        osal_queue_send(_usbd_q, event, in_isr);
 8003876:	680e      	ldr	r6, [r1, #0]
        _usbd_dev.suspended = 1;
 8003878:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 800387a:	f1b8 0f00 	cmp.w	r8, #0
 800387e:	d0e0      	beq.n	8003842 <dcd_event_handler+0x36>
  bool success = tu_fifo_write(&qhdl->ff, data);
 8003880:	4629      	mov	r1, r5
 8003882:	1d30      	adds	r0, r6, #4
 8003884:	f7ff f922 	bl	8002acc <tu_fifo_write>
 8003888:	4604      	mov	r4, r0
  TU_ASSERT(success);
 800388a:	2c00      	cmp	r4, #0
 800388c:	d1e8      	bne.n	8003860 <dcd_event_handler+0x54>
 800388e:	e05f      	b.n	8003950 <dcd_event_handler+0x144>
      _usbd_dev.connected  = 0;
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <dcd_event_handler+0x1ac>)
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	f36f 0200 	bfc	r2, #0, #1
 8003898:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 800389a:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 800389c:	2100      	movs	r1, #0
      _usbd_dev.addressed  = 0;
 800389e:	f36f 0241 	bfc	r2, #1, #1
 80038a2:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 80038a4:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	f361 0282 	bfi	r2, r1, #2, #1
      osal_queue_send(_usbd_q, event, in_isr);
 80038ac:	4943      	ldr	r1, [pc, #268]	; (80039bc <dcd_event_handler+0x1b0>)
      _usbd_dev.suspended  = 0;
 80038ae:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80038b0:	680e      	ldr	r6, [r1, #0]
  if (!in_isr) {
 80038b2:	f1b8 0f00 	cmp.w	r8, #0
 80038b6:	d1e3      	bne.n	8003880 <dcd_event_handler+0x74>
 80038b8:	e7c3      	b.n	8003842 <dcd_event_handler+0x36>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80038ba:	4e41      	ldr	r6, [pc, #260]	; (80039c0 <dcd_event_handler+0x1b4>)
 80038bc:	4c41      	ldr	r4, [pc, #260]	; (80039c4 <dcd_event_handler+0x1b8>)
 80038be:	7832      	ldrb	r2, [r6, #0]
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	d04d      	beq.n	8003960 <dcd_event_handler+0x154>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80038c4:	4f40      	ldr	r7, [pc, #256]	; (80039c8 <dcd_event_handler+0x1bc>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80038c6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80039cc <dcd_event_handler+0x1c0>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80038ca:	2400      	movs	r4, #0
 80038cc:	e004      	b.n	80038d8 <dcd_event_handler+0xcc>
 80038ce:	3401      	adds	r4, #1
 80038d0:	b2e4      	uxtb	r4, r4
 80038d2:	1c53      	adds	r3, r2, #1
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	db15      	blt.n	8003904 <dcd_event_handler+0xf8>
    drvid -= _app_driver_count;
 80038d8:	1aa3      	subs	r3, r4, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80038da:	4294      	cmp	r4, r2
    drvid -= _app_driver_count;
 80038dc:	b2db      	uxtb	r3, r3
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80038de:	d354      	bcc.n	800398a <dcd_event_handler+0x17e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d8f4      	bhi.n	80038ce <dcd_event_handler+0xc2>
 80038e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038e8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
        if (driver && driver->sof)
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ed      	beq.n	80038ce <dcd_event_handler+0xc2>
          driver->sof(event->rhport, event->sof.frame_count);
 80038f2:	6869      	ldr	r1, [r5, #4]
 80038f4:	7828      	ldrb	r0, [r5, #0]
 80038f6:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80038f8:	7832      	ldrb	r2, [r6, #0]
 80038fa:	3401      	adds	r4, #1
 80038fc:	b2e4      	uxtb	r4, r4
 80038fe:	1c53      	adds	r3, r2, #1
 8003900:	42a3      	cmp	r3, r4
 8003902:	dae9      	bge.n	80038d8 <dcd_event_handler+0xcc>
      if ( _usbd_dev.suspended )
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <dcd_event_handler+0x1ac>)
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	0752      	lsls	r2, r2, #29
 800390a:	d5a9      	bpl.n	8003860 <dcd_event_handler+0x54>
        _usbd_dev.suspended = 0;
 800390c:	781a      	ldrb	r2, [r3, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800390e:	492b      	ldr	r1, [pc, #172]	; (80039bc <dcd_event_handler+0x1b0>)
        _usbd_dev.suspended = 0;
 8003910:	f36f 0282 	bfc	r2, #2, #1
 8003914:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003916:	2300      	movs	r3, #0
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	782a      	ldrb	r2, [r5, #0]
 800391c:	f88d 2004 	strb.w	r2, [sp, #4]
 8003920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003924:	2305      	movs	r3, #5
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8003926:	680d      	ldr	r5, [r1, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003928:	f88d 3005 	strb.w	r3, [sp, #5]
 800392c:	f1b8 0f00 	cmp.w	r8, #0
 8003930:	d133      	bne.n	800399a <dcd_event_handler+0x18e>
  qhdl->interrupt_set(false);
 8003932:	462c      	mov	r4, r5
 8003934:	4640      	mov	r0, r8
 8003936:	f854 3b04 	ldr.w	r3, [r4], #4
 800393a:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 800393c:	4620      	mov	r0, r4
 800393e:	a901      	add	r1, sp, #4
 8003940:	f7ff f8c4 	bl	8002acc <tu_fifo_write>
  qhdl->interrupt_set(true);
 8003944:	682b      	ldr	r3, [r5, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
 8003946:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 8003948:	2001      	movs	r0, #1
 800394a:	4798      	blx	r3
  TU_ASSERT(success);
 800394c:	2c00      	cmp	r4, #0
 800394e:	d187      	bne.n	8003860 <dcd_event_handler+0x54>
 8003950:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003954:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003958:	07db      	lsls	r3, r3, #31
 800395a:	d581      	bpl.n	8003860 <dcd_event_handler+0x54>
 800395c:	be00      	bkpt	0x0000
}
 800395e:	e77f      	b.n	8003860 <dcd_event_handler+0x54>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003960:	4f19      	ldr	r7, [pc, #100]	; (80039c8 <dcd_event_handler+0x1bc>)
 8003962:	e004      	b.n	800396e <dcd_event_handler+0x162>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003964:	3401      	adds	r4, #1
 8003966:	b2e4      	uxtb	r4, r4
 8003968:	1c53      	adds	r3, r2, #1
 800396a:	42a3      	cmp	r3, r4
 800396c:	dbca      	blt.n	8003904 <dcd_event_handler+0xf8>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800396e:	2c01      	cmp	r4, #1
 8003970:	d8f8      	bhi.n	8003964 <dcd_event_handler+0x158>
 8003972:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        if (driver && driver->sof)
 8003976:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f1      	beq.n	8003964 <dcd_event_handler+0x158>
          driver->sof(event->rhport, event->sof.frame_count);
 8003980:	6869      	ldr	r1, [r5, #4]
 8003982:	7828      	ldrb	r0, [r5, #0]
 8003984:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003986:	7832      	ldrb	r2, [r6, #0]
 8003988:	e7ec      	b.n	8003964 <dcd_event_handler+0x158>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 800398a:	f8d9 3000 	ldr.w	r3, [r9]
 800398e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
        if (driver && driver->sof)
 8003992:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
 8003996:	d09a      	beq.n	80038ce <dcd_event_handler+0xc2>
 8003998:	e7a8      	b.n	80038ec <dcd_event_handler+0xe0>
  bool success = tu_fifo_write(&qhdl->ff, data);
 800399a:	a901      	add	r1, sp, #4
 800399c:	1d28      	adds	r0, r5, #4
 800399e:	f7ff f895 	bl	8002acc <tu_fifo_write>
 80039a2:	4604      	mov	r4, r0
  TU_ASSERT(success);
 80039a4:	2c00      	cmp	r4, #0
 80039a6:	f47f af5b 	bne.w	8003860 <dcd_event_handler+0x54>
 80039aa:	e7d1      	b.n	8003950 <dcd_event_handler+0x144>
      osal_queue_send(_usbd_q, event, in_isr);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <dcd_event_handler+0x1b0>)
 80039ae:	681e      	ldr	r6, [r3, #0]
  if (!in_isr) {
 80039b0:	2900      	cmp	r1, #0
 80039b2:	f47f af65 	bne.w	8003880 <dcd_event_handler+0x74>
 80039b6:	e744      	b.n	8003842 <dcd_event_handler+0x36>
 80039b8:	200019b4 	.word	0x200019b4
 80039bc:	200019e0 	.word	0x200019e0
 80039c0:	200019b0 	.word	0x200019b0
 80039c4:	00000000 	.word	0x00000000
 80039c8:	080051e0 	.word	0x080051e0
 80039cc:	200019ac 	.word	0x200019ac

080039d0 <usbd_open_edpt_pair>:
{
 80039d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  for(int i=0; i<ep_count; i++)
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	d042      	beq.n	8003a60 <usbd_open_edpt_pair+0x90>
  rhport = _usbd_rhport;
 80039da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003a68 <usbd_open_edpt_pair+0x98>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80039de:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003a6c <usbd_open_edpt_pair+0x9c>
 80039e2:	460c      	mov	r4, r1
 80039e4:	461e      	mov	r6, r3
 80039e6:	4615      	mov	r5, r2
  for(int i=0; i<ep_count; i++)
 80039e8:	f04f 0b00 	mov.w	fp, #0
 80039ec:	e018      	b.n	8003a20 <usbd_open_edpt_pair+0x50>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80039ee:	f898 1002 	ldrb.w	r1, [r8, #2]
  rhport = _usbd_rhport;
 80039f2:	f899 a000 	ldrb.w	sl, [r9]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80039f6:	f001 fa41 	bl	8004e7c <tu_edpt_validate>
 80039fa:	4603      	mov	r3, r0
  return dcd_edpt_open(rhport, desc_ep);
 80039fc:	4621      	mov	r1, r4
 80039fe:	4650      	mov	r0, sl
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a00:	b1e3      	cbz	r3, 8003a3c <usbd_open_edpt_pair+0x6c>
  return dcd_edpt_open(rhport, desc_ep);
 8003a02:	f000 faed 	bl	8003fe0 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8003a06:	b300      	cbz	r0, 8003a4a <usbd_open_edpt_pair+0x7a>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8003a08:	78a3      	ldrb	r3, [r4, #2]
 8003a0a:	09da      	lsrs	r2, r3, #7
      (*ep_in) = desc_ep->bEndpointAddress;
 8003a0c:	bf16      	itet	ne
 8003a0e:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
      (*ep_out) = desc_ep->bEndpointAddress;
 8003a10:	703b      	strbeq	r3, [r7, #0]
      (*ep_in) = desc_ep->bEndpointAddress;
 8003a12:	7013      	strbne	r3, [r2, #0]
 8003a14:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
 8003a16:	f10b 0b01 	add.w	fp, fp, #1
 8003a1a:	45ab      	cmp	fp, r5
 8003a1c:	441c      	add	r4, r3
 8003a1e:	d01f      	beq.n	8003a60 <usbd_open_edpt_pair+0x90>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8003a20:	7863      	ldrb	r3, [r4, #1]
 8003a22:	2b05      	cmp	r3, #5
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a24:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8003a26:	d110      	bne.n	8003a4a <usbd_open_edpt_pair+0x7a>
 8003a28:	78e1      	ldrb	r1, [r4, #3]
 8003a2a:	f001 0103 	and.w	r1, r1, #3
 8003a2e:	42b1      	cmp	r1, r6
 8003a30:	d10b      	bne.n	8003a4a <usbd_open_edpt_pair+0x7a>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003a32:	78a3      	ldrb	r3, [r4, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d9d8      	bls.n	80039ee <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003a40:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003a44:	07da      	lsls	r2, r3, #31
 8003a46:	d500      	bpl.n	8003a4a <usbd_open_edpt_pair+0x7a>
 8003a48:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8003a4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003a4e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003a52:	07db      	lsls	r3, r3, #31
 8003a54:	d402      	bmi.n	8003a5c <usbd_open_edpt_pair+0x8c>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8003a56:	2000      	movs	r0, #0
}
 8003a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8003a5c:	be00      	bkpt	0x0000
 8003a5e:	e7fa      	b.n	8003a56 <usbd_open_edpt_pair+0x86>
  return true;
 8003a60:	2001      	movs	r0, #1
}
 8003a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a66:	bf00      	nop
 8003a68:	20000044 	.word	0x20000044
 8003a6c:	200019b4 	.word	0x200019b4

08003a70 <usbd_edpt_open>:
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d908      	bls.n	8003a8e <usbd_edpt_open+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003a80:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003a84:	07db      	lsls	r3, r3, #31
 8003a86:	d500      	bpl.n	8003a8a <usbd_edpt_open+0x1a>
 8003a88:	be00      	bkpt	0x0000
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <usbd_edpt_open+0x40>)
  rhport = _usbd_rhport;
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <usbd_edpt_open+0x44>)
 8003a92:	460c      	mov	r4, r1
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a94:	4620      	mov	r0, r4
 8003a96:	7891      	ldrb	r1, [r2, #2]
  rhport = _usbd_rhport;
 8003a98:	781d      	ldrb	r5, [r3, #0]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003a9a:	f001 f9ef 	bl	8004e7c <tu_edpt_validate>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d0ec      	beq.n	8003a7c <usbd_edpt_open+0xc>
  return dcd_edpt_open(rhport, desc_ep);
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
}
 8003aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8003aaa:	f000 ba99 	b.w	8003fe0 <dcd_edpt_open>
 8003aae:	bf00      	nop
 8003ab0:	200019b4 	.word	0x200019b4
 8003ab4:	20000044 	.word	0x20000044

08003ab8 <usbd_edpt_claim>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8003ab8:	09c8      	lsrs	r0, r1, #7
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <usbd_edpt_claim+0x18>)
 8003abc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003ac0:	301f      	adds	r0, #31
 8003ac2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
 8003ac6:	4418      	add	r0, r3
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f001 b9af 	b.w	8004e2c <tu_edpt_claim>
 8003ace:	bf00      	nop
 8003ad0:	200019b4 	.word	0x200019b4

08003ad4 <usbd_edpt_release>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8003ad4:	09c8      	lsrs	r0, r1, #7
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <usbd_edpt_release+0x18>)
 8003ad8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003adc:	301f      	adds	r0, #31
 8003ade:	eb00 0041 	add.w	r0, r0, r1, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
 8003ae2:	4418      	add	r0, r3
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	f001 b9b9 	b.w	8004e5c <tu_edpt_release>
 8003aea:	bf00      	nop
 8003aec:	200019b4 	.word	0x200019b4

08003af0 <usbd_edpt_xfer>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8003af0:	4818      	ldr	r0, [pc, #96]	; (8003b54 <usbd_edpt_xfer+0x64>)
{
 8003af2:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8003af4:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
 8003af8:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 8003afc:	eb00 14d1 	add.w	r4, r0, r1, lsr #7
 8003b00:	3418      	adds	r4, #24
 8003b02:	79e0      	ldrb	r0, [r4, #7]
 8003b04:	07c0      	lsls	r0, r0, #31
 8003b06:	d508      	bpl.n	8003b1a <usbd_edpt_xfer+0x2a>
 8003b08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b0c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003b10:	07da      	lsls	r2, r3, #31
 8003b12:	d500      	bpl.n	8003b16 <usbd_edpt_xfer+0x26>
 8003b14:	be00      	bkpt	0x0000
 8003b16:	2000      	movs	r0, #0
}
 8003b18:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b1a:	f894 c007 	ldrb.w	ip, [r4, #7]
  rhport = _usbd_rhport;
 8003b1e:	480e      	ldr	r0, [pc, #56]	; (8003b58 <usbd_edpt_xfer+0x68>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b20:	f04c 0c01 	orr.w	ip, ip, #1
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003b24:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b26:	f884 c007 	strb.w	ip, [r4, #7]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003b2a:	f000 fb2b 	bl	8004184 <dcd_edpt_xfer>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1f2      	bne.n	8003b18 <usbd_edpt_xfer+0x28>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8003b32:	79e3      	ldrb	r3, [r4, #7]
 8003b34:	f360 0300 	bfi	r3, r0, #0, #1
 8003b38:	71e3      	strb	r3, [r4, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003b3a:	79e3      	ldrb	r3, [r4, #7]
    TU_BREAKPOINT();
 8003b3c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003b40:	f360 0382 	bfi	r3, r0, #2, #1
 8003b44:	71e3      	strb	r3, [r4, #7]
    TU_BREAKPOINT();
 8003b46:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8003b4a:	07db      	lsls	r3, r3, #31
 8003b4c:	d5e3      	bpl.n	8003b16 <usbd_edpt_xfer+0x26>
 8003b4e:	be00      	bkpt	0x0000
}
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	bf00      	nop
 8003b54:	200019b4 	.word	0x200019b4
 8003b58:	20000044 	.word	0x20000044

08003b5c <usbd_edpt_xfer_fifo>:
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8003b5c:	4818      	ldr	r0, [pc, #96]	; (8003bc0 <usbd_edpt_xfer_fifo+0x64>)
{
 8003b5e:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8003b60:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
 8003b64:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 8003b68:	eb00 14d1 	add.w	r4, r0, r1, lsr #7
 8003b6c:	3418      	adds	r4, #24
 8003b6e:	79e0      	ldrb	r0, [r4, #7]
 8003b70:	07c0      	lsls	r0, r0, #31
 8003b72:	d508      	bpl.n	8003b86 <usbd_edpt_xfer_fifo+0x2a>
 8003b74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b78:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003b7c:	07da      	lsls	r2, r3, #31
 8003b7e:	d500      	bpl.n	8003b82 <usbd_edpt_xfer_fifo+0x26>
 8003b80:	be00      	bkpt	0x0000
 8003b82:	2000      	movs	r0, #0
}
 8003b84:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b86:	f894 c007 	ldrb.w	ip, [r4, #7]
  rhport = _usbd_rhport;
 8003b8a:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <usbd_edpt_xfer_fifo+0x68>)
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b8c:	f04c 0c01 	orr.w	ip, ip, #1
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8003b90:	7800      	ldrb	r0, [r0, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8003b92:	f884 c007 	strb.w	ip, [r4, #7]
  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8003b96:	f000 fbe5 	bl	8004364 <dcd_edpt_xfer_fifo>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d1f2      	bne.n	8003b84 <usbd_edpt_xfer_fifo+0x28>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8003b9e:	79e3      	ldrb	r3, [r4, #7]
 8003ba0:	f360 0300 	bfi	r3, r0, #0, #1
 8003ba4:	71e3      	strb	r3, [r4, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003ba6:	79e3      	ldrb	r3, [r4, #7]
    TU_BREAKPOINT();
 8003ba8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003bac:	f360 0382 	bfi	r3, r0, #2, #1
 8003bb0:	71e3      	strb	r3, [r4, #7]
    TU_BREAKPOINT();
 8003bb2:	f8d2 3df0 	ldr.w	r3, [r2, #3568]	; 0xdf0
 8003bb6:	07db      	lsls	r3, r3, #31
 8003bb8:	d5e3      	bpl.n	8003b82 <usbd_edpt_xfer_fifo+0x26>
 8003bba:	be00      	bkpt	0x0000
}
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200019b4 	.word	0x200019b4
 8003bc4:	20000044 	.word	0x20000044

08003bc8 <usbd_edpt_clear_stall>:
{
 8003bc8:	b510      	push	{r4, lr}
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <usbd_edpt_clear_stall+0x34>)
 8003bcc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003bd0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003bd4:	eb03 14d1 	add.w	r4, r3, r1, lsr #7
 8003bd8:	7fe3      	ldrb	r3, [r4, #31]
 8003bda:	079b      	lsls	r3, r3, #30
 8003bdc:	d400      	bmi.n	8003be0 <usbd_edpt_clear_stall+0x18>
}
 8003bde:	bd10      	pop	{r4, pc}
  rhport = _usbd_rhport;
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <usbd_edpt_clear_stall+0x38>)
 8003be2:	3418      	adds	r4, #24
    dcd_edpt_clear_stall(rhport, ep_addr);
 8003be4:	7818      	ldrb	r0, [r3, #0]
 8003be6:	f000 fd6d 	bl	80046c4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8003bea:	79e3      	ldrb	r3, [r4, #7]
 8003bec:	f36f 0341 	bfc	r3, #1, #1
 8003bf0:	71e3      	strb	r3, [r4, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8003bf2:	79e3      	ldrb	r3, [r4, #7]
 8003bf4:	f36f 0300 	bfc	r3, #0, #1
 8003bf8:	71e3      	strb	r3, [r4, #7]
}
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	200019b4 	.word	0x200019b4
 8003c00:	20000044 	.word	0x20000044

08003c04 <usbd_edpt_close>:
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  rhport = _usbd_rhport;

  TU_ASSERT(dcd_edpt_close, /**/);
 8003c04:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <usbd_edpt_close+0x4c>)
 8003c06:	b1cb      	cbz	r3, 8003c3c <usbd_edpt_close+0x38>
{
 8003c08:	b510      	push	{r4, lr}
  rhport = _usbd_rhport;
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <usbd_edpt_close+0x50>)
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8003c0c:	7818      	ldrb	r0, [r3, #0]
 8003c0e:	460c      	mov	r4, r1
 8003c10:	f000 fc4e 	bl	80044b0 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <usbd_edpt_close+0x54>)
 8003c16:	f004 017f 	and.w	r1, r4, #127	; 0x7f
 8003c1a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003c1e:	eb03 11d4 	add.w	r1, r3, r4, lsr #7
 8003c22:	7fcb      	ldrb	r3, [r1, #31]
 8003c24:	f36f 0341 	bfc	r3, #1, #1
 8003c28:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8003c2a:	7fcb      	ldrb	r3, [r1, #31]
 8003c2c:	f36f 0300 	bfc	r3, #0, #1
 8003c30:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003c32:	7fcb      	ldrb	r3, [r1, #31]
 8003c34:	f36f 0382 	bfc	r3, #2, #1
 8003c38:	77cb      	strb	r3, [r1, #31]

  return;
}
 8003c3a:	bd10      	pop	{r4, pc}
  TU_ASSERT(dcd_edpt_close, /**/);
 8003c3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c40:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003c44:	07db      	lsls	r3, r3, #31
 8003c46:	d501      	bpl.n	8003c4c <usbd_edpt_close+0x48>
 8003c48:	be00      	bkpt	0x0000
 8003c4a:	4770      	bx	lr
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	080044b1 	.word	0x080044b1
 8003c54:	20000044 	.word	0x20000044
 8003c58:	200019b4 	.word	0x200019b4

08003c5c <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8003c5c:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
 8003c5e:	4c0b      	ldr	r4, [pc, #44]	; (8003c8c <tud_control_status+0x30>)
{
 8003c60:	460a      	mov	r2, r1
 8003c62:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	6849      	ldr	r1, [r1, #4]
 8003c68:	4623      	mov	r3, r4
 8003c6a:	c303      	stmia	r3!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003c6c:	f992 2000 	ldrsb.w	r2, [r2]
  _ctrl_xfer.buffer        = NULL;
 8003c70:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003c72:	429a      	cmp	r2, r3
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8003c74:	e9c4 3302 	strd	r3, r3, [r4, #8]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003c78:	4660      	mov	r0, ip

  return _status_stage_xact(rhport, request);
}
 8003c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003c7e:	461a      	mov	r2, r3
 8003c80:	bfac      	ite	ge
 8003c82:	2180      	movge	r1, #128	; 0x80
 8003c84:	4619      	movlt	r1, r3
 8003c86:	f7ff bf33 	b.w	8003af0 <usbd_edpt_xfer>
 8003c8a:	bf00      	nop
 8003c8c:	20001aa4 	.word	0x20001aa4

08003c90 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 8003c92:	4e2b      	ldr	r6, [pc, #172]	; (8003d40 <tud_control_xfer+0xb0>)
{
 8003c94:	468c      	mov	ip, r1
 8003c96:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 8003c98:	6808      	ldr	r0, [r1, #0]
 8003c9a:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8003c9c:	60b2      	str	r2, [r6, #8]
{
 8003c9e:	4614      	mov	r4, r2
  _ctrl_xfer.request       = (*request);
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	c203      	stmia	r2!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8003ca8:	f8bc 2006 	ldrh.w	r2, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf28      	it	cs
 8003cb0:	4613      	movcs	r3, r2
{
 8003cb2:	b082      	sub	sp, #8
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8003cb4:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U)
 8003cb6:	b182      	cbz	r2, 8003cda <tud_control_xfer+0x4a>
  {
    if(_ctrl_xfer.data_len > 0U)
 8003cb8:	b323      	cbz	r3, 8003d04 <tud_control_xfer+0x74>
    {
      TU_ASSERT(buffer);
 8003cba:	b35c      	cbz	r4, 8003d14 <tud_control_xfer+0x84>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8003cbc:	f996 2000 	ldrsb.w	r2, [r6]
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	bf28      	it	cs
 8003cc4:	2340      	movcs	r3, #64	; 0x40
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	db2d      	blt.n	8003d26 <tud_control_xfer+0x96>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <tud_control_xfer+0xb4>)
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f7ff ff0f 	bl	8003af0 <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8003cd2:	b170      	cbz	r0, 8003cf2 <tud_control_xfer+0x62>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8003cd4:	2001      	movs	r0, #1
}
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003cda:	f99c 1000 	ldrsb.w	r1, [ip]
 8003cde:	2900      	cmp	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003ce0:	bfac      	ite	ge
 8003ce2:	2180      	movge	r1, #128	; 0x80
 8003ce4:	2100      	movlt	r1, #0
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f7ff ff01 	bl	8003af0 <usbd_edpt_xfer>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <tud_control_xfer+0x44>
 8003cf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003cf6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003cfa:	07db      	lsls	r3, r3, #31
 8003cfc:	d510      	bpl.n	8003d20 <tud_control_xfer+0x90>
 8003cfe:	be00      	bkpt	0x0000
}
 8003d00:	b002      	add	sp, #8
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8003d04:	f996 1000 	ldrsb.w	r1, [r6]
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	bfac      	ite	ge
 8003d0e:	4619      	movge	r1, r3
 8003d10:	2180      	movlt	r1, #128	; 0x80
 8003d12:	e7db      	b.n	8003ccc <tud_control_xfer+0x3c>
      TU_ASSERT(buffer);
 8003d14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d18:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003d1c:	07da      	lsls	r2, r3, #31
 8003d1e:	d40c      	bmi.n	8003d3a <tud_control_xfer+0xaa>
 8003d20:	2000      	movs	r0, #0
}
 8003d22:	b002      	add	sp, #8
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
  memcpy(dest, src, count);
 8003d26:	461a      	mov	r2, r3
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4806      	ldr	r0, [pc, #24]	; (8003d44 <tud_control_xfer+0xb4>)
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	f001 f929 	bl	8004f84 <memcpy>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <tud_control_xfer+0xb4>)
    ep_addr = EDPT_CTRL_IN;
 8003d34:	9b01      	ldr	r3, [sp, #4]
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	e7c8      	b.n	8003ccc <tud_control_xfer+0x3c>
      TU_ASSERT(buffer);
 8003d3a:	be00      	bkpt	0x0000
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	e7ca      	b.n	8003cd6 <tud_control_xfer+0x46>
 8003d40:	20001aa4 	.word	0x20001aa4
 8003d44:	20001ab8 	.word	0x20001ab8

08003d48 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <usbd_control_reset+0x10>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	e9c3 2200 	strd	r2, r2, [r3]
 8003d50:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8003d54:	611a      	str	r2, [r3, #16]
}
 8003d56:	4770      	bx	lr
 8003d58:	20001aa4 	.word	0x20001aa4

08003d5c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <usbd_control_set_complete_callback+0x8>)
 8003d5e:	6118      	str	r0, [r3, #16]
}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20001aa4 	.word	0x20001aa4

08003d68 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8003d68:	4603      	mov	r3, r0
  _ctrl_xfer.request       = (*request);
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <usbd_control_set_request+0x14>)
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8003d74:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8003d76:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
 8003d7a:	4770      	bx	lr
 8003d7c:	20001aa4 	.word	0x20001aa4

08003d80 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8003d80:	b570      	push	{r4, r5, r6, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8003d82:	4c43      	ldr	r4, [pc, #268]	; (8003e90 <usbd_control_xfer_cb+0x110>)
 8003d84:	7822      	ldrb	r2, [r4, #0]
 8003d86:	09c9      	lsrs	r1, r1, #7
 8003d88:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
{
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	4605      	mov	r5, r0
 8003d90:	461e      	mov	r6, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8003d92:	d018      	beq.n	8003dc6 <usbd_control_xfer_cb+0x46>
  {
    TU_ASSERT(0 == xferred_bytes);
 8003d94:	b143      	cbz	r3, 8003da8 <usbd_control_xfer_cb+0x28>
 8003d96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d9a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003d9e:	07da      	lsls	r2, r3, #31
 8003da0:	d459      	bmi.n	8003e56 <usbd_control_xfer_cb+0xd6>
 8003da2:	2000      	movs	r0, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8003da4:	b002      	add	sp, #8
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <usbd_control_xfer_cb+0x114>)
 8003daa:	b113      	cbz	r3, 8003db2 <usbd_control_xfer_cb+0x32>
 8003dac:	4621      	mov	r1, r4
 8003dae:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02f      	beq.n	8003e18 <usbd_control_xfer_cb+0x98>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8003db8:	4a35      	ldr	r2, [pc, #212]	; (8003e90 <usbd_control_xfer_cb+0x110>)
 8003dba:	2103      	movs	r1, #3
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	4798      	blx	r3
    return true;
 8003dc0:	2001      	movs	r0, #1
}
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8003dc6:	f994 2000 	ldrsb.w	r2, [r4]
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	db06      	blt.n	8003ddc <usbd_control_xfer_cb+0x5c>
    TU_VERIFY(_ctrl_xfer.buffer);
 8003dce:	68a0      	ldr	r0, [r4, #8]
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0e6      	beq.n	8003da2 <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8003dd4:	4930      	ldr	r1, [pc, #192]	; (8003e98 <usbd_control_xfer_cb+0x118>)
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f001 f8d4 	bl	8004f84 <memcpy>
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8003ddc:	89e0      	ldrh	r0, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8003dde:	68a1      	ldr	r1, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8003de0:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8003de2:	4430      	add	r0, r6
 8003de4:	b280      	uxth	r0, r0
  _ctrl_xfer.buffer += xferred_bytes;
 8003de6:	4431      	add	r1, r6
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8003de8:	4282      	cmp	r2, r0
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8003dea:	81e0      	strh	r0, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8003dec:	60a1      	str	r1, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8003dee:	d016      	beq.n	8003e1e <usbd_control_xfer_cb+0x9e>
 8003df0:	2e3f      	cmp	r6, #63	; 0x3f
 8003df2:	d914      	bls.n	8003e1e <usbd_control_xfer_cb+0x9e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8003df4:	89a2      	ldrh	r2, [r4, #12]
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8003df6:	f994 4000 	ldrsb.w	r4, [r4]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8003dfa:	1a13      	subs	r3, r2, r0
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	bf28      	it	cs
 8003e02:	2340      	movcs	r3, #64	; 0x40
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8003e04:	2c00      	cmp	r4, #0
 8003e06:	db31      	blt.n	8003e6c <usbd_control_xfer_cb+0xec>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003e08:	4290      	cmp	r0, r2
 8003e0a:	d03d      	beq.n	8003e88 <usbd_control_xfer_cb+0x108>
 8003e0c:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <usbd_control_xfer_cb+0x118>)
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8003e0e:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7ff fe6d 	bl	8003af0 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
 8003e16:	b1b0      	cbz	r0, 8003e46 <usbd_control_xfer_cb+0xc6>
  return true;
 8003e18:	2001      	movs	r0, #1
}
 8003e1a:	b002      	add	sp, #8
 8003e1c:	bd70      	pop	{r4, r5, r6, pc}
    if ( _ctrl_xfer.complete_cb )
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	b123      	cbz	r3, 8003e2c <usbd_control_xfer_cb+0xac>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8003e22:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <usbd_control_xfer_cb+0x110>)
 8003e24:	2102      	movs	r1, #2
 8003e26:	4628      	mov	r0, r5
 8003e28:	4798      	blx	r3
    if ( is_ok )
 8003e2a:	b1b0      	cbz	r0, 8003e5a <usbd_control_xfer_cb+0xda>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003e2c:	f994 2000 	ldrsb.w	r2, [r4]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003e30:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003e32:	429a      	cmp	r2, r3
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003e34:	bfac      	ite	ge
 8003e36:	2180      	movge	r1, #128	; 0x80
 8003e38:	4619      	movlt	r1, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f7ff fe57 	bl	8003af0 <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d1e8      	bne.n	8003e18 <usbd_control_xfer_cb+0x98>
    TU_ASSERT( _data_stage_xact(rhport) );
 8003e46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e4a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8003e4e:	07db      	lsls	r3, r3, #31
 8003e50:	d5a7      	bpl.n	8003da2 <usbd_control_xfer_cb+0x22>
 8003e52:	be00      	bkpt	0x0000
 8003e54:	e7a6      	b.n	8003da4 <usbd_control_xfer_cb+0x24>
    TU_ASSERT(0 == xferred_bytes);
 8003e56:	be00      	bkpt	0x0000
 8003e58:	e7a3      	b.n	8003da2 <usbd_control_xfer_cb+0x22>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 fbc1 	bl	80045e4 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 fbbd 	bl	80045e4 <dcd_edpt_stall>
 8003e6a:	e7d5      	b.n	8003e18 <usbd_control_xfer_cb+0x98>
    if ( xact_len ) {
 8003e6c:	4290      	cmp	r0, r2
 8003e6e:	d008      	beq.n	8003e82 <usbd_control_xfer_cb+0x102>
  memcpy(dest, src, count);
 8003e70:	461a      	mov	r2, r3
 8003e72:	4809      	ldr	r0, [pc, #36]	; (8003e98 <usbd_control_xfer_cb+0x118>)
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	f001 f885 	bl	8004f84 <memcpy>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <usbd_control_xfer_cb+0x118>)
 8003e7c:	9b01      	ldr	r3, [sp, #4]
    ep_addr = EDPT_CTRL_IN;
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	e7c6      	b.n	8003e10 <usbd_control_xfer_cb+0x90>
 8003e82:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003e84:	2200      	movs	r2, #0
 8003e86:	e7c3      	b.n	8003e10 <usbd_control_xfer_cb+0x90>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8003e88:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	e7c0      	b.n	8003e10 <usbd_control_xfer_cb+0x90>
 8003e8e:	bf00      	nop
 8003e90:	20001aa4 	.word	0x20001aa4
 8003e94:	00000000 	.word	0x00000000
 8003e98:	20001ab8 	.word	0x20001ab8

08003e9c <dcd_int_enable>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <dcd_int_enable+0x8>)
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	609a      	str	r2, [r3, #8]

void dcd_int_enable (uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
}
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <dcd_int_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <dcd_int_disable+0x14>)
 8003eaa:	2208      	movs	r2, #8
 8003eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003eb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003eb4:	f3bf 8f6f 	isb	sy

void dcd_int_disable (uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8003ec0:	481b      	ldr	r0, [pc, #108]	; (8003f30 <dcd_set_address+0x70>)
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <dcd_set_address+0x74>)
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8003ec4:	6803      	ldr	r3, [r0, #0]
 8003ec6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003ece:	6003      	str	r3, [r0, #0]
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
  xfer->buffer      = buffer;
 8003ed0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8003f28 <dcd_set_address+0x68>
  xfer->ff          = NULL;
  xfer->total_len   = total_bytes;

  // EP0 can only handle one packet
  if(epnum == 0) {
    ep0_pending[dir] = total_bytes;
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <dcd_set_address+0x78>)
  xfer->buffer      = buffer;
 8003ed6:	4919      	ldr	r1, [pc, #100]	; (8003f3c <dcd_set_address+0x7c>)
  xfer->total_len   = total_bytes;
 8003ed8:	f04f 0c00 	mov.w	ip, #0
    ep0_pending[dir] = total_bytes;
 8003edc:	f8a3 c002 	strh.w	ip, [r3, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8003ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  xfer->buffer      = buffer;
 8003ee4:	ed81 7b04 	vstr	d7, [r1, #16]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8003ee8:	6113      	str	r3, [r2, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8003eea:	6813      	ldr	r3, [r2, #0]
  xfer->total_len   = total_bytes;
 8003eec:	f8a1 c018 	strh.w	ip, [r1, #24]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8003ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ef4:	6013      	str	r3, [r2, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f00:	d000      	beq.n	8003f04 <dcd_set_address+0x44>
}
 8003f02:	4770      	bx	lr
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8003f04:	7f0b      	ldrb	r3, [r1, #28]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d1fb      	bne.n	8003f02 <dcd_set_address+0x42>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8003f0a:	6881      	ldr	r1, [r0, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003f12:	bf14      	ite	ne
 8003f14:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 8003f18:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	e7ef      	b.n	8003f02 <dcd_set_address+0x42>
 8003f22:	bf00      	nop
 8003f24:	f3af 8000 	nop.w
	...
 8003f30:	50000800 	.word	0x50000800
 8003f34:	50000900 	.word	0x50000900
 8003f38:	20001b04 	.word	0x20001b04
 8003f3c:	20001b08 	.word	0x20001b08

08003f40 <dcd_connect>:
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f40:	4a02      	ldr	r2, [pc, #8]	; (8003f4c <dcd_connect+0xc>)
 8003f42:	6853      	ldr	r3, [r2, #4]
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	6053      	str	r3, [r2, #4]
}
 8003f4a:	4770      	bx	lr
 8003f4c:	50000800 	.word	0x50000800

08003f50 <dcd_init>:
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
{
 8003f54:	b510      	push	{r4, lr}
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f56:	68d3      	ldr	r3, [r2, #12]
 8003f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5c:	60d3      	str	r3, [r2, #12]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8003f5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dafc      	bge.n	8003f62 <dcd_init+0x12>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f68:	690b      	ldr	r3, [r1, #16]
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8003f6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f72:	610b      	str	r3, [r1, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8003f74:	6913      	ldr	r3, [r2, #16]
 8003f76:	f013 0301 	ands.w	r3, r3, #1
 8003f7a:	d1fb      	bne.n	8003f74 <dcd_init+0x24>
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8003f7c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8003f80:	6954      	ldr	r4, [r2, #20]
 8003f82:	6953      	ldr	r3, [r2, #20]
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8003f84:	4914      	ldr	r1, [pc, #80]	; (8003fd8 <dcd_init+0x88>)
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8003f86:	4323      	orrs	r3, r4
 8003f88:	6153      	str	r3, [r2, #20]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8003f8a:	6993      	ldr	r3, [r2, #24]
 8003f8c:	f043 0306 	orr.w	r3, r3, #6
 8003f90:	6193      	str	r3, [r2, #24]
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	600b      	str	r3, [r1, #0]
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8003f9a:	680a      	ldr	r2, [r1, #0]
 8003f9c:	f022 0203 	bic.w	r2, r2, #3
 8003fa0:	600a      	str	r2, [r1, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8003fa2:	680a      	ldr	r2, [r1, #0]
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8003fa4:	2801      	cmp	r0, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	f04f 0c03 	movne.w	ip, #3
 8003fac:	f04f 0c01 	moveq.w	ip, #1
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8003fb4:	ea42 020c 	orr.w	r2, r2, ip
 8003fb8:	600a      	str	r2, [r1, #0]
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fba:	6b99      	ldr	r1, [r3, #56]	; 0x38
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <dcd_init+0x8c>)
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fbe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003fc2:	6399      	str	r1, [r3, #56]	; 0x38
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]
  dcd_connect(rhport);
 8003fd2:	f7ff ffb5 	bl	8003f40 <dcd_connect>
}
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	50000800 	.word	0x50000800
 8003fdc:	80003810 	.word	0x80003810

08003fe0 <dcd_edpt_open>:
  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8003fe0:	788b      	ldrb	r3, [r1, #2]
  TU_ASSERT(epnum < EP_MAX);
 8003fe2:	f013 007c 	ands.w	r0, r3, #124	; 0x7c
 8003fe6:	d17e      	bne.n	80040e6 <dcd_edpt_open+0x106>
{
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8003fee:	4c4d      	ldr	r4, [pc, #308]	; (8004124 <dcd_edpt_open+0x144>)
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003ff0:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8003ff4:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003ff8:	eb0e 1ed3 	add.w	lr, lr, r3, lsr #7
 8003ffc:	eb04 140e 	add.w	r4, r4, lr, lsl #4
 8004000:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8004004:	f8a4 c00a 	strh.w	ip, [r4, #10]
  xfer->interval = desc_edpt->bInterval;
 8004008:	798d      	ldrb	r5, [r1, #6]
 800400a:	7325      	strb	r5, [r4, #12]
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 800400c:	f10c 0e03 	add.w	lr, ip, #3
  if(dir == TUSB_DIR_OUT)
 8004010:	09db      	lsrs	r3, r3, #7
  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8004012:	ea4f 05ae 	mov.w	r5, lr, asr #2
 8004016:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  if(dir == TUSB_DIR_OUT)
 800401a:	d03b      	beq.n	8004094 <dcd_edpt_open+0xb4>
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 800401c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004020:	4e41      	ldr	r6, [pc, #260]	; (8004128 <dcd_edpt_open+0x148>)
 8004022:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8004024:	8833      	ldrh	r3, [r6, #0]
 8004026:	195c      	adds	r4, r3, r5
 8004028:	443c      	add	r4, r7
 800402a:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800402e:	d865      	bhi.n	80040fc <dcd_edpt_open+0x11c>
    _allocated_fifo_words_tx += fifo_size;
 8004030:	449e      	add	lr, r3
 8004032:	fa1f fe8e 	uxth.w	lr, lr
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8004036:	0090      	lsls	r0, r2, #2
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8004038:	78cc      	ldrb	r4, [r1, #3]
    _allocated_fifo_words_tx += fifo_size;
 800403a:	f8a6 e000 	strh.w	lr, [r6]
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 800403e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8004042:	f5ce 7ea0 	rsb	lr, lr, #320	; 0x140
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 800404c:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004050:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8004054:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8004058:	f004 0003 	and.w	r0, r4, #3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800405c:	ea4c 0c03 	orr.w	ip, ip, r3
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8004060:	0593      	lsls	r3, r2, #22
 8004062:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8004066:	2801      	cmp	r0, #1
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8004068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800406c:	ea4c 0303 	orr.w	r3, ip, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8004070:	bf14      	ite	ne
 8004072:	f04f 5c80 	movne.w	ip, #268435456	; 0x10000000
 8004076:	f04f 0c00 	moveq.w	ip, #0
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800407a:	ea43 030c 	orr.w	r3, r3, ip
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 800407e:	482b      	ldr	r0, [pc, #172]	; (800412c <dcd_edpt_open+0x14c>)
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8004080:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8004084:	69c1      	ldr	r1, [r0, #28]
 8004086:	2301      	movs	r3, #1
 8004088:	fa03 f202 	lsl.w	r2, r3, r2
 800408c:	430a      	orrs	r2, r1
 800408e:	61c2      	str	r2, [r0, #28]
  return true;
 8004090:	4618      	mov	r0, r3
}
 8004092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (usb_otg->GRXFSIZ < sz)
 8004094:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8004098:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    if (usb_otg->GRXFSIZ < sz)
 800409c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 800409e:	f10e 0017 	add.w	r0, lr, #23
    if (usb_otg->GRXFSIZ < sz)
 80040a2:	4285      	cmp	r5, r0
 80040a4:	d206      	bcs.n	80040b4 <dcd_edpt_open+0xd4>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 80040a6:	4d20      	ldr	r5, [pc, #128]	; (8004128 <dcd_edpt_open+0x148>)
 80040a8:	882d      	ldrh	r5, [r5, #0]
 80040aa:	4405      	add	r5, r0
 80040ac:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 80040b0:	dc2c      	bgt.n	800410c <dcd_edpt_open+0x12c>
      usb_otg->GRXFSIZ = sz;
 80040b2:	6260      	str	r0, [r4, #36]	; 0x24
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80040b4:	78cb      	ldrb	r3, [r1, #3]
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80040b6:	0151      	lsls	r1, r2, #5
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80040b8:	f003 0003 	and.w	r0, r3, #3
 80040bc:	2801      	cmp	r0, #1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80040be:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80040c2:	bf14      	ite	ne
 80040c4:	f04f 5380 	movne.w	r3, #268435456	; 0x10000000
 80040c8:	2300      	moveq	r3, #0
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80040ca:	f8d1 4b00 	ldr.w	r4, [r1, #2816]	; 0xb00
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80040ce:	ea4c 0303 	orr.w	r3, ip, r3
 80040d2:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80040d6:	4323      	orrs	r3, r4
 80040d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 80040dc:	4813      	ldr	r0, [pc, #76]	; (800412c <dcd_edpt_open+0x14c>)
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80040de:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 80040e2:	3210      	adds	r2, #16
 80040e4:	e7ce      	b.n	8004084 <dcd_edpt_open+0xa4>
  TU_ASSERT(epnum < EP_MAX);
 80040e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040ea:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80040ee:	07d9      	lsls	r1, r3, #31
 80040f0:	d502      	bpl.n	80040f8 <dcd_edpt_open+0x118>
 80040f2:	be00      	bkpt	0x0000
 80040f4:	2000      	movs	r0, #0
 80040f6:	4770      	bx	lr
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	4770      	bx	lr
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 80040fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004100:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8004104:	07db      	lsls	r3, r3, #31
 8004106:	d507      	bpl.n	8004118 <dcd_edpt_open+0x138>
 8004108:	be00      	bkpt	0x0000
}
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 800410c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004110:	f8d2 2df0 	ldr.w	r2, [r2, #3568]	; 0xdf0
 8004114:	07d2      	lsls	r2, r2, #31
 8004116:	d401      	bmi.n	800411c <dcd_edpt_open+0x13c>
  TU_ASSERT(epnum < EP_MAX);
 8004118:	2000      	movs	r0, #0
}
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 800411c:	be00      	bkpt	0x0000
 800411e:	4618      	mov	r0, r3
}
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	bf00      	nop
 8004124:	20001b08 	.word	0x20001b08
 8004128:	20001af8 	.word	0x20001af8
 800412c:	50000800 	.word	0x50000800

08004130 <dcd_edpt_close_all>:
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <dcd_edpt_close_all+0x40>)
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8004132:	4a10      	ldr	r2, [pc, #64]	; (8004174 <dcd_edpt_close_all+0x44>)
    out_ep[n].DOEPCTL = 0;
 8004134:	4810      	ldr	r0, [pc, #64]	; (8004178 <dcd_edpt_close_all+0x48>)
    in_ep[n].DIEPCTL = 0;
 8004136:	4911      	ldr	r1, [pc, #68]	; (800417c <dcd_edpt_close_all+0x4c>)
{
 8004138:	b410      	push	{r4}
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 800413a:	f04f 1401 	mov.w	r4, #65537	; 0x10001
 800413e:	61dc      	str	r4, [r3, #28]
    out_ep[n].DOEPCTL = 0;
 8004140:	2300      	movs	r3, #0
  _allocated_fifo_words_tx = 16;
 8004142:	4c0f      	ldr	r4, [pc, #60]	; (8004180 <dcd_edpt_close_all+0x50>)
    out_ep[n].DOEPCTL = 0;
 8004144:	6203      	str	r3, [r0, #32]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8004146:	8553      	strh	r3, [r2, #42]	; 0x2a
    in_ep[n].DIEPCTL = 0;
 8004148:	620b      	str	r3, [r1, #32]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 800414a:	8753      	strh	r3, [r2, #58]	; 0x3a
    out_ep[n].DOEPCTL = 0;
 800414c:	6403      	str	r3, [r0, #64]	; 0x40
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 800414e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
    in_ep[n].DIEPCTL = 0;
 8004152:	640b      	str	r3, [r1, #64]	; 0x40
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8004154:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
    out_ep[n].DOEPCTL = 0;
 8004158:	6603      	str	r3, [r0, #96]	; 0x60
  _allocated_fifo_words_tx = 16;
 800415a:	2010      	movs	r0, #16
    in_ep[n].DIEPCTL = 0;
 800415c:	660b      	str	r3, [r1, #96]	; 0x60
  _allocated_fifo_words_tx = 16;
 800415e:	8020      	strh	r0, [r4, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8004160:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
}
 8004164:	f85d 4b04 	ldr.w	r4, [sp], #4
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8004168:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	50000800 	.word	0x50000800
 8004174:	20001b08 	.word	0x20001b08
 8004178:	50000b00 	.word	0x50000b00
 800417c:	50000900 	.word	0x50000900
 8004180:	20001af8 	.word	0x20001af8

08004184 <dcd_edpt_xfer>:
{
 8004184:	b470      	push	{r4, r5, r6}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004186:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = buffer;
 800418a:	4d71      	ldr	r5, [pc, #452]	; (8004350 <dcd_edpt_xfer+0x1cc>)
 800418c:	0060      	lsls	r0, r4, #1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800418e:	09ce      	lsrs	r6, r1, #7
 8004190:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8004194:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8004198:	0109      	lsls	r1, r1, #4
  xfer->total_len   = total_bytes;
 800419a:	8103      	strh	r3, [r0, #8]
  xfer->buffer      = buffer;
 800419c:	506a      	str	r2, [r5, r1]
  xfer->ff          = NULL;
 800419e:	2200      	movs	r2, #0
 80041a0:	6042      	str	r2, [r0, #4]
  if(epnum == 0) {
 80041a2:	2c00      	cmp	r4, #0
 80041a4:	d04f      	beq.n	8004246 <dcd_edpt_xfer+0xc2>
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
    return true;
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80041a6:	8941      	ldrh	r1, [r0, #10]
 80041a8:	fbb3 f2f1 	udiv	r2, r3, r1
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80041ac:	fb01 3112 	mls	r1, r1, r2, r3

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80041b0:	b289      	uxth	r1, r1
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80041b2:	b292      	uxth	r2, r2
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80041b4:	b311      	cbz	r1, 80041fc <dcd_edpt_xfer+0x78>
    num_packets++;
 80041b6:	3201      	adds	r2, #1
 80041b8:	b292      	uxth	r2, r2
  if(dir == TUSB_DIR_IN) {
 80041ba:	bb26      	cbnz	r6, 8004206 <dcd_edpt_xfer+0x82>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80041bc:	0160      	lsls	r0, r4, #5
 80041be:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 80041c2:	f8d0 6b10 	ldr.w	r6, [r0, #2832]	; 0xb10
 80041c6:	f006 4660 	and.w	r6, r6, #3758096384	; 0xe0000000
 80041ca:	f8c0 6b10 	str.w	r6, [r0, #2832]	; 0xb10
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80041ce:	f8d0 6b10 	ldr.w	r6, [r0, #2832]	; 0xb10
 80041d2:	4333      	orrs	r3, r6
 80041d4:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80041d8:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80041dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80041e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80041e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80041ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80041f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f4:	d057      	beq.n	80042a6 <dcd_edpt_xfer+0x122>

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 80041f6:	2001      	movs	r0, #1
 80041f8:	bc70      	pop	{r4, r5, r6}
 80041fa:	4770      	bx	lr
  if(short_packet_size > 0 || (total_bytes == 0)) {
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1dc      	bne.n	80041ba <dcd_edpt_xfer+0x36>
    num_packets++;
 8004200:	3201      	adds	r2, #1
 8004202:	b292      	uxth	r2, r2
 8004204:	e7d9      	b.n	80041ba <dcd_edpt_xfer+0x36>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8004206:	0161      	lsls	r1, r4, #5
 8004208:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
 800420c:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 8004210:	f8c1 2910 	str.w	r2, [r1, #2320]	; 0x910
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8004214:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004218:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800421c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004220:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004224:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004228:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800422c:	d04f      	beq.n	80042ce <dcd_edpt_xfer+0x14a>
    if(total_bytes != 0) {
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0e1      	beq.n	80041f6 <dcd_edpt_xfer+0x72>
      dev->DIEPEMPMSK |= (1 << epnum);
 8004232:	4a48      	ldr	r2, [pc, #288]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 8004234:	2301      	movs	r3, #1
 8004236:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004238:	fa03 f404 	lsl.w	r4, r3, r4
 800423c:	430c      	orrs	r4, r1
 800423e:	6354      	str	r4, [r2, #52]	; 0x34
}
 8004240:	2001      	movs	r0, #1
 8004242:	bc70      	pop	{r4, r5, r6}
 8004244:	4770      	bx	lr
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8004246:	eb05 1106 	add.w	r1, r5, r6, lsl #4
    ep0_pending[dir] -= total_bytes;
 800424a:	4a43      	ldr	r2, [pc, #268]	; (8004358 <dcd_edpt_xfer+0x1d4>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800424c:	8949      	ldrh	r1, [r1, #10]
 800424e:	4299      	cmp	r1, r3
 8004250:	bf28      	it	cs
 8004252:	4619      	movcs	r1, r3
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 800425a:	2e00      	cmp	r6, #0
 800425c:	d14e      	bne.n	80042fc <dcd_edpt_xfer+0x178>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 800425e:	4a3f      	ldr	r2, [pc, #252]	; (800435c <dcd_edpt_xfer+0x1d8>)
 8004260:	6913      	ldr	r3, [r2, #16]
 8004262:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004266:	6113      	str	r3, [r2, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8004268:	6913      	ldr	r3, [r2, #16]
 800426a:	430b      	orrs	r3, r1
 800426c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004270:	6113      	str	r3, [r2, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004278:	6013      	str	r3, [r2, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004284:	d1b7      	bne.n	80041f6 <dcd_edpt_xfer+0x72>
 8004286:	7b2b      	ldrb	r3, [r5, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d1b4      	bne.n	80041f6 <dcd_edpt_xfer+0x72>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 800428e:	6899      	ldr	r1, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004296:	bf14      	ite	ne
 8004298:	f04f 5180 	movne.w	r1, #268435456	; 0x10000000
 800429c:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e7a7      	b.n	80041f6 <dcd_edpt_xfer+0x72>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80042a6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80042aa:	7b23      	ldrb	r3, [r4, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d1a2      	bne.n	80041f6 <dcd_edpt_xfer+0x72>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80042b0:	4b28      	ldr	r3, [pc, #160]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 80042b2:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 80042b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80042b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80042bc:	bf14      	ite	ne
 80042be:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 80042c2:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80042cc:	e793      	b.n	80041f6 <dcd_edpt_xfer+0x72>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80042ce:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 80042d2:	7f2a      	ldrb	r2, [r5, #28]
 80042d4:	2a01      	cmp	r2, #1
 80042d6:	d1aa      	bne.n	800422e <dcd_edpt_xfer+0xaa>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 80042da:	6890      	ldr	r0, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 80042dc:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80042e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80042e4:	bf14      	ite	ne
 80042e6:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 80042ea:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 80042ee:	4302      	orrs	r2, r0
 80042f0:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
    if(total_bytes != 0) {
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f43f af7e 	beq.w	80041f6 <dcd_edpt_xfer+0x72>
 80042fa:	e79a      	b.n	8004232 <dcd_edpt_xfer+0xae>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <dcd_edpt_xfer+0x1dc>)
 80042fe:	f441 2200 	orr.w	r2, r1, #524288	; 0x80000
 8004302:	611a      	str	r2, [r3, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800430a:	601a      	str	r2, [r3, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004312:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004316:	d008      	beq.n	800432a <dcd_edpt_xfer+0x1a6>
    if(total_bytes != 0) {
 8004318:	2900      	cmp	r1, #0
 800431a:	f43f af6c 	beq.w	80041f6 <dcd_edpt_xfer+0x72>
      dev->DIEPEMPMSK |= (1 << epnum);
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 8004320:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6353      	str	r3, [r2, #52]	; 0x34
 8004328:	e765      	b.n	80041f6 <dcd_edpt_xfer+0x72>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800432a:	7f2a      	ldrb	r2, [r5, #28]
 800432c:	2a01      	cmp	r2, #1
 800432e:	d1f3      	bne.n	8004318 <dcd_edpt_xfer+0x194>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004330:	4a08      	ldr	r2, [pc, #32]	; (8004354 <dcd_edpt_xfer+0x1d0>)
 8004332:	6890      	ldr	r0, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f410 7f80 	tst.w	r0, #256	; 0x100
 800433a:	bf14      	ite	ne
 800433c:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8004340:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 8004344:	4302      	orrs	r2, r0
 8004346:	601a      	str	r2, [r3, #0]
    if(total_bytes != 0) {
 8004348:	2900      	cmp	r1, #0
 800434a:	f43f af54 	beq.w	80041f6 <dcd_edpt_xfer+0x72>
 800434e:	e7e6      	b.n	800431e <dcd_edpt_xfer+0x19a>
 8004350:	20001b08 	.word	0x20001b08
 8004354:	50000800 	.word	0x50000800
 8004358:	20001b04 	.word	0x20001b04
 800435c:	50000b00 	.word	0x50000b00
 8004360:	50000900 	.word	0x50000900

08004364 <dcd_edpt_xfer_fifo>:
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8004364:	88d0      	ldrh	r0, [r2, #6]
 8004366:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800436a:	2801      	cmp	r0, #1
 800436c:	d00a      	beq.n	8004384 <dcd_edpt_xfer_fifo+0x20>
 800436e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004372:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8004376:	f010 0001 	ands.w	r0, r0, #1
 800437a:	d002      	beq.n	8004382 <dcd_edpt_xfer_fifo+0x1e>
 800437c:	be00      	bkpt	0x0000
 800437e:	2000      	movs	r0, #0
 8004380:	4770      	bx	lr

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}
 8004382:	4770      	bx	lr
{
 8004384:	b4f0      	push	{r4, r5, r6, r7}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004386:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  xfer->buffer      = NULL;
 800438a:	4d46      	ldr	r5, [pc, #280]	; (80044a4 <dcd_edpt_xfer_fifo+0x140>)
 800438c:	0060      	lsls	r0, r4, #1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800438e:	09ce      	lsrs	r6, r1, #7
 8004390:	eb00 11d1 	add.w	r1, r0, r1, lsr #7
 8004394:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8004398:	0109      	lsls	r1, r1, #4
  xfer->ff          = ff;
 800439a:	6042      	str	r2, [r0, #4]
  xfer->total_len   = total_bytes;
 800439c:	8103      	strh	r3, [r0, #8]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 800439e:	8940      	ldrh	r0, [r0, #10]
 80043a0:	fbb3 f2f0 	udiv	r2, r3, r0
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80043a4:	fb00 3012 	mls	r0, r0, r2, r3
  xfer->buffer      = NULL;
 80043a8:	2700      	movs	r7, #0
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80043aa:	b280      	uxth	r0, r0
  xfer->buffer      = NULL;
 80043ac:	506f      	str	r7, [r5, r1]
  uint16_t num_packets = (total_bytes / xfer->max_size);
 80043ae:	b292      	uxth	r2, r2
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80043b0:	bb70      	cbnz	r0, 8004410 <dcd_edpt_xfer_fifo+0xac>
 80043b2:	b36b      	cbz	r3, 8004410 <dcd_edpt_xfer_fifo+0xac>
  if(epnum == 0) {
 80043b4:	b95c      	cbnz	r4, 80043ce <dcd_edpt_xfer_fifo+0x6a>
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80043b6:	483c      	ldr	r0, [pc, #240]	; (80044a8 <dcd_edpt_xfer_fifo+0x144>)
 80043b8:	eb05 1306 	add.w	r3, r5, r6, lsl #4
 80043bc:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
 80043c0:	895b      	ldrh	r3, [r3, #10]
 80043c2:	428b      	cmp	r3, r1
 80043c4:	bf28      	it	cs
 80043c6:	460b      	movcs	r3, r1
    ep0_pending[dir] -= total_bytes;
 80043c8:	1ac9      	subs	r1, r1, r3
 80043ca:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
  if(dir == TUSB_DIR_IN) {
 80043ce:	bb16      	cbnz	r6, 8004416 <dcd_edpt_xfer_fifo+0xb2>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 80043d0:	0166      	lsls	r6, r4, #5
 80043d2:	f106 46a0 	add.w	r6, r6, #1342177280	; 0x50000000
 80043d6:	f8d6 1b10 	ldr.w	r1, [r6, #2832]	; 0xb10
 80043da:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 80043de:	f8c6 1b10 	str.w	r1, [r6, #2832]	; 0xb10
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80043e2:	f8d6 1b10 	ldr.w	r1, [r6, #2832]	; 0xb10
 80043e6:	ea41 42c2 	orr.w	r2, r1, r2, lsl #19
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80043f0:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 80043f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f8:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80043fc:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 8004400:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004408:	d037      	beq.n	800447a <dcd_edpt_xfer_fifo+0x116>
  return true;
 800440a:	2001      	movs	r0, #1
}
 800440c:	bcf0      	pop	{r4, r5, r6, r7}
 800440e:	4770      	bx	lr
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 8004410:	3201      	adds	r2, #1
 8004412:	b292      	uxth	r2, r2
 8004414:	e7ce      	b.n	80043b4 <dcd_edpt_xfer_fifo+0x50>
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8004416:	0161      	lsls	r1, r4, #5
 8004418:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
 800441c:	ea43 42c2 	orr.w	r2, r3, r2, lsl #19
 8004420:	f8c1 2910 	str.w	r2, [r1, #2320]	; 0x910
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8004424:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004428:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800442c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004430:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004434:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004438:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800443c:	d009      	beq.n	8004452 <dcd_edpt_xfer_fifo+0xee>
    if(total_bytes != 0) {
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0e3      	beq.n	800440a <dcd_edpt_xfer_fifo+0xa6>
      dev->DIEPEMPMSK |= (1 << epnum);
 8004442:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <dcd_edpt_xfer_fifo+0x148>)
 8004444:	2001      	movs	r0, #1
 8004446:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004448:	fa00 f304 	lsl.w	r3, r0, r4
 800444c:	430b      	orrs	r3, r1
 800444e:	6353      	str	r3, [r2, #52]	; 0x34
 8004450:	e7dc      	b.n	800440c <dcd_edpt_xfer_fifo+0xa8>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004452:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 8004456:	7f2a      	ldrb	r2, [r5, #28]
 8004458:	2a01      	cmp	r2, #1
 800445a:	d1f0      	bne.n	800443e <dcd_edpt_xfer_fifo+0xda>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 800445c:	4a13      	ldr	r2, [pc, #76]	; (80044ac <dcd_edpt_xfer_fifo+0x148>)
 800445e:	6890      	ldr	r0, [r2, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8004460:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8004464:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004468:	bf14      	ite	ne
 800446a:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 800446e:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 8004472:	4302      	orrs	r2, r0
 8004474:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8004478:	e7e1      	b.n	800443e <dcd_edpt_xfer_fifo+0xda>
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800447a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800447e:	7b18      	ldrb	r0, [r3, #12]
 8004480:	2801      	cmp	r0, #1
 8004482:	d1c2      	bne.n	800440a <dcd_edpt_xfer_fifo+0xa6>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <dcd_edpt_xfer_fifo+0x148>)
 8004486:	689a      	ldr	r2, [r3, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8004488:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	; 0xb00
 800448c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004490:	bf14      	ite	ne
 8004492:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8004496:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
 80044a0:	e7b4      	b.n	800440c <dcd_edpt_xfer_fifo+0xa8>
 80044a2:	bf00      	nop
 80044a4:	20001b08 	.word	0x20001b08
 80044a8:	20001b04 	.word	0x20001b04
 80044ac:	50000800 	.word	0x50000800

080044b0 <dcd_edpt_close>:
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  if(dir == TUSB_DIR_IN) {
 80044b0:	09cb      	lsrs	r3, r1, #7

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80044b2:	b430      	push	{r4, r5}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80044b4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  if(dir == TUSB_DIR_IN) {
 80044b8:	d132      	bne.n	8004520 <dcd_edpt_close+0x70>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80044ba:	b960      	cbnz	r0, 80044d6 <dcd_edpt_close+0x26>
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <dcd_edpt_close+0x11c>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	601a      	str	r2, [r3, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_disable(rhport, ep_addr, false);

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80044c2:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <dcd_edpt_close+0x120>)
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
    _allocated_fifo_words_tx -= fifo_size;
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80044c4:	4a43      	ldr	r2, [pc, #268]	; (80045d4 <dcd_edpt_close+0x124>)
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80044c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80044ca:	2100      	movs	r1, #0
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80044cc:	2301      	movs	r3, #1
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 80044ce:	8141      	strh	r1, [r0, #10]
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 80044d0:	7013      	strb	r3, [r2, #0]
  }
}
 80044d2:	bc30      	pop	{r4, r5}
 80044d4:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80044d6:	0141      	lsls	r1, r0, #5
 80044d8:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
 80044dc:	f501 6330 	add.w	r3, r1, #2816	; 0xb00
 80044e0:	f8d1 2b00 	ldr.w	r2, [r1, #2816]	; 0xb00
 80044e4:	2a00      	cmp	r2, #0
 80044e6:	daea      	bge.n	80044be <dcd_edpt_close+0xe>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e8:	4c3b      	ldr	r4, [pc, #236]	; (80045d8 <dcd_edpt_close+0x128>)
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	6062      	str	r2, [r4, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 80044f2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 80044f6:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80044fa:	0614      	lsls	r4, r2, #24
 80044fc:	d5fb      	bpl.n	80044f6 <dcd_edpt_close+0x46>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 80044fe:	f8d1 2b00 	ldr.w	r2, [r1, #2816]	; 0xb00
 8004502:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004506:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	0792      	lsls	r2, r2, #30
 800450e:	d5fc      	bpl.n	800450a <dcd_edpt_close+0x5a>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8004510:	4a31      	ldr	r2, [pc, #196]	; (80045d8 <dcd_edpt_close+0x128>)
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8004512:	2102      	movs	r1, #2
 8004514:	6099      	str	r1, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8004516:	6853      	ldr	r3, [r2, #4]
 8004518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	e7d0      	b.n	80044c2 <dcd_edpt_close+0x12>
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8004520:	2800      	cmp	r0, #0
 8004522:	d036      	beq.n	8004592 <dcd_edpt_close+0xe2>
 8004524:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8004528:	f10c 4ca0 	add.w	ip, ip, #1342177280	; 0x50000000
 800452c:	b201      	sxth	r1, r0
 800452e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8004532:	2a00      	cmp	r2, #0
 8004534:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 8004538:	db33      	blt.n	80045a2 <dcd_edpt_close+0xf2>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004540:	601a      	str	r2, [r3, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8004542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004546:	6913      	ldr	r3, [r2, #16]
 8004548:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800454c:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 800454e:	6913      	ldr	r3, [r2, #16]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8004556:	6913      	ldr	r3, [r2, #16]
 8004558:	f013 0320 	ands.w	r3, r3, #32
 800455c:	d1fb      	bne.n	8004556 <dcd_edpt_close+0xa6>
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 800455e:	008a      	lsls	r2, r1, #2
 8004560:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
 8004564:	491a      	ldr	r1, [pc, #104]	; (80045d0 <dcd_edpt_close+0x120>)
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8004566:	4c1d      	ldr	r4, [pc, #116]	; (80045dc <dcd_edpt_close+0x12c>)
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 8004568:	f8d2 5100 	ldr.w	r5, [r2, #256]	; 0x100
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 800456c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8004570:	eb01 1040 	add.w	r0, r1, r0, lsl #5
 8004574:	8343      	strh	r3, [r0, #26]
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8004576:	b293      	uxth	r3, r2
 8004578:	8822      	ldrh	r2, [r4, #0]
 800457a:	f5c2 71a0 	rsb	r1, r2, #320	; 0x140
 800457e:	4299      	cmp	r1, r3
 8004580:	d00a      	beq.n	8004598 <dcd_edpt_close+0xe8>
 8004582:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004586:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800458a:	07db      	lsls	r3, r3, #31
 800458c:	d5a1      	bpl.n	80044d2 <dcd_edpt_close+0x22>
 800458e:	be00      	bkpt	0x0000
 8004590:	e79f      	b.n	80044d2 <dcd_edpt_close+0x22>
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <dcd_edpt_close+0x130>)
 8004594:	4601      	mov	r1, r0
 8004596:	e7d0      	b.n	800453a <dcd_edpt_close+0x8a>
    _allocated_fifo_words_tx -= fifo_size;
 8004598:	eba2 4215 	sub.w	r2, r2, r5, lsr #16
 800459c:	8022      	strh	r2, [r4, #0]
}
 800459e:	bc30      	pop	{r4, r5}
 80045a0:	4770      	bx	lr
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045a2:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80045a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80045aa:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	0652      	lsls	r2, r2, #25
 80045b2:	d5fc      	bpl.n	80045ae <dcd_edpt_close+0xfe>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80045b4:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 80045b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045bc:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	0795      	lsls	r5, r2, #30
 80045c4:	d5fc      	bpl.n	80045c0 <dcd_edpt_close+0x110>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80045c6:	2202      	movs	r2, #2
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	e7ba      	b.n	8004542 <dcd_edpt_close+0x92>
 80045cc:	50000b00 	.word	0x50000b00
 80045d0:	20001b08 	.word	0x20001b08
 80045d4:	20001afa 	.word	0x20001afa
 80045d8:	50000800 	.word	0x50000800
 80045dc:	20001af8 	.word	0x20001af8
 80045e0:	50000900 	.word	0x50000900

080045e4 <dcd_edpt_stall>:
  if(dir == TUSB_DIR_IN) {
 80045e4:	09ca      	lsrs	r2, r1, #7
 80045e6:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80045ea:	d12f      	bne.n	800464c <dcd_edpt_stall+0x68>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80045ec:	b92b      	cbnz	r3, 80045fa <dcd_edpt_stall+0x16>
 80045ee:	4a32      	ldr	r2, [pc, #200]	; (80046b8 <dcd_edpt_stall+0xd4>)
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4770      	bx	lr
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80045fa:	015b      	lsls	r3, r3, #5
 80045fc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8004600:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 8004604:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004608:	2900      	cmp	r1, #0
 800460a:	daf1      	bge.n	80045f0 <dcd_edpt_stall+0xc>

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 800460c:	b410      	push	{r4}
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 800460e:	4c2b      	ldr	r4, [pc, #172]	; (80046bc <dcd_edpt_stall+0xd8>)
 8004610:	6861      	ldr	r1, [r4, #4]
 8004612:	f441 7100 	orr.w	r1, r1, #512	; 0x200
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8004616:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 800461a:	6061      	str	r1, [r4, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 800461c:	6941      	ldr	r1, [r0, #20]
 800461e:	0609      	lsls	r1, r1, #24
 8004620:	d5fc      	bpl.n	800461c <dcd_edpt_stall+0x38>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8004622:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004626:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800462a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800462e:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8004632:	6893      	ldr	r3, [r2, #8]
 8004634:	079b      	lsls	r3, r3, #30
 8004636:	d5fc      	bpl.n	8004632 <dcd_edpt_stall+0x4e>
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8004638:	4920      	ldr	r1, [pc, #128]	; (80046bc <dcd_edpt_stall+0xd8>)
  dcd_edpt_disable(rhport, ep_addr, true);
}
 800463a:	f85d 4b04 	ldr.w	r4, [sp], #4
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 800463e:	2302      	movs	r3, #2
 8004640:	6093      	str	r3, [r2, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8004642:	684b      	ldr	r3, [r1, #4]
 8004644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004648:	604b      	str	r3, [r1, #4]
}
 800464a:	4770      	bx	lr
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 800464c:	b1d3      	cbz	r3, 8004684 <dcd_edpt_stall+0xa0>
 800464e:	0158      	lsls	r0, r3, #5
 8004650:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 8004654:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8004658:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800465c:	2900      	cmp	r1, #0
 800465e:	db13      	blt.n	8004688 <dcd_edpt_stall+0xa4>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	f041 6102 	orr.w	r1, r1, #136314880	; 0x8200000
 8004666:	6011      	str	r1, [r2, #0]
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8004668:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800466c:	6911      	ldr	r1, [r2, #16]
 800466e:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8004672:	6113      	str	r3, [r2, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8004674:	6913      	ldr	r3, [r2, #16]
 8004676:	f043 0320 	orr.w	r3, r3, #32
 800467a:	6113      	str	r3, [r2, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 800467c:	6913      	ldr	r3, [r2, #16]
 800467e:	0698      	lsls	r0, r3, #26
 8004680:	d4fc      	bmi.n	800467c <dcd_edpt_stall+0x98>
 8004682:	4770      	bx	lr
 8004684:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <dcd_edpt_stall+0xdc>)
 8004686:	e7eb      	b.n	8004660 <dcd_edpt_stall+0x7c>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004688:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800468c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004690:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8004694:	6891      	ldr	r1, [r2, #8]
 8004696:	0649      	lsls	r1, r1, #25
 8004698:	d5fc      	bpl.n	8004694 <dcd_edpt_stall+0xb0>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 800469a:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800469e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80046a2:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80046a6:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80046aa:	6891      	ldr	r1, [r2, #8]
 80046ac:	0789      	lsls	r1, r1, #30
 80046ae:	d5fc      	bpl.n	80046aa <dcd_edpt_stall+0xc6>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80046b0:	2102      	movs	r1, #2
 80046b2:	6091      	str	r1, [r2, #8]
 80046b4:	e7d8      	b.n	8004668 <dcd_edpt_stall+0x84>
 80046b6:	bf00      	nop
 80046b8:	50000b00 	.word	0x50000b00
 80046bc:	50000800 	.word	0x50000800
 80046c0:	50000900 	.word	0x50000900

080046c4 <dcd_edpt_clear_stall>:
 80046c4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c8:	015b      	lsls	r3, r3, #5
  if(dir == TUSB_DIR_IN) {
 80046ca:	09ca      	lsrs	r2, r1, #7
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046cc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
  if(dir == TUSB_DIR_IN) {
 80046d0:	d10c      	bne.n	80046ec <dcd_edpt_clear_stall+0x28>
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046d2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80046d6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80046da:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046de:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80046e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046e6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  }
}
 80046ea:	4770      	bx	lr
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046ec:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80046f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80046f4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046f8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80046fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004700:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <dcd_int_handler>:
    }
  }
}

void dcd_int_handler(uint8_t rhport)
{
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 800470c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
{
 8004710:	b089      	sub	sp, #36	; 0x24
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8004712:	6966      	ldr	r6, [r4, #20]
 8004714:	69a3      	ldr	r3, [r4, #24]
{
 8004716:	9001      	str	r0, [sp, #4]
  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8004718:	401e      	ands	r6, r3

  if(int_status & USB_OTG_GINTSTS_USBRST)
 800471a:	04f1      	lsls	r1, r6, #19
 800471c:	f100 8120 	bmi.w	8004960 <dcd_int_handler+0x258>
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
    bus_reset(rhport);
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8004720:	04b2      	lsls	r2, r6, #18
 8004722:	d533      	bpl.n	800478c <dcd_int_handler+0x84>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8004724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8004728:	49af      	ldr	r1, [pc, #700]	; (80049e8 <dcd_int_handler+0x2e0>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 800472a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800472e:	615a      	str	r2, [r3, #20]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8004730:	6889      	ldr	r1, [r1, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8004732:	f011 0f06 	tst.w	r1, #6
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004736:	68d9      	ldr	r1, [r3, #12]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8004738:	d011      	beq.n	800475e <dcd_int_handler+0x56>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800473a:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800473e:	60d9      	str	r1, [r3, #12]
    if ( SystemCoreClock >= 32000000U )
 8004740:	4baa      	ldr	r3, [pc, #680]	; (80049ec <dcd_int_handler+0x2e4>)
 8004742:	49ab      	ldr	r1, [pc, #684]	; (80049f0 <dcd_int_handler+0x2e8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	428b      	cmp	r3, r1
 8004748:	f0c0 829f 	bcc.w	8004c8a <dcd_int_handler+0x582>
 800474c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8004750:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004754:	68cb      	ldr	r3, [r1, #12]
 8004756:	431a      	orrs	r2, r3
 8004758:	60ca      	str	r2, [r1, #12]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 800475a:	2200      	movs	r2, #0
 800475c:	e007      	b.n	800476e <dcd_int_handler+0x66>
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800475e:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8004762:	60d9      	str	r1, [r3, #12]
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 800476a:	2202      	movs	r2, #2
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 800476c:	60d9      	str	r1, [r3, #12]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800476e:	2300      	movs	r3, #0
 8004770:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004774:	9307      	str	r3, [sp, #28]
 8004776:	2101      	movs	r1, #1
 8004778:	9b01      	ldr	r3, [sp, #4]
  event.bus_reset.speed = speed;
 800477a:	f88d 2018 	strb.w	r2, [sp, #24]
  dcd_event_handler(&event, in_isr);
 800477e:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8004780:	f88d 3014 	strb.w	r3, [sp, #20]
 8004784:	f88d 1015 	strb.w	r1, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004788:	f7ff f840 	bl	800380c <dcd_event_handler>

    set_turnaround(usb_otg, speed);
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 800478c:	0533      	lsls	r3, r6, #20
 800478e:	f100 80bd 	bmi.w	800490c <dcd_int_handler+0x204>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8004792:	2e00      	cmp	r6, #0
 8004794:	f2c0 80d0 	blt.w	8004938 <dcd_int_handler+0x230>
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8004798:	0777      	lsls	r7, r6, #29
 800479a:	d508      	bpl.n	80047ae <dcd_int_handler+0xa6>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800479c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047a0:	685c      	ldr	r4, [r3, #4]

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 80047a2:	0765      	lsls	r5, r4, #29
 80047a4:	f100 8262 	bmi.w	8004c6c <dcd_int_handler+0x564>
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 80047a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047ac:	605c      	str	r4, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 80047ae:	0734      	lsls	r4, r6, #28
 80047b0:	f100 8095 	bmi.w	80048de <dcd_int_handler+0x1d6>

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 80047b4:	06f0      	lsls	r0, r6, #27
 80047b6:	d52d      	bpl.n	8004814 <dcd_int_handler+0x10c>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80047b8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
      _setup_packet[0] = (* rx_fifo);
 80047bc:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8004a0c <dcd_int_handler+0x304>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80047c0:	69bb      	ldr	r3, [r7, #24]
      _setup_packet[0] = (* rx_fifo);
 80047c2:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8004a10 <dcd_int_handler+0x308>
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	61bb      	str	r3, [r7, #24]
  uint32_t ctl_word = usb_otg->GRXSTSP;
 80047cc:	6a3c      	ldr	r4, [r7, #32]
  switch(pktsts) {
 80047ce:	f3c4 4343 	ubfx	r3, r4, #17, #4
 80047d2:	3b01      	subs	r3, #1
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 80047d4:	f004 050f 	and.w	r5, r4, #15
  switch(pktsts) {
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d85e      	bhi.n	800489a <dcd_int_handler+0x192>
 80047dc:	e8df f003 	tbb	[pc, r3]
 80047e0:	030c300c 	.word	0x030c300c
 80047e4:	235d      	.short	0x235d
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80047e6:	016d      	lsls	r5, r5, #5
 80047e8:	f105 45a0 	add.w	r5, r5, #1342177280	; 0x50000000
 80047ec:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	; 0xb10
 80047f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80047f4:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f013 0310 	ands.w	r3, r3, #16
 80047fe:	d1e5      	bne.n	80047cc <dcd_int_handler+0xc4>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8004800:	497c      	ldr	r1, [pc, #496]	; (80049f4 <dcd_int_handler+0x2ec>)
 8004802:	780a      	ldrb	r2, [r1, #0]
 8004804:	2a00      	cmp	r2, #0
 8004806:	d154      	bne.n	80048b2 <dcd_int_handler+0x1aa>

      // Disable flag
      _out_ep_closed = false;
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004808:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800480c:	6993      	ldr	r3, [r2, #24]
 800480e:	f043 0310 	orr.w	r3, r3, #16
 8004812:	6193      	str	r3, [r2, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8004814:	0330      	lsls	r0, r6, #12
 8004816:	f100 8163 	bmi.w	8004ae0 <dcd_int_handler+0x3d8>
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 800481a:	0370      	lsls	r0, r6, #13
 800481c:	f100 80fc 	bmi.w	8004a18 <dcd_int_handler+0x310>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8004820:	b009      	add	sp, #36	; 0x24
 8004822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _setup_packet[0] = (* rx_fifo);
 8004826:	f8db 3000 	ldr.w	r3, [fp]
 800482a:	f8ca 3000 	str.w	r3, [sl]
      _setup_packet[1] = (* rx_fifo);
 800482e:	f8db 3000 	ldr.w	r3, [fp]
 8004832:	f8ca 3004 	str.w	r3, [sl, #4]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f013 0310 	ands.w	r3, r3, #16
 800483c:	d1c6      	bne.n	80047cc <dcd_int_handler+0xc4>
 800483e:	e7df      	b.n	8004800 <dcd_int_handler+0xf8>
      if (xfer->ff)
 8004840:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80049fc <dcd_int_handler+0x2f4>
 8004844:	eb09 1345 	add.w	r3, r9, r5, lsl #5
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8004848:	f3c4 140a 	ubfx	r4, r4, #4, #11
      if (xfer->ff)
 800484c:	6858      	ldr	r0, [r3, #4]
 800484e:	ea4f 1845 	mov.w	r8, r5, lsl #5
 8004852:	2800      	cmp	r0, #0
 8004854:	f000 81bc 	beq.w	8004bd0 <dcd_int_handler+0x4c8>
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8004858:	4622      	mov	r2, r4
 800485a:	4659      	mov	r1, fp
 800485c:	f7fe fa08 	bl	8002c70 <tu_fifo_write_n_const_addr_full_words>
      if(bcnt < xfer->max_size) {
 8004860:	44c8      	add	r8, r9
 8004862:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004866:	42a3      	cmp	r3, r4
 8004868:	d9c6      	bls.n	80047f8 <dcd_int_handler+0xf0>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 800486a:	016b      	lsls	r3, r5, #5
 800486c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 8004870:	f8d3 2b10 	ldr.w	r2, [r3, #2832]	; 0xb10
 8004874:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	f8a8 3008 	strh.w	r3, [r8, #8]
        if(epnum == 0) {
 8004880:	2d00      	cmp	r5, #0
 8004882:	d1b9      	bne.n	80047f8 <dcd_int_handler+0xf0>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8004884:	4a5c      	ldr	r2, [pc, #368]	; (80049f8 <dcd_int_handler+0x2f0>)
 8004886:	8811      	ldrh	r1, [r2, #0]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8004888:	8015      	strh	r5, [r2, #0]
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 800488a:	1a5b      	subs	r3, r3, r1
 800488c:	f8a9 3008 	strh.w	r3, [r9, #8]
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f013 0310 	ands.w	r3, r3, #16
 8004896:	d199      	bne.n	80047cc <dcd_int_handler+0xc4>
 8004898:	e7b2      	b.n	8004800 <dcd_int_handler+0xf8>
      TU_BREAKPOINT();
 800489a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800489e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80048a2:	07dc      	lsls	r4, r3, #31
 80048a4:	d5a8      	bpl.n	80047f8 <dcd_int_handler+0xf0>
 80048a6:	be00      	bkpt	0x0000
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f013 0310 	ands.w	r3, r3, #16
 80048ae:	d18d      	bne.n	80047cc <dcd_int_handler+0xc4>
 80048b0:	e7a6      	b.n	8004800 <dcd_int_handler+0xf8>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 80048b2:	4852      	ldr	r0, [pc, #328]	; (80049fc <dcd_int_handler+0x2f4>)
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 80048b4:	8942      	ldrh	r2, [r0, #10]
 80048b6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80048b8:	42a2      	cmp	r2, r4
 80048ba:	bf38      	it	cc
 80048bc:	4622      	movcc	r2, r4
 80048be:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 80048c2:	f8b0 006a 	ldrh.w	r0, [r0, #106]	; 0x6a
 80048c6:	42a2      	cmp	r2, r4
 80048c8:	bf38      	it	cc
 80048ca:	4622      	movcc	r2, r4
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 80048cc:	4282      	cmp	r2, r0
 80048ce:	bf38      	it	cc
 80048d0:	4602      	movcc	r2, r0
 80048d2:	0892      	lsrs	r2, r2, #2
 80048d4:	0052      	lsls	r2, r2, #1
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 80048d6:	3217      	adds	r2, #23
 80048d8:	627a      	str	r2, [r7, #36]	; 0x24
      _out_ep_closed = false;
 80048da:	700b      	strb	r3, [r1, #0]
 80048dc:	e794      	b.n	8004808 <dcd_int_handler+0x100>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 80048de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048e2:	2208      	movs	r2, #8
 80048e4:	615a      	str	r2, [r3, #20]
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	f022 0208 	bic.w	r2, r2, #8
 80048ec:	619a      	str	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80048ee:	2300      	movs	r3, #0
 80048f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80048f4:	2203      	movs	r2, #3
 80048f6:	9307      	str	r3, [sp, #28]
  dcd_event_handler(&event, in_isr);
 80048f8:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80048fa:	9b01      	ldr	r3, [sp, #4]
 80048fc:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8004900:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004902:	f88d 2015 	strb.w	r2, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004906:	f7fe ff81 	bl	800380c <dcd_event_handler>
}
 800490a:	e753      	b.n	80047b4 <dcd_int_handler+0xac>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 800490c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004914:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004916:	2300      	movs	r3, #0
 8004918:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800491c:	2204      	movs	r2, #4
 800491e:	9307      	str	r3, [sp, #28]
  dcd_event_handler(&event, in_isr);
 8004920:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004922:	9b01      	ldr	r3, [sp, #4]
 8004924:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8004928:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800492a:	f88d 2015 	strb.w	r2, [sp, #21]
  dcd_event_handler(&event, in_isr);
 800492e:	f7fe ff6d 	bl	800380c <dcd_event_handler>
  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8004932:	2e00      	cmp	r6, #0
 8004934:	f6bf af30 	bge.w	8004798 <dcd_int_handler+0x90>
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8004938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800493c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004940:	615a      	str	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004942:	2300      	movs	r3, #0
 8004944:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004948:	2205      	movs	r2, #5
 800494a:	9307      	str	r3, [sp, #28]
  dcd_event_handler(&event, in_isr);
 800494c:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800494e:	9b01      	ldr	r3, [sp, #4]
 8004950:	f88d 3014 	strb.w	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8004954:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004956:	f88d 2015 	strb.w	r2, [sp, #21]
  dcd_event_handler(&event, in_isr);
 800495a:	f7fe ff57 	bl	800380c <dcd_event_handler>
}
 800495e:	e71b      	b.n	8004798 <dcd_int_handler+0x90>
  tu_memclr(xfer_status, sizeof(xfer_status));
 8004960:	4d26      	ldr	r5, [pc, #152]	; (80049fc <dcd_int_handler+0x2f4>)
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8004962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004966:	6163      	str	r3, [r4, #20]
  tu_memclr(xfer_status, sizeof(xfer_status));
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	2100      	movs	r1, #0
 800496c:	4628      	mov	r0, r5
 800496e:	f000 fb17 	bl	8004fa0 <memset>
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8004972:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <dcd_int_handler+0x2e0>)
  _out_ep_closed = false;
 8004974:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <dcd_int_handler+0x2ec>)
  _allocated_fifo_words_tx = 16;
 8004976:	4822      	ldr	r0, [pc, #136]	; (8004a00 <dcd_int_handler+0x2f8>)
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8004978:	f8df c098 	ldr.w	ip, [pc, #152]	; 8004a14 <dcd_int_handler+0x30c>
  _out_ep_closed = false;
 800497c:	2100      	movs	r1, #0
 800497e:	7019      	strb	r1, [r3, #0]
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8004980:	6813      	ldr	r3, [r2, #0]
 8004982:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004986:	6013      	str	r3, [r2, #0]
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004988:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <dcd_int_handler+0x2fc>)
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004990:	6019      	str	r1, [r3, #0]
 8004992:	6a19      	ldr	r1, [r3, #32]
 8004994:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004998:	6219      	str	r1, [r3, #32]
 800499a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800499c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 80049a0:	6419      	str	r1, [r3, #64]	; 0x40
 80049a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 80049a4:	2709      	movs	r7, #9
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049a6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80049aa:	f04f 1e01 	mov.w	lr, #65537	; 0x10001
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ae:	6619      	str	r1, [r3, #96]	; 0x60
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80049b0:	f8c2 e01c 	str.w	lr, [r2, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 80049b4:	6157      	str	r7, [r2, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 80049b6:	6117      	str	r7, [r2, #16]
  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 80049b8:	2237      	movs	r2, #55	; 0x37
 80049ba:	6262      	str	r2, [r4, #36]	; 0x24
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80049bc:	4912      	ldr	r1, [pc, #72]	; (8004a08 <dcd_int_handler+0x300>)
  _allocated_fifo_words_tx = 16;
 80049be:	2210      	movs	r2, #16
 80049c0:	8002      	strh	r2, [r0, #0]
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80049c2:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80049c6:	680a      	ldr	r2, [r1, #0]
 80049c8:	f022 0203 	bic.w	r2, r2, #3
 80049cc:	600a      	str	r2, [r1, #0]
  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80049d4:	611a      	str	r2, [r3, #16]
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 80049d6:	69a3      	ldr	r3, [r4, #24]
 80049d8:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80049dc:	61a3      	str	r3, [r4, #24]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	836b      	strh	r3, [r5, #26]
 80049e2:	816b      	strh	r3, [r5, #10]
}
 80049e4:	e69c      	b.n	8004720 <dcd_int_handler+0x18>
 80049e6:	bf00      	nop
 80049e8:	50000800 	.word	0x50000800
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	01e84800 	.word	0x01e84800
 80049f4:	20001afa 	.word	0x20001afa
 80049f8:	20001b04 	.word	0x20001b04
 80049fc:	20001b08 	.word	0x20001b08
 8004a00:	20001af8 	.word	0x20001af8
 8004a04:	50000b00 	.word	0x50000b00
 8004a08:	50000900 	.word	0x50000900
 8004a0c:	50001000 	.word	0x50001000
 8004a10:	20001afc 	.word	0x20001afc
 8004a14:	00100130 	.word	0x00100130
 8004a18:	4bb8      	ldr	r3, [pc, #736]	; (8004cfc <dcd_int_handler+0x5f4>)
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8004a1a:	f8df a308 	ldr.w	sl, [pc, #776]	; 8004d24 <dcd_int_handler+0x61c>
 8004a1e:	9302      	str	r3, [sp, #8]
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8004a20:	2601      	movs	r6, #1
 8004a22:	461f      	mov	r7, r3
 8004a24:	2500      	movs	r5, #0
    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8004a26:	f8da 2018 	ldr.w	r2, [sl, #24]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	fa03 f105 	lsl.w	r1, r3, r5
 8004a30:	4211      	tst	r1, r2
 8004a32:	b2e8      	uxtb	r0, r5
 8004a34:	d04c      	beq.n	8004ad0 <dcd_int_handler+0x3c8>
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 8004a36:	016c      	lsls	r4, r5, #5
 8004a38:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
 8004a3c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8004a40:	68a2      	ldr	r2, [r4, #8]
 8004a42:	07d1      	lsls	r1, r2, #31
 8004a44:	d539      	bpl.n	8004aba <dcd_int_handler+0x3b2>
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8004a46:	60a3      	str	r3, [r4, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8004a48:	bb25      	cbnz	r5, 8004a94 <dcd_int_handler+0x38c>
 8004a4a:	4bad      	ldr	r3, [pc, #692]	; (8004d00 <dcd_int_handler+0x5f8>)
 8004a4c:	885b      	ldrh	r3, [r3, #2]
 8004a4e:	b30b      	cbz	r3, 8004a94 <dcd_int_handler+0x38c>
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004a50:	9a02      	ldr	r2, [sp, #8]
    ep0_pending[dir] -= total_bytes;
 8004a52:	49ab      	ldr	r1, [pc, #684]	; (8004d00 <dcd_int_handler+0x5f8>)
 8004a54:	8b52      	ldrh	r2, [r2, #26]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf28      	it	cs
 8004a5a:	461a      	movcs	r2, r3
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	804b      	strh	r3, [r1, #2]
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8004a60:	4ba8      	ldr	r3, [pc, #672]	; (8004d04 <dcd_int_handler+0x5fc>)
 8004a62:	f442 2100 	orr.w	r1, r2, #524288	; 0x80000
 8004a66:	6119      	str	r1, [r3, #16]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8004a6e:	6019      	str	r1, [r3, #0]
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8004a76:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8004a7a:	f000 81a1 	beq.w	8004dc0 <dcd_int_handler+0x6b8>
    if(total_bytes != 0) {
 8004a7e:	b12a      	cbz	r2, 8004a8c <dcd_int_handler+0x384>
      dev->DIEPEMPMSK |= (1 << epnum);
 8004a80:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8004a8c:	68a3      	ldr	r3, [r4, #8]
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	d416      	bmi.n	8004ac0 <dcd_int_handler+0x3b8>
 8004a92:	e020      	b.n	8004ad6 <dcd_int_handler+0x3ce>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004a94:	2300      	movs	r3, #0
 8004a96:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	f88d 3014 	strb.w	r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8004aa0:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8004aa4:	8b3b      	ldrh	r3, [r7, #24]

  event.xfer_complete.ep_addr = ep_addr;
 8004aa6:	f88d 0018 	strb.w	r0, [sp, #24]
  event.xfer_complete.len     = xferred_bytes;
 8004aaa:	9307      	str	r3, [sp, #28]
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 8004aac:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004aae:	2307      	movs	r3, #7
  dcd_event_handler(&event, in_isr);
 8004ab0:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004ab2:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004ab6:	f7fe fea9 	bl	800380c <dcd_event_handler>
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	061a      	lsls	r2, r3, #24
 8004abe:	d507      	bpl.n	8004ad0 <dcd_int_handler+0x3c8>
 8004ac0:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	40aa      	lsls	r2, r5
 8004ac8:	421a      	tst	r2, r3
 8004aca:	9203      	str	r2, [sp, #12]
 8004acc:	f040 8107 	bne.w	8004cde <dcd_int_handler+0x5d6>
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8004ad0:	2e04      	cmp	r6, #4
 8004ad2:	f43f aea5 	beq.w	8004820 <dcd_int_handler+0x118>
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	3501      	adds	r5, #1
 8004ada:	b2f6      	uxtb	r6, r6
 8004adc:	3720      	adds	r7, #32
 8004ade:	e7a2      	b.n	8004a26 <dcd_int_handler+0x31e>
 8004ae0:	4b86      	ldr	r3, [pc, #536]	; (8004cfc <dcd_int_handler+0x5f4>)
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8004ae2:	f8df b240 	ldr.w	fp, [pc, #576]	; 8004d24 <dcd_int_handler+0x61c>
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8004ae6:	f8df a218 	ldr.w	sl, [pc, #536]	; 8004d00 <dcd_int_handler+0x5f8>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aea:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8004d28 <dcd_int_handler+0x620>
 8004aee:	9302      	str	r3, [sp, #8]
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8004af0:	2501      	movs	r5, #1
 8004af2:	4698      	mov	r8, r3
 8004af4:	2400      	movs	r4, #0
    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8004af6:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004afa:	f104 0310 	add.w	r3, r4, #16
 8004afe:	f04f 0c01 	mov.w	ip, #1
 8004b02:	fa0c f303 	lsl.w	r3, ip, r3
 8004b06:	420b      	tst	r3, r1
 8004b08:	b2e2      	uxtb	r2, r4
 8004b0a:	d058      	beq.n	8004bbe <dcd_int_handler+0x4b6>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8004b0c:	0167      	lsls	r7, r4, #5
 8004b0e:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
 8004b12:	f507 6730 	add.w	r7, r7, #2816	; 0xb00
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0719      	lsls	r1, r3, #28
 8004b1a:	f100 808f 	bmi.w	8004c3c <dcd_int_handler+0x534>
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	07db      	lsls	r3, r3, #31
 8004b22:	d54c      	bpl.n	8004bbe <dcd_int_handler+0x4b6>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8004b28:	bbbc      	cbnz	r4, 8004b9a <dcd_int_handler+0x492>
 8004b2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8004b2e:	b3a3      	cbz	r3, 8004b9a <dcd_int_handler+0x492>
 8004b30:	9a02      	ldr	r2, [sp, #8]
 8004b32:	8952      	ldrh	r2, [r2, #10]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	bf28      	it	cs
 8004b38:	461a      	movcs	r2, r3
    ep0_pending[dir] -= total_bytes;
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	f8aa 3000 	strh.w	r3, [sl]
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b44:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004b48:	f8c9 3010 	str.w	r3, [r9, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8004b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b56:	f8c9 3010 	str.w	r3, [r9, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8004b5a:	f8d9 3000 	ldr.w	r3, [r9]
 8004b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b62:	f8c9 3000 	str.w	r3, [r9]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004b66:	f8d9 3000 	ldr.w	r3, [r9]
 8004b6a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b72:	d127      	bne.n	8004bc4 <dcd_int_handler+0x4bc>
 8004b74:	9b02      	ldr	r3, [sp, #8]
 8004b76:	7b1b      	ldrb	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d123      	bne.n	8004bc4 <dcd_int_handler+0x4bc>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004b7c:	f8db 3008 	ldr.w	r3, [fp, #8]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8004b80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b84:	f8d9 3000 	ldr.w	r3, [r9]
 8004b88:	bf14      	ite	ne
 8004b8a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
 8004b8e:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c9 3000 	str.w	r3, [r9]
 8004b98:	e014      	b.n	8004bc4 <dcd_int_handler+0x4bc>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004ba0:	9b01      	ldr	r3, [sp, #4]
 8004ba2:	f88d 3014 	strb.w	r3, [sp, #20]
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8004ba6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  event.xfer_complete.len     = xferred_bytes;
 8004baa:	9307      	str	r3, [sp, #28]
  dcd_event_handler(&event, in_isr);
 8004bac:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004bae:	2307      	movs	r3, #7
  dcd_event_handler(&event, in_isr);
 8004bb0:	2101      	movs	r1, #1
  event.xfer_complete.ep_addr = ep_addr;
 8004bb2:	f88d 2018 	strb.w	r2, [sp, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8004bb6:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004bba:	f7fe fe27 	bl	800380c <dcd_event_handler>
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8004bbe:	2d04      	cmp	r5, #4
 8004bc0:	f43f ae2b 	beq.w	800481a <dcd_int_handler+0x112>
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	3401      	adds	r4, #1
 8004bc8:	b2ed      	uxtb	r5, r5
 8004bca:	f108 0820 	add.w	r8, r8, #32
 8004bce:	e792      	b.n	8004af6 <dcd_int_handler+0x3ee>
  for(uint16_t i = 0; i < full_words; i++) {
 8004bd0:	ea5f 0c94 	movs.w	ip, r4, lsr #2
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8004bd4:	f859 0008 	ldr.w	r0, [r9, r8]
  for(uint16_t i = 0; i < full_words; i++) {
 8004bd8:	d01b      	beq.n	8004c12 <dcd_int_handler+0x50a>
 8004bda:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004bde:	b28b      	uxth	r3, r1
 8004be0:	f100 0108 	add.w	r1, r0, #8
 8004be4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004be8:	1d03      	adds	r3, r0, #4
    uint32_t tmp = *rx_fifo;
 8004bea:	f8db 2000 	ldr.w	r2, [fp]
    dst[0] = tmp & 0x000000FF;
 8004bee:	f803 2c04 	strb.w	r2, [r3, #-4]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8004bf2:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8004bf6:	f803 ec03 	strb.w	lr, [r3, #-3]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8004bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    dst[3] = (tmp & 0xFF000000) >> 24;
 8004bfe:	0e12      	lsrs	r2, r2, #24
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8004c00:	f803 ec02 	strb.w	lr, [r3, #-2]
    dst[3] = (tmp & 0xFF000000) >> 24;
 8004c04:	f803 2c01 	strb.w	r2, [r3, #-1]
  for(uint16_t i = 0; i < full_words; i++) {
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4299      	cmp	r1, r3
 8004c0c:	d1ed      	bne.n	8004bea <dcd_int_handler+0x4e2>
    dst += 4;
 8004c0e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
  if(bytes_rem != 0) {
 8004c12:	f014 0203 	ands.w	r2, r4, #3
  uint8_t bytes_rem = len & 0x03;
 8004c16:	b2e1      	uxtb	r1, r4
  if(bytes_rem != 0) {
 8004c18:	d00a      	beq.n	8004c30 <dcd_int_handler+0x528>
    uint32_t tmp = *rx_fifo;
 8004c1a:	f8db 3000 	ldr.w	r3, [fp]
    dst[0] = tmp & 0x000000FF;
 8004c1e:	7003      	strb	r3, [r0, #0]
    if(bytes_rem > 1) {
 8004c20:	0789      	lsls	r1, r1, #30
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8004c22:	bf44      	itt	mi
 8004c24:	0a19      	lsrmi	r1, r3, #8
 8004c26:	7041      	strbmi	r1, [r0, #1]
    if(bytes_rem > 2) {
 8004c28:	2a03      	cmp	r2, #3
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8004c2a:	bf04      	itt	eq
 8004c2c:	0c1b      	lsreq	r3, r3, #16
 8004c2e:	7083      	strbeq	r3, [r0, #2]
        xfer->buffer += bcnt;
 8004c30:	f859 3008 	ldr.w	r3, [r9, r8]
 8004c34:	4423      	add	r3, r4
 8004c36:	f849 3008 	str.w	r3, [r9, r8]
 8004c3a:	e611      	b.n	8004860 <dcd_int_handler+0x158>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8004c3c:	9b01      	ldr	r3, [sp, #4]
 8004c3e:	f88d 3014 	strb.w	r3, [sp, #20]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <dcd_int_handler+0x600>)
 8004c44:	9203      	str	r2, [sp, #12]
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8004c46:	2108      	movs	r1, #8
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c4e:	ab08      	add	r3, sp, #32
 8004c50:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8ad 3016 	strh.w	r3, [sp, #22]
  dcd_event_handler(&event, in_isr);
 8004c5a:	4661      	mov	r1, ip
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8004c5c:	2306      	movs	r3, #6
  dcd_event_handler(&event, in_isr);
 8004c5e:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8004c60:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004c64:	f7fe fdd2 	bl	800380c <dcd_event_handler>
 8004c68:	9a03      	ldr	r2, [sp, #12]
}
 8004c6a:	e758      	b.n	8004b1e <dcd_int_handler+0x416>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004c72:	9a01      	ldr	r2, [sp, #4]
 8004c74:	9307      	str	r3, [sp, #28]
  dcd_event_handler(&event, in_isr);
 8004c76:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004c78:	2302      	movs	r3, #2
  dcd_event_handler(&event, in_isr);
 8004c7a:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8004c7c:	f88d 2014 	strb.w	r2, [sp, #20]
 8004c80:	f88d 3015 	strb.w	r3, [sp, #21]
  dcd_event_handler(&event, in_isr);
 8004c84:	f7fe fdc2 	bl	800380c <dcd_event_handler>
}
 8004c88:	e58e      	b.n	80047a8 <dcd_int_handler+0xa0>
    else if ( SystemCoreClock >= 27500000U )
 8004c8a:	4920      	ldr	r1, [pc, #128]	; (8004d0c <dcd_int_handler+0x604>)
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	f200 8094 	bhi.w	8004dba <dcd_int_handler+0x6b2>
    else if ( SystemCoreClock >= 24000000U )
 8004c92:	491f      	ldr	r1, [pc, #124]	; (8004d10 <dcd_int_handler+0x608>)
 8004c94:	428b      	cmp	r3, r1
 8004c96:	f4bf ad5b 	bcs.w	8004750 <dcd_int_handler+0x48>
    else if ( SystemCoreClock >= 21800000U )
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <dcd_int_handler+0x60c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f200 80a6 	bhi.w	8004dee <dcd_int_handler+0x6e6>
    else if ( SystemCoreClock >= 20000000U )
 8004ca2:	f5a2 12db 	sub.w	r2, r2, #1794048	; 0x1b6000
 8004ca6:	f5a2 52ba 	sub.w	r2, r2, #5952	; 0x1740
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f200 80a2 	bhi.w	8004df4 <dcd_int_handler+0x6ec>
    else if ( SystemCoreClock >= 18500000U )
 8004cb0:	f5a2 12b7 	sub.w	r2, r2, #1499136	; 0x16e000
 8004cb4:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f200 809e 	bhi.w	8004dfa <dcd_int_handler+0x6f2>
    else if ( SystemCoreClock >= 17200000U )
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <dcd_int_handler+0x610>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	f080 809d 	bcs.w	8004e00 <dcd_int_handler+0x6f8>
    else if ( SystemCoreClock >= 16000000U )
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <dcd_int_handler+0x614>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	f080 809c 	bcs.w	8004e06 <dcd_int_handler+0x6fe>
    else if ( SystemCoreClock >= 15000000U )
 8004cce:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <dcd_int_handler+0x618>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bf2c      	ite	cs
 8004cd4:	f44f 5260 	movcs.w	r2, #14336	; 0x3800
 8004cd8:	f44f 5270 	movcc.w	r2, #15360	; 0x3c00
 8004cdc:	e538      	b.n	8004750 <dcd_int_handler+0x48>
        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	f3c3 49c9 	ubfx	r9, r3, #19, #10
        for(uint16_t i = 0; i < remaining_packets; i++)
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	d059      	beq.n	8004d9e <dcd_int_handler+0x696>
 8004cea:	ea4f 3805 	mov.w	r8, r5, lsl #12
 8004cee:	f108 48a0 	add.w	r8, r8, #1342177280	; 0x50000000
 8004cf2:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8004cf6:	f04f 0b00 	mov.w	fp, #0
 8004cfa:	e020      	b.n	8004d3e <dcd_int_handler+0x636>
 8004cfc:	20001b08 	.word	0x20001b08
 8004d00:	20001b04 	.word	0x20001b04
 8004d04:	50000900 	.word	0x50000900
 8004d08:	20001afc 	.word	0x20001afc
 8004d0c:	01a39ddf 	.word	0x01a39ddf
 8004d10:	016e3600 	.word	0x016e3600
 8004d14:	014ca43f 	.word	0x014ca43f
 8004d18:	01067380 	.word	0x01067380
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	00e4e1c0 	.word	0x00e4e1c0
 8004d24:	50000800 	.word	0x50000800
 8004d28:	50000b00 	.word	0x50000b00
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	f7fd fe19 	bl	8002964 <tu_fifo_read_n_const_addr_full_words>
        for(uint16_t i = 0; i < remaining_packets; i++)
 8004d32:	f10b 0b01 	add.w	fp, fp, #1
 8004d36:	fa1f f38b 	uxth.w	r3, fp
 8004d3a:	4599      	cmp	r9, r3
 8004d3c:	d92f      	bls.n	8004d9e <dcd_int_handler+0x696>
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 8004d3e:	6922      	ldr	r2, [r4, #16]
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8004d40:	4932      	ldr	r1, [pc, #200]	; (8004e0c <dcd_int_handler+0x704>)
 8004d42:	69a3      	ldr	r3, [r4, #24]
 8004d44:	ea01 0383 	and.w	r3, r1, r3, lsl #2
 8004d48:	8b79      	ldrh	r1, [r7, #26]
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	428a      	cmp	r2, r1
 8004d4e:	bf28      	it	cs
 8004d50:	460a      	movcs	r2, r1
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d823      	bhi.n	8004d9e <dcd_int_handler+0x696>
          if (xfer->ff)
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1e7      	bne.n	8004d2c <dcd_int_handler+0x624>
  for(uint16_t i = 0; i < full_words; i++){
 8004d5c:	0890      	lsrs	r0, r2, #2
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8004d5e:	f8d7 c010 	ldr.w	ip, [r7, #16]
  for(uint16_t i = 0; i < full_words; i++){
 8004d62:	d042      	beq.n	8004dea <dcd_int_handler+0x6e2>
 8004d64:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8004d68:	4663      	mov	r3, ip
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8004d6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8004d6e:	f8c8 1000 	str.w	r1, [r8]
  for(uint16_t i = 0; i < full_words; i++){
 8004d72:	4298      	cmp	r0, r3
 8004d74:	d1f9      	bne.n	8004d6a <dcd_int_handler+0x662>
  if(bytes_rem){
 8004d76:	f012 0103 	ands.w	r1, r2, #3
  uint8_t bytes_rem = len & 0x03;
 8004d7a:	fa5f fe82 	uxtb.w	lr, r2
  if(bytes_rem){
 8004d7e:	d00b      	beq.n	8004d98 <dcd_int_handler+0x690>
    if(bytes_rem > 1){
 8004d80:	f01e 0f02 	tst.w	lr, #2
    tmp_word |= src[0];
 8004d84:	7803      	ldrb	r3, [r0, #0]
      tmp_word |= src[1] << 8;
 8004d86:	bf18      	it	ne
 8004d88:	8803      	ldrhne	r3, [r0, #0]
    if(bytes_rem > 2){
 8004d8a:	2903      	cmp	r1, #3
      tmp_word |= src[2] << 16;
 8004d8c:	bf04      	itt	eq
 8004d8e:	7881      	ldrbeq	r1, [r0, #2]
 8004d90:	ea43 4301 	orreq.w	r3, r3, r1, lsl #16
    *tx_fifo = tmp_word;
 8004d94:	f8c8 3000 	str.w	r3, [r8]
            xfer->buffer += packet_size;
 8004d98:	4462      	add	r2, ip
 8004d9a:	613a      	str	r2, [r7, #16]
 8004d9c:	e7c9      	b.n	8004d32 <dcd_int_handler+0x62a>
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f47f ae93 	bne.w	8004ad0 <dcd_int_handler+0x3c8>
          dev->DIEPEMPMSK &= ~(1 << n);
 8004daa:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8004dae:	9a03      	ldr	r2, [sp, #12]
 8004db0:	ea23 0302 	bic.w	r3, r3, r2
 8004db4:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8004db8:	e68a      	b.n	8004ad0 <dcd_int_handler+0x3c8>
 8004dba:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004dbe:	e4c7      	b.n	8004750 <dcd_int_handler+0x48>
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8004dc0:	9902      	ldr	r1, [sp, #8]
 8004dc2:	7f09      	ldrb	r1, [r1, #28]
 8004dc4:	2901      	cmp	r1, #1
 8004dc6:	f47f ae5a 	bne.w	8004a7e <dcd_int_handler+0x376>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8004dca:	f8da 1008 	ldr.w	r1, [sl, #8]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8004dce:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	bf14      	ite	ne
 8004dd6:	f04f 5080 	movne.w	r0, #268435456	; 0x10000000
 8004dda:	f04f 5000 	moveq.w	r0, #536870912	; 0x20000000
 8004dde:	4301      	orrs	r1, r0
 8004de0:	6019      	str	r1, [r3, #0]
    if(total_bytes != 0) {
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	f43f ae52 	beq.w	8004a8c <dcd_int_handler+0x384>
 8004de8:	e64a      	b.n	8004a80 <dcd_int_handler+0x378>
  for(uint16_t i = 0; i < full_words; i++){
 8004dea:	4660      	mov	r0, ip
 8004dec:	e7c3      	b.n	8004d76 <dcd_int_handler+0x66e>
 8004dee:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8004df2:	e4ad      	b.n	8004750 <dcd_int_handler+0x48>
 8004df4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004df8:	e4aa      	b.n	8004750 <dcd_int_handler+0x48>
 8004dfa:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004dfe:	e4a7      	b.n	8004750 <dcd_int_handler+0x48>
 8004e00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004e04:	e4a4      	b.n	8004750 <dcd_int_handler+0x48>
 8004e06:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8004e0a:	e4a1      	b.n	8004750 <dcd_int_handler+0x48>
 8004e0c:	0003fffc 	.word	0x0003fffc

08004e10 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 8004e10:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fe f892 	bl	8002f3c <tud_init>
 8004e18:	b100      	cbz	r0, 8004e1c <tusb_init+0xc>
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
 8004e1a:	bd08      	pop	{r3, pc}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8004e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e20:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8004e24:	07db      	lsls	r3, r3, #31
 8004e26:	d5f8      	bpl.n	8004e1a <tusb_init+0xa>
 8004e28:	be00      	bkpt	0x0000
}
 8004e2a:	bd08      	pop	{r3, pc}

08004e2c <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8004e2c:	7803      	ldrb	r3, [r0, #0]
{
 8004e2e:	4602      	mov	r2, r0
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8004e30:	f013 0001 	ands.w	r0, r3, #1
 8004e34:	d10f      	bne.n	8004e56 <tu_edpt_claim+0x2a>
 8004e36:	7813      	ldrb	r3, [r2, #0]
 8004e38:	0759      	lsls	r1, r3, #29
 8004e3a:	d40b      	bmi.n	8004e54 <tu_edpt_claim+0x28>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8004e3c:	7813      	ldrb	r3, [r2, #0]
 8004e3e:	f013 0001 	ands.w	r0, r3, #1
 8004e42:	d108      	bne.n	8004e56 <tu_edpt_claim+0x2a>
 8004e44:	7813      	ldrb	r3, [r2, #0]
 8004e46:	075b      	lsls	r3, r3, #29
 8004e48:	d407      	bmi.n	8004e5a <tu_edpt_claim+0x2e>
  if (available)
  {
    ep_state->claimed = 1;
 8004e4a:	7813      	ldrb	r3, [r2, #0]
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	2001      	movs	r0, #1
 8004e52:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
 8004e54:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8004e56:	2000      	movs	r0, #0
 8004e58:	4770      	bx	lr
 8004e5a:	4770      	bx	lr

08004e5c <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8004e5c:	7803      	ldrb	r3, [r0, #0]
 8004e5e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8004e62:	075b      	lsls	r3, r3, #29
 8004e64:	d508      	bpl.n	8004e78 <tu_edpt_release+0x1c>
 8004e66:	7803      	ldrb	r3, [r0, #0]
 8004e68:	f013 0101 	ands.w	r1, r3, #1
  if (ret)
  {
    ep_state->claimed = 0;
 8004e6c:	bf05      	ittet	eq
 8004e6e:	7803      	ldrbeq	r3, [r0, #0]
 8004e70:	f361 0382 	bfieq	r3, r1, #2, #1
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8004e74:	2200      	movne	r2, #0
    ep_state->claimed = 0;
 8004e76:	7003      	strbeq	r3, [r0, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4770      	bx	lr

08004e7c <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8004e7c:	78c3      	ldrb	r3, [r0, #3]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004e7e:	8882      	ldrh	r2, [r0, #4]
 8004e80:	f003 0003 	and.w	r0, r3, #3
 8004e84:	2802      	cmp	r0, #2
 8004e86:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004e8a:	d005      	beq.n	8004e98 <tu_edpt_validate+0x1c>
 8004e8c:	2803      	cmp	r0, #3
 8004e8e:	d01b      	beq.n	8004ec8 <tu_edpt_validate+0x4c>
 8004e90:	2801      	cmp	r0, #1
 8004e92:	d007      	beq.n	8004ea4 <tu_edpt_validate+0x28>
 8004e94:	2000      	movs	r0, #0
 8004e96:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8004e98:	2902      	cmp	r1, #2
 8004e9a:	d01e      	beq.n	8004eda <tu_edpt_validate+0x5e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8004e9c:	2a40      	cmp	r2, #64	; 0x40
 8004e9e:	d809      	bhi.n	8004eb4 <tu_edpt_validate+0x38>
    break;

    default: return false;
  }

  return true;
 8004ea0:	2001      	movs	r0, #1
}
 8004ea2:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8004ea4:	2902      	cmp	r1, #2
 8004ea6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004eaa:	bf08      	it	eq
 8004eac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d2f6      	bcs.n	8004ea2 <tu_edpt_validate+0x26>
      TU_ASSERT(max_packet_size <= spec_size);
 8004eb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004eb8:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8004ebc:	f010 0001 	ands.w	r0, r0, #1
 8004ec0:	d0ef      	beq.n	8004ea2 <tu_edpt_validate+0x26>
 8004ec2:	be00      	bkpt	0x0000
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8004ec8:	2902      	cmp	r1, #2
 8004eca:	bf0c      	ite	eq
 8004ecc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ed0:	2340      	movne	r3, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d3ee      	bcc.n	8004eb4 <tu_edpt_validate+0x38>
  return true;
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	e7e3      	b.n	8004ea2 <tu_edpt_validate+0x26>
        TU_ASSERT(max_packet_size == 512);
 8004eda:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004ede:	d0df      	beq.n	8004ea0 <tu_edpt_validate+0x24>
 8004ee0:	e7e8      	b.n	8004eb4 <tu_edpt_validate+0x38>
 8004ee2:	bf00      	nop

08004ee4 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8004ee4:	440a      	add	r2, r1

  while( p_desc < desc_end )
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	d226      	bcs.n	8004f38 <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8004eea:	f891 c001 	ldrb.w	ip, [r1, #1]
 8004eee:	f1bc 0f05 	cmp.w	ip, #5
 8004ef2:	d005      	beq.n	8004f00 <tu_edpt_bind_driver+0x1c>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004ef4:	f891 c000 	ldrb.w	ip, [r1]
 8004ef8:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8004efa:	428a      	cmp	r2, r1
 8004efc:	d8f5      	bhi.n	8004eea <tu_edpt_bind_driver+0x6>
 8004efe:	4770      	bx	lr
{
 8004f00:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8004f02:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8004f06:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
 8004f0a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8004f0e:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8004f12:	f80e 300c 	strb.w	r3, [lr, ip]
 8004f16:	f891 c000 	ldrb.w	ip, [r1]
 8004f1a:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8004f1c:	428a      	cmp	r2, r1
 8004f1e:	d909      	bls.n	8004f34 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8004f20:	f891 c001 	ldrb.w	ip, [r1, #1]
 8004f24:	f1bc 0f05 	cmp.w	ip, #5
 8004f28:	d0eb      	beq.n	8004f02 <tu_edpt_bind_driver+0x1e>
 8004f2a:	f891 c000 	ldrb.w	ip, [r1]
 8004f2e:	4461      	add	r1, ip
  while( p_desc < desc_end )
 8004f30:	428a      	cmp	r2, r1
 8004f32:	d8f5      	bhi.n	8004f20 <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8004f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4d0d      	ldr	r5, [pc, #52]	; (8004f74 <__libc_init_array+0x38>)
 8004f40:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	2600      	movs	r6, #0
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	4d0b      	ldr	r5, [pc, #44]	; (8004f7c <__libc_init_array+0x40>)
 8004f4e:	4c0c      	ldr	r4, [pc, #48]	; (8004f80 <__libc_init_array+0x44>)
 8004f50:	f000 f82e 	bl	8004fb0 <_init>
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	2600      	movs	r6, #0
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	08005218 	.word	0x08005218
 8004f78:	08005218 	.word	0x08005218
 8004f7c:	08005218 	.word	0x08005218
 8004f80:	0800521c 	.word	0x0800521c

08004f84 <memcpy>:
 8004f84:	440a      	add	r2, r1
 8004f86:	4291      	cmp	r1, r2
 8004f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f8c:	d100      	bne.n	8004f90 <memcpy+0xc>
 8004f8e:	4770      	bx	lr
 8004f90:	b510      	push	{r4, lr}
 8004f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	d1f9      	bne.n	8004f92 <memcpy+0xe>
 8004f9e:	bd10      	pop	{r4, pc}

08004fa0 <memset>:
 8004fa0:	4402      	add	r2, r0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d100      	bne.n	8004faa <memset+0xa>
 8004fa8:	4770      	bx	lr
 8004faa:	f803 1b01 	strb.w	r1, [r3], #1
 8004fae:	e7f9      	b.n	8004fa4 <memset+0x4>

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
