
TinyUSB_UAC_CDC_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000870c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008afc  08008afc  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b04  08008b04  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08008b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  20000044  08008b50  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  08008b50  00021b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f38  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ab  00000000  00000000  00033fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00037358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc4  00000000  00000000  00038ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117df  00000000  00000000  00051cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099389  00000000  00000000  00063493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc81c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000fc86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000044 	.word	0x20000044
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800888c 	.word	0x0800888c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000048 	.word	0x20000048
 80001d4:	0800888c 	.word	0x0800888c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f003 fbdf 	bl	8003cb4 <tud_cdc_n_connected>
 80004f6:	4603      	mov	r3, r0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	bd80      	pop	{r7, pc}

080004fc <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f003 fc17 	bl	8003d34 <tud_cdc_n_available>
 8000506:	4603      	mov	r3, r0
}
 8000508:	4618      	mov	r0, r3
 800050a:	bd80      	pop	{r7, pc}

0800050c <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000516:	683a      	ldr	r2, [r7, #0]
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	2000      	movs	r0, #0
 800051c:	f003 fc22 	bl	8003d64 <tud_cdc_n_read>
 8000520:	4603      	mov	r3, r0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	2000      	movs	r0, #0
 800053a:	f003 fc37 	bl	8003dac <tud_cdc_n_write>
 800053e:	4603      	mov	r3, r0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800054c:	2000      	movs	r0, #0
 800054e:	f003 fc59 	bl	8003e04 <tud_cdc_n_write_flush>
 8000552:	4603      	mov	r3, r0
}
 8000554:	4618      	mov	r0, r3
 8000556:	bd80      	pop	{r7, pc}

08000558 <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 800055c:	2000      	movs	r0, #0
 800055e:	f003 fccd 	bl	8003efc <tud_cdc_n_write_available>
 8000562:	4603      	mov	r3, r0
}
 8000564:	4618      	mov	r0, r3
 8000566:	bd80      	pop	{r7, pc}

08000568 <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	461a      	mov	r2, r3
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	2000      	movs	r0, #0
 800057c:	f002 fa22 	bl	80029c4 <tud_audio_n_read>
 8000580:	4603      	mov	r3, r0
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	460b      	mov	r3, r1
 8000594:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 8000596:	887b      	ldrh	r3, [r7, #2]
 8000598:	461a      	mov	r2, r3
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	2000      	movs	r0, #0
 800059e:	f002 fab3 	bl	8002b08 <tud_audio_n_write>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <tud_mount_cb+0x18>)
 80005b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004

080005c8 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <tud_umount_cb+0x14>)
 80005ce:	22fa      	movs	r2, #250	; 0xfa
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000004 	.word	0x20000004

080005e0 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <tud_suspend_cb+0x20>)
 80005ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000004 	.word	0x20000004

08000604 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <tud_resume_cb+0x18>)
 800060a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000004 	.word	0x20000004

08000620 <tud_audio_clock_get_request>:

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d00a      	beq.n	800064a <tud_audio_clock_get_request+0x2a>
 8000634:	4b44      	ldr	r3, [pc, #272]	; (8000748 <tud_audio_clock_get_request+0x128>)
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
 8000638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d000      	beq.n	8000646 <tud_audio_clock_get_request+0x26>
 8000644:	be00      	bkpt	0x0000
 8000646:	2300      	movs	r3, #0
 8000648:	e07a      	b.n	8000740 <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	78db      	ldrb	r3, [r3, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d161      	bne.n	8000716 <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d10b      	bne.n	8000672 <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 800065a:	4b3c      	ldr	r3, [pc, #240]	; (800074c <tud_audio_clock_get_request+0x12c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000660:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000664:	79f8      	ldrb	r0, [r7, #7]
 8000666:	2304      	movs	r3, #4
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f003 f80d 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 800066e:	4603      	mov	r3, r0
 8000670:	e066      	b.n	8000740 <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d161      	bne.n	800073e <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2232      	movs	r2, #50	; 0x32
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f8fa 	bl	800887c <memset>
 8000688:	2304      	movs	r3, #4
 800068a:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 800068c:	2300      	movs	r3, #0
 800068e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000692:	e033      	b.n	80006fc <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8000694:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000698:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <tud_audio_clock_get_request+0x130>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006a2:	4619      	mov	r1, r3
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	3350      	adds	r3, #80	; 0x50
 80006ae:	443b      	add	r3, r7
 80006b0:	3b44      	subs	r3, #68	; 0x44
 80006b2:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 80006b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <tud_audio_clock_get_request+0x130>)
 80006bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006c4:	4619      	mov	r1, r3
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3350      	adds	r3, #80	; 0x50
 80006d0:	443b      	add	r3, r7
 80006d2:	3b44      	subs	r3, #68	; 0x44
 80006d4:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 80006d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	3350      	adds	r3, #80	; 0x50
 80006e6:	443b      	add	r3, r7
 80006e8:	3b3c      	subs	r3, #60	; 0x3c
 80006ea:	2200      	movs	r2, #0
 80006ec:	805a      	strh	r2, [r3, #2]
 80006ee:	2200      	movs	r2, #0
 80006f0:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 80006f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80006f6:	3301      	adds	r3, #1
 80006f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80006fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9c7      	bls.n	8000694 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8000704:	f107 020c 	add.w	r2, r7, #12
 8000708:	79f8      	ldrb	r0, [r7, #7]
 800070a:	2332      	movs	r3, #50	; 0x32
 800070c:	6839      	ldr	r1, [r7, #0]
 800070e:	f002 ffbb 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 8000712:	4603      	mov	r3, r0
 8000714:	e014      	b.n	8000740 <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d10f      	bne.n	800073e <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10b      	bne.n	800073e <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8000726:	2301      	movs	r3, #1
 8000728:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 800072c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000730:	79f8      	ldrb	r0, [r7, #7]
 8000732:	2301      	movs	r3, #1
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	f002 ffa7 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 800073a:	4603      	mov	r3, r0
 800073c:	e000      	b.n	8000740 <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	e000edf0 	.word	0xe000edf0
 800074c:	20000000 	.word	0x20000000
 8000750:	0800890c 	.word	0x0800890c

08000754 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	795b      	ldrb	r3, [r3, #5]
 8000766:	2b04      	cmp	r3, #4
 8000768:	d00a      	beq.n	8000780 <tud_audio_clock_set_request+0x2c>
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <tud_audio_clock_set_request+0x6c>)
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b00      	cmp	r3, #0
 8000778:	d000      	beq.n	800077c <tud_audio_clock_set_request+0x28>
 800077a:	be00      	bkpt	0x0000
 800077c:	2300      	movs	r3, #0
 800077e:	e018      	b.n	80007b2 <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d001      	beq.n	800078c <tud_audio_clock_set_request+0x38>
 8000788:	2300      	movs	r3, #0
 800078a:	e012      	b.n	80007b2 <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d10d      	bne.n	80007b0 <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	88db      	ldrh	r3, [r3, #6]
 8000798:	b29b      	uxth	r3, r3
 800079a:	2b04      	cmp	r3, #4
 800079c:	d001      	beq.n	80007a2 <tud_audio_clock_set_request+0x4e>
 800079e:	2300      	movs	r3, #0
 80007a0:	e007      	b.n	80007b2 <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <tud_audio_clock_set_request+0x70>)
 80007aa:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e000      	b.n	80007b2 <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80007b0:	2300      	movs	r3, #0
	}
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000edf0 	.word	0xe000edf0
 80007c4:	20000000 	.word	0x20000000

080007c8 <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d00a      	beq.n	80007f2 <tud_audio_feature_unit_get_request+0x2a>
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <tud_audio_feature_unit_get_request+0xbc>)
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d000      	beq.n	80007ee <tud_audio_feature_unit_get_request+0x26>
 80007ec:	be00      	bkpt	0x0000
 80007ee:	2300      	movs	r3, #0
 80007f0:	e043      	b.n	800087a <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d112      	bne.n	8000820 <tud_audio_feature_unit_get_request+0x58>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	785b      	ldrb	r3, [r3, #1]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d10e      	bne.n	8000820 <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	461a      	mov	r2, r3
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <tud_audio_feature_unit_get_request+0xc0>)
 800080a:	569b      	ldrsb	r3, [r3, r2]
 800080c:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800080e:	f107 0218 	add.w	r2, r7, #24
 8000812:	79f8      	ldrb	r0, [r7, #7]
 8000814:	2301      	movs	r3, #1
 8000816:	6839      	ldr	r1, [r7, #0]
 8000818:	f002 ff36 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 800081c:	4603      	mov	r3, r0
 800081e:	e02c      	b.n	800087a <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d127      	bne.n	8000878 <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d10f      	bne.n	8000850 <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <tud_audio_feature_unit_get_request+0xc4>)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083a:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800083e:	f107 0210 	add.w	r2, r7, #16
 8000842:	79f8      	ldrb	r0, [r7, #7]
 8000844:	2308      	movs	r3, #8
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	f002 ff1e 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 800084c:	4603      	mov	r3, r0
 800084e:	e014      	b.n	800087a <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d10f      	bne.n	8000878 <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	461a      	mov	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <tud_audio_feature_unit_get_request+0xc8>)
 8000860:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000864:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8000866:	f107 020c 	add.w	r2, r7, #12
 800086a:	79f8      	ldrb	r0, [r7, #7]
 800086c:	2302      	movs	r3, #2
 800086e:	6839      	ldr	r1, [r7, #0]
 8000870:	f002 ff0a 	bl	8003688 <tud_audio_buffer_and_schedule_control_xfer>
 8000874:	4603      	mov	r3, r0
 8000876:	e000      	b.n	800087a <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	e000edf0 	.word	0xe000edf0
 8000888:	20000570 	.word	0x20000570
 800088c:	080088a4 	.word	0x080088a4
 8000890:	20000574 	.word	0x20000574

08000894 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d00a      	beq.n	80008c0 <tud_audio_feature_unit_set_request+0x2c>
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <tud_audio_feature_unit_set_request+0xa0>)
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d000      	beq.n	80008bc <tud_audio_feature_unit_set_request+0x28>
 80008ba:	be00      	bkpt	0x0000
 80008bc:	2300      	movs	r3, #0
 80008be:	e032      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d001      	beq.n	80008cc <tud_audio_feature_unit_set_request+0x38>
 80008c8:	2300      	movs	r3, #0
 80008ca:	e02c      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d110      	bne.n	80008f6 <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	88db      	ldrh	r3, [r3, #6]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d001      	beq.n	80008e2 <tud_audio_feature_unit_set_request+0x4e>
 80008de:	2300      	movs	r3, #0
 80008e0:	e021      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f993 1000 	ldrsb.w	r1, [r3]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <tud_audio_feature_unit_set_request+0xa4>)
 80008f0:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e017      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	78db      	ldrb	r3, [r3, #3]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d112      	bne.n	8000924 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	88db      	ldrh	r3, [r3, #6]
 8000902:	b29b      	uxth	r3, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d001      	beq.n	800090c <tud_audio_feature_unit_set_request+0x78>
 8000908:	2300      	movs	r3, #0
 800090a:	e00c      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	b219      	sxth	r1, r3
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <tud_audio_feature_unit_set_request+0xa8>)
 800091c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8000924:	2300      	movs	r3, #0
	}
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000edf0 	.word	0xe000edf0
 8000938:	20000570 	.word	0x20000570
 800093c:	20000574 	.word	0x20000574

08000940 <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	2b04      	cmp	r3, #4
 8000956:	d106      	bne.n	8000966 <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	68f9      	ldr	r1, [r7, #12]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe5f 	bl	8000620 <tud_audio_clock_get_request>
 8000962:	4603      	mov	r3, r0
 8000964:	e00b      	b.n	800097e <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d106      	bne.n	800097c <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	68f9      	ldr	r1, [r7, #12]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff28 	bl	80007c8 <tud_audio_feature_unit_get_request>
 8000978:	4603      	mov	r3, r0
 800097a:	e000      	b.n	800097e <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d107      	bne.n	80009b0 <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6979      	ldr	r1, [r7, #20]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff74 	bl	8000894 <tud_audio_feature_unit_set_request>
 80009ac:	4603      	mov	r3, r0
 80009ae:	e00c      	b.n	80009ca <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d107      	bne.n	80009c8 <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6979      	ldr	r1, [r7, #20]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fec8 	bl	8000754 <tud_audio_clock_set_request>
 80009c4:	4603      	mov	r3, r0
 80009c6:	e000      	b.n	80009ca <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80009e8:	897b      	ldrh	r3, [r7, #10]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	885b      	ldrh	r3, [r3, #2]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	81bb      	strh	r3, [r7, #12]
 80009f6:	89bb      	ldrh	r3, [r7, #12]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d106      	bne.n	8000a10 <tud_audio_set_itf_close_EP_cb+0x3c>
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d103      	bne.n	8000a10 <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <tud_audio_set_itf_close_EP_cb+0x4c>)
 8000a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a0e:	601a      	str	r2, [r3, #0]

	return true;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	817b      	strh	r3, [r7, #10]
 8000a38:	897b      	ldrh	r3, [r7, #10]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	885b      	ldrh	r3, [r3, #2]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	81bb      	strh	r3, [r7, #12]
 8000a46:	89bb      	ldrh	r3, [r7, #12]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d105      	bne.n	8000a5e <tud_audio_set_itf_cb+0x3a>
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <tud_audio_set_itf_cb+0x60>)
 8000a5a:	2219      	movs	r2, #25
 8000a5c:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <tud_audio_set_itf_cb+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8000a64:	7bbb      	ldrb	r3, [r7, #14]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d005      	beq.n	8000a76 <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <tud_audio_set_itf_cb+0x68>)
 8000a70:	5cd2      	ldrb	r2, [r2, r3]
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <tud_audio_set_itf_cb+0x6c>)
 8000a74:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000004 	.word	0x20000004
 8000a88:	20000e94 	.word	0x20000e94
 8000a8c:	0800891c 	.word	0x0800891c
 8000a90:	20000e98 	.word	0x20000e98

08000a94 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80bb      	strh	r3, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <tud_audio_rx_done_pre_read_cb+0x3c>)
 8000ab8:	f7ff fd56 	bl	8000568 <tud_audio_read>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <tud_audio_rx_done_pre_read_cb+0x40>)
 8000ac2:	601a      	str	r2, [r3, #0]
	return true;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000884 	.word	0x20000884
 8000ad4:	20000e94 	.word	0x20000e94

08000ad8 <tud_audio_tx_done_post_load_cb>:

bool tud_audio_tx_done_post_load_cb(uint8_t rhport, uint16_t n_bytes_copied, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	460b      	mov	r3, r1
 8000af0:	71bb      	strb	r3, [r7, #6]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	static uint16_t LastBytesCopied;
	int16_t *dst = (int16_t*)mic_buf;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <tud_audio_tx_done_post_load_cb+0x90>)
 8000af8:	60fb      	str	r3, [r7, #12]
	if (n_bytes_copied != 96 && n_bytes_copied != 0)
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	2b60      	cmp	r3, #96	; 0x60
 8000afe:	d007      	beq.n	8000b10 <tud_audio_tx_done_post_load_cb+0x38>
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <tud_audio_tx_done_post_load_cb+0x38>
	{
		LastBytesCopied = n_bytes_copied;
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <tud_audio_tx_done_post_load_cb+0x94>)
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	8013      	strh	r3, [r2, #0]
		return;
 8000b0c:	bf00      	nop
 8000b0e:	e026      	b.n	8000b5e <tud_audio_tx_done_post_load_cb+0x86>
	}
#if 1
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000b10:	2300      	movs	r3, #0
 8000b12:	817b      	strh	r3, [r7, #10]
 8000b14:	e01b      	b.n	8000b4e <tud_audio_tx_done_post_load_cb+0x76>
	{
		//	*dst ++ = (int16_t)(20000.0f * (float)sinf((float)(432.0f * 6.28f * AudioCounter++ / 48000)));
		*dst ++ = (int16_t)(-10000 + (AudioCounter+=500) % 20000);
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <tud_audio_tx_done_post_load_cb+0x98>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <tud_audio_tx_done_post_load_cb+0x98>)
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <tud_audio_tx_done_post_load_cb+0x9c>)
 8000b24:	fba2 1203 	umull	r1, r2, r2, r3
 8000b28:	0b92      	lsrs	r2, r2, #14
 8000b2a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000b2e:	fb01 f202 	mul.w	r2, r1, r2
 8000b32:	1a9a      	subs	r2, r3, r2
 8000b34:	b293      	uxth	r3, r2
 8000b36:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000b3a:	3b10      	subs	r3, #16
 8000b3c:	b299      	uxth	r1, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	1c9a      	adds	r2, r3, #2
 8000b42:	60fa      	str	r2, [r7, #12]
 8000b44:	b20a      	sxth	r2, r1
 8000b46:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8000b48:	897b      	ldrh	r3, [r7, #10]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	817b      	strh	r3, [r7, #10]
 8000b4e:	897b      	ldrh	r3, [r7, #10]
 8000b50:	2b2f      	cmp	r3, #47	; 0x2f
 8000b52:	d9e0      	bls.n	8000b16 <tud_audio_tx_done_post_load_cb+0x3e>
	}
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (2 * 48000 /1000));
 8000b54:	2160      	movs	r1, #96	; 0x60
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <tud_audio_tx_done_post_load_cb+0x90>)
 8000b58:	f7ff fd17 	bl	800058a <tud_audio_write>

#endif

	// This callback could be used to fill microphone data separately
	return true;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000057c 	.word	0x2000057c
 8000b6c:	20000ea0 	.word	0x20000ea0
 8000b70:	20000e9c 	.word	0x20000e9c
 8000b74:	d1b71759 	.word	0xd1b71759

08000b78 <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <cdc_task>:

void cdc_task(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b092      	sub	sp, #72	; 0x48
 8000bb0:	af00      	add	r7, sp, #0
	// connected() check for DTR bit
	// Most but not all terminal client set this when making connection
	if ( tud_cdc_connected() )
 8000bb2:	f7ff fc9b 	bl	80004ec <tud_cdc_connected>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d023      	beq.n	8000c04 <cdc_task+0x58>
	{
		//TODO: terminal shows message only after a key is pressed. Why?
		if (SendGreetings && tud_cdc_write_available())
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <cdc_task+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00d      	beq.n	8000be0 <cdc_task+0x34>
 8000bc4:	f7ff fcc8 	bl	8000558 <tud_cdc_write_available>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <cdc_task+0x34>
		{
			tud_cdc_write("\n\rHello!\n\r", 8);
 8000bce:	2108      	movs	r1, #8
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <cdc_task+0x64>)
 8000bd2:	f7ff fcaa 	bl	800052a <tud_cdc_write>
			tud_cdc_write_flush();
 8000bd6:	f7ff fcb7 	bl	8000548 <tud_cdc_write_flush>
			SendGreetings = 0;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <cdc_task+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
		}
		// connected and there are data available
		if ( tud_cdc_available() )
 8000be0:	f7ff fc8c 	bl	80004fc <tud_cdc_available>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00c      	beq.n	8000c04 <cdc_task+0x58>
		{
			// read data
			char buf[64];
			uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fc8c 	bl	800050c <tud_cdc_read>
 8000bf4:	6478      	str	r0, [r7, #68]	; 0x44

			// Echo back
			// Note: Skip echo by commenting out write() and write_flush()
			// for throughput test e.g
			//    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
			tud_cdc_write(buf, count);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fc95 	bl	800052a <tud_cdc_write>
			tud_cdc_write_flush();
 8000c00:	f7ff fca2 	bl	8000548 <tud_cdc_write_flush>
		}
	}
}
 8000c04:	bf00      	nop
 8000c06:	3748      	adds	r7, #72	; 0x48
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	080088ac 	.word	0x080088ac

08000c14 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
			spk_data_size = 0;
		}
	}
#endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <board_millis>:

uint32_t board_millis(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000c26:	f000 fb5f 	bl	80012e8 <HAL_GetTick>
 8000c2a:	4603      	mov	r3, r0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	static uint32_t start_ms = 0;
	static bool led_state = false;

	// Blink every interval ms
	if (board_millis() - start_ms < blink_interval_ms) return;
 8000c34:	f7ff fff5 	bl	8000c22 <board_millis>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <led_blinking_task+0x44>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1ad2      	subs	r2, r2, r3
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <led_blinking_task+0x48>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d312      	bcc.n	8000c6e <led_blinking_task+0x3e>
	start_ms += blink_interval_ms;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <led_blinking_task+0x44>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <led_blinking_task+0x48>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <led_blinking_task+0x44>)
 8000c54:	6013      	str	r3, [r2, #0]

	//  board_led_write(led_state);
	led_state = 1 - led_state;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <led_blinking_task+0x4c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	f1c3 0301 	rsb	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <led_blinking_task+0x4c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e000      	b.n	8000c70 <led_blinking_task+0x40>
	if (board_millis() - start_ms < blink_interval_ms) return;
 8000c6e:	bf00      	nop
}
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000ea4 	.word	0x20000ea4
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	20000ea8 	.word	0x20000ea8

08000c80 <DWT_Delay_Init>:
 * @brief Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	/* Disable TRC */

	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <DWT_Delay_Init+0x58>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <DWT_Delay_Init+0x58>)
 8000c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c8e:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <DWT_Delay_Init+0x58>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <DWT_Delay_Init+0x58>)
 8000c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c9a:	60d3      	str	r3, [r2, #12]
	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000ca2:	f023 0301 	bic.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
	/* Enable clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
	/* 3 NO OPERATION instructions */
	asm("NOP");
 8000cba:	bf00      	nop
	asm("NOP");
 8000cbc:	bf00      	nop
	asm("NOP");
 8000cbe:	bf00      	nop
	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <DWT_Delay_Init+0x5c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <DWT_Delay_Init+0x4c>
	{
		return 0; /*clock cycle counter started*/
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e000      	b.n	8000cce <DWT_Delay_Init+0x4e>
	}
	else
	{
		return 1; /*clock cycle counter not started*/
 8000ccc:	2301      	movs	r3, #1
	}
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000edf0 	.word	0xe000edf0
 8000cdc:	e0001000 	.word	0xe0001000

08000ce0 <DWT_Delay_us>:
	/**
	 * @brief  This function provides a delay (in microseconds)
	 * @param  microseconds: delay in microseconds
	 */
	__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
	{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
		uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <DWT_Delay_us+0x40>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

		/* Go to number of cycles for system */
		microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cee:	f001 fb5b 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <DWT_Delay_us+0x44>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	0c9b      	lsrs	r3, r3, #18
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	607b      	str	r3, [r7, #4]

		/* Delay till end */
		while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000d04:	bf00      	nop
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <DWT_Delay_us+0x40>)
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1ad2      	subs	r2, r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f8      	bcc.n	8000d06 <DWT_Delay_us+0x26>
	}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e0001000 	.word	0xe0001000
 8000d24:	431bde83 	.word	0x431bde83

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 fa75 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f853 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f000 f8f3 	bl	8000f20 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d3a:	f000 f8c3 	bl	8000ec4 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d3e:	f000 f8b5 	bl	8000eac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
		if(DWT_Delay_Init())
 8000d42:	f7ff ff9d 	bl	8000c80 <DWT_Delay_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <main+0x28>
		{
			Error_Handler(); /* Call Error Handler */
 8000d4c:	f000 f910 	bl	8000f70 <Error_Handler>
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <main+0xa8>)
 8000d58:	f000 fd8c 	bl	8001874 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f000 facf 	bl	8001300 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <main+0xa8>)
 8000d6a:	f000 fd83 	bl	8001874 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d6e:	2064      	movs	r0, #100	; 0x64
 8000d70:	f000 fac6 	bl	8001300 <HAL_Delay>
		TU_ASSERT(tusb_init());
 8000d74:	f007 fc0c 	bl	8008590 <tusb_init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f083 0301 	eor.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00a      	beq.n	8000d9a <main+0x72>
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <main+0xac>)
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d000      	beq.n	8000d96 <main+0x6e>
 8000d94:	be00      	bkpt	0x0000
 8000d96:	2300      	movs	r3, #0
 8000d98:	e015      	b.n	8000dc6 <main+0x9e>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f004 fb3a 	bl	8005418 <tud_task_ext>
}
 8000da4:	bf00      	nop
		{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			tud_task();
			audio_task();
 8000da6:	f7ff ff35 	bl	8000c14 <audio_task>
			MainLoopCounter++;  //used with debugger to check frequency of main loop
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <main+0xb0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <main+0xb0>)
 8000db2:	6013      	str	r3, [r2, #0]
			cdc_task();
 8000db4:	f7ff fefa 	bl	8000bac <cdc_task>
			led_blinking_task();
 8000db8:	f7ff ff3a 	bl	8000c30 <led_blinking_task>
			DWT_Delay_us(850);
 8000dbc:	f240 3052 	movw	r0, #850	; 0x352
 8000dc0:	f7ff ff8e 	bl	8000ce0 <DWT_Delay_us>
			tud_task();
 8000dc4:	e7e9      	b.n	8000d9a <main+0x72>
		}
  /* USER CODE END 3 */
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	e000edf0 	.word	0xe000edf0
 8000dd8:	2000056c 	.word	0x2000056c

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 fd46 	bl	800887c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <SystemClock_Config+0xc8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <SystemClock_Config+0xc8>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <SystemClock_Config+0xc8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e42:	2302      	movs	r3, #2
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e50:	23c0      	movs	r3, #192	; 0xc0
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fe3d 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e6c:	f000 f880 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 f89f 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e98:	f000 f86a 	bl	8000f70 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	; 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2043      	movs	r0, #67	; 0x43
 8000eb6:	f000 fb22 	bl	80014fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000eba:	2043      	movs	r0, #67	; 0x43
 8000ebc:	f000 fb3b 	bl	8001536 <HAL_NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	f000 fccd 	bl	80018a6 <HAL_PCD_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f82d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000060 	.word	0x20000060

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_GPIO_Init+0x4c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d132      	bne.n	8001054 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_PCD_MspInit+0x90>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_PCD_MspInit+0x90>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_PCD_MspInit+0x90>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800100a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800101c:	230a      	movs	r3, #10
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <HAL_PCD_MspInit+0x94>)
 8001028:	f000 faa0 	bl	800156c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_PCD_MspInit+0x90>)
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_PCD_MspInit+0x90>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	6353      	str	r3, [r2, #52]	; 0x34
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_PCD_MspInit+0x90>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_PCD_MspInit+0x90>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_PCD_MspInit+0x90>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f906 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80010bc:	2000      	movs	r0, #0
 80010be:	f007 f919 	bl	80082f4 <dcd_int_handler>
	return;
 80010c2:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SystemInit+0x28>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <SystemInit+0x28>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SystemInit+0x28>)
 80010de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return (uint8_t const *)&desc_device;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <tud_descriptor_device_cb+0x10>)
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	08008930 	.word	0x08008930

08001108 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	(void)index; // for multiple configurations
	return desc_configuration;
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <tud_descriptor_configuration_cb+0x18>)
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	08008944 	.word	0x08008944

08001124 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	80bb      	strh	r3, [r7, #4]
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <tud_descriptor_string_cb+0x28>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <tud_descriptor_string_cb+0x9c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <tud_descriptor_string_cb+0xa0>)
 8001144:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e027      	b.n	800119c <tud_descriptor_string_cb+0x78>
	}
	else
	{
		// Convert ASCII string into UTF-16

		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b06      	cmp	r3, #6
 8001150:	d901      	bls.n	8001156 <tud_descriptor_string_cb+0x32>
 8001152:	2300      	movs	r3, #0
 8001154:	e030      	b.n	80011b8 <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <tud_descriptor_string_cb+0x9c>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff f839 	bl	80001d8 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (chr_count > 31) chr_count = 31;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	2b1f      	cmp	r3, #31
 800116e:	d901      	bls.n	8001174 <tud_descriptor_string_cb+0x50>
 8001170:	231f      	movs	r3, #31
 8001172:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < chr_count; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	73bb      	strb	r3, [r7, #14]
 8001178:	e00c      	b.n	8001194 <tud_descriptor_string_cb+0x70>
		{
			_desc_str[1 + i] = str[i];
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	3301      	adds	r3, #1
 8001186:	b291      	uxth	r1, r2
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <tud_descriptor_string_cb+0xa0>)
 800118a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < chr_count; i++)
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	3301      	adds	r3, #1
 8001192:	73bb      	strb	r3, [r7, #14]
 8001194:	7bba      	ldrb	r2, [r7, #14]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3ee      	bcc.n	800117a <tud_descriptor_string_cb+0x56>
		}
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <tud_descriptor_string_cb+0xa0>)
 80011b4:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <tud_descriptor_string_cb+0xa0>)
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000010 	.word	0x20000010
 80011c4:	20000eac 	.word	0x20000eac

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ff69 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f007 fb0f 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fd95 	bl	8000d28 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800120c:	08008b0c 	.word	0x08008b0c
  ldr r2, =_sbss
 8001210:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001214:	20001b88 	.word	0x20001b88

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fe94 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f967 	bl	8001552 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	20000030 	.word	0x20000030
 80012bc:	2000002c 	.word	0x2000002c

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000030 	.word	0x20000030
 80012e4:	20000eec 	.word	0x20000eec

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000eec 	.word	0x20000eec

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000030 	.word	0x20000030

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e159      	b.n	800183c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 8148 	bne.w	8001836 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d130      	bne.n	8001620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d017      	beq.n	800165c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a2 	beq.w	8001836 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b54      	ldr	r3, [pc, #336]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d019      	beq.n	800176e <HAL_GPIO_Init+0x202>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2f4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0x1fe>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2f8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_Init+0x1fa>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x1f6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_GPIO_Init+0x300>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_Init+0x1f2>
 800175a:	2304      	movs	r3, #4
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x204>
 800175e:	2307      	movs	r3, #7
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x204>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x204>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x204>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x204>
 800176e:	2300      	movs	r3, #0
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_GPIO_Init+0x304>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x304>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_GPIO_Init+0x304>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_GPIO_Init+0x304>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_GPIO_Init+0x304>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_GPIO_Init+0x304>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_GPIO_Init+0x304>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HAL_GPIO_Init+0x304>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	f67f aea2 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40013c00 	.word	0x40013c00

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	041a      	lsls	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a8:	b08f      	sub	sp, #60	; 0x3c
 80018aa:	af0a      	add	r7, sp, #40	; 0x28
 80018ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e10f      	b.n	8001ad8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fb7a 	bl	8000fcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fdc3 	bl	8002482 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	687e      	ldr	r6, [r7, #4]
 8001904:	466d      	mov	r5, sp
 8001906:	f106 0410 	add.w	r4, r6, #16
 800190a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001916:	e885 0003 	stmia.w	r5, {r0, r1}
 800191a:	1d33      	adds	r3, r6, #4
 800191c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	f000 fd4e 	bl	80023c0 <USB_CoreInit>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0d0      	b.n	8001ad8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fdb1 	bl	80024a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e04a      	b.n	80019de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333d      	adds	r3, #61	; 0x3d
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	333c      	adds	r3, #60	; 0x3c
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	b298      	uxth	r0, r3
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3344      	adds	r3, #68	; 0x44
 8001984:	4602      	mov	r2, r0
 8001986:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	3348      	adds	r3, #72	; 0x48
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	334c      	adds	r3, #76	; 0x4c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3354      	adds	r3, #84	; 0x54
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3301      	adds	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3af      	bcc.n	8001948 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e044      	b.n	8001a78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3b5      	bcc.n	80019ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	687e      	ldr	r6, [r7, #4]
 8001a8a:	466d      	mov	r5, sp
 8001a8c:	f106 0410 	add.w	r4, r6, #16
 8001a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aa0:	1d33      	adds	r3, r6, #4
 8001aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f000 fd49 	bl	800253c <USB_DevInit>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e00d      	b.n	8001ad8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 ff14 	bl	80028fe <USB_DevDisconnect>

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e267      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e242      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6f      	ldr	r2, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6c      	ldr	r2, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a68      	ldr	r2, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fba6 	bl	80012e8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fba2 	bl	80012e8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e207      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fb92 	bl	80012e8 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb8e 	bl	80012e8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c7      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4937      	ldr	r1, [pc, #220]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb47 	bl	80012e8 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fb43 	bl	80012e8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a8      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4925      	ldr	r1, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fb26 	bl	80012e8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fb22 	bl	80012e8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e187      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d036      	beq.n	8001d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fb06 	bl	80012e8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fb02 	bl	80012e8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e167      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e01b      	b.n	8001d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff faef 	bl	80012e8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e00e      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff faeb 	bl	80012e8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d907      	bls.n	8001d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e150      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
 8001d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8097 	beq.w	8001e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a7c      	ldr	r2, [pc, #496]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b74      	ldr	r3, [pc, #464]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a73      	ldr	r2, [pc, #460]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff faab 	bl	80012e8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff faa7 	bl	80012e8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e10c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ea>
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a63      	ldr	r2, [pc, #396]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x30c>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a5e      	ldr	r2, [pc, #376]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a5b      	ldr	r2, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a54      	ldr	r2, [pc, #336]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fa6c 	bl	80012e8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff fa68 	bl	80012e8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0cb      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa56 	bl	80012e8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fa52 	bl	80012e8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0b5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a1 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d05c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d141      	bne.n	8001f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fa26 	bl	80012e8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fa22 	bl	80012e8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff f9fb 	bl	80012e8 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff f9f7 	bl	80012e8 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e05c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x416>
 8001f14:	e054      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f9e4 	bl	80012e8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f9e0 	bl	80012e8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e038      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d028      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f912 	bl	80012e8 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7ff f90e 	bl	80012e8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f872 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08008920 	.word	0x08008920
 8002194:	2000000c 	.word	0x2000000c
 8002198:	2000002c 	.word	0x2000002c

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a0:	b094      	sub	sp, #80	; 0x50
 80021a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	647b      	str	r3, [r7, #68]	; 0x44
 80021a8:	2300      	movs	r3, #0
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021ac:	2300      	movs	r3, #0
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b4:	4b79      	ldr	r3, [pc, #484]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d00d      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x40>
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	f200 80e1 	bhi.w	8002388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ce:	e0db      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b73      	ldr	r3, [pc, #460]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021d4:	e0db      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d6:	4b73      	ldr	r3, [pc, #460]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021da:	e0d8      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021dc:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	2200      	movs	r2, #0
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80021fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
 8002206:	2300      	movs	r3, #0
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
 800220a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800220e:	4622      	mov	r2, r4
 8002210:	462b      	mov	r3, r5
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	0159      	lsls	r1, r3, #5
 800221c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002220:	0150      	lsls	r0, r2, #5
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4621      	mov	r1, r4
 8002228:	1a51      	subs	r1, r2, r1
 800222a:	6139      	str	r1, [r7, #16]
 800222c:	4629      	mov	r1, r5
 800222e:	eb63 0301 	sbc.w	r3, r3, r1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002240:	4659      	mov	r1, fp
 8002242:	018b      	lsls	r3, r1, #6
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224a:	4651      	mov	r1, sl
 800224c:	018a      	lsls	r2, r1, #6
 800224e:	4651      	mov	r1, sl
 8002250:	ebb2 0801 	subs.w	r8, r2, r1
 8002254:	4659      	mov	r1, fp
 8002256:	eb63 0901 	sbc.w	r9, r3, r1
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800226e:	4690      	mov	r8, r2
 8002270:	4699      	mov	r9, r3
 8002272:	4623      	mov	r3, r4
 8002274:	eb18 0303 	adds.w	r3, r8, r3
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	462b      	mov	r3, r5
 800227c:	eb49 0303 	adc.w	r3, r9, r3
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800228e:	4629      	mov	r1, r5
 8002290:	024b      	lsls	r3, r1, #9
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002298:	4621      	mov	r1, r4
 800229a:	024a      	lsls	r2, r1, #9
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a2:	2200      	movs	r2, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ac:	f7fd ff9c 	bl	80001e8 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b8:	e058      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	099b      	lsrs	r3, r3, #6
 80022c0:	2200      	movs	r2, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	4611      	mov	r1, r2
 80022c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	f04f 0000 	mov.w	r0, #0
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	0159      	lsls	r1, r3, #5
 80022e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e6:	0150      	lsls	r0, r2, #5
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4641      	mov	r1, r8
 80022ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80022f2:	4649      	mov	r1, r9
 80022f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800230c:	ebb2 040a 	subs.w	r4, r2, sl
 8002310:	eb63 050b 	sbc.w	r5, r3, fp
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	00eb      	lsls	r3, r5, #3
 800231e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002322:	00e2      	lsls	r2, r4, #3
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4643      	mov	r3, r8
 800232a:	18e3      	adds	r3, r4, r3
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	464b      	mov	r3, r9
 8002330:	eb45 0303 	adc.w	r3, r5, r3
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002342:	4629      	mov	r1, r5
 8002344:	028b      	lsls	r3, r1, #10
 8002346:	4621      	mov	r1, r4
 8002348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800234c:	4621      	mov	r1, r4
 800234e:	028a      	lsls	r2, r1, #10
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002356:	2200      	movs	r2, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	61fa      	str	r2, [r7, #28]
 800235c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002360:	f7fd ff42 	bl	80001e8 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetSysClockFreq+0x200>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800237c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800237e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002386:	e002      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800238a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800238c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002390:	4618      	mov	r0, r3
 8002392:	3750      	adds	r7, #80	; 0x50
 8002394:	46bd      	mov	sp, r7
 8002396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	00f42400 	.word	0x00f42400
 80023a4:	007a1200 	.word	0x007a1200

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000000c 	.word	0x2000000c

080023c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80023c0:	b084      	sub	sp, #16
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	f107 001c 	add.w	r0, r7, #28
 80023ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d122      	bne.n	800241e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80023ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 faa2 	bl	800295c <USB_CoreReset>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e01a      	b.n	8002454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa96 	bl	800295c <USB_CoreReset>
 8002430:	4603      	mov	r3, r0
 8002432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
 8002446:	e005      	b.n	8002454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10b      	bne.n	8002472 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f043 0206 	orr.w	r2, r3, #6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247e:	b004      	add	sp, #16
 8002480:	4770      	bx	lr

08002482 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0201 	bic.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d115      	bne.n	80024f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7fe ff14 	bl	8001300 <HAL_Delay>
      ms++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa2e 	bl	8002940 <USB_GetMode>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d01e      	beq.n	8002528 <USB_SetCurrentMode+0x84>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b31      	cmp	r3, #49	; 0x31
 80024ee:	d9f0      	bls.n	80024d2 <USB_SetCurrentMode+0x2e>
 80024f0:	e01a      	b.n	8002528 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d115      	bne.n	8002524 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002504:	2001      	movs	r0, #1
 8002506:	f7fe fefb 	bl	8001300 <HAL_Delay>
      ms++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa15 	bl	8002940 <USB_GetMode>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <USB_SetCurrentMode+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b31      	cmp	r3, #49	; 0x31
 8002520:	d9f0      	bls.n	8002504 <USB_SetCurrentMode+0x60>
 8002522:	e001      	b.n	8002528 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e005      	b.n	8002534 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b32      	cmp	r3, #50	; 0x32
 800252c:	d101      	bne.n	8002532 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800253c:	b084      	sub	sp, #16
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800254a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e009      	b.n	8002570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	3340      	adds	r3, #64	; 0x40
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3301      	adds	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0e      	cmp	r3, #14
 8002574:	d9f2      	bls.n	800255c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11c      	bne.n	80025b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
 80025b4:	e00b      	b.n	80025ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80025d4:	461a      	mov	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e0:	4619      	mov	r1, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	461a      	mov	r2, r3
 80025ea:	680b      	ldr	r3, [r1, #0]
 80025ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10c      	bne.n	800260e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80025fa:	2100      	movs	r1, #0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f965 	bl	80028cc <USB_SetDevSpeed>
 8002602:	e008      	b.n	8002616 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002604:	2101      	movs	r1, #1
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f960 	bl	80028cc <USB_SetDevSpeed>
 800260c:	e003      	b.n	8002616 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800260e:	2103      	movs	r1, #3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f95b 	bl	80028cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002616:	2110      	movs	r1, #16
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8f3 	bl	8002804 <USB_FlushTxFifo>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f91f 	bl	800286c <USB_FlushRxFifo>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	461a      	mov	r2, r3
 8002640:	2300      	movs	r3, #0
 8002642:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264a:	461a      	mov	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e043      	b.n	80026ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002678:	d118      	bne.n	80026ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268c:	461a      	mov	r2, r3
 800268e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e013      	b.n	80026be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a2:	461a      	mov	r2, r3
 80026a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e008      	b.n	80026be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026dc:	461a      	mov	r2, r3
 80026de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3301      	adds	r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3b7      	bcc.n	8002662 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	e043      	b.n	8002780 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800270a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800270e:	d118      	bne.n	8002742 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002722:	461a      	mov	r2, r3
 8002724:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e013      	b.n	8002754 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e008      	b.n	8002754 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274e:	461a      	mov	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	2300      	movs	r3, #0
 8002764:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002772:	461a      	mov	r2, r3
 8002774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002778:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3301      	adds	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d3b7      	bcc.n	80026f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800279a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80027a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f043 0210 	orr.w	r2, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <USB_DevInit+0x2c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80027c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f043 0208 	orr.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80027da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027fc:	b004      	add	sp, #16
 80027fe:	4770      	bx	lr
 8002800:	803c3800 	.word	0x803c3800

08002804 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a13      	ldr	r2, [pc, #76]	; (8002868 <USB_FlushTxFifo+0x64>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e01b      	b.n	800285c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	daf2      	bge.n	8002812 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	019b      	lsls	r3, r3, #6
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <USB_FlushTxFifo+0x64>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e006      	b.n	800285c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d0f0      	beq.n	800283c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	00030d40 	.word	0x00030d40

0800286c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <USB_FlushRxFifo+0x5c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e018      	b.n	80028bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	daf2      	bge.n	8002878 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2210      	movs	r2, #16
 800289a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <USB_FlushRxFifo+0x5c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e006      	b.n	80028bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d0f0      	beq.n	800289c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	00030d40 	.word	0x00030d40

080028cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002918:	f023 0303 	bic.w	r3, r3, #3
 800291c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0301 	and.w	r3, r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <USB_CoreReset+0x64>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e01b      	b.n	80029b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	daf2      	bge.n	8002968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <USB_CoreReset+0x64>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e006      	b.n	80029b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d0f0      	beq.n	8002992 <USB_CoreReset+0x36>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	00030d40 	.word	0x00030d40

080029c4 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <tud_audio_n_read+0x2c>
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <tud_audio_n_read+0x54>)
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3304      	adds	r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <tud_audio_n_read+0x30>
 80029f0:	2300      	movs	r3, #0
 80029f2:	e00d      	b.n	8002a10 <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	3320      	adds	r3, #32
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <tud_audio_n_read+0x54>)
 8002a02:	4413      	add	r3, r2
 8002a04:	88ba      	ldrh	r2, [r7, #4]
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fb1e 	bl	800504a <tu_fifo_read_n>
 8002a0e:	4603      	mov	r3, r0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	2000184c 	.word	0x2000184c

08002a1c <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <audiod_rx_done_cb+0xe4>)
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <audiod_rx_done_cb+0x24>
 8002a3a:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <audiod_rx_done_cb+0xe8>)
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8002a40:	6838      	ldr	r0, [r7, #0]
 8002a42:	f001 f8d3 	bl	8003bec <audiod_get_audio_fct_idx>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	7c18      	ldrb	r0, [r3, #16]
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	f107 020e 	add.w	r2, r7, #14
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	f000 fee4 	bl	8003824 <audiod_get_AS_interface_index>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f083 0301 	eor.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <audiod_rx_done_cb+0x50>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e044      	b.n	8002af6 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <audiod_rx_done_cb+0xe4>)
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7b5c      	ldrb	r4, [r3, #13]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	7bba      	ldrb	r2, [r7, #14]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	88b9      	ldrh	r1, [r7, #4]
 8002a84:	79f8      	ldrb	r0, [r7, #7]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4623      	mov	r3, r4
 8002a8a:	f7fe f803 	bl	8000a94 <tud_audio_rx_done_pre_read_cb>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <audiod_rx_done_cb+0x82>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e02b      	b.n	8002af6 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7b59      	ldrb	r1, [r3, #13]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f103 0220 	add.w	r2, r3, #32
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	89db      	ldrh	r3, [r3, #14]
 8002aac:	79f8      	ldrb	r0, [r7, #7]
 8002aae:	f003 fe0f 	bl	80066d0 <usbd_edpt_xfer_fifo>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f083 0301 	eor.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <audiod_rx_done_cb+0xa6>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e019      	b.n	8002af6 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <audiod_rx_done_cb+0xe8>)
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7b5c      	ldrb	r4, [r3, #13]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	7bba      	ldrb	r2, [r7, #14]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	88b9      	ldrh	r1, [r7, #4]
 8002ada:	79f8      	ldrb	r0, [r7, #7]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4623      	mov	r3, r4
 8002ae0:	f3af 8000 	nop.w
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <audiod_rx_done_cb+0xd8>
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <audiod_rx_done_cb+0xda>
  }

  return true;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	08000a95 	.word	0x08000a95
 8002b04:	00000000 	.word	0x00000000

08002b08 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <tud_audio_n_write+0x2c>
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	490f      	ldr	r1, [pc, #60]	; (8002b60 <tud_audio_n_write+0x58>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <tud_audio_n_write+0x30>
 8002b34:	2300      	movs	r3, #0
 8002b36:	e00e      	b.n	8002b56 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	3328      	adds	r3, #40	; 0x28
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <tud_audio_n_write+0x58>)
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	88ba      	ldrh	r2, [r7, #4]
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fae2 	bl	8005118 <tu_fifo_write_n>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000184c 	.word	0x2000184c

08002b64 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8002b70:	6838      	ldr	r0, [r7, #0]
 8002b72:	f001 f83b 	bl	8003bec <audiod_get_audio_fct_idx>
 8002b76:	4603      	mov	r3, r0
 8002b78:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	7b18      	ldrb	r0, [r3, #12]
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	f107 020f 	add.w	r2, r7, #15
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	f000 fe4c 	bl	8003824 <audiod_get_AS_interface_index>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <audiod_tx_done_cb+0x38>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e05b      	b.n	8002c54 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <audiod_tx_done_cb+0x4a>
 8002baa:	2300      	movs	r3, #0
 8002bac:	e052      	b.n	8002c54 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <audiod_tx_done_cb+0xf8>)
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <audiod_tx_done_cb+0x76>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	7a1a      	ldrb	r2, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	7bf9      	ldrb	r1, [r7, #15]
 8002bbe:	440b      	add	r3, r1
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	7df9      	ldrb	r1, [r7, #23]
 8002bc4:	79f8      	ldrb	r0, [r7, #7]
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <audiod_tx_done_cb+0x76>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e03c      	b.n	8002c54 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	332c      	adds	r3, #44	; 0x2c
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 f962 	bl	8004ea8 <tu_fifo_count>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	895b      	ldrh	r3, [r3, #10]
 8002bec:	827a      	strh	r2, [r7, #18]
 8002bee:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002bf0:	8a7a      	ldrh	r2, [r7, #18]
 8002bf2:	8a3b      	ldrh	r3, [r7, #16]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf28      	it	cs
 8002bf8:	4613      	movcs	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7a19      	ldrb	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002c08:	8abb      	ldrh	r3, [r7, #20]
 8002c0a:	79f8      	ldrb	r0, [r7, #7]
 8002c0c:	f003 fd60 	bl	80066d0 <usbd_edpt_xfer_fifo>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <audiod_tx_done_cb+0xbc>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e019      	b.n	8002c54 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <audiod_tx_done_cb+0xfc>)
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <audiod_tx_done_cb+0xee>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7a1c      	ldrb	r4, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	7dfa      	ldrb	r2, [r7, #23]
 8002c36:	8ab9      	ldrh	r1, [r7, #20]
 8002c38:	79f8      	ldrb	r0, [r7, #7]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	f7fd ff4b 	bl	8000ad8 <tud_audio_tx_done_post_load_cb>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <audiod_tx_done_cb+0xee>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <audiod_tx_done_cb+0xf0>

  return true;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	00000000 	.word	0x00000000
 8002c60:	08000ad9 	.word	0x08000ad9

08002c64 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8002c6a:	2238      	movs	r2, #56	; 0x38
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4824      	ldr	r0, [pc, #144]	; (8002d00 <audiod_init+0x9c>)
 8002c70:	f005 fe04 	bl	800887c <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	e039      	b.n	8002cee <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <audiod_init+0x9c>)
 8002c86:	4413      	add	r3, r2
 8002c88:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <audiod_init+0xa0>)
 8002c94:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	761a      	strb	r2, [r3, #24]
        break;
 8002c9c:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <audiod_init+0xa4>)
 8002ca8:	61da      	str	r2, [r3, #28]
        break;
 8002caa:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8002cb8:	2301      	movs	r3, #1
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f44f 7242 	mov.w	r2, #776	; 0x308
 8002cc2:	4912      	ldr	r1, [pc, #72]	; (8002d0c <audiod_init+0xa8>)
 8002cc4:	f001 fc5e 	bl	8004584 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 8002cc8:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f103 0020 	add.w	r0, r3, #32
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8002ce0:	490b      	ldr	r1, [pc, #44]	; (8002d10 <audiod_init+0xac>)
 8002ce2:	f001 fc4f 	bl	8004584 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 8002ce6:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	3301      	adds	r3, #1
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0c2      	beq.n	8002c7a <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000184c 	.word	0x2000184c
 8002d04:	20001808 	.word	0x20001808
 8002d08:	20001848 	.word	0x20001848
 8002d0c:	20000ef0 	.word	0x20000ef0
 8002d10:	200011f8 	.word	0x200011f8

08002d14 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e019      	b.n	8002d58 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <audiod_reset+0x54>)
 8002d30:	4413      	add	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8002d34:	2214      	movs	r2, #20
 8002d36:	2100      	movs	r1, #0
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f005 fd9f 	bl	800887c <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	332c      	adds	r3, #44	; 0x2c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fa0c 	bl	8005160 <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 fa07 	bl	8005160 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0e2      	beq.n	8002d24 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000184c 	.word	0x2000184c

08002d6c <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	795b      	ldrb	r3, [r3, #5]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d103      	bne.n	8002d8c <audiod_open+0x20>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d001      	beq.n	8002d90 <audiod_open+0x24>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e064      	b.n	8002e5a <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	79db      	ldrb	r3, [r3, #7]
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d001      	beq.n	8002d9c <audiod_open+0x30>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e05e      	b.n	8002e5a <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 8002da4:	2300      	movs	r3, #0
 8002da6:	e058      	b.n	8002e5a <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	78db      	ldrb	r3, [r3, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <audiod_open+0x48>
 8002db0:	2300      	movs	r3, #0
 8002db2:	e052      	b.n	8002e5a <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e030      	b.n	8002e1c <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	492a      	ldr	r1, [pc, #168]	; (8002e68 <audiod_open+0xfc>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d122      	bne.n	8002e16 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	4925      	ldr	r1, [pc, #148]	; (8002e68 <audiod_open+0xfc>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3304      	adds	r3, #4
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	4920      	ldr	r1, [pc, #128]	; (8002e68 <audiod_open+0xfc>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	79fa      	ldrb	r2, [r7, #7]
 8002df4:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d113      	bne.n	8002e24 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <audiod_open+0xfc>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3312      	adds	r3, #18
 8002e0c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002e10:	801a      	strh	r2, [r3, #0]
          break;
 8002e12:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 8002e14:	e006      	b.n	8002e24 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0cb      	beq.n	8002dba <audiod_open+0x4e>
 8002e22:	e000      	b.n	8002e26 <audiod_open+0xba>
      break;
 8002e24:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <audiod_open+0xd6>
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <audiod_open+0x100>)
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d000      	beq.n	8002e3e <audiod_open+0xd2>
 8002e3c:	be00      	bkpt	0x0000
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e00b      	b.n	8002e5a <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	4908      	ldr	r1, [pc, #32]	; (8002e68 <audiod_open+0xfc>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3312      	adds	r3, #18
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	3b08      	subs	r3, #8
 8002e56:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8002e58:	89bb      	ldrh	r3, [r7, #12]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000184c 	.word	0x2000184c
 8002e6c:	e000edf0 	.word	0xe000edf0

08002e70 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	889b      	ldrh	r3, [r3, #4]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002e84:	8abb      	ldrh	r3, [r7, #20]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	f107 0212 	add.w	r2, r7, #18
 8002e92:	f107 0113 	add.w	r1, r7, #19
 8002e96:	7df8      	ldrb	r0, [r7, #23]
 8002e98:	f000 fd20 	bl	80038dc <audiod_get_AS_interface_index_global>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <audiod_get_interface+0x3c>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e019      	b.n	8002ee0 <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <audiod_get_interface+0x78>)
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	1a5b      	subs	r3, r3, r1
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	331c      	adds	r3, #28
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	7cba      	ldrb	r2, [r7, #18]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	79f8      	ldrb	r0, [r7, #7]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	f003 fe27 	bl	8006b1c <tud_control_xfer>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f083 0301 	eor.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <audiod_get_interface+0x6e>
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	2000184c 	.word	0x2000184c

08002eec <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b096      	sub	sp, #88	; 0x58
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	889b      	ldrh	r3, [r3, #4]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	885b      	ldrh	r3, [r3, #2]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002f10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	f107 020e 	add.w	r2, r7, #14
 8002f20:	f107 010f 	add.w	r1, r7, #15
 8002f24:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8002f28:	f000 fcd8 	bl	80038dc <audiod_get_AS_interface_index_global>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <audiod_set_interface+0x50>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e168      	b.n	800320e <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4aa9      	ldr	r2, [pc, #676]	; (80031f0 <audiod_set_interface+0x304>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f50:	7b1b      	ldrb	r3, [r3, #12]
 8002f52:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d121      	bne.n	8002f9e <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 8002f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f62:	7a1a      	ldrb	r2, [r3, #8]
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fced 	bl	8006948 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 8002f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f70:	332c      	adds	r3, #44	; 0x2c
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 f8f4 	bl	8005160 <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002f78:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <audiod_set_interface+0x308>)
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <audiod_set_interface+0xac>
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fd26 	bl	80009d4 <tud_audio_set_itf_close_EP_cb>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f083 0301 	eor.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <audiod_set_interface+0xac>
 8002f94:	2300      	movs	r3, #0
 8002f96:	e13a      	b.n	800320e <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	7c1b      	ldrb	r3, [r3, #16]
 8002fa2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d121      	bne.n	8002fee <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 8002faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fac:	2200      	movs	r2, #0
 8002fae:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	7b5a      	ldrb	r2, [r3, #13]
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fcc5 	bl	8006948 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 f8cc 	bl	8005160 <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002fc8:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <audiod_set_interface+0x308>)
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <audiod_set_interface+0xfc>
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fcfe 	bl	80009d4 <tud_audio_set_itf_close_EP_cb>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <audiod_set_interface+0xfc>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e112      	b.n	800320e <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 8002fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fea:	2200      	movs	r2, #0
 8002fec:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	7bba      	ldrb	r2, [r7, #14]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002ffa:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003002:	8a5b      	ldrh	r3, [r3, #18]
 8003004:	3b08      	subs	r3, #8
 8003006:	4413      	add	r3, r2
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 800300a:	e0ea      	b.n	80031e2 <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	3301      	adds	r3, #1
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b04      	cmp	r3, #4
 8003018:	f040 80d9 	bne.w	80031ce <audiod_set_interface+0x2e2>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	789b      	ldrb	r3, [r3, #2]
 8003020:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 80d2 	bne.w	80031ce <audiod_set_interface+0x2e2>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	78db      	ldrb	r3, [r3, #3]
 800302e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003032:	429a      	cmp	r2, r3
 8003034:	f040 80cb 	bne.w	80031ce <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003046:	e09f      	b.n	8003188 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	3301      	adds	r3, #1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b05      	cmp	r3, #5
 8003054:	f040 808e 	bne.w	8003174 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fa27 	bl	80064b4 <usbd_edpt_open>
 8003066:	4603      	mov	r3, r0
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <audiod_set_interface+0x19c>
 8003072:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <audiod_set_interface+0x30c>)
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d000      	beq.n	8003084 <audiod_set_interface+0x198>
 8003082:	be00      	bkpt	0x0000
 8003084:	2300      	movs	r3, #0
 8003086:	e0c2      	b.n	800320e <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	789b      	ldrb	r3, [r3, #2]
 800308c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 8003090:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f003 fbdb 	bl	8006854 <usbd_edpt_clear_stall>
 800309e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80030a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80030a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030aa:	09db      	lsrs	r3, r3, #7
 80030ac:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d12d      	bne.n	800310e <audiod_set_interface+0x222>
 80030b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d126      	bne.n	800310e <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80030c6:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 80030c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ca:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80030ce:	731a      	strb	r2, [r3, #12]
 80030d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	889b      	ldrh	r3, [r3, #4]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030de:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4a3f      	ldr	r2, [pc, #252]	; (80031f0 <audiod_set_interface+0x304>)
 80030f2:	441a      	add	r2, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fd33 	bl	8002b64 <audiod_tx_done_cb>
 80030fe:	4603      	mov	r3, r0
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <audiod_set_interface+0x222>
 800310a:	2300      	movs	r3, #0
 800310c:	e07f      	b.n	800320e <audiod_set_interface+0x322>
 800310e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800311a:	09db      	lsrs	r3, r3, #7
 800311c:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 800311e:	2b00      	cmp	r3, #0
 8003120:	d123      	bne.n	800316a <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003128:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003130:	741a      	strb	r2, [r3, #16]
 8003132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003134:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	889b      	ldrh	r3, [r3, #4]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003140:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8003146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003148:	7b59      	ldrb	r1, [r3, #13]
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	f103 0220 	add.w	r2, r3, #32
 8003150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003152:	89db      	ldrh	r3, [r3, #14]
 8003154:	79f8      	ldrb	r0, [r7, #7]
 8003156:	f003 fabb 	bl	80066d0 <usbd_edpt_xfer_fifo>
 800315a:	4603      	mov	r3, r0
 800315c:	f083 0301 	eor.w	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <audiod_set_interface+0x27e>
 8003166:	2300      	movs	r3, #0
 8003168:	e051      	b.n	800320e <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 800316a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800316e:	3301      	adds	r3, #1
 8003170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003188:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800318c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003190:	429a      	cmp	r2, r3
 8003192:	d204      	bcs.n	800319e <audiod_set_interface+0x2b2>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003198:	429a      	cmp	r2, r3
 800319a:	f63f af55 	bhi.w	8003048 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 800319e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80031a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <audiod_set_interface+0x2c2>
 80031aa:	2300      	movs	r3, #0
 80031ac:	e02f      	b.n	800320e <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <audiod_set_interface+0x310>)
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d025      	beq.n	8003200 <audiod_set_interface+0x314>
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	6839      	ldr	r1, [r7, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd fc33 	bl	8000a24 <tud_audio_set_itf_cb>
 80031be:	4603      	mov	r3, r0
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <audiod_set_interface+0x314>
 80031ca:	2300      	movs	r3, #0
 80031cc:	e01f      	b.n	800320e <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f63f af10 	bhi.w	800300c <audiod_set_interface+0x120>
 80031ec:	e009      	b.n	8003202 <audiod_set_interface+0x316>
 80031ee:	bf00      	nop
 80031f0:	2000184c 	.word	0x2000184c
 80031f4:	080009d5 	.word	0x080009d5
 80031f8:	e000edf0 	.word	0xe000edf0
 80031fc:	08000a25 	.word	0x08000a25
      break;
 8003200:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fc16 	bl	8006a38 <tud_control_status>

  return true;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3758      	adds	r7, #88	; 0x58
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	f040 809d 	bne.w	800336e <audiod_control_complete+0x156>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8095 	bne.w	800336e <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d002      	beq.n	8003258 <audiod_control_complete+0x40>
 8003252:	2b02      	cmp	r3, #2
 8003254:	d057      	beq.n	8003306 <audiod_control_complete+0xee>
 8003256:	e07f      	b.n	8003358 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	889b      	ldrh	r3, [r3, #4]
 800325c:	b29b      	uxth	r3, r3
 800325e:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	889b      	ldrh	r3, [r3, #4]
 8003264:	b29b      	uxth	r3, r3
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 800326c:	7d7b      	ldrb	r3, [r7, #21]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <audiod_control_complete+0x160>)
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01f      	beq.n	80032b8 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003278:	f107 020f 	add.w	r2, r7, #15
 800327c:	7d79      	ldrb	r1, [r7, #21]
 800327e:	7dbb      	ldrb	r3, [r7, #22]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fb57 	bl	8003934 <audiod_verify_entity_exists>
 8003286:	4603      	mov	r3, r0
 8003288:	f083 0301 	eor.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <audiod_control_complete+0x7e>
 8003292:	2300      	movs	r3, #0
 8003294:	e06c      	b.n	8003370 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4619      	mov	r1, r3
 800329a:	4a38      	ldr	r2, [pc, #224]	; (800337c <audiod_control_complete+0x164>)
 800329c:	460b      	mov	r3, r1
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a5b      	subs	r3, r3, r1
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	3314      	adds	r3, #20
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fb69 	bl	8000986 <tud_audio_set_req_entity_cb>
 80032b4:	4603      	mov	r3, r0
 80032b6:	e05b      	b.n	8003370 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 80032b8:	2300      	movs	r3, #0
 80032ba:	e059      	b.n	8003370 <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <audiod_control_complete+0x168>)
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01f      	beq.n	8003302 <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80032c2:	f107 020f 	add.w	r2, r7, #15
 80032c6:	7dbb      	ldrb	r3, [r7, #22]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fbaa 	bl	8003a24 <audiod_verify_itf_exists>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f083 0301 	eor.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <audiod_control_complete+0xc8>
 80032dc:	2300      	movs	r3, #0
 80032de:	e047      	b.n	8003370 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	4619      	mov	r1, r3
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <audiod_control_complete+0x164>)
 80032e6:	460b      	mov	r3, r1
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	1a5b      	subs	r3, r3, r1
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	3314      	adds	r3, #20
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f3af 8000 	nop.w
 80032fe:	4603      	mov	r3, r0
 8003300:	e036      	b.n	8003370 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8003302:	2300      	movs	r3, #0
 8003304:	e034      	b.n	8003370 <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	889b      	ldrh	r3, [r3, #4]
 800330a:	b29b      	uxth	r3, r3
 800330c:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <audiod_control_complete+0x16c>)
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01f      	beq.n	8003354 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003314:	f107 020f 	add.w	r2, r7, #15
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fbeb 	bl	8003af8 <audiod_verify_ep_exists>
 8003322:	4603      	mov	r3, r0
 8003324:	f083 0301 	eor.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <audiod_control_complete+0x11a>
 800332e:	2300      	movs	r3, #0
 8003330:	e01e      	b.n	8003370 <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4619      	mov	r1, r3
 8003336:	4a11      	ldr	r2, [pc, #68]	; (800337c <audiod_control_complete+0x164>)
 8003338:	460b      	mov	r3, r1
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a5b      	subs	r3, r3, r1
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	3314      	adds	r3, #20
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	6839      	ldr	r1, [r7, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f3af 8000 	nop.w
 8003350:	4603      	mov	r3, r0
 8003352:	e00d      	b.n	8003370 <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8003354:	2300      	movs	r3, #0
 8003356:	e00b      	b.n	8003370 <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <audiod_control_complete+0x170>)
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d000      	beq.n	800336a <audiod_control_complete+0x152>
 8003368:	be00      	bkpt	0x0000
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <audiod_control_complete+0x158>
    }
  }
  return true;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	08000987 	.word	0x08000987
 800337c:	2000184c 	.word	0x2000184c
	...
 8003388:	e000edf0 	.word	0xe000edf0

0800338c <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11f      	bne.n	80033e6 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	2b0a      	cmp	r3, #10
 80033ac:	d002      	beq.n	80033b4 <audiod_control_request+0x28>
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d007      	beq.n	80033c2 <audiod_control_request+0x36>
 80033b2:	e00d      	b.n	80033d0 <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fd59 	bl	8002e70 <audiod_get_interface>
 80033be:	4603      	mov	r3, r0
 80033c0:	e0d5      	b.n	800356e <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fd90 	bl	8002eec <audiod_set_interface>
 80033cc:	4603      	mov	r3, r0
 80033ce:	e0ce      	b.n	800356e <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <audiod_control_request+0x1ec>)
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d000      	beq.n	80033e2 <audiod_control_request+0x56>
 80033e0:	be00      	bkpt	0x0000
 80033e2:	2300      	movs	r3, #0
 80033e4:	e0c3      	b.n	800356e <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	f040 80b2 	bne.w	800355a <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d002      	beq.n	8003412 <audiod_control_request+0x86>
 800340c:	2b02      	cmp	r3, #2
 800340e:	d04d      	beq.n	80034ac <audiod_control_request+0x120>
 8003410:	e072      	b.n	80034f8 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	889b      	ldrh	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	b29b      	uxth	r3, r3
 800341c:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 800341e:	7e7b      	ldrb	r3, [r7, #25]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003424:	f107 020f 	add.w	r2, r7, #15
 8003428:	7e79      	ldrb	r1, [r7, #25]
 800342a:	7efb      	ldrb	r3, [r7, #27]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fa81 	bl	8003934 <audiod_verify_entity_exists>
 8003432:	4603      	mov	r3, r0
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <audiod_control_request+0xb6>
 800343e:	2300      	movs	r3, #0
 8003440:	e095      	b.n	800356e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05e      	beq.n	800350e <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 8003450:	4b4a      	ldr	r3, [pc, #296]	; (800357c <audiod_control_request+0x1f0>)
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fa70 	bl	8000940 <tud_audio_get_req_entity_cb>
 8003460:	4603      	mov	r3, r0
 8003462:	e084      	b.n	800356e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8003464:	2300      	movs	r3, #0
 8003466:	e082      	b.n	800356e <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003468:	f107 020f 	add.w	r2, r7, #15
 800346c:	7efb      	ldrb	r3, [r7, #27]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fad7 	bl	8003a24 <audiod_verify_itf_exists>
 8003476:	4603      	mov	r3, r0
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <audiod_control_request+0xfa>
 8003482:	2300      	movs	r3, #0
 8003484:	e073      	b.n	800356e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03c      	beq.n	800350e <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <audiod_control_request+0x1f4>)
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f3af 8000 	nop.w
 80034a4:	4603      	mov	r3, r0
 80034a6:	e062      	b.n	800356e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 80034a8:	2300      	movs	r3, #0
 80034aa:	e060      	b.n	800356e <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	889b      	ldrh	r3, [r3, #4]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80034b4:	f107 020f 	add.w	r2, r7, #15
 80034b8:	7ebb      	ldrb	r3, [r7, #26]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fb1b 	bl	8003af8 <audiod_verify_ep_exists>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f083 0301 	eor.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <audiod_control_request+0x146>
 80034ce:	2300      	movs	r3, #0
 80034d0:	e04d      	b.n	800356e <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d018      	beq.n	8003512 <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <audiod_control_request+0x1f8>)
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d006      	beq.n	80034f4 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f3af 8000 	nop.w
 80034f0:	4603      	mov	r3, r0
 80034f2:	e03c      	b.n	800356e <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 80034f4:	2300      	movs	r3, #0
 80034f6:	e03a      	b.n	800356e <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 80034f8:	4b1f      	ldr	r3, [pc, #124]	; (8003578 <audiod_control_request+0x1ec>)
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d000      	beq.n	800350a <audiod_control_request+0x17e>
 8003508:	be00      	bkpt	0x0000
 800350a:	2300      	movs	r3, #0
 800350c:	e02f      	b.n	800356e <audiod_control_request+0x1e2>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <audiod_control_request+0x188>
      break;
 8003512:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	4619      	mov	r1, r3
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <audiod_control_request+0x1fc>)
 800351a:	460b      	mov	r3, r1
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a5b      	subs	r3, r3, r1
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	3314      	adds	r3, #20
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	4618      	mov	r0, r3
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <audiod_control_request+0x1fc>)
 800352e:	4603      	mov	r3, r0
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	1a1b      	subs	r3, r3, r0
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	3318      	adds	r3, #24
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	79f8      	ldrb	r0, [r7, #7]
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	f003 faeb 	bl	8006b1c <tud_control_xfer>
 8003546:	4603      	mov	r3, r0
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <audiod_control_request+0x1ca>
 8003552:	2300      	movs	r3, #0
 8003554:	e00b      	b.n	800356e <audiod_control_request+0x1e2>
    return true;
 8003556:	2301      	movs	r3, #1
 8003558:	e009      	b.n	800356e <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <audiod_control_request+0x1ec>)
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d000      	beq.n	800356c <audiod_control_request+0x1e0>
 800356a:	be00      	bkpt	0x0000
  return false;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000edf0 	.word	0xe000edf0
 800357c:	08000941 	.word	0x08000941
	...
 8003588:	2000184c 	.word	0x2000184c

0800358c <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	603a      	str	r2, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
 8003598:	460b      	mov	r3, r1
 800359a:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 800359c:	79bb      	ldrb	r3, [r7, #6]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d106      	bne.n	80035b0 <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fef0 	bl	800338c <audiod_control_request>
 80035ac:	4603      	mov	r3, r0
 80035ae:	e00a      	b.n	80035c6 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d106      	bne.n	80035c4 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fe2c 	bl	8003218 <audiod_control_complete>
 80035c0:	4603      	mov	r3, r0
 80035c2:	e000      	b.n	80035c6 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 80035c4:	2301      	movs	r3, #1
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
 80035dc:	460b      	mov	r3, r1
 80035de:	71bb      	strb	r3, [r7, #6]
 80035e0:	4613      	mov	r3, r2
 80035e2:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e038      	b.n	800365c <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <audiod_xfer_cb+0x9c>)
 80035f6:	4413      	add	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	7a1b      	ldrb	r3, [r3, #8]
 80035fe:	79ba      	ldrb	r2, [r7, #6]
 8003600:	429a      	cmp	r2, r3
 8003602:	d112      	bne.n	800362a <audiod_xfer_cb+0x5a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff faa7 	bl	8002b64 <audiod_tx_done_cb>
 8003616:	4603      	mov	r3, r0
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <audiod_xfer_cb+0x56>
 8003622:	2300      	movs	r3, #0
 8003624:	e01e      	b.n	8003664 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8003626:	2301      	movs	r3, #1
 8003628:	e01c      	b.n	8003664 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	7b5b      	ldrb	r3, [r3, #13]
 800362e:	79ba      	ldrb	r2, [r7, #6]
 8003630:	429a      	cmp	r2, r3
 8003632:	d110      	bne.n	8003656 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b29a      	uxth	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f9ed 	bl	8002a1c <audiod_rx_done_cb>
 8003642:	4603      	mov	r3, r0
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <audiod_xfer_cb+0x82>
 800364e:	2300      	movs	r3, #0
 8003650:	e008      	b.n	8003664 <audiod_xfer_cb+0x94>
      return true;
 8003652:	2301      	movs	r3, #1
 8003654:	e006      	b.n	8003664 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3301      	adds	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0c3      	beq.n	80035ea <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000184c 	.word	0x2000184c

08003670 <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	4613      	mov	r3, r2
 800369a:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <tud_audio_buffer_and_schedule_control_xfer+0x26>
 80036aa:	2300      	movs	r3, #0
 80036ac:	e0b2      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	889b      	ldrh	r3, [r3, #4]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d002      	beq.n	80036cc <tud_audio_buffer_and_schedule_control_xfer+0x44>
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d02c      	beq.n	8003724 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 80036ca:	e040      	b.n	800374e <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	889b      	ldrh	r3, [r3, #4]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 80036da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80036e2:	f107 0217 	add.w	r2, r7, #23
 80036e6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80036ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f920 	bl	8003934 <audiod_verify_entity_exists>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d031      	beq.n	8003764 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8003700:	2300      	movs	r3, #0
 8003702:	e087      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003704:	f107 0217 	add.w	r2, r7, #23
 8003708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f988 	bl	8003a24 <audiod_verify_itf_exists>
 8003714:	4603      	mov	r3, r0
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8003720:	2300      	movs	r3, #0
 8003722:	e077      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 800372e:	f107 0217 	add.w	r2, r7, #23
 8003732:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f9dd 	bl	8003af8 <audiod_verify_ep_exists>
 800373e:	4603      	mov	r3, r0
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 800374a:	2300      	movs	r3, #0
 800374c:	e062      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d000      	beq.n	8003760 <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 800375e:	be00      	bkpt	0x0000
 8003760:	2300      	movs	r3, #0
 8003762:	e057      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8003768:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	4619      	mov	r1, r3
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003770:	460b      	mov	r3, r1
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a5b      	subs	r3, r3, r1
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	3318      	adds	r3, #24
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	89ba      	ldrh	r2, [r7, #12]
 8003782:	429a      	cmp	r2, r3
 8003784:	d90a      	bls.n	800379c <tud_audio_buffer_and_schedule_control_xfer+0x114>
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	4619      	mov	r1, r3
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 800378c:	460b      	mov	r3, r1
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	1a5b      	subs	r3, r3, r1
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	3318      	adds	r3, #24
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	4619      	mov	r1, r3
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80037a2:	460b      	mov	r3, r1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	3314      	adds	r3, #20
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	4618      	mov	r0, r3
 80037b4:	491a      	ldr	r1, [pc, #104]	; (8003820 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80037b6:	4603      	mov	r3, r0
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a1b      	subs	r3, r3, r0
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	3318      	adds	r3, #24
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4619      	mov	r1, r3
 80037c6:	89bb      	ldrh	r3, [r7, #12]
 80037c8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ca:	6239      	str	r1, [r7, #32]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	61fa      	str	r2, [r7, #28]
 80037d0:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d202      	bcs.n	80037e0 <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e005      	b.n	80037ec <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	69f9      	ldr	r1, [r7, #28]
 80037e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e6:	f005 f83b 	bl	8008860 <memcpy>
  return 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 80037f0:	2300      	movs	r3, #0
 80037f2:	e00f      	b.n	8003814 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4a09      	ldr	r2, [pc, #36]	; (8003820 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 80037fa:	460b      	mov	r3, r1
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a5b      	subs	r3, r3, r1
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	3314      	adds	r3, #20
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	7bf8      	ldrb	r0, [r7, #15]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	f003 f985 	bl	8006b1c <tud_control_xfer>
 8003812:	4603      	mov	r3, r0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	e000edf0 	.word	0xe000edf0
 8003820:	2000184c 	.word	0x2000184c

08003824 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8003824:	b480      	push	{r7}
 8003826:	b08d      	sub	sp, #52	; 0x34
 8003828:	af00      	add	r7, sp, #0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d048      	beq.n	80038ce <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	8a5b      	ldrh	r3, [r3, #18]
 8003844:	3b08      	subs	r3, #8
 8003846:	4413      	add	r3, r2
 8003848:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	88db      	ldrh	r3, [r3, #6]
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	4413      	add	r3, r2
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8003874:	e027      	b.n	80038c6 <audiod_get_AS_interface_index+0xa2>
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3301      	adds	r3, #1
 800387e:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8003880:	2b04      	cmp	r3, #4
 8003882:	d116      	bne.n	80038b2 <audiod_get_AS_interface_index+0x8e>
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	78db      	ldrb	r3, [r3, #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d112      	bne.n	80038b2 <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	789b      	ldrb	r3, [r3, #2]
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	429a      	cmp	r2, r3
 8003894:	d108      	bne.n	80038a8 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800389c:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a2:	601a      	str	r2, [r3, #0]
          return true;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e013      	b.n	80038d0 <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 80038a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ac:	3301      	adds	r3, #1
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 80038c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d3d3      	bcc.n	8003876 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3734      	adds	r7, #52	; 0x34
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
 80038f0:	e016      	b.n	8003920 <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 80038f2:	7dfa      	ldrb	r2, [r7, #23]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <audiod_get_AS_interface_index_global+0x54>)
 80038fe:	1899      	adds	r1, r3, r2
 8003900:	7bf8      	ldrb	r0, [r7, #15]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	f7ff ff8d 	bl	8003824 <audiod_get_AS_interface_index>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	7dfa      	ldrb	r2, [r7, #23]
 8003914:	701a      	strb	r2, [r3, #0]
      return true;
 8003916:	2301      	movs	r3, #1
 8003918:	e006      	b.n	8003928 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	3301      	adds	r3, #1
 800391e:	75fb      	strb	r3, [r7, #23]
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0e5      	beq.n	80038f2 <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000184c 	.word	0x2000184c

08003934 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8003934:	b480      	push	{r7}
 8003936:	b08d      	sub	sp, #52	; 0x34
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	603a      	str	r2, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	460b      	mov	r3, r1
 8003942:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800394a:	e05d      	b.n	8003a08 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800394c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003950:	4933      	ldr	r1, [pc, #204]	; (8003a20 <audiod_verify_entity_exists+0xec>)
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	3304      	adds	r3, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d04c      	beq.n	80039fe <audiod_verify_entity_exists+0xca>
 8003964:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003968:	492d      	ldr	r1, [pc, #180]	; (8003a20 <audiod_verify_entity_exists+0xec>)
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	3304      	adds	r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	789b      	ldrb	r3, [r3, #2]
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	429a      	cmp	r2, r3
 800397e:	d13e      	bne.n	80039fe <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8003980:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003984:	4926      	ldr	r1, [pc, #152]	; (8003a20 <audiod_verify_entity_exists+0xec>)
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	3304      	adds	r3, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	88db      	ldrh	r3, [r3, #6]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	4413      	add	r3, r2
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 80039c8:	e015      	b.n	80039f6 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	3303      	adds	r3, #3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	79ba      	ldrb	r2, [r7, #6]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d105      	bne.n	80039e2 <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039dc:	701a      	strb	r2, [r3, #0]
          return true;
 80039de:	2301      	movs	r3, #1
 80039e0:	e017      	b.n	8003a12 <audiod_verify_entity_exists+0xde>
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 80039f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d3e5      	bcc.n	80039ca <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80039fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a02:	3301      	adds	r3, #1
 8003a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d09d      	beq.n	800394c <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3734      	adds	r7, #52	; 0x34
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	2000184c 	.word	0x2000184c

08003a24 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e054      	b.n	8003ae0 <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 8003a36:	7ffa      	ldrb	r2, [r7, #31]
 8003a38:	492e      	ldr	r1, [pc, #184]	; (8003af4 <audiod_verify_itf_exists+0xd0>)
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 8003a4c:	7ffa      	ldrb	r2, [r7, #31]
 8003a4e:	4929      	ldr	r1, [pc, #164]	; (8003af4 <audiod_verify_itf_exists+0xd0>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003a60:	7ffa      	ldrb	r2, [r7, #31]
 8003a62:	4924      	ldr	r1, [pc, #144]	; (8003af4 <audiod_verify_itf_exists+0xd0>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	7ffa      	ldrb	r2, [r7, #31]
 8003a74:	481f      	ldr	r0, [pc, #124]	; (8003af4 <audiod_verify_itf_exists+0xd0>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4403      	add	r3, r0
 8003a80:	3312      	adds	r3, #18
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	3b08      	subs	r3, #8
 8003a86:	440b      	add	r3, r1
 8003a88:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 8003a8a:	e022      	b.n	8003ad2 <audiod_verify_itf_exists+0xae>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3301      	adds	r3, #1
 8003a94:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d111      	bne.n	8003abe <audiod_verify_itf_exists+0x9a>
 8003a9a:	7ffa      	ldrb	r2, [r7, #31]
 8003a9c:	4915      	ldr	r1, [pc, #84]	; (8003af4 <audiod_verify_itf_exists+0xd0>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	789b      	ldrb	r3, [r3, #2]
 8003aae:	79fa      	ldrb	r2, [r7, #7]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d104      	bne.n	8003abe <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	7ffa      	ldrb	r2, [r7, #31]
 8003ab8:	701a      	strb	r2, [r3, #0]
          return true;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e014      	b.n	8003ae8 <audiod_verify_itf_exists+0xc4>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8003ad0:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3d8      	bcc.n	8003a8c <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	3301      	adds	r3, #1
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0a7      	beq.n	8003a36 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3724      	adds	r7, #36	; 0x24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	2000184c 	.word	0x2000184c

08003af8 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b0a:	e061      	b.n	8003bd0 <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 8003b0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b10:	4935      	ldr	r1, [pc, #212]	; (8003be8 <audiod_verify_ep_exists+0xf0>)
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d050      	beq.n	8003bc6 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8003b24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b28:	492f      	ldr	r1, [pc, #188]	; (8003be8 <audiod_verify_ep_exists+0xf0>)
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	3304      	adds	r3, #4
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b3c:	482a      	ldr	r0, [pc, #168]	; (8003be8 <audiod_verify_ep_exists+0xf0>)
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4403      	add	r3, r0
 8003b48:	3312      	adds	r3, #18
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	440b      	add	r3, r1
 8003b4e:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 8003b50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b54:	4924      	ldr	r1, [pc, #144]	; (8003be8 <audiod_verify_ep_exists+0xf0>)
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	440b      	add	r3, r1
 8003b60:	3304      	adds	r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	88db      	ldrh	r3, [r3, #6]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	4413      	add	r3, r2
 8003b82:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 8003b84:	e01b      	b.n	8003bbe <audiod_verify_ep_exists+0xc6>
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d10a      	bne.n	8003baa <audiod_verify_ep_exists+0xb2>
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	789b      	ldrb	r3, [r3, #2]
 8003b98:	79fa      	ldrb	r2, [r7, #7]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d105      	bne.n	8003baa <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ba4:	701a      	strb	r2, [r3, #0]
          return true;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e017      	b.n	8003bda <audiod_verify_ep_exists+0xe2>
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 8003bbc:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3df      	bcc.n	8003b86 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d099      	beq.n	8003b0c <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	372c      	adds	r7, #44	; 0x2c
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000184c 	.word	0x2000184c

08003bec <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e00e      	b.n	8003c18 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <audiod_get_audio_fct_idx+0x40>)
 8003c06:	4413      	add	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d101      	bne.n	8003c12 <audiod_get_audio_fct_idx+0x26>
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	e006      	b.n	8003c20 <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3301      	adds	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ed      	beq.n	8003bfa <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	2000184c 	.word	0x2000184c

08003c30 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3310      	adds	r3, #16
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f9a6 	bl	8004f92 <tu_fifo_remaining>
 8003c46:	4603      	mov	r3, r0
 8003c48:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8003c4a:	89bb      	ldrh	r3, [r7, #12]
 8003c4c:	2b3f      	cmp	r3, #63	; 0x3f
 8003c4e:	d801      	bhi.n	8003c54 <_prep_out_transaction+0x24>
 8003c50:	2300      	movs	r3, #0
 8003c52:	e02b      	b.n	8003cac <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	78da      	ldrb	r2, [r3, #3]
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fc6d 	bl	800653c <usbd_edpt_claim>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f083 0301 	eor.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <_prep_out_transaction+0x42>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e01c      	b.n	8003cac <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3310      	adds	r3, #16
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f98b 	bl	8004f92 <tu_fifo_remaining>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8003c80:	89bb      	ldrh	r3, [r7, #12]
 8003c82:	2b3f      	cmp	r3, #63	; 0x3f
 8003c84:	d90a      	bls.n	8003c9c <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	78d9      	ldrb	r1, [r3, #3]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003c90:	7bf8      	ldrb	r0, [r7, #15]
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	f002 fca6 	bl	80065e4 <usbd_edpt_xfer>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	e007      	b.n	8003cac <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	78da      	ldrb	r2, [r3, #3]
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fc73 	bl	8006590 <usbd_edpt_release>

    return false;
 8003caa:	2300      	movs	r3, #0
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8003cbe:	f001 faa9 	bl	8005214 <tud_mounted>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <tud_cdc_n_connected+0x28>
 8003cc8:	f001 fab6 	bl	8005238 <tud_suspended>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f083 0301 	eor.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <tud_cdc_n_connected+0x28>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <tud_cdc_n_connected+0x2a>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <tud_cdc_n_connected+0x6a>
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <tud_cdc_n_connected+0x7c>)
 8003cec:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <tud_cdc_n_connected+0x6a>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <tud_cdc_n_connected+0x6c>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20001884 	.word	0x20001884

08003d34 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	3310      	adds	r3, #16
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <tud_cdc_n_available+0x2c>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f8aa 	bl	8004ea8 <tu_fifo_count>
 8003d54:	4603      	mov	r3, r0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20001884 	.word	0x20001884

08003d64 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <tud_cdc_n_read+0x44>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3310      	adds	r3, #16
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f95c 	bl	800504a <tu_fifo_read_n>
 8003d92:	4603      	mov	r3, r0
 8003d94:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7ff ff4a 	bl	8003c30 <_prep_out_transaction>
  return num_read;
 8003d9c:	693b      	ldr	r3, [r7, #16]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20001884 	.word	0x20001884

08003dac <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <tud_cdc_n_write+0x54>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	331c      	adds	r3, #28
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 f99f 	bl	8005118 <tu_fifo_write_n>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	331c      	adds	r3, #28
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 f860 	bl	8004ea8 <tu_fifo_count>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b3f      	cmp	r3, #63	; 0x3f
 8003dec:	d903      	bls.n	8003df6 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f807 	bl	8003e04 <tud_cdc_n_write_flush>
  }

  return ret;
 8003df6:	8a7b      	ldrh	r3, [r7, #18]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20001884 	.word	0x20001884

08003e04 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	4a36      	ldr	r2, [pc, #216]	; (8003ef4 <tud_cdc_n_write_flush+0xf0>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	f001 f9f9 	bl	8005214 <tud_mounted>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <tud_cdc_n_write_flush+0x38>
 8003e28:	f001 fa06 	bl	8005238 <tud_suspended>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <tud_cdc_n_write_flush+0x38>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <tud_cdc_n_write_flush+0x3a>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <tud_cdc_n_write_flush+0x4e>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e04c      	b.n	8003eec <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	331c      	adds	r3, #28
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 f826 	bl	8004ea8 <tu_fifo_count>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <tud_cdc_n_write_flush+0x62>
 8003e62:	2300      	movs	r3, #0
 8003e64:	e042      	b.n	8003eec <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	789a      	ldrb	r2, [r3, #2]
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 fb62 	bl	800653c <usbd_edpt_claim>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <tud_cdc_n_write_flush+0x84>
 8003e84:	2300      	movs	r3, #0
 8003e86:	e031      	b.n	8003eec <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f103 001c 	add.w	r0, r3, #28
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	33e8      	adds	r3, #232	; 0xe8
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	4619      	mov	r1, r3
 8003e96:	f001 f8d8 	bl	800504a <tu_fifo_read_n>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	823b      	strh	r3, [r7, #16]

  if ( count )
 8003e9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	7899      	ldrb	r1, [r3, #2]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8003eae:	8a3b      	ldrh	r3, [r7, #16]
 8003eb0:	7cf8      	ldrb	r0, [r7, #19]
 8003eb2:	f002 fb97 	bl	80065e4 <usbd_edpt_xfer>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f083 0301 	eor.w	r3, r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <tud_cdc_n_write_flush+0xd4>
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <tud_cdc_n_write_flush+0xf4>)
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d000      	beq.n	8003ed4 <tud_cdc_n_write_flush+0xd0>
 8003ed2:	be00      	bkpt	0x0000
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e009      	b.n	8003eec <tud_cdc_n_write_flush+0xe8>
    return count;
 8003ed8:	8a3b      	ldrh	r3, [r7, #16]
 8003eda:	e007      	b.n	8003eec <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	789a      	ldrb	r2, [r3, #2]
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f002 fb53 	bl	8006590 <usbd_edpt_release>
    return 0;
 8003eea:	2300      	movs	r3, #0
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20001884 	.word	0x20001884
 8003ef8:	e000edf0 	.word	0xe000edf0

08003efc <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	3318      	adds	r3, #24
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <tud_cdc_n_write_available+0x2c>)
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f83a 	bl	8004f92 <tu_fifo_remaining>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20001884 	.word	0x20001884

08003f2c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003f32:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f36:	2100      	movs	r1, #0
 8003f38:	4820      	ldr	r0, [pc, #128]	; (8003fbc <cdcd_init+0x90>)
 8003f3a:	f004 fc9f 	bl	800887c <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	71fb      	strb	r3, [r7, #7]
 8003f42:	e032      	b.n	8003faa <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <cdcd_init+0x90>)
 8003f50:	4413      	add	r3, r2
 8003f52:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f60:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f103 0010 	add.w	r0, r3, #16
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003f80:	2300      	movs	r3, #0
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2301      	movs	r3, #1
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	f000 fafc 	bl	8004584 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f103 001c 	add.w	r0, r3, #28
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	f000 faf0 	bl	8004584 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	71fb      	strb	r3, [r7, #7]
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0c9      	beq.n	8003f44 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20001884 	.word	0x20001884

08003fc0 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e01f      	b.n	8004010 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <cdcd_reset+0x60>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f004 fc49 	bl	800887c <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f8b6 	bl	8005160 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	331c      	adds	r3, #28
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 f8b1 	bl	8005160 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	331c      	adds	r3, #28
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f001 f8bc 	bl	8005182 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	3301      	adds	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0dc      	beq.n	8003fd0 <cdcd_reset+0x10>
  }
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20001884 	.word	0x20001884

08004024 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b09a      	sub	sp, #104	; 0x68
 8004028:	af02      	add	r7, sp, #8
 800402a:	4603      	mov	r3, r0
 800402c:	6039      	str	r1, [r7, #0]
 800402e:	71fb      	strb	r3, [r7, #7]
 8004030:	4613      	mov	r3, r2
 8004032:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	795b      	ldrb	r3, [r3, #5]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d103      	bne.n	8004044 <cdcd_open+0x20>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d001      	beq.n	8004048 <cdcd_open+0x24>
 8004044:	2300      	movs	r3, #0
 8004046:	e0e1      	b.n	800420c <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800404c:	2300      	movs	r3, #0
 800404e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8004052:	e01a      	b.n	800408a <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8004054:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004058:	4a6e      	ldr	r2, [pc, #440]	; (8004214 <cdcd_open+0x1f0>)
 800405a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3302      	adds	r3, #2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 800406c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004070:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	4a66      	ldr	r2, [pc, #408]	; (8004214 <cdcd_open+0x1f0>)
 800407a:	4413      	add	r3, r2
 800407c:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800407e:	e008      	b.n	8004092 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8004080:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004084:	3301      	adds	r3, #1
 8004086:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800408a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0e0      	beq.n	8004054 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <cdcd_open+0x8a>
 8004098:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <cdcd_open+0x1f4>)
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
 800409c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d000      	beq.n	80040aa <cdcd_open+0x86>
 80040a8:	be00      	bkpt	0x0000
 80040aa:	2300      	movs	r3, #0
 80040ac:	e0ae      	b.n	800420c <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	789a      	ldrb	r2, [r3, #2]
 80040b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b4:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80040b6:	2309      	movs	r3, #9
 80040b8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80040c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80040d0:	e013      	b.n	80040fa <cdcd_open+0xd6>
 80040d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 80040da:	b29a      	uxth	r2, r3
 80040dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80040e0:	4413      	add	r3, r2
 80040e2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80040f8:	657b      	str	r3, [r7, #84]	; 0x54
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	3301      	adds	r3, #1
 8004102:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8004104:	2b24      	cmp	r3, #36	; 0x24
 8004106:	d104      	bne.n	8004112 <cdcd_open+0xee>
 8004108:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800410c:	88bb      	ldrh	r3, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d9df      	bls.n	80040d2 <cdcd_open+0xae>
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	3301      	adds	r3, #1
 800411a:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800411c:	2b05      	cmp	r3, #5
 800411e:	d12f      	bne.n	8004180 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8004120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004122:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004128:	4618      	mov	r0, r3
 800412a:	f002 f9c3 	bl	80064b4 <usbd_edpt_open>
 800412e:	4603      	mov	r3, r0
 8004130:	f083 0301 	eor.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <cdcd_open+0x12c>
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <cdcd_open+0x1f4>)
 800413c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <cdcd_open+0x128>
 800414a:	be00      	bkpt	0x0000
 800414c:	2300      	movs	r3, #0
 800414e:	e05d      	b.n	800420c <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8004150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004152:	789a      	ldrb	r2, [r3, #2]
 8004154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004156:	705a      	strb	r2, [r3, #1]
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8004160:	b29a      	uxth	r2, r3
 8004162:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004166:	4413      	add	r3, r2
 8004168:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800416c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	3301      	adds	r3, #1
 8004188:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800418a:	2b04      	cmp	r3, #4
 800418c:	d139      	bne.n	8004202 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004192:	2b0a      	cmp	r3, #10
 8004194:	d135      	bne.n	8004202 <cdcd_open+0x1de>
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800419e:	b29a      	uxth	r2, r3
 80041a0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041a4:	4413      	add	r3, r2
 80041a6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80041bc:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	3303      	adds	r3, #3
 80041c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041c4:	3202      	adds	r2, #2
 80041c6:	79f8      	ldrb	r0, [r7, #7]
 80041c8:	9201      	str	r2, [sp, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2302      	movs	r3, #2
 80041ce:	2202      	movs	r2, #2
 80041d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041d2:	f002 f907 	bl	80063e4 <usbd_open_edpt_pair>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f083 0301 	eor.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <cdcd_open+0x1d4>
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <cdcd_open+0x1f4>)
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d000      	beq.n	80041f4 <cdcd_open+0x1d0>
 80041f2:	be00      	bkpt	0x0000
 80041f4:	2300      	movs	r3, #0
 80041f6:	e009      	b.n	800420c <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 80041f8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041fc:	330e      	adds	r3, #14
 80041fe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8004202:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004204:	f7ff fd14 	bl	8003c30 <_prep_out_transaction>

  return drv_len;
 8004208:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 800420c:	4618      	mov	r0, r3
 800420e:	3760      	adds	r7, #96	; 0x60
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20001884 	.word	0x20001884
 8004218:	e000edf0 	.word	0xe000edf0

0800421c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	603a      	str	r2, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
 8004228:	460b      	mov	r3, r1
 800422a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	d001      	beq.n	800423e <cdcd_control_xfer_cb+0x22>
 800423a:	2300      	movs	r3, #0
 800423c:	e0cf      	b.n	80043de <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <cdcd_control_xfer_cb+0x1cc>)
 8004246:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <cdcd_control_xfer_cb+0x38>
 8004250:	2300      	movs	r3, #0
 8004252:	e0c4      	b.n	80043de <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b29a      	uxth	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	889b      	ldrh	r3, [r3, #4]
 800425e:	b29b      	uxth	r3, r3
 8004260:	429a      	cmp	r2, r3
 8004262:	d009      	beq.n	8004278 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8004264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004268:	3301      	adds	r3, #1
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004274:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004276:	e7e7      	b.n	8004248 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8004278:	bf00      	nop
  }

  switch ( request->bRequest )
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	785b      	ldrb	r3, [r3, #1]
 800427e:	3b20      	subs	r3, #32
 8004280:	2b03      	cmp	r3, #3
 8004282:	f200 80a2 	bhi.w	80043ca <cdcd_control_xfer_cb+0x1ae>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <cdcd_control_xfer_cb+0x70>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042d9 	.word	0x080042d9
 8004294:	080042f1 	.word	0x080042f1
 8004298:	08004399 	.word	0x08004399
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 800429c:	79bb      	ldrb	r3, [r7, #6]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d108      	bne.n	80042b4 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f103 0208 	add.w	r2, r3, #8
 80042a8:	79f8      	ldrb	r0, [r7, #7]
 80042aa:	2307      	movs	r3, #7
 80042ac:	6839      	ldr	r1, [r7, #0]
 80042ae:	f002 fc35 	bl	8006b1c <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 80042b2:	e08c      	b.n	80043ce <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 80042b4:	79bb      	ldrb	r3, [r7, #6]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	f040 8089 	bne.w	80043ce <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <cdcd_control_xfer_cb+0x1d0>)
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8085 	beq.w	80043ce <cdcd_control_xfer_cb+0x1b2>
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f103 0208 	add.w	r2, r3, #8
 80042ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f3af 8000 	nop.w
    break;
 80042d6:	e07a      	b.n	80043ce <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 80042d8:	79bb      	ldrb	r3, [r7, #6]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d179      	bne.n	80043d2 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f103 0208 	add.w	r2, r3, #8
 80042e4:	79f8      	ldrb	r0, [r7, #7]
 80042e6:	2307      	movs	r3, #7
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	f002 fc17 	bl	8006b1c <tud_control_xfer>
      }
    break;
 80042ee:	e070      	b.n	80043d2 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 80042f0:	79bb      	ldrb	r3, [r7, #6]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 fb9c 	bl	8006a38 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8004300:	e069      	b.n	80043d6 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8004302:	79bb      	ldrb	r3, [r7, #6]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d166      	bne.n	80043d6 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	885b      	ldrh	r3, [r3, #2]
 800430c:	b29b      	uxth	r3, r3
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	885b      	ldrh	r3, [r3, #2]
 8004330:	b29b      	uxth	r3, r3
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	885b      	ldrh	r3, [r3, #2]
 8004354:	b29b      	uxth	r3, r3
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f103 021c 	add.w	r2, r3, #28
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f083 0301 	eor.w	r3, r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f000 ff00 	bl	8005182 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8004382:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <cdcd_control_xfer_cb+0x1d4>)
 8004384:	2b00      	cmp	r3, #0
 8004386:	d026      	beq.n	80043d6 <cdcd_control_xfer_cb+0x1ba>
 8004388:	7fba      	ldrb	r2, [r7, #30]
 800438a:	7ff9      	ldrb	r1, [r7, #31]
 800438c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fbf1 	bl	8000b78 <tud_cdc_line_state_cb>
    break;
 8004396:	e01e      	b.n	80043d6 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8004398:	79bb      	ldrb	r3, [r7, #6]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f002 fb48 	bl	8006a38 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 80043a8:	e017      	b.n	80043da <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 80043aa:	79bb      	ldrb	r3, [r7, #6]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d114      	bne.n	80043da <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <cdcd_control_xfer_cb+0x1d8>)
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d011      	beq.n	80043da <cdcd_control_xfer_cb+0x1be>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	885b      	ldrh	r3, [r3, #2]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f3af 8000 	nop.w
    break;
 80043c8:	e007      	b.n	80043da <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 80043ca:	2300      	movs	r3, #0
 80043cc:	e007      	b.n	80043de <cdcd_control_xfer_cb+0x1c2>
    break;
 80043ce:	bf00      	nop
 80043d0:	e004      	b.n	80043dc <cdcd_control_xfer_cb+0x1c0>
    break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <cdcd_control_xfer_cb+0x1c0>
    break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <cdcd_control_xfer_cb+0x1c0>
    break;
 80043da:	bf00      	nop
  }

  return true;
 80043dc:	2301      	movs	r3, #1
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20001884 	.word	0x20001884
 80043ec:	00000000 	.word	0x00000000
 80043f0:	08000b79 	.word	0x08000b79
 80043f4:	00000000 	.word	0x00000000

080043f8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
 8004404:	460b      	mov	r3, r1
 8004406:	71bb      	strb	r3, [r7, #6]
 8004408:	4613      	mov	r3, r2
 800440a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]
 8004410:	e014      	b.n	800443c <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	4a54      	ldr	r2, [pc, #336]	; (8004570 <cdcd_xfer_cb+0x178>)
 800441e:	4413      	add	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	78db      	ldrb	r3, [r3, #3]
 8004426:	79ba      	ldrb	r2, [r7, #6]
 8004428:	429a      	cmp	r2, r3
 800442a:	d00a      	beq.n	8004442 <cdcd_xfer_cb+0x4a>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	789b      	ldrb	r3, [r3, #2]
 8004430:	79ba      	ldrb	r2, [r7, #6]
 8004432:	429a      	cmp	r2, r3
 8004434:	d005      	beq.n	8004442 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	3301      	adds	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0e7      	beq.n	8004412 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <cdcd_xfer_cb+0x66>
 8004448:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <cdcd_xfer_cb+0x17c>)
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d000      	beq.n	800445a <cdcd_xfer_cb+0x62>
 8004458:	be00      	bkpt	0x0000
 800445a:	2300      	movs	r3, #0
 800445c:	e084      	b.n	8004568 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	78db      	ldrb	r3, [r3, #3]
 8004462:	79ba      	ldrb	r2, [r7, #6]
 8004464:	429a      	cmp	r2, r3
 8004466:	d14a      	bne.n	80044fe <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f103 0010 	add.w	r0, r3, #16
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	33a8      	adds	r3, #168	; 0xa8
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	b292      	uxth	r2, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f000 fe4e 	bl	8005118 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <cdcd_xfer_cb+0x180>)
 800447e:	2b00      	cmp	r3, #0
 8004480:	d028      	beq.n	80044d4 <cdcd_xfer_cb+0xdc>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	795b      	ldrb	r3, [r3, #5]
 8004486:	2bff      	cmp	r3, #255	; 0xff
 8004488:	d024      	beq.n	80044d4 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e01d      	b.n	80044cc <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	795a      	ldrb	r2, [r3, #5]
 8004494:	6939      	ldr	r1, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	440b      	add	r3, r1
 800449a:	33a8      	adds	r3, #168	; 0xa8
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d111      	bne.n	80044c6 <cdcd_xfer_cb+0xce>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3310      	adds	r3, #16
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fd30 	bl	8004f0c <tu_fifo_empty>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f083 0301 	eor.w	r3, r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	795a      	ldrb	r2, [r3, #5]
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3dd      	bcc.n	8004490 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 80044d4:	4b29      	ldr	r3, [pc, #164]	; (800457c <cdcd_xfer_cb+0x184>)
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00e      	beq.n	80044f8 <cdcd_xfer_cb+0x100>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3310      	adds	r3, #16
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fd14 	bl	8004f0c <tu_fifo_empty>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f083 0301 	eor.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <cdcd_xfer_cb+0x100>
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc fb4f 	bl	8000b96 <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 80044f8:	6938      	ldr	r0, [r7, #16]
 80044fa:	f7ff fb99 	bl	8003c30 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	79ba      	ldrb	r2, [r7, #6]
 8004504:	429a      	cmp	r2, r3
 8004506:	d12e      	bne.n	8004566 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <cdcd_xfer_cb+0x188>)
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <cdcd_xfer_cb+0x11e>
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	4618      	mov	r0, r3
 8004512:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fc73 	bl	8003e04 <tud_cdc_n_write_flush>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d120      	bne.n	8004566 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	331c      	adds	r3, #28
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fcbd 	bl	8004ea8 <tu_fifo_count>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <cdcd_xfer_cb+0x16e>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d015      	beq.n	8004566 <cdcd_xfer_cb+0x16e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	789a      	ldrb	r2, [r3, #2]
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fff5 	bl	800653c <usbd_edpt_claim>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	7899      	ldrb	r1, [r3, #2]
 800455c:	79f8      	ldrb	r0, [r7, #7]
 800455e:	2300      	movs	r3, #0
 8004560:	2200      	movs	r2, #0
 8004562:	f002 f83f 	bl	80065e4 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8004566:	2301      	movs	r3, #1
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20001884 	.word	0x20001884
 8004574:	e000edf0 	.word	0xe000edf0
 8004578:	00000000 	.word	0x00000000
 800457c:	08000b97 	.word	0x08000b97
 8004580:	00000000 	.word	0x00000000

08004584 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	460b      	mov	r3, r1
 8004594:	80fb      	strh	r3, [r7, #6]
 8004596:	4613      	mov	r3, r2
 8004598:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	d901      	bls.n	80045a6 <tu_fifo_config+0x22>
 80045a2:	2300      	movs	r3, #0
 80045a4:	e01b      	b.n	80045de <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80045b2:	88bb      	ldrh	r3, [r7, #4]
 80045b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045b8:	b299      	uxth	r1, r3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	88d3      	ldrh	r3, [r2, #6]
 80045be:	f361 030e 	bfi	r3, r1, #0, #15
 80045c2:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	79d3      	ldrb	r3, [r2, #7]
 80045c8:	7e39      	ldrb	r1, [r7, #24]
 80045ca:	f361 13c7 	bfi	r3, r1, #7, #1
 80045ce:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80045dc:	2301      	movs	r3, #1
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b08a      	sub	sp, #40	; 0x28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004602:	e00b      	b.n	800461c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	61ba      	str	r2, [r7, #24]
 800460c:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	bf00      	nop
    ff_buf += 4;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3304      	adds	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 800461c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800461e:	1e5a      	subs	r2, r3, #1
 8004620:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004630:	7ffb      	ldrb	r3, [r7, #31]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800463c:	7ffa      	ldrb	r2, [r7, #31]
 800463e:	f107 0310 	add.w	r3, r7, #16
 8004642:	4619      	mov	r1, r3
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f004 f90b 	bl	8008860 <memcpy>
  }
}
 800464a:	bf00      	nop
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	4613      	mov	r3, r2
 800465e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800466a:	e008      	b.n	800467e <_ff_pull_const_addr+0x2c>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3304      	adds	r3, #4
 800467c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800467e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f1      	bne.n	800466c <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004692:	7ffb      	ldrb	r3, [r7, #31]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800469c:	7ffa      	ldrb	r2, [r7, #31]
 800469e:	f107 0314 	add.w	r3, r7, #20
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 f8db 	bl	8008860 <memcpy>

    *reg_tx = tmp32;
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	601a      	str	r2, [r3, #0]
  }
}
 80046b0:	bf00      	nop
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	88c9      	ldrh	r1, [r1, #6]
 80046d0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80046d4:	b289      	uxth	r1, r1
 80046d6:	fb01 f202 	mul.w	r2, r1, r2
 80046da:	1898      	adds	r0, r3, r2
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88db      	ldrh	r3, [r3, #6]
 80046e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	f004 f8b9 	bl	8008860 <memcpy>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b08e      	sub	sp, #56	; 0x38
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	4611      	mov	r1, r2
 8004702:	461a      	mov	r2, r3
 8004704:	460b      	mov	r3, r1
 8004706:	80fb      	strh	r3, [r7, #6]
 8004708:	4613      	mov	r3, r2
 800470a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	889a      	ldrh	r2, [r3, #4]
 8004710:	88bb      	ldrh	r3, [r7, #4]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88db      	ldrh	r3, [r3, #6]
 8004722:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472c:	fb13 f302 	smulbb	r3, r3, r2
 8004730:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	88db      	ldrh	r3, [r3, #6]
 8004736:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004740:	fb13 f302 	smulbb	r3, r3, r2
 8004744:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	88ba      	ldrh	r2, [r7, #4]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	88c9      	ldrh	r1, [r1, #6]
 8004750:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004754:	b289      	uxth	r1, r1
 8004756:	fb01 f202 	mul.w	r2, r1, r2
 800475a:	4413      	add	r3, r2
 800475c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800475e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <_ff_push_n+0x76>
 8004766:	2b01      	cmp	r3, #1
 8004768:	d022      	beq.n	80047b0 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 800476a:	e09e      	b.n	80048aa <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004770:	429a      	cmp	r2, r3
 8004772:	d80d      	bhi.n	8004790 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	88d2      	ldrh	r2, [r2, #6]
 800477a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800477e:	b292      	uxth	r2, r2
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	461a      	mov	r2, r3
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478a:	f004 f869 	bl	8008860 <memcpy>
      break;
 800478e:	e08c      	b.n	80048aa <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8004790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004792:	461a      	mov	r2, r3
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004798:	f004 f862 	bl	8008860 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4413      	add	r3, r2
 80047a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047a8:	4619      	mov	r1, r3
 80047aa:	f004 f859 	bl	8008860 <memcpy>
      break;
 80047ae:	e07c      	b.n	80048aa <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d80f      	bhi.n	80047d8 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88db      	ldrh	r3, [r3, #6]
 80047bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	fb13 f302 	smulbb	r3, r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d2:	f7ff ff0a 	bl	80045ea <_ff_push_const_addr>
      break;
 80047d6:	e067      	b.n	80048a8 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80047d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80047e0:	8c3b      	ldrh	r3, [r7, #32]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e8:	f7ff feff 	bl	80045ea <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80047ec:	8c3b      	ldrh	r3, [r7, #32]
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	4413      	add	r3, r2
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80047f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004804:	2b00      	cmp	r3, #0
 8004806:	d043      	beq.n	8004890 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800480c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004810:	b29b      	uxth	r3, r3
 8004812:	f1c3 0304 	rsb	r3, r3, #4
 8004816:	b29a      	uxth	r2, r3
 8004818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800481a:	837b      	strh	r3, [r7, #26]
 800481c:	4613      	mov	r3, r2
 800481e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004820:	8b7a      	ldrh	r2, [r7, #26]
 8004822:	8b3b      	ldrh	r3, [r7, #24]
 8004824:	4293      	cmp	r3, r2
 8004826:	bf28      	it	cs
 8004828:	4613      	movcs	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8004830:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004834:	b29b      	uxth	r3, r3
 8004836:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8004848:	e007      	b.n	800485a <_ff_push_n+0x164>
 800484a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484c:	1c53      	adds	r3, r2, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	6339      	str	r1, [r7, #48]	; 0x30
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800486e:	e007      	b.n	8004880 <_ff_push_n+0x18a>
 8004870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004872:	1c53      	adds	r3, r2, #1
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	1c59      	adds	r1, r3, #1
 800487a:	6339      	str	r1, [r7, #48]	; 0x30
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004884:	1e5a      	subs	r2, r3, #1
 8004886:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <_ff_push_n+0x17a>
 800488e:	e002      	b.n	8004896 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8004896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <_ff_push_n+0x1b2>
 800489c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800489e:	461a      	mov	r2, r3
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a4:	f7ff fea1 	bl	80045ea <_ff_push_const_addr>
      break;
 80048a8:	bf00      	nop
}
 80048aa:	bf00      	nop
 80048ac:	3738      	adds	r7, #56	; 0x38
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	88c9      	ldrh	r1, [r1, #6]
 80048ca:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80048ce:	b289      	uxth	r1, r1
 80048d0:	fb01 f202 	mul.w	r2, r1, r2
 80048d4:	1899      	adds	r1, r3, r2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	88db      	ldrh	r3, [r3, #6]
 80048da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	68b8      	ldr	r0, [r7, #8]
 80048e4:	f003 ffbc 	bl	8008860 <memcpy>
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08e      	sub	sp, #56	; 0x38
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	460b      	mov	r3, r1
 8004900:	80fb      	strh	r3, [r7, #6]
 8004902:	4613      	mov	r3, r2
 8004904:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	889a      	ldrh	r2, [r3, #4]
 800490a:	88bb      	ldrh	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88db      	ldrh	r3, [r3, #6]
 800491c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004926:	fb13 f302 	smulbb	r3, r3, r2
 800492a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88db      	ldrh	r3, [r3, #6]
 8004930:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004934:	b29b      	uxth	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800493a:	fb13 f302 	smulbb	r3, r3, r2
 800493e:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	88ba      	ldrh	r2, [r7, #4]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	88c9      	ldrh	r1, [r1, #6]
 800494a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800494e:	b289      	uxth	r1, r1
 8004950:	fb01 f202 	mul.w	r2, r1, r2
 8004954:	4413      	add	r3, r2
 8004956:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004958:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <_ff_pull_n+0x76>
 8004960:	2b01      	cmp	r3, #1
 8004962:	d022      	beq.n	80049aa <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8004964:	e0a0      	b.n	8004aa8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800496a:	429a      	cmp	r2, r3
 800496c:	d80d      	bhi.n	800498a <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	88d2      	ldrh	r2, [r2, #6]
 8004974:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004978:	b292      	uxth	r2, r2
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	461a      	mov	r2, r3
 8004980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004982:	68b8      	ldr	r0, [r7, #8]
 8004984:	f003 ff6c 	bl	8008860 <memcpy>
    break;
 8004988:	e08e      	b.n	8004aa8 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800498a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800498c:	461a      	mov	r2, r3
 800498e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f003 ff65 	bl	8008860 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8004996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	18d0      	adds	r0, r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80049a2:	4619      	mov	r1, r3
 80049a4:	f003 ff5c 	bl	8008860 <memcpy>
    break;
 80049a8:	e07e      	b.n	8004aa8 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d80f      	bhi.n	80049d2 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	88db      	ldrh	r3, [r3, #6]
 80049b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	fb13 f302 	smulbb	r3, r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f7ff fe41 	bl	8004652 <_ff_pull_const_addr>
    break;
 80049d0:	e069      	b.n	8004aa6 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80049d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049d4:	f023 0303 	bic.w	r3, r3, #3
 80049d8:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80049da:	8c3b      	ldrh	r3, [r7, #32]
 80049dc:	461a      	mov	r2, r3
 80049de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f7ff fe36 	bl	8004652 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80049e6:	8c3b      	ldrh	r3, [r7, #32]
 80049e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ea:	4413      	add	r3, r2
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80049ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80049fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d045      	beq.n	8004a8e <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f1c3 0304 	rsb	r3, r3, #4
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a14:	837b      	strh	r3, [r7, #26]
 8004a16:	4613      	mov	r3, r2
 8004a18:	833b      	strh	r3, [r7, #24]
 8004a1a:	8b7a      	ldrh	r2, [r7, #26]
 8004a1c:	8b3b      	ldrh	r3, [r7, #24]
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bf28      	it	cs
 8004a22:	4613      	movcs	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8004a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004a3a:	f107 0314 	add.w	r3, r7, #20
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004a40:	e007      	b.n	8004a52 <_ff_pull_n+0x162>
 8004a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a44:	1c53      	adds	r3, r2, #1
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8004a66:	e007      	b.n	8004a78 <_ff_pull_n+0x188>
 8004a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6a:	1c53      	adds	r3, r2, #1
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e002      	b.n	8004a94 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8004a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <_ff_pull_n+0x1b6>
 8004a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa0:	68b8      	ldr	r0, [r7, #8]
 8004aa2:	f7ff fdd6 	bl	8004652 <_ff_pull_const_addr>
    break;
 8004aa6:	bf00      	nop
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3738      	adds	r7, #56	; 0x38
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80fb      	strh	r3, [r7, #6]
 8004aba:	460b      	mov	r3, r1
 8004abc:	80bb      	strh	r3, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8004ac2:	88ba      	ldrh	r2, [r7, #4]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8004aca:	88ba      	ldrh	r2, [r7, #4]
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d804      	bhi.n	8004adc <advance_index+0x2c>
 8004ad2:	89fa      	ldrh	r2, [r7, #14]
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	db08      	blt.n	8004aee <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	425b      	negs	r3, r3
 8004ae4:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8004ae6:	89fa      	ldrh	r2, [r7, #14]
 8004ae8:	89bb      	ldrh	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8004aee:	89fb      	ldrh	r3, [r7, #14]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4611      	mov	r1, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	80fb      	strh	r3, [r7, #6]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	889b      	ldrh	r3, [r3, #4]
 8004b16:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	843b      	strh	r3, [r7, #32]
 8004b1c:	88bb      	ldrh	r3, [r7, #4]
 8004b1e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004b20:	8c3a      	ldrh	r2, [r7, #32]
 8004b22:	8bfb      	ldrh	r3, [r7, #30]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d304      	bcc.n	8004b32 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8004b28:	8c3a      	ldrh	r2, [r7, #32]
 8004b2a:	8bfb      	ldrh	r3, [r7, #30]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	e008      	b.n	8004b44 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	8c39      	ldrh	r1, [r7, #32]
 8004b3a:	8bfb      	ldrh	r3, [r7, #30]
 8004b3c:	1acb      	subs	r3, r1, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004b44:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8004b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <_tu_fifo_peek+0x54>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e037      	b.n	8004bc0 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	889b      	ldrh	r3, [r3, #4]
 8004b54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d91b      	bls.n	8004b92 <_tu_fifo_peek+0x96>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	889b      	ldrh	r3, [r3, #4]
 8004b66:	8afa      	ldrh	r2, [r7, #22]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d305      	bcc.n	8004b78 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	889b      	ldrh	r3, [r3, #4]
 8004b70:	8afa      	ldrh	r2, [r7, #22]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	82bb      	strh	r3, [r7, #20]
 8004b76:	e004      	b.n	8004b82 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	889a      	ldrh	r2, [r3, #4]
 8004b7c:	8afb      	ldrh	r3, [r7, #22]
 8004b7e:	4413      	add	r3, r2
 8004b80:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	8aba      	ldrh	r2, [r7, #20]
 8004b86:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004b88:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004b8a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	889b      	ldrh	r3, [r3, #4]
 8004b90:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	889b      	ldrh	r3, [r3, #4]
 8004b96:	827b      	strh	r3, [r7, #18]
 8004b98:	88bb      	ldrh	r3, [r7, #4]
 8004b9a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004b9c:	e003      	b.n	8004ba6 <_tu_fifo_peek+0xaa>
 8004b9e:	8a3a      	ldrh	r2, [r7, #16]
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	823b      	strh	r3, [r7, #16]
 8004ba6:	8a7a      	ldrh	r2, [r7, #18]
 8004ba8:	8a3b      	ldrh	r3, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d9f7      	bls.n	8004b9e <_tu_fifo_peek+0xa2>
  return idx;
 8004bae:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004bb0:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8004bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fe7a 	bl	80048b2 <_ff_pull>

  return true;
 8004bbe:	2301      	movs	r3, #1
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	; 0x30
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	80fb      	strh	r3, [r7, #6]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	889b      	ldrh	r3, [r3, #4]
 8004be2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004be4:	88bb      	ldrh	r3, [r7, #4]
 8004be6:	843b      	strh	r3, [r7, #32]
 8004be8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bea:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004bec:	8c3a      	ldrh	r2, [r7, #32]
 8004bee:	8bfb      	ldrh	r3, [r7, #30]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d304      	bcc.n	8004bfe <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8004bf4:	8c3a      	ldrh	r2, [r7, #32]
 8004bf6:	8bfb      	ldrh	r3, [r7, #30]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	e008      	b.n	8004c10 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	8c39      	ldrh	r1, [r7, #32]
 8004c06:	8bfb      	ldrh	r3, [r7, #30]
 8004c08:	1acb      	subs	r3, r1, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004c10:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8004c12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <_tu_fifo_peek_n+0x54>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e041      	b.n	8004ca0 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	889b      	ldrh	r3, [r3, #4]
 8004c20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d91b      	bls.n	8004c5e <_tu_fifo_peek_n+0x96>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	88bb      	ldrh	r3, [r7, #4]
 8004c2c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	889b      	ldrh	r3, [r3, #4]
 8004c32:	8afa      	ldrh	r2, [r7, #22]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d305      	bcc.n	8004c44 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	889b      	ldrh	r3, [r3, #4]
 8004c3c:	8afa      	ldrh	r2, [r7, #22]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	82bb      	strh	r3, [r7, #20]
 8004c42:	e004      	b.n	8004c4e <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	889a      	ldrh	r2, [r3, #4]
 8004c48:	8afb      	ldrh	r3, [r7, #22]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	8aba      	ldrh	r2, [r7, #20]
 8004c52:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004c54:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004c56:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	889b      	ldrh	r3, [r3, #4]
 8004c5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004c5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d201      	bcs.n	8004c6a <_tu_fifo_peek_n+0xa2>
 8004c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c68:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	889b      	ldrh	r3, [r3, #4]
 8004c6e:	827b      	strh	r3, [r7, #18]
 8004c70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c72:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004c74:	e003      	b.n	8004c7e <_tu_fifo_peek_n+0xb6>
 8004c76:	8a3a      	ldrh	r2, [r7, #16]
 8004c78:	8a7b      	ldrh	r3, [r7, #18]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	823b      	strh	r3, [r7, #16]
 8004c7e:	8a7a      	ldrh	r2, [r7, #18]
 8004c80:	8a3b      	ldrh	r3, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d9f7      	bls.n	8004c76 <_tu_fifo_peek_n+0xae>
  return idx;
 8004c86:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004c88:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8004c8a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	460b      	mov	r3, r1
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fe29 	bl	80048f0 <_ff_pull_n>

  return n;
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3728      	adds	r7, #40	; 0x28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b092      	sub	sp, #72	; 0x48
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	80fb      	strh	r3, [r7, #6]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <_tu_fifo_write_n+0x20>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e0bc      	b.n	8004e42 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	891b      	ldrh	r3, [r3, #8]
 8004ccc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	895b      	ldrh	r3, [r3, #10]
 8004cd2:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	79db      	ldrb	r3, [r3, #7]
 8004cdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f083 0301 	eor.w	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d036      	beq.n	8004d5a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	889b      	ldrh	r3, [r3, #4]
 8004cf0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cf4:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d00:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d04:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8004d06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004d08:	8c3b      	ldrh	r3, [r7, #32]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d304      	bcc.n	8004d18 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004d0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004d10:	8c3b      	ldrh	r3, [r7, #32]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	e008      	b.n	8004d2a <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004d20:	8c3b      	ldrh	r3, [r7, #32]
 8004d22:	1acb      	subs	r3, r1, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004d2a:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004d2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004d2e:	8bfb      	ldrh	r3, [r7, #30]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d904      	bls.n	8004d3e <_tu_fifo_write_n+0x96>
 8004d34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004d36:	8bfb      	ldrh	r3, [r7, #30]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	e000      	b.n	8004d40 <_tu_fifo_write_n+0x98>
 8004d3e:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004d40:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d48:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	bf28      	it	cs
 8004d52:	4613      	movcs	r3, r2
 8004d54:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8004d56:	80fb      	strh	r3, [r7, #6]
 8004d58:	e04b      	b.n	8004df2 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	889b      	ldrh	r3, [r3, #4]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d317      	bcc.n	8004d94 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8004d64:	797b      	ldrb	r3, [r7, #5]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	8892      	ldrh	r2, [r2, #4]
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	88d2      	ldrh	r2, [r2, #6]
 8004d76:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004d7a:	b292      	uxth	r2, r2
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	4413      	add	r3, r2
 8004d86:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	889b      	ldrh	r3, [r3, #4]
 8004d8c:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8004d8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d92:	e02e      	b.n	8004df2 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	889b      	ldrh	r3, [r3, #4]
 8004d98:	83bb      	strh	r3, [r7, #28]
 8004d9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d9c:	837b      	strh	r3, [r7, #26]
 8004d9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da0:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8004da2:	8b7a      	ldrh	r2, [r7, #26]
 8004da4:	8b3b      	ldrh	r3, [r7, #24]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d304      	bcc.n	8004db4 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8004daa:	8b7a      	ldrh	r2, [r7, #26]
 8004dac:	8b3b      	ldrh	r3, [r7, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	e008      	b.n	8004dc6 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004db4:	8bbb      	ldrh	r3, [r7, #28]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	8b79      	ldrh	r1, [r7, #26]
 8004dbc:	8b3b      	ldrh	r3, [r7, #24]
 8004dbe:	1acb      	subs	r3, r1, r3
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004dc6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8004dc8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	889b      	ldrh	r3, [r3, #4]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	db0c      	blt.n	8004df2 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8898      	ldrh	r0, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	889a      	ldrh	r2, [r3, #4]
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7ff fe61 	bl	8004ab0 <advance_index>
 8004dee:	4603      	mov	r3, r0
 8004df0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	889b      	ldrh	r3, [r3, #4]
 8004dfc:	82fb      	strh	r3, [r7, #22]
 8004dfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e00:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004e02:	e003      	b.n	8004e0c <_tu_fifo_write_n+0x164>
 8004e04:	8aba      	ldrh	r2, [r7, #20]
 8004e06:	8afb      	ldrh	r3, [r7, #22]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	82bb      	strh	r3, [r7, #20]
 8004e0c:	8afa      	ldrh	r2, [r7, #22]
 8004e0e:	8abb      	ldrh	r3, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d9f7      	bls.n	8004e04 <_tu_fifo_write_n+0x15c>
  return idx;
 8004e14:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004e16:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004e18:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	797b      	ldrb	r3, [r7, #5]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	460b      	mov	r3, r1
 8004e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fc66 	bl	80046f6 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	889b      	ldrh	r3, [r3, #4]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fe3c 	bl	8004ab0 <advance_index>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004e40:	88fb      	ldrh	r3, [r7, #6]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3740      	adds	r7, #64	; 0x40
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	4611      	mov	r1, r2
 8004e56:	461a      	mov	r2, r3
 8004e58:	460b      	mov	r3, r1
 8004e5a:	80fb      	strh	r3, [r7, #6]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	891b      	ldrh	r3, [r3, #8]
 8004e64:	b298      	uxth	r0, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	895b      	ldrh	r3, [r3, #10]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	88f9      	ldrh	r1, [r7, #6]
 8004e6e:	797a      	ldrb	r2, [r7, #5]
 8004e70:	9201      	str	r2, [sp, #4]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	4603      	mov	r3, r0
 8004e76:	460a      	mov	r2, r1
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff fea4 	bl	8004bc8 <_tu_fifo_peek_n>
 8004e80:	4603      	mov	r3, r0
 8004e82:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8898      	ldrh	r0, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	895b      	ldrh	r3, [r3, #10]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7ff fe0d 	bl	8004ab0 <advance_index>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8899      	ldrh	r1, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	891b      	ldrh	r3, [r3, #8]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	895b      	ldrh	r3, [r3, #10]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8279      	strh	r1, [r7, #18]
 8004ec2:	823a      	strh	r2, [r7, #16]
 8004ec4:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8004ec6:	8a3a      	ldrh	r2, [r7, #16]
 8004ec8:	89fb      	ldrh	r3, [r7, #14]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d304      	bcc.n	8004ed8 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004ece:	8a3a      	ldrh	r2, [r7, #16]
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	e008      	b.n	8004eea <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004ed8:	8a7b      	ldrh	r3, [r7, #18]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	8a39      	ldrh	r1, [r7, #16]
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	1acb      	subs	r3, r1, r3
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	8892      	ldrh	r2, [r2, #4]
 8004eee:	82fb      	strh	r3, [r7, #22]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	82bb      	strh	r3, [r7, #20]
 8004ef4:	8afa      	ldrh	r2, [r7, #22]
 8004ef6:	8abb      	ldrh	r3, [r7, #20]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bf28      	it	cs
 8004efc:	4613      	movcs	r3, r2
 8004efe:	b29b      	uxth	r3, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	891b      	ldrh	r3, [r3, #8]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	895b      	ldrh	r3, [r3, #10]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	429a      	cmp	r2, r3
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8899      	ldrh	r1, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	891b      	ldrh	r3, [r3, #8]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	895b      	ldrh	r3, [r3, #10]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	81f9      	strh	r1, [r7, #14]
 8004f50:	81ba      	strh	r2, [r7, #12]
 8004f52:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004f54:	89ba      	ldrh	r2, [r7, #12]
 8004f56:	897b      	ldrh	r3, [r7, #10]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d304      	bcc.n	8004f66 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004f5c:	89ba      	ldrh	r2, [r7, #12]
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	e008      	b.n	8004f78 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	89b9      	ldrh	r1, [r7, #12]
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	1acb      	subs	r3, r1, r3
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4413      	add	r3, r2
 8004f76:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	8892      	ldrh	r2, [r2, #4]
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bf2c      	ite	cs
 8004f80:	2301      	movcs	r3, #1
 8004f82:	2300      	movcc	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8899      	ldrh	r1, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	891b      	ldrh	r3, [r3, #8]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	895b      	ldrh	r3, [r3, #10]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	82f9      	strh	r1, [r7, #22]
 8004fac:	82ba      	strh	r2, [r7, #20]
 8004fae:	827b      	strh	r3, [r7, #18]
 8004fb0:	8afb      	ldrh	r3, [r7, #22]
 8004fb2:	823b      	strh	r3, [r7, #16]
 8004fb4:	8abb      	ldrh	r3, [r7, #20]
 8004fb6:	81fb      	strh	r3, [r7, #14]
 8004fb8:	8a7b      	ldrh	r3, [r7, #18]
 8004fba:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8004fbc:	89fa      	ldrh	r2, [r7, #14]
 8004fbe:	89bb      	ldrh	r3, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d304      	bcc.n	8004fce <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8004fc4:	89fa      	ldrh	r2, [r7, #14]
 8004fc6:	89bb      	ldrh	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	e008      	b.n	8004fe0 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004fce:	8a3b      	ldrh	r3, [r7, #16]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	89f9      	ldrh	r1, [r7, #14]
 8004fd6:	89bb      	ldrh	r3, [r7, #12]
 8004fd8:	1acb      	subs	r3, r1, r3
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004fe0:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8004fe2:	8afa      	ldrh	r2, [r7, #22]
 8004fe4:	897b      	ldrh	r3, [r7, #10]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d904      	bls.n	8004ff4 <tu_fifo_remaining+0x62>
 8004fea:	8afa      	ldrh	r2, [r7, #22]
 8004fec:	897b      	ldrh	r3, [r7, #10]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	e000      	b.n	8004ff6 <tu_fifo_remaining+0x64>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	895b      	ldrh	r3, [r3, #10]
 8005016:	b29b      	uxth	r3, r3
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fd6e 	bl	8004afc <_tu_fifo_peek>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8898      	ldrh	r0, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	b29b      	uxth	r3, r3
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	b292      	uxth	r2, r2
 8005032:	4619      	mov	r1, r3
 8005034:	f7ff fd3c 	bl	8004ab0 <advance_index>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	2300      	movs	r3, #0
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fef3 	bl	8004e4a <_tu_fifo_read_n>
 8005064:	4603      	mov	r3, r0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	4613      	mov	r3, r2
 800507a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	2301      	movs	r3, #1
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fee1 	bl	8004e4a <_tu_fifo_read_n>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	891b      	ldrh	r3, [r3, #8]
 80050a0:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ff47 	bl	8004f36 <tu_fifo_full>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <tu_fifo_write+0x36>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	79db      	ldrb	r3, [r3, #7]
 80050b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <tu_fifo_write+0x36>
  {
    ret = false;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]
 80050c6:	e022      	b.n	800510e <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	889b      	ldrh	r3, [r3, #4]
 80050cc:	823b      	strh	r3, [r7, #16]
 80050ce:	8abb      	ldrh	r3, [r7, #20]
 80050d0:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80050d2:	e003      	b.n	80050dc <tu_fifo_write+0x4a>
 80050d4:	89fa      	ldrh	r2, [r7, #14]
 80050d6:	8a3b      	ldrh	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	81fb      	strh	r3, [r7, #14]
 80050dc:	8a3a      	ldrh	r2, [r7, #16]
 80050de:	89fb      	ldrh	r3, [r7, #14]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d9f7      	bls.n	80050d4 <tu_fifo_write+0x42>
  return idx;
 80050e4:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80050e6:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80050e8:	8a7b      	ldrh	r3, [r7, #18]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fae2 	bl	80046b8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	889b      	ldrh	r3, [r3, #4]
 80050f8:	8ab9      	ldrh	r1, [r7, #20]
 80050fa:	2201      	movs	r2, #1
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fcd7 	bl	8004ab0 <advance_index>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	811a      	strh	r2, [r3, #8]

    ret = true;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	2300      	movs	r3, #0
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fdbb 	bl	8004ca8 <_tu_fifo_write_n>
 8005132:	4603      	mov	r3, r0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	2301      	movs	r3, #1
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff fda9 	bl	8004ca8 <_tu_fifo_write_n>
 8005156:	4603      	mov	r3, r0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	79d3      	ldrb	r3, [r2, #7]
 8005192:	78f9      	ldrb	r1, [r7, #3]
 8005194:	f361 13c7 	bfi	r3, r1, #7, #1
 8005198:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800519a:	2301      	movs	r3, #1
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <get_driver+0x5c>)
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <get_driver+0x60>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	79fa      	ldrb	r2, [r7, #7]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d208      	bcs.n	80051d4 <get_driver+0x2c>
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <get_driver+0x64>)
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	79fa      	ldrb	r2, [r7, #7]
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	e010      	b.n	80051f6 <get_driver+0x4e>
    drvid -= _app_driver_count;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <get_driver+0x60>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	79fa      	ldrb	r2, [r7, #7]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d807      	bhi.n	80051f4 <get_driver+0x4c>
 80051e4:	79fa      	ldrb	r2, [r7, #7]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <get_driver+0x68>)
 80051f0:	4413      	add	r3, r2
 80051f2:	e000      	b.n	80051f6 <get_driver+0x4e>

  return NULL;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	00000000 	.word	0x00000000
 8005208:	200019dc 	.word	0x200019dc
 800520c:	200019d8 	.word	0x200019d8
 8005210:	08008acc 	.word	0x08008acc

08005214 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <tud_mounted+0x20>)
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	200019ac 	.word	0x200019ac

08005238 <tud_suspended>:

bool tud_suspended(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <tud_suspended+0x24>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	200019ac 	.word	0x200019ac

08005260 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <tud_inited+0x1c>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2bff      	cmp	r3, #255	; 0xff
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000031 	.word	0x20000031

08005280 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 800528a:	f7ff ffe9 	bl	8005260 <tud_inited>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <tud_init+0x18>
 8005294:	2301      	movs	r3, #1
 8005296:	e054      	b.n	8005342 <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8005298:	222b      	movs	r2, #43	; 0x2b
 800529a:	2100      	movs	r1, #0
 800529c:	482b      	ldr	r0, [pc, #172]	; (800534c <tud_init+0xcc>)
 800529e:	f003 faed 	bl	800887c <memset>
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <tud_init+0xd0>)
 80052a4:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff58 	bl	8005160 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 80052b0:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <tud_init+0xd4>)
 80052b4:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 80052b6:	4b27      	ldr	r3, [pc, #156]	; (8005354 <tud_init+0xd4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <tud_init+0x54>
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <tud_init+0xd8>)
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d000      	beq.n	80052d0 <tud_init+0x50>
 80052ce:	be00      	bkpt	0x0000
 80052d0:	2300      	movs	r3, #0
 80052d2:	e036      	b.n	8005342 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 80052d4:	4b21      	ldr	r3, [pc, #132]	; (800535c <tud_init+0xdc>)
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80052da:	4821      	ldr	r0, [pc, #132]	; (8005360 <tud_init+0xe0>)
 80052dc:	f3af 8000 	nop.w
 80052e0:	4603      	mov	r3, r0
 80052e2:	4a20      	ldr	r2, [pc, #128]	; (8005364 <tud_init+0xe4>)
 80052e4:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e018      	b.n	800531e <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80052ec:	7ffb      	ldrb	r3, [r7, #31]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff5a 	bl	80051a8 <get_driver>
 80052f4:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <tud_init+0x92>
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <tud_init+0xd8>)
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d000      	beq.n	800530e <tud_init+0x8e>
 800530c:	be00      	bkpt	0x0000
 800530e:	2300      	movs	r3, #0
 8005310:	e017      	b.n	8005342 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005318:	7ffb      	ldrb	r3, [r7, #31]
 800531a:	3301      	adds	r3, #1
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <tud_init+0xe0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	7ffb      	ldrb	r3, [r7, #31]
 8005326:	429a      	cmp	r2, r3
 8005328:	dae0      	bge.n	80052ec <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 800532a:	4a0f      	ldr	r2, [pc, #60]	; (8005368 <tud_init+0xe8>)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	4618      	mov	r0, r3
 8005334:	f002 f808 	bl	8007348 <dcd_init>
  dcd_int_enable(rhport);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4618      	mov	r0, r3
 800533c:	f002 f86c 	bl	8007418 <dcd_int_enable>

  return true;
 8005340:	2301      	movs	r3, #1
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	200019ac 	.word	0x200019ac
 8005350:	20000034 	.word	0x20000034
 8005354:	20001aa0 	.word	0x20001aa0
 8005358:	e000edf0 	.word	0xe000edf0
 800535c:	00000000 	.word	0x00000000
 8005360:	200019dc 	.word	0x200019dc
 8005364:	200019d8 	.word	0x200019d8
 8005368:	20000031 	.word	0x20000031

0800536c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e019      	b.n	80053b0 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ff12 	bl	80051a8 <get_driver>
 8005384:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <configuration_reset+0x34>
 800538c:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <configuration_reset+0x78>)
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01f      	beq.n	80053dc <configuration_reset+0x70>
 800539c:	be00      	bkpt	0x0000
 800539e:	e01d      	b.n	80053dc <configuration_reset+0x70>
    driver->reset(rhport);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	79fa      	ldrb	r2, [r7, #7]
 80053a6:	4610      	mov	r0, r2
 80053a8:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	3301      	adds	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
 80053b0:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <configuration_reset+0x7c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	dadf      	bge.n	800537c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80053bc:	222b      	movs	r2, #43	; 0x2b
 80053be:	2100      	movs	r1, #0
 80053c0:	480a      	ldr	r0, [pc, #40]	; (80053ec <configuration_reset+0x80>)
 80053c2:	f003 fa5b 	bl	800887c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80053c6:	2210      	movs	r2, #16
 80053c8:	21ff      	movs	r1, #255	; 0xff
 80053ca:	4809      	ldr	r0, [pc, #36]	; (80053f0 <configuration_reset+0x84>)
 80053cc:	f003 fa56 	bl	800887c <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80053d0:	220c      	movs	r2, #12
 80053d2:	21ff      	movs	r1, #255	; 0xff
 80053d4:	4807      	ldr	r0, [pc, #28]	; (80053f4 <configuration_reset+0x88>)
 80053d6:	f003 fa51 	bl	800887c <memset>
 80053da:	e000      	b.n	80053de <configuration_reset+0x72>
    TU_ASSERT(driver, );
 80053dc:	bf00      	nop
}
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000edf0 	.word	0xe000edf0
 80053e8:	200019dc 	.word	0x200019dc
 80053ec:	200019ac 	.word	0x200019ac
 80053f0:	200019af 	.word	0x200019af
 80053f4:	200019bf 	.word	0x200019bf

080053f8 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ffb1 	bl	800536c <configuration_reset>
  usbd_control_reset();
 800540a:	f001 fbf7 	bl	8006bfc <usbd_control_reset>
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8005418:	b590      	push	{r4, r7, lr}
 800541a:	b091      	sub	sp, #68	; 0x44
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8005424:	f7ff ff1c 	bl	8005260 <tud_inited>
 8005428:	4603      	mov	r3, r0
 800542a:	f083 0301 	eor.w	r3, r3, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 812a 	bne.w	800568a <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005436:	4b99      	ldr	r3, [pc, #612]	; (800569c <tud_task_ext+0x284>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2000      	movs	r0, #0
 8005450:	4798      	blx	r3
}
 8005452:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	3304      	adds	r3, #4
 8005458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fdd1 	bl	8005002 <tu_fifo_read>
 8005460:	4603      	mov	r3, r0
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2001      	movs	r0, #1
 800546e:	4798      	blx	r3
}
 8005470:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8005472:	7ffb      	ldrb	r3, [r7, #31]
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 8107 	bne.w	800568e <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8005480:	7a7b      	ldrb	r3, [r7, #9]
 8005482:	3b01      	subs	r3, #1
 8005484:	2b07      	cmp	r3, #7
 8005486:	f200 80ea 	bhi.w	800565e <tud_task_ext+0x246>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <tud_task_ext+0x78>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054b1 	.word	0x080054b1
 8005494:	080054c1 	.word	0x080054c1
 8005498:	0800565f 	.word	0x0800565f
 800549c:	08005605 	.word	0x08005605
 80054a0:	08005635 	.word	0x08005635
 80054a4:	080054d7 	.word	0x080054d7
 80054a8:	08005545 	.word	0x08005545
 80054ac:	0800564f 	.word	0x0800564f
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80054b0:	7a3b      	ldrb	r3, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ffa0 	bl	80053f8 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80054b8:	7b3a      	ldrb	r2, [r7, #12]
 80054ba:	4b79      	ldr	r3, [pc, #484]	; (80056a0 <tud_task_ext+0x288>)
 80054bc:	709a      	strb	r2, [r3, #2]
      break;
 80054be:	e0e3      	b.n	8005688 <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 80054c0:	7a3b      	ldrb	r3, [r7, #8]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff98 	bl	80053f8 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80054c8:	4b76      	ldr	r3, [pc, #472]	; (80056a4 <tud_task_ext+0x28c>)
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80d1 	beq.w	8005672 <tud_task_ext+0x25a>
 80054d0:	f7fb f87a 	bl	80005c8 <tud_umount_cb>
      break;
 80054d4:	e0cd      	b.n	8005672 <tud_task_ext+0x25a>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80054d6:	4a72      	ldr	r2, [pc, #456]	; (80056a0 <tud_task_ext+0x288>)
 80054d8:	7813      	ldrb	r3, [r2, #0]
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80054e0:	4a6f      	ldr	r2, [pc, #444]	; (80056a0 <tud_task_ext+0x288>)
 80054e2:	7fd3      	ldrb	r3, [r2, #31]
 80054e4:	f36f 0300 	bfc	r3, #0, #1
 80054e8:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80054ea:	4a6d      	ldr	r2, [pc, #436]	; (80056a0 <tud_task_ext+0x288>)
 80054ec:	7fd3      	ldrb	r3, [r2, #31]
 80054ee:	f36f 0382 	bfc	r3, #2, #1
 80054f2:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 80054f4:	4a6a      	ldr	r2, [pc, #424]	; (80056a0 <tud_task_ext+0x288>)
 80054f6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80054fa:	f36f 0300 	bfc	r3, #0, #1
 80054fe:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8005502:	4a67      	ldr	r2, [pc, #412]	; (80056a0 <tud_task_ext+0x288>)
 8005504:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005508:	f36f 0382 	bfc	r3, #2, #1
 800550c:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8005510:	7a3a      	ldrb	r2, [r7, #8]
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 f8e2 	bl	80056e4 <process_control_request>
 8005520:	4603      	mov	r3, r0
 8005522:	f083 0301 	eor.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a4 	beq.w	8005676 <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 800552e:	7a3b      	ldrb	r3, [r7, #8]
 8005530:	2100      	movs	r1, #0
 8005532:	4618      	mov	r0, r3
 8005534:	f002 fb4c 	bl	8007bd0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8005538:	7a3b      	ldrb	r3, [r7, #8]
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	4618      	mov	r0, r3
 800553e:	f002 fb47 	bl	8007bd0 <dcd_edpt_stall>
        }
      break;
 8005542:	e098      	b.n	8005676 <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8005544:	7b3b      	ldrb	r3, [r7, #12]
 8005546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800554a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800554e:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005550:	7dbb      	ldrb	r3, [r7, #22]
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8005558:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800555c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005560:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005568:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 800556c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005570:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005574:	494a      	ldr	r1, [pc, #296]	; (80056a0 <tud_task_ext+0x288>)
 8005576:	0052      	lsls	r2, r2, #1
 8005578:	440a      	add	r2, r1
 800557a:	4413      	add	r3, r2
 800557c:	f103 0218 	add.w	r2, r3, #24
 8005580:	79d3      	ldrb	r3, [r2, #7]
 8005582:	f36f 0300 	bfc	r3, #0, #1
 8005586:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8005588:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800558c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005590:	4943      	ldr	r1, [pc, #268]	; (80056a0 <tud_task_ext+0x288>)
 8005592:	0052      	lsls	r2, r2, #1
 8005594:	440a      	add	r2, r1
 8005596:	4413      	add	r3, r2
 8005598:	f103 0218 	add.w	r2, r3, #24
 800559c:	79d3      	ldrb	r3, [r2, #7]
 800559e:	f36f 0382 	bfc	r3, #2, #1
 80055a2:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 80055a4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80055ac:	7a38      	ldrb	r0, [r7, #8]
 80055ae:	7b7a      	ldrb	r2, [r7, #13]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80055b6:	f001 fb57 	bl	8006c68 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80055ba:	e065      	b.n	8005688 <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80055bc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80055c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80055c4:	4936      	ldr	r1, [pc, #216]	; (80056a0 <tud_task_ext+0x288>)
 80055c6:	0052      	lsls	r2, r2, #1
 80055c8:	440a      	add	r2, r1
 80055ca:	4413      	add	r3, r2
 80055cc:	3313      	adds	r3, #19
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff fde9 	bl	80051a8 <get_driver>
 80055d6:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <tud_task_ext+0x1da>
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <tud_task_ext+0x290>)
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d051      	beq.n	8005692 <tud_task_ext+0x27a>
 80055ee:	be00      	bkpt	0x0000
 80055f0:	e04f      	b.n	8005692 <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	691c      	ldr	r4, [r3, #16]
 80055f6:	7a38      	ldrb	r0, [r7, #8]
 80055f8:	7b7a      	ldrb	r2, [r7, #13]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005600:	47a0      	blx	r4
      break;
 8005602:	e041      	b.n	8005688 <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <tud_task_ext+0x288>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d033      	beq.n	800567a <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <tud_task_ext+0x294>)
 8005614:	2b00      	cmp	r3, #0
 8005616:	d030      	beq.n	800567a <tud_task_ext+0x262>
 8005618:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <tud_task_ext+0x288>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa ffd7 	bl	80005e0 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8005632:	e022      	b.n	800567a <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8005634:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <tud_task_ext+0x288>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01d      	beq.n	800567e <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <tud_task_ext+0x298>)
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01a      	beq.n	800567e <tud_task_ext+0x266>
 8005648:	f7fa ffdc 	bl	8000604 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 800564c:	e017      	b.n	800567e <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d016      	beq.n	8005682 <tud_task_ext+0x26a>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
      break;
 800565c:	e011      	b.n	8005682 <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <tud_task_ext+0x290>)
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <tud_task_ext+0x26e>
 800566e:	be00      	bkpt	0x0000
      break;
 8005670:	e009      	b.n	8005686 <tud_task_ext+0x26e>
      break;
 8005672:	bf00      	nop
 8005674:	e6df      	b.n	8005436 <tud_task_ext+0x1e>
      break;
 8005676:	bf00      	nop
 8005678:	e6dd      	b.n	8005436 <tud_task_ext+0x1e>
      break;
 800567a:	bf00      	nop
 800567c:	e6db      	b.n	8005436 <tud_task_ext+0x1e>
      break;
 800567e:	bf00      	nop
 8005680:	e6d9      	b.n	8005436 <tud_task_ext+0x1e>
      break;
 8005682:	bf00      	nop
 8005684:	e6d7      	b.n	8005436 <tud_task_ext+0x1e>
      break;
 8005686:	bf00      	nop
  {
 8005688:	e6d5      	b.n	8005436 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 8005692:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8005694:	3744      	adds	r7, #68	; 0x44
 8005696:	46bd      	mov	sp, r7
 8005698:	bd90      	pop	{r4, r7, pc}
 800569a:	bf00      	nop
 800569c:	20001aa0 	.word	0x20001aa0
 80056a0:	200019ac 	.word	0x200019ac
 80056a4:	080005c9 	.word	0x080005c9
 80056a8:	e000edf0 	.word	0xe000edf0
 80056ac:	080005e1 	.word	0x080005e1
 80056b0:	08000605 	.word	0x08000605

080056b4 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 faa4 	bl	8006c14 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	7bf8      	ldrb	r0, [r7, #15]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	2101      	movs	r1, #1
 80056d6:	4798      	blx	r3
 80056d8:	4603      	mov	r3, r0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b094      	sub	sp, #80	; 0x50
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80056f0:	2000      	movs	r0, #0
 80056f2:	f001 fa8f 	bl	8006c14 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d10a      	bne.n	800571a <process_control_request+0x36>
 8005704:	4ba4      	ldr	r3, [pc, #656]	; (8005998 <process_control_request+0x2b4>)
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d000      	beq.n	8005716 <process_control_request+0x32>
 8005714:	be00      	bkpt	0x0000
 8005716:	2300      	movs	r3, #0
 8005718:	e247      	b.n	8005baa <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d10f      	bne.n	8005748 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8005728:	4b9c      	ldr	r3, [pc, #624]	; (800599c <process_control_request+0x2b8>)
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <process_control_request+0x4e>
 800572e:	2300      	movs	r3, #0
 8005730:	e23b      	b.n	8005baa <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8005732:	489a      	ldr	r0, [pc, #616]	; (800599c <process_control_request+0x2b8>)
 8005734:	f001 fa6e 	bl	8006c14 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	2101      	movs	r1, #1
 800573e:	4618      	mov	r0, r3
 8005740:	f3af 8000 	nop.w
 8005744:	4603      	mov	r3, r0
 8005746:	e230      	b.n	8005baa <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	f000 8177 	beq.w	8005a46 <process_control_request+0x362>
 8005758:	2b02      	cmp	r3, #2
 800575a:	f300 821a 	bgt.w	8005b92 <process_control_request+0x4ae>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <process_control_request+0x86>
 8005762:	2b01      	cmp	r3, #1
 8005764:	f000 811e 	beq.w	80059a4 <process_control_request+0x2c0>
 8005768:	e213      	b.n	8005b92 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b20      	cmp	r3, #32
 8005776:	d123      	bne.n	80057c0 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	889b      	ldrh	r3, [r3, #4]
 800577c:	b29b      	uxth	r3, r3
 800577e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005780:	8afb      	ldrh	r3, [r7, #22]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800578c:	2b0f      	cmp	r3, #15
 800578e:	d901      	bls.n	8005794 <process_control_request+0xb0>
 8005790:	2300      	movs	r3, #0
 8005792:	e20a      	b.n	8005baa <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005798:	4a81      	ldr	r2, [pc, #516]	; (80059a0 <process_control_request+0x2bc>)
 800579a:	4413      	add	r3, r2
 800579c:	78db      	ldrb	r3, [r3, #3]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fd02 	bl	80051a8 <get_driver>
 80057a4:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <process_control_request+0xcc>
 80057ac:	2300      	movs	r3, #0
 80057ae:	e1fc      	b.n	8005baa <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff7c 	bl	80056b4 <invoke_class_control>
 80057bc:	4603      	mov	r3, r0
 80057be:	e1f4      	b.n	8005baa <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80057ce:	4b72      	ldr	r3, [pc, #456]	; (8005998 <process_control_request+0x2b4>)
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <process_control_request+0xfc>
 80057de:	be00      	bkpt	0x0000
        return false;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e1e2      	b.n	8005baa <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b09      	cmp	r3, #9
 80057ea:	f200 80c8 	bhi.w	800597e <process_control_request+0x29a>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <process_control_request+0x110>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005949 	.word	0x08005949
 80057f8:	08005925 	.word	0x08005925
 80057fc:	0800597f 	.word	0x0800597f
 8005800:	08005901 	.word	0x08005901
 8005804:	0800597f 	.word	0x0800597f
 8005808:	0800581d 	.word	0x0800581d
 800580c:	080058e7 	.word	0x080058e7
 8005810:	0800597f 	.word	0x0800597f
 8005814:	08005841 	.word	0x08005841
 8005818:	08005859 	.word	0x08005859
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 800581c:	6838      	ldr	r0, [r7, #0]
 800581e:	f001 fa09 	bl	8006c34 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	885b      	ldrh	r3, [r3, #2]
 8005826:	b29b      	uxth	r3, r3
 8005828:	b2da      	uxtb	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fe0a 	bl	8007448 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005834:	4a5a      	ldr	r2, [pc, #360]	; (80059a0 <process_control_request+0x2bc>)
 8005836:	7813      	ldrb	r3, [r2, #0]
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	7013      	strb	r3, [r2, #0]
        break;
 800583e:	e0aa      	b.n	8005996 <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8005840:	4b57      	ldr	r3, [pc, #348]	; (80059a0 <process_control_request+0x2bc>)
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8005848:	f107 020f 	add.w	r2, r7, #15
 800584c:	79f8      	ldrb	r0, [r7, #7]
 800584e:	2301      	movs	r3, #1
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	f001 f963 	bl	8006b1c <tud_control_xfer>
        }
        break;
 8005856:	e09e      	b.n	8005996 <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	885b      	ldrh	r3, [r3, #2]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <process_control_request+0x2bc>)
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800586c:	429a      	cmp	r2, r3
 800586e:	d030      	beq.n	80058d2 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8005870:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <process_control_request+0x2bc>)
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	4618      	mov	r0, r3
 800587e:	f001 ff3f 	bl	8007700 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8005882:	4b47      	ldr	r3, [pc, #284]	; (80059a0 <process_control_request+0x2bc>)
 8005884:	789b      	ldrb	r3, [r3, #2]
 8005886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fd6d 	bl	800536c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8005892:	4a43      	ldr	r2, [pc, #268]	; (80059a0 <process_control_request+0x2bc>)
 8005894:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005898:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 800589a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d017      	beq.n	80058d2 <process_control_request+0x1ee>
 80058a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f986 	bl	8005bbc <process_set_config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f083 0301 	eor.w	r3, r3, #1
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <process_control_request+0x1ee>
 80058bc:	4b36      	ldr	r3, [pc, #216]	; (8005998 <process_control_request+0x2b4>)
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d000      	beq.n	80058ce <process_control_request+0x1ea>
 80058cc:	be00      	bkpt	0x0000
 80058ce:	2300      	movs	r3, #0
 80058d0:	e16b      	b.n	8005baa <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 80058d2:	4a33      	ldr	r2, [pc, #204]	; (80059a0 <process_control_request+0x2bc>)
 80058d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058d8:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 f8aa 	bl	8006a38 <tud_control_status>
        }
        break;
 80058e4:	e057      	b.n	8005996 <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa82 	bl	8005df4 <process_get_descriptor>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f083 0301 	eor.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d04b      	beq.n	8005994 <process_control_request+0x2b0>
 80058fc:	2300      	movs	r3, #0
 80058fe:	e154      	b.n	8005baa <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	885b      	ldrh	r3, [r3, #2]
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <process_control_request+0x22a>
 800590a:	2300      	movs	r3, #0
 800590c:	e14d      	b.n	8005baa <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 800590e:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <process_control_request+0x2bc>)
 8005910:	7813      	ldrb	r3, [r2, #0]
 8005912:	f043 0308 	orr.w	r3, r3, #8
 8005916:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f88b 	bl	8006a38 <tud_control_status>
        break;
 8005922:	e038      	b.n	8005996 <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	885b      	ldrh	r3, [r3, #2]
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d001      	beq.n	8005932 <process_control_request+0x24e>
 800592e:	2300      	movs	r3, #0
 8005930:	e13b      	b.n	8005baa <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <process_control_request+0x2bc>)
 8005934:	7813      	ldrb	r3, [r2, #0]
 8005936:	f36f 03c3 	bfc	r3, #3, #1
 800593a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f879 	bl	8006a38 <tud_control_status>
        break;
 8005946:	e026      	b.n	8005996 <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <process_control_request+0x2bc>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	b2db      	uxtb	r3, r3
 8005950:	b29b      	uxth	r3, r3
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <process_control_request+0x2bc>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	089b      	lsrs	r3, r3, #2
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	b29b      	uxth	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 800596e:	f107 020c 	add.w	r2, r7, #12
 8005972:	79f8      	ldrb	r0, [r7, #7]
 8005974:	2302      	movs	r3, #2
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	f001 f8d0 	bl	8006b1c <tud_control_xfer>
        }
        break;
 800597c:	e00b      	b.n	8005996 <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <process_control_request+0x2b4>)
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d000      	beq.n	8005990 <process_control_request+0x2ac>
 800598e:	be00      	bkpt	0x0000
 8005990:	2300      	movs	r3, #0
 8005992:	e10a      	b.n	8005baa <process_control_request+0x4c6>
        break;
 8005994:	bf00      	nop
      }
    break;
 8005996:	e107      	b.n	8005ba8 <process_control_request+0x4c4>
 8005998:	e000edf0 	.word	0xe000edf0
 800599c:	00000000 	.word	0x00000000
 80059a0:	200019ac 	.word	0x200019ac

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	889b      	ldrh	r3, [r3, #4]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	82bb      	strh	r3, [r7, #20]
 80059ac:	8abb      	ldrh	r3, [r7, #20]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80059b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d901      	bls.n	80059c0 <process_control_request+0x2dc>
 80059bc:	2300      	movs	r3, #0
 80059be:	e0f4      	b.n	8005baa <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80059c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059c4:	4a7b      	ldr	r2, [pc, #492]	; (8005bb4 <process_control_request+0x4d0>)
 80059c6:	4413      	add	r3, r2
 80059c8:	78db      	ldrb	r3, [r3, #3]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fbec 	bl	80051a8 <get_driver>
 80059d0:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <process_control_request+0x2f8>
 80059d8:	2300      	movs	r3, #0
 80059da:	e0e6      	b.n	8005baa <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fe66 	bl	80056b4 <invoke_class_control>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f083 0301 	eor.w	r3, r3, #1
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d026      	beq.n	8005a42 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <process_control_request+0x322>
 8005a02:	2300      	movs	r3, #0
 8005a04:	e0d1      	b.n	8005baa <process_control_request+0x4c6>

        switch(p_request->bRequest)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	3b0a      	subs	r3, #10
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d816      	bhi.n	8005a3e <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8005a10:	2000      	movs	r0, #0
 8005a12:	f001 f8ff 	bl	8006c14 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b0a      	cmp	r3, #10
 8005a1c:	d109      	bne.n	8005a32 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8005a22:	f107 020b 	add.w	r2, r7, #11
 8005a26:	79f8      	ldrb	r0, [r7, #7]
 8005a28:	2301      	movs	r3, #1
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	f001 f876 	bl	8006b1c <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8005a30:	e008      	b.n	8005a44 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fffe 	bl	8006a38 <tud_control_status>
          break;
 8005a3c:	e002      	b.n	8005a44 <process_control_request+0x360>

          default: return false;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e0b3      	b.n	8005baa <process_control_request+0x4c6>
        }
      }
 8005a42:	bf00      	nop
    }
    break;
 8005a44:	e0b0      	b.n	8005ba8 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	889b      	ldrh	r3, [r3, #4]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	823b      	strh	r3, [r7, #16]
 8005a4e:	8a3b      	ldrh	r3, [r7, #16]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a5a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005a5c:	7cbb      	ldrb	r3, [r7, #18]
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8005a64:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005a68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a6c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	09db      	lsrs	r3, r3, #7
 8005a72:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005a74:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8005a78:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d90a      	bls.n	8005a96 <process_control_request+0x3b2>
 8005a80:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <process_control_request+0x4d4>)
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d000      	beq.n	8005a92 <process_control_request+0x3ae>
 8005a90:	be00      	bkpt	0x0000
 8005a92:	2300      	movs	r3, #0
 8005a94:	e089      	b.n	8005baa <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005a96:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8005a9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a9e:	4945      	ldr	r1, [pc, #276]	; (8005bb4 <process_control_request+0x4d0>)
 8005aa0:	0052      	lsls	r2, r2, #1
 8005aa2:	440a      	add	r2, r1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3313      	adds	r3, #19
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fb7c 	bl	80051a8 <get_driver>
 8005ab0:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <process_control_request+0x3e6>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e06f      	b.n	8005baa <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fdef 	bl	80056b4 <invoke_class_control>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	e067      	b.n	8005baa <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d018      	beq.n	8005b14 <process_control_request+0x430>
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	dc48      	bgt.n	8005b78 <process_control_request+0x494>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <process_control_request+0x40c>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d012      	beq.n	8005b14 <process_control_request+0x430>
 8005aee:	e043      	b.n	8005b78 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8005af0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fef7 	bl	80068ec <usbd_edpt_stalled>
 8005afe:	4603      	mov	r3, r0
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 8005b04:	f107 0208 	add.w	r2, r7, #8
 8005b08:	79f8      	ldrb	r0, [r7, #7]
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	f001 f805 	bl	8006b1c <tud_control_xfer>
          }
          break;
 8005b12:	e03d      	b.n	8005b90 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	885b      	ldrh	r3, [r3, #2]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d112      	bne.n	8005b44 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8005b26:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fe90 	bl	8006854 <usbd_edpt_clear_stall>
 8005b34:	e006      	b.n	8005b44 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8005b36:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fe3c 	bl	80067bc <usbd_edpt_stall>
              }
            }

            if (driver)
 8005b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d021      	beq.n	8005b8e <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fdaf 	bl	80056b4 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8005b56:	2000      	movs	r0, #0
 8005b58:	f001 f85c 	bl	8006c14 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <process_control_request+0x4d0>)
 8005b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <process_control_request+0x4aa>
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 ff61 	bl	8006a38 <tud_control_status>
            }
          }
          break;
 8005b76:	e00a      	b.n	8005b8e <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <process_control_request+0x4d4>)
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d000      	beq.n	8005b8a <process_control_request+0x4a6>
 8005b88:	be00      	bkpt	0x0000
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e00d      	b.n	8005baa <process_control_request+0x4c6>
          break;
 8005b8e:	bf00      	nop
        }
      }
    }
    break;
 8005b90:	e00a      	b.n	8005ba8 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <process_control_request+0x4d4>)
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d000      	beq.n	8005ba4 <process_control_request+0x4c0>
 8005ba2:	be00      	bkpt	0x0000
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <process_control_request+0x4c6>
  }

  return true;
 8005ba8:	2301      	movs	r3, #1
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3750      	adds	r7, #80	; 0x50
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200019ac 	.word	0x200019ac
 8005bb8:	e000edf0 	.word	0xe000edf0

08005bbc <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b094      	sub	sp, #80	; 0x50
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460a      	mov	r2, r1
 8005bc6:	71fb      	strb	r3, [r7, #7]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005bcc:	79bb      	ldrb	r3, [r7, #6]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fb fa98 	bl	8001108 <tud_descriptor_configuration_cb>
 8005bd8:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <process_set_config+0x2c>
 8005be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d00a      	beq.n	8005bfe <process_set_config+0x42>
 8005be8:	4b7c      	ldr	r3, [pc, #496]	; (8005ddc <process_set_config+0x220>)
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d000      	beq.n	8005bfa <process_set_config+0x3e>
 8005bf8:	be00      	bkpt	0x0000
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e0e9      	b.n	8005dd2 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8005bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c00:	79db      	ldrb	r3, [r3, #7]
 8005c02:	115b      	asrs	r3, r3, #5
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	b2d9      	uxtb	r1, r3
 8005c0a:	4a75      	ldr	r2, [pc, #468]	; (8005de0 <process_set_config+0x224>)
 8005c0c:	7813      	ldrb	r3, [r2, #0]
 8005c0e:	f361 1304 	bfi	r3, r1, #4, #1
 8005c12:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	79db      	ldrb	r3, [r3, #7]
 8005c18:	119b      	asrs	r3, r3, #6
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	b2d9      	uxtb	r1, r3
 8005c20:	4a6f      	ldr	r2, [pc, #444]	; (8005de0 <process_set_config+0x224>)
 8005c22:	7813      	ldrb	r3, [r2, #0]
 8005c24:	f361 1345 	bfi	r3, r1, #5, #1
 8005c28:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2c:	3309      	adds	r3, #9
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8005c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c32:	885b      	ldrh	r3, [r3, #2]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3a:	4413      	add	r3, r2
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 8005c3e:	e0bd      	b.n	8005dbc <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8005c50:	2b0b      	cmp	r3, #11
 8005c52:	d10f      	bne.n	8005c74 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8005c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d00a      	beq.n	8005c98 <process_set_config+0xdc>
 8005c82:	4b56      	ldr	r3, [pc, #344]	; (8005ddc <process_set_config+0x220>)
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d000      	beq.n	8005c94 <process_set_config+0xd8>
 8005c92:	be00      	bkpt	0x0000
 8005c94:	2300      	movs	r3, #0
 8005c96:	e09c      	b.n	8005dd2 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8005caa:	e06e      	b.n	8005d8a <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8005cac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fa79 	bl	80051a8 <get_driver>
 8005cb6:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <process_set_config+0x118>
 8005cbe:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <process_set_config+0x220>)
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d000      	beq.n	8005cd0 <process_set_config+0x114>
 8005cce:	be00      	bkpt	0x0000
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e07e      	b.n	8005dd2 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005cda:	79f8      	ldrb	r0, [r7, #7]
 8005cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cde:	4798      	blx	r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8005ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d94a      	bls.n	8005d80 <process_set_config+0x1c4>
 8005cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d846      	bhi.n	8005d80 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8005cf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4a39      	ldr	r2, [pc, #228]	; (8005de4 <process_set_config+0x228>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d102      	bne.n	8005d0a <process_set_config+0x14e>
 8005d04:	2302      	movs	r3, #2
 8005d06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005d10:	e024      	b.n	8005d5c <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	789a      	ldrb	r2, [r3, #2]
 8005d16:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8005d20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d24:	4a2e      	ldr	r2, [pc, #184]	; (8005de0 <process_set_config+0x224>)
 8005d26:	4413      	add	r3, r2
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	d00a      	beq.n	8005d44 <process_set_config+0x188>
 8005d2e:	4b2b      	ldr	r3, [pc, #172]	; (8005ddc <process_set_config+0x220>)
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d000      	beq.n	8005d40 <process_set_config+0x184>
 8005d3e:	be00      	bkpt	0x0000
 8005d40:	2300      	movs	r3, #0
 8005d42:	e046      	b.n	8005dd2 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005d44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <process_set_config+0x224>)
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005d50:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005d52:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005d56:	3301      	adds	r3, #1
 8005d58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005d5c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005d60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3d4      	bcc.n	8005d12 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005d68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d70:	481d      	ldr	r0, [pc, #116]	; (8005de8 <process_set_config+0x22c>)
 8005d72:	f002 fd0b 	bl	800878c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d7a:	4413      	add	r3, r2
 8005d7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 8005d7e:	e00b      	b.n	8005d98 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005d80:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d84:	3301      	adds	r3, #1
 8005d86:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8005d8a:	4b18      	ldr	r3, [pc, #96]	; (8005dec <process_set_config+0x230>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d94:	429a      	cmp	r2, r3
 8005d96:	da89      	bge.n	8005cac <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8005d98:	4b14      	ldr	r3, [pc, #80]	; (8005dec <process_set_config+0x230>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005da2:	429a      	cmp	r2, r3
 8005da4:	da0a      	bge.n	8005dbc <process_set_config+0x200>
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <process_set_config+0x220>)
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d000      	beq.n	8005db8 <process_set_config+0x1fc>
 8005db6:	be00      	bkpt	0x0000
 8005db8:	2300      	movs	r3, #0
 8005dba:	e00a      	b.n	8005dd2 <process_set_config+0x216>
  while( p_desc < desc_end )
 8005dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	f4ff af3d 	bcc.w	8005c40 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <process_set_config+0x234>)
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <process_set_config+0x214>
 8005dcc:	f7fa fbee 	bl	80005ac <tud_mount_cb>

  return true;
 8005dd0:	2301      	movs	r3, #1
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3750      	adds	r7, #80	; 0x50
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000edf0 	.word	0xe000edf0
 8005de0:	200019ac 	.word	0x200019ac
 8005de4:	08004025 	.word	0x08004025
 8005de8:	200019bf 	.word	0x200019bf
 8005dec:	200019dc 	.word	0x200019dc
 8005df0:	080005ad 	.word	0x080005ad

08005df4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b094      	sub	sp, #80	; 0x50
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	885b      	ldrh	r3, [r3, #2]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8005e24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	2b0e      	cmp	r3, #14
 8005e2c:	f200 80bc 	bhi.w	8005fa8 <process_get_descriptor+0x1b4>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <process_get_descriptor+0x44>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005ed9 	.word	0x08005ed9
 8005e40:	08005f41 	.word	0x08005f41
 8005e44:	08005fa9 	.word	0x08005fa9
 8005e48:	08005fa9 	.word	0x08005fa9
 8005e4c:	08005f77 	.word	0x08005f77
 8005e50:	08005ed9 	.word	0x08005ed9
 8005e54:	08005fa9 	.word	0x08005fa9
 8005e58:	08005fa9 	.word	0x08005fa9
 8005e5c:	08005fa9 	.word	0x08005fa9
 8005e60:	08005fa9 	.word	0x08005fa9
 8005e64:	08005fa9 	.word	0x08005fa9
 8005e68:	08005fa9 	.word	0x08005fa9
 8005e6c:	08005fa9 	.word	0x08005fa9
 8005e70:	08005e8b 	.word	0x08005e8b
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005e74:	f7fb f93e 	bl	80010f4 <tud_descriptor_device_cb>
 8005e78:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8005e7a:	79f8      	ldrb	r0, [r7, #7]
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	f000 fe4b 	bl	8006b1c <tud_control_xfer>
 8005e86:	4603      	mov	r3, r0
 8005e88:	e08f      	b.n	8005faa <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <process_get_descriptor+0x1c0>)
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <process_get_descriptor+0xa0>
 8005e90:	2300      	movs	r3, #0
 8005e92:	e08a      	b.n	8005faa <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005e94:	f3af 8000 	nop.w
 8005e98:	4603      	mov	r3, r0
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8005e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <process_get_descriptor+0xc4>
 8005ea2:	4b45      	ldr	r3, [pc, #276]	; (8005fb8 <process_get_descriptor+0x1c4>)
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d000      	beq.n	8005eb4 <process_get_descriptor+0xc0>
 8005eb2:	be00      	bkpt	0x0000
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e078      	b.n	8005faa <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eba:	3302      	adds	r3, #2
 8005ebc:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8005ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ecc:	79f8      	ldrb	r0, [r7, #7]
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	f000 fe24 	bl	8006b1c <tud_control_xfer>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	e068      	b.n	8005faa <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8005ed8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d107      	bne.n	8005ef0 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8005ee0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fb f90f 	bl	8001108 <tud_descriptor_configuration_cb>
 8005eea:	4603      	mov	r3, r0
 8005eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eee:	e00b      	b.n	8005f08 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8005ef0:	4b32      	ldr	r3, [pc, #200]	; (8005fbc <process_get_descriptor+0x1c8>)
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <process_get_descriptor+0x106>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e057      	b.n	8005faa <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8005efa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005efe:	4618      	mov	r0, r3
 8005f00:	f3af 8000 	nop.w
 8005f04:	4603      	mov	r3, r0
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <process_get_descriptor+0x130>
 8005f0e:	4b2a      	ldr	r3, [pc, #168]	; (8005fb8 <process_get_descriptor+0x1c4>)
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <process_get_descriptor+0x12c>
 8005f1e:	be00      	bkpt	0x0000
 8005f20:	2300      	movs	r3, #0
 8005f22:	e042      	b.n	8005faa <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	3302      	adds	r3, #2
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005f34:	79f8      	ldrb	r0, [r7, #7]
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	f000 fdf0 	bl	8006b1c <tud_control_xfer>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	e034      	b.n	8005faa <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	889b      	ldrh	r3, [r3, #4]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fb f8e9 	bl	8001124 <tud_descriptor_string_cb>
 8005f52:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <process_get_descriptor+0x16a>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e025      	b.n	8005faa <process_get_descriptor+0x1b6>
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	79f8      	ldrb	r0, [r7, #7]
 8005f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	f000 fdd5 	bl	8006b1c <tud_control_xfer>
 8005f72:	4603      	mov	r3, r0
 8005f74:	e019      	b.n	8005faa <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <process_get_descriptor+0x1cc>)
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <process_get_descriptor+0x18c>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e014      	b.n	8005faa <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005f80:	f3af 8000 	nop.w
 8005f84:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <process_get_descriptor+0x19c>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e00c      	b.n	8005faa <process_get_descriptor+0x1b6>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	79f8      	ldrb	r0, [r7, #7]
 8005f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	f000 fdbc 	bl	8006b1c <tud_control_xfer>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	e000      	b.n	8005faa <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8005fa8:	2300      	movs	r3, #0
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3750      	adds	r7, #80	; 0x50
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	00000000 	.word	0x00000000
 8005fb8:	e000edf0 	.word	0xe000edf0
	...

08005fc4 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b0aa      	sub	sp, #168	; 0xa8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	3b02      	subs	r3, #2
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	f200 8198 	bhi.w	800630c <dcd_event_handler+0x348>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <dcd_event_handler+0x20>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	080061f9 	.word	0x080061f9
 8005fec:	080060b5 	.word	0x080060b5
 8005ff0:	0800615b 	.word	0x0800615b
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8005ff4:	4a82      	ldr	r2, [pc, #520]	; (8006200 <dcd_event_handler+0x23c>)
 8005ff6:	7813      	ldrb	r3, [r2, #0]
 8005ff8:	f36f 0300 	bfc	r3, #0, #1
 8005ffc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8005ffe:	4a80      	ldr	r2, [pc, #512]	; (8006200 <dcd_event_handler+0x23c>)
 8006000:	7813      	ldrb	r3, [r2, #0]
 8006002:	f36f 0341 	bfc	r3, #1, #1
 8006006:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8006008:	4b7d      	ldr	r3, [pc, #500]	; (8006200 <dcd_event_handler+0x23c>)
 800600a:	2200      	movs	r2, #0
 800600c:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 800600e:	4a7c      	ldr	r2, [pc, #496]	; (8006200 <dcd_event_handler+0x23c>)
 8006010:	7813      	ldrb	r3, [r2, #0]
 8006012:	f36f 0382 	bfc	r3, #2, #1
 8006016:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8006018:	4b7a      	ldr	r3, [pc, #488]	; (8006204 <dcd_event_handler+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 800602c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <dcd_event_handler+0x8a>
 800603a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800603e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8006042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2000      	movs	r0, #0
 800604a:	4798      	blx	r3
}
 800604c:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800604e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006052:	3304      	adds	r3, #4
 8006054:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff f81a 	bl	8005092 <tu_fifo_write>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8006064:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <dcd_event_handler+0xc2>
 8006072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 800607a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2001      	movs	r0, #1
 8006082:	4798      	blx	r3
}
 8006084:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8006086:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800608a:	f083 0301 	eor.w	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <dcd_event_handler+0xe8>
 8006094:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <dcd_event_handler+0x244>)
 8006096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800609a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <dcd_event_handler+0xec>
 80060a8:	be00      	bkpt	0x0000
 80060aa:	e001      	b.n	80060b0 <dcd_event_handler+0xec>

  return success;
 80060ac:	bf00      	nop
 80060ae:	e172      	b.n	8006396 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80060b0:	bf00      	nop
    break;
 80060b2:	e170      	b.n	8006396 <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 80060b4:	4b52      	ldr	r3, [pc, #328]	; (8006200 <dcd_event_handler+0x23c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8164 	beq.w	800638c <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 80060c4:	4a4e      	ldr	r2, [pc, #312]	; (8006200 <dcd_event_handler+0x23c>)
 80060c6:	7813      	ldrb	r3, [r2, #0]
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80060ce:	4b4d      	ldr	r3, [pc, #308]	; (8006204 <dcd_event_handler+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 80060e0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80060e4:	f083 0301 	eor.w	r3, r3, #1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <dcd_event_handler+0x13a>
 80060ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060f2:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 80060f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2000      	movs	r0, #0
 80060fa:	4798      	blx	r3
}
 80060fc:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80060fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006102:	3304      	adds	r3, #4
 8006104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe ffc3 	bl	8005092 <tu_fifo_write>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8006112:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <dcd_event_handler+0x16c>
 8006120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006124:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 8006126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2001      	movs	r0, #1
 800612c:	4798      	blx	r3
}
 800612e:	bf00      	nop
  TU_ASSERT(success);
 8006130:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006134:	f083 0301 	eor.w	r3, r3, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <dcd_event_handler+0x18e>
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <dcd_event_handler+0x244>)
 8006140:	66bb      	str	r3, [r7, #104]	; 0x68
 8006142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <dcd_event_handler+0x192>
 800614e:	be00      	bkpt	0x0000
 8006150:	e001      	b.n	8006156 <dcd_event_handler+0x192>
  return success;
 8006152:	bf00      	nop
 8006154:	e11a      	b.n	800638c <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 8006156:	bf00      	nop
      }
    break;
 8006158:	e118      	b.n	800638c <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800615a:	4b29      	ldr	r3, [pc, #164]	; (8006200 <dcd_event_handler+0x23c>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8113 	beq.w	8006390 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800616a:	4a25      	ldr	r2, [pc, #148]	; (8006200 <dcd_event_handler+0x23c>)
 800616c:	7813      	ldrb	r3, [r2, #0]
 800616e:	f36f 0382 	bfc	r3, #2, #1
 8006172:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8006174:	4b23      	ldr	r3, [pc, #140]	; (8006204 <dcd_event_handler+0x240>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	667b      	str	r3, [r7, #100]	; 0x64
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	663b      	str	r3, [r7, #96]	; 0x60
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8006184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006188:	f083 0301 	eor.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <dcd_event_handler+0x1dc>
 8006192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006194:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 8006196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2000      	movs	r0, #0
 800619c:	4798      	blx	r3
}
 800619e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80061a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a2:	3304      	adds	r3, #4
 80061a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe ff73 	bl	8005092 <tu_fifo_write>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80061b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b6:	f083 0301 	eor.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <dcd_event_handler+0x20a>
 80061c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c2:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80061c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2001      	movs	r0, #1
 80061ca:	4798      	blx	r3
}
 80061cc:	bf00      	nop
  TU_ASSERT(success);
 80061ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061d2:	f083 0301 	eor.w	r3, r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <dcd_event_handler+0x22c>
 80061dc:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <dcd_event_handler+0x244>)
 80061de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <dcd_event_handler+0x230>
 80061ec:	be00      	bkpt	0x0000
 80061ee:	e001      	b.n	80061f4 <dcd_event_handler+0x230>
  return success;
 80061f0:	bf00      	nop
 80061f2:	e0cd      	b.n	8006390 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80061f4:	bf00      	nop
      }
    break;
 80061f6:	e0cb      	b.n	8006390 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80061fe:	e023      	b.n	8006248 <dcd_event_handler+0x284>
 8006200:	200019ac 	.word	0x200019ac
 8006204:	20001aa0 	.word	0x20001aa0
 8006208:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 800620c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe ffc9 	bl	80051a8 <get_driver>
 8006216:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 800621a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <dcd_event_handler+0x27a>
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 800622c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	7810      	ldrb	r0, [r2, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6852      	ldr	r2, [r2, #4]
 800623a:	4611      	mov	r1, r2
 800623c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800623e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006242:	3301      	adds	r3, #1
 8006244:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006248:	4b55      	ldr	r3, [pc, #340]	; (80063a0 <dcd_event_handler+0x3dc>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006252:	429a      	cmp	r2, r3
 8006254:	dada      	bge.n	800620c <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8006256:	4b53      	ldr	r3, [pc, #332]	; (80063a4 <dcd_event_handler+0x3e0>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8097 	beq.w	8006394 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 8006266:	4a4f      	ldr	r2, [pc, #316]	; (80063a4 <dcd_event_handler+0x3e0>)
 8006268:	7813      	ldrb	r3, [r2, #0]
 800626a:	f36f 0382 	bfc	r3, #2, #1
 800626e:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	723b      	strb	r3, [r7, #8]
 8006282:	2305      	movs	r3, #5
 8006284:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8006286:	4b48      	ldr	r3, [pc, #288]	; (80063a8 <dcd_event_handler+0x3e4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	64bb      	str	r3, [r7, #72]	; 0x48
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8006298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800629c:	f083 0301 	eor.w	r3, r3, #1
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d006      	beq.n	80062b4 <dcd_event_handler+0x2f0>
 80062a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 80062aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2000      	movs	r0, #0
 80062b0:	4798      	blx	r3
}
 80062b2:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80062b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b6:	3304      	adds	r3, #4
 80062b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fee9 	bl	8005092 <tu_fifo_write>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 80062c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062ca:	f083 0301 	eor.w	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <dcd_event_handler+0x31e>
 80062d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2001      	movs	r0, #1
 80062de:	4798      	blx	r3
}
 80062e0:	bf00      	nop
  TU_ASSERT(success);
 80062e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80062e6:	f083 0301 	eor.w	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <dcd_event_handler+0x340>
 80062f0:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <dcd_event_handler+0x3e8>)
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <dcd_event_handler+0x344>
 8006300:	be00      	bkpt	0x0000
 8006302:	e001      	b.n	8006308 <dcd_event_handler+0x344>
  return success;
 8006304:	bf00      	nop
 8006306:	e045      	b.n	8006394 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8006308:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 800630a:	e043      	b.n	8006394 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <dcd_event_handler+0x3e4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006320:	f083 0301 	eor.w	r3, r3, #1
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <dcd_event_handler+0x374>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2000      	movs	r0, #0
 8006334:	4798      	blx	r3
}
 8006336:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	3304      	adds	r3, #4
 800633c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fea7 	bl	8005092 <tu_fifo_write>
 8006344:	4603      	mov	r3, r0
 8006346:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8006348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800634c:	f083 0301 	eor.w	r3, r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <dcd_event_handler+0x3a0>
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2001      	movs	r0, #1
 8006360:	4798      	blx	r3
}
 8006362:	bf00      	nop
  TU_ASSERT(success);
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <dcd_event_handler+0x3c0>
 8006370:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <dcd_event_handler+0x3e8>)
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <dcd_event_handler+0x3c4>
 8006380:	be00      	bkpt	0x0000
 8006382:	e001      	b.n	8006388 <dcd_event_handler+0x3c4>
  return success;
 8006384:	bf00      	nop
 8006386:	e006      	b.n	8006396 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8006388:	bf00      	nop
    break;
 800638a:	e004      	b.n	8006396 <dcd_event_handler+0x3d2>
    break;
 800638c:	bf00      	nop
 800638e:	e002      	b.n	8006396 <dcd_event_handler+0x3d2>
    break;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <dcd_event_handler+0x3d2>
    break;
 8006394:	bf00      	nop
  }
}
 8006396:	bf00      	nop
 8006398:	37a8      	adds	r7, #168	; 0xa8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200019dc 	.word	0x200019dc
 80063a4:	200019ac 	.word	0x200019ac
 80063a8:	20001aa0 	.word	0x20001aa0
 80063ac:	e000edf0 	.word	0xe000edf0

080063b0 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <usbd_int_set+0x30>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f827 	bl	8007418 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80063ca:	e004      	b.n	80063d6 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80063cc:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <usbd_int_set+0x30>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f82d 	bl	8007430 <dcd_int_disable>
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000031 	.word	0x20000031

080063e4 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6039      	str	r1, [r7, #0]
 80063ec:	4611      	mov	r1, r2
 80063ee:	461a      	mov	r2, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	71fb      	strb	r3, [r7, #7]
 80063f4:	460b      	mov	r3, r1
 80063f6:	71bb      	strb	r3, [r7, #6]
 80063f8:	4613      	mov	r3, r2
 80063fa:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	e04d      	b.n	800649e <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b05      	cmp	r3, #5
 800640c:	d108      	bne.n	8006420 <usbd_open_edpt_pair+0x3c>
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	78db      	ldrb	r3, [r3, #3]
 8006412:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	797b      	ldrb	r3, [r7, #5]
 800641c:	4293      	cmp	r3, r2
 800641e:	d00a      	beq.n	8006436 <usbd_open_edpt_pair+0x52>
 8006420:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <usbd_open_edpt_pair+0xcc>)
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d000      	beq.n	8006432 <usbd_open_edpt_pair+0x4e>
 8006430:	be00      	bkpt	0x0000
 8006432:	2300      	movs	r3, #0
 8006434:	e038      	b.n	80064a8 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	6a39      	ldr	r1, [r7, #32]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f83a 	bl	80064b4 <usbd_edpt_open>
 8006440:	4603      	mov	r3, r0
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <usbd_open_edpt_pair+0x7e>
 800644c:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <usbd_open_edpt_pair+0xcc>)
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d000      	beq.n	800645e <usbd_open_edpt_pair+0x7a>
 800645c:	be00      	bkpt	0x0000
 800645e:	2300      	movs	r3, #0
 8006460:	e022      	b.n	80064a8 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	789b      	ldrb	r3, [r3, #2]
 8006466:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	09db      	lsrs	r3, r3, #7
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	d104      	bne.n	800647c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	789a      	ldrb	r2, [r3, #2]
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e003      	b.n	8006484 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	789a      	ldrb	r2, [r3, #2]
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8006496:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	3301      	adds	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	79bb      	ldrb	r3, [r7, #6]
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	429a      	cmp	r2, r3
 80064a4:	dbad      	blt.n	8006402 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80064a6:	2301      	movs	r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	e000edf0 	.word	0xe000edf0

080064b4 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <usbd_edpt_open+0x7c>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d90a      	bls.n	80064ee <usbd_edpt_open+0x3a>
 80064d8:	4b16      	ldr	r3, [pc, #88]	; (8006534 <usbd_edpt_open+0x80>)
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d000      	beq.n	80064ea <usbd_edpt_open+0x36>
 80064e8:	be00      	bkpt	0x0000
 80064ea:	2300      	movs	r3, #0
 80064ec:	e01c      	b.n	8006528 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80064ee:	4b12      	ldr	r3, [pc, #72]	; (8006538 <usbd_edpt_open+0x84>)
 80064f0:	789b      	ldrb	r3, [r3, #2]
 80064f2:	4619      	mov	r1, r3
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f002 f8cd 	bl	8008694 <tu_edpt_validate>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f083 0301 	eor.w	r3, r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <usbd_edpt_open+0x68>
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <usbd_edpt_open+0x80>)
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <usbd_edpt_open+0x64>
 8006516:	be00      	bkpt	0x0000
 8006518:	2300      	movs	r3, #0
 800651a:	e005      	b.n	8006528 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 ffd5 	bl	80074d0 <dcd_edpt_open>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000031 	.word	0x20000031
 8006534:	e000edf0 	.word	0xe000edf0
 8006538:	200019ac 	.word	0x200019ac

0800653c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	460a      	mov	r2, r1
 8006546:	71fb      	strb	r3, [r7, #7]
 8006548:	4613      	mov	r3, r2
 800654a:	71bb      	strb	r3, [r7, #6]
 800654c:	79bb      	ldrb	r3, [r7, #6]
 800654e:	73bb      	strb	r3, [r7, #14]
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006556:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8006558:	75fb      	strb	r3, [r7, #23]
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	09db      	lsrs	r3, r3, #7
 8006562:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8006564:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8006566:	7dfa      	ldrb	r2, [r7, #23]
 8006568:	7dbb      	ldrb	r3, [r7, #22]
 800656a:	0052      	lsls	r2, r2, #1
 800656c:	4413      	add	r3, r2
 800656e:	3318      	adds	r3, #24
 8006570:	4a06      	ldr	r2, [pc, #24]	; (800658c <usbd_edpt_claim+0x50>)
 8006572:	4413      	add	r3, r2
 8006574:	3307      	adds	r3, #7
 8006576:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8006578:	2100      	movs	r1, #0
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f002 f826 	bl	80085cc <tu_edpt_claim>
 8006580:	4603      	mov	r3, r0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200019ac 	.word	0x200019ac

08006590 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	460a      	mov	r2, r1
 800659a:	71fb      	strb	r3, [r7, #7]
 800659c:	4613      	mov	r3, r2
 800659e:	71bb      	strb	r3, [r7, #6]
 80065a0:	79bb      	ldrb	r3, [r7, #6]
 80065a2:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065aa:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80065ac:	75fb      	strb	r3, [r7, #23]
 80065ae:	79bb      	ldrb	r3, [r7, #6]
 80065b0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	09db      	lsrs	r3, r3, #7
 80065b6:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80065b8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80065ba:	7dfa      	ldrb	r2, [r7, #23]
 80065bc:	7dbb      	ldrb	r3, [r7, #22]
 80065be:	0052      	lsls	r2, r2, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	3318      	adds	r3, #24
 80065c4:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <usbd_edpt_release+0x50>)
 80065c6:	4413      	add	r3, r2
 80065c8:	3307      	adds	r3, #7
 80065ca:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80065cc:	2100      	movs	r1, #0
 80065ce:	6938      	ldr	r0, [r7, #16]
 80065d0:	f002 f836 	bl	8008640 <tu_edpt_release>
 80065d4:	4603      	mov	r3, r0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200019ac 	.word	0x200019ac

080065e4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	603a      	str	r2, [r7, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	71fb      	strb	r3, [r7, #7]
 80065f2:	460b      	mov	r3, r1
 80065f4:	71bb      	strb	r3, [r7, #6]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80065fa:	4b32      	ldr	r3, [pc, #200]	; (80066c4 <usbd_edpt_xfer+0xe0>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
 8006600:	79bb      	ldrb	r3, [r7, #6]
 8006602:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006604:	7abb      	ldrb	r3, [r7, #10]
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800660c:	75fb      	strb	r3, [r7, #23]
 800660e:	79bb      	ldrb	r3, [r7, #6]
 8006610:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	09db      	lsrs	r3, r3, #7
 8006616:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006618:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800661a:	7dfa      	ldrb	r2, [r7, #23]
 800661c:	7dbb      	ldrb	r3, [r7, #22]
 800661e:	492a      	ldr	r1, [pc, #168]	; (80066c8 <usbd_edpt_xfer+0xe4>)
 8006620:	0052      	lsls	r2, r2, #1
 8006622:	440a      	add	r2, r1
 8006624:	4413      	add	r3, r2
 8006626:	3318      	adds	r3, #24
 8006628:	79db      	ldrb	r3, [r3, #7]
 800662a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <usbd_edpt_xfer+0x66>
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <usbd_edpt_xfer+0xe8>)
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d000      	beq.n	8006646 <usbd_edpt_xfer+0x62>
 8006644:	be00      	bkpt	0x0000
 8006646:	2300      	movs	r3, #0
 8006648:	e038      	b.n	80066bc <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800664a:	7dfa      	ldrb	r2, [r7, #23]
 800664c:	7dbb      	ldrb	r3, [r7, #22]
 800664e:	491e      	ldr	r1, [pc, #120]	; (80066c8 <usbd_edpt_xfer+0xe4>)
 8006650:	0052      	lsls	r2, r2, #1
 8006652:	440a      	add	r2, r1
 8006654:	4413      	add	r3, r2
 8006656:	f103 0218 	add.w	r2, r3, #24
 800665a:	79d3      	ldrb	r3, [r2, #7]
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8006662:	88bb      	ldrh	r3, [r7, #4]
 8006664:	79b9      	ldrb	r1, [r7, #6]
 8006666:	79f8      	ldrb	r0, [r7, #7]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	f001 f88f 	bl	800778c <dcd_edpt_xfer>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <usbd_edpt_xfer+0x94>
  {
    return true;
 8006674:	2301      	movs	r3, #1
 8006676:	e021      	b.n	80066bc <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006678:	7dfa      	ldrb	r2, [r7, #23]
 800667a:	7dbb      	ldrb	r3, [r7, #22]
 800667c:	4912      	ldr	r1, [pc, #72]	; (80066c8 <usbd_edpt_xfer+0xe4>)
 800667e:	0052      	lsls	r2, r2, #1
 8006680:	440a      	add	r2, r1
 8006682:	4413      	add	r3, r2
 8006684:	f103 0218 	add.w	r2, r3, #24
 8006688:	79d3      	ldrb	r3, [r2, #7]
 800668a:	f36f 0300 	bfc	r3, #0, #1
 800668e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006690:	7dfa      	ldrb	r2, [r7, #23]
 8006692:	7dbb      	ldrb	r3, [r7, #22]
 8006694:	490c      	ldr	r1, [pc, #48]	; (80066c8 <usbd_edpt_xfer+0xe4>)
 8006696:	0052      	lsls	r2, r2, #1
 8006698:	440a      	add	r2, r1
 800669a:	4413      	add	r3, r2
 800669c:	f103 0218 	add.w	r2, r3, #24
 80066a0:	79d3      	ldrb	r3, [r2, #7]
 80066a2:	f36f 0382 	bfc	r3, #2, #1
 80066a6:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <usbd_edpt_xfer+0xe8>)
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d000      	beq.n	80066ba <usbd_edpt_xfer+0xd6>
 80066b8:	be00      	bkpt	0x0000
    return false;
 80066ba:	2300      	movs	r3, #0
  }
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000031 	.word	0x20000031
 80066c8:	200019ac 	.word	0x200019ac
 80066cc:	e000edf0 	.word	0xe000edf0

080066d0 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	603a      	str	r2, [r7, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	71fb      	strb	r3, [r7, #7]
 80066de:	460b      	mov	r3, r1
 80066e0:	71bb      	strb	r3, [r7, #6]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80066e6:	4b32      	ldr	r3, [pc, #200]	; (80067b0 <usbd_edpt_xfer_fifo+0xe0>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
 80066ec:	79bb      	ldrb	r3, [r7, #6]
 80066ee:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80066f0:	7abb      	ldrb	r3, [r7, #10]
 80066f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80066f8:	75fb      	strb	r3, [r7, #23]
 80066fa:	79bb      	ldrb	r3, [r7, #6]
 80066fc:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	09db      	lsrs	r3, r3, #7
 8006702:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006704:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8006706:	7dfa      	ldrb	r2, [r7, #23]
 8006708:	7dbb      	ldrb	r3, [r7, #22]
 800670a:	492a      	ldr	r1, [pc, #168]	; (80067b4 <usbd_edpt_xfer_fifo+0xe4>)
 800670c:	0052      	lsls	r2, r2, #1
 800670e:	440a      	add	r2, r1
 8006710:	4413      	add	r3, r2
 8006712:	3318      	adds	r3, #24
 8006714:	79db      	ldrb	r3, [r3, #7]
 8006716:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <usbd_edpt_xfer_fifo+0x66>
 8006720:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <usbd_edpt_xfer_fifo+0xe8>)
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d000      	beq.n	8006732 <usbd_edpt_xfer_fifo+0x62>
 8006730:	be00      	bkpt	0x0000
 8006732:	2300      	movs	r3, #0
 8006734:	e038      	b.n	80067a8 <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8006736:	7dfa      	ldrb	r2, [r7, #23]
 8006738:	7dbb      	ldrb	r3, [r7, #22]
 800673a:	491e      	ldr	r1, [pc, #120]	; (80067b4 <usbd_edpt_xfer_fifo+0xe4>)
 800673c:	0052      	lsls	r2, r2, #1
 800673e:	440a      	add	r2, r1
 8006740:	4413      	add	r3, r2
 8006742:	f103 0218 	add.w	r2, r3, #24
 8006746:	79d3      	ldrb	r3, [r2, #7]
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	71d3      	strb	r3, [r2, #7]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 800674e:	88bb      	ldrh	r3, [r7, #4]
 8006750:	79b9      	ldrb	r1, [r7, #6]
 8006752:	79f8      	ldrb	r0, [r7, #7]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	f001 f881 	bl	800785c <dcd_edpt_xfer_fifo>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8006760:	2301      	movs	r3, #1
 8006762:	e021      	b.n	80067a8 <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006764:	7dfa      	ldrb	r2, [r7, #23]
 8006766:	7dbb      	ldrb	r3, [r7, #22]
 8006768:	4912      	ldr	r1, [pc, #72]	; (80067b4 <usbd_edpt_xfer_fifo+0xe4>)
 800676a:	0052      	lsls	r2, r2, #1
 800676c:	440a      	add	r2, r1
 800676e:	4413      	add	r3, r2
 8006770:	f103 0218 	add.w	r2, r3, #24
 8006774:	79d3      	ldrb	r3, [r2, #7]
 8006776:	f36f 0300 	bfc	r3, #0, #1
 800677a:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800677c:	7dfa      	ldrb	r2, [r7, #23]
 800677e:	7dbb      	ldrb	r3, [r7, #22]
 8006780:	490c      	ldr	r1, [pc, #48]	; (80067b4 <usbd_edpt_xfer_fifo+0xe4>)
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	440a      	add	r2, r1
 8006786:	4413      	add	r3, r2
 8006788:	f103 0218 	add.w	r2, r3, #24
 800678c:	79d3      	ldrb	r3, [r2, #7]
 800678e:	f36f 0382 	bfc	r3, #2, #1
 8006792:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 8006794:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <usbd_edpt_xfer_fifo+0xe8>)
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d000      	beq.n	80067a6 <usbd_edpt_xfer_fifo+0xd6>
 80067a4:	be00      	bkpt	0x0000
    return false;
 80067a6:	2300      	movs	r3, #0
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000031 	.word	0x20000031
 80067b4:	200019ac 	.word	0x200019ac
 80067b8:	e000edf0 	.word	0xe000edf0

080067bc <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	460a      	mov	r2, r1
 80067c6:	71fb      	strb	r3, [r7, #7]
 80067c8:	4613      	mov	r3, r2
 80067ca:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80067cc:	4b1f      	ldr	r3, [pc, #124]	; (800684c <usbd_edpt_stall+0x90>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	79bb      	ldrb	r3, [r7, #6]
 80067d4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80067d6:	7b3b      	ldrb	r3, [r7, #12]
 80067d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067dc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	79bb      	ldrb	r3, [r7, #6]
 80067e2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80067e4:	7b7b      	ldrb	r3, [r7, #13]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80067ea:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	4917      	ldr	r1, [pc, #92]	; (8006850 <usbd_edpt_stall+0x94>)
 80067f2:	0052      	lsls	r2, r2, #1
 80067f4:	440a      	add	r2, r1
 80067f6:	4413      	add	r3, r2
 80067f8:	3318      	adds	r3, #24
 80067fa:	79db      	ldrb	r3, [r3, #7]
 80067fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11d      	bne.n	8006842 <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8006806:	79ba      	ldrb	r2, [r7, #6]
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f001 f9df 	bl	8007bd0 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	490e      	ldr	r1, [pc, #56]	; (8006850 <usbd_edpt_stall+0x94>)
 8006818:	0052      	lsls	r2, r2, #1
 800681a:	440a      	add	r2, r1
 800681c:	4413      	add	r3, r2
 800681e:	f103 0218 	add.w	r2, r3, #24
 8006822:	79d3      	ldrb	r3, [r2, #7]
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	4908      	ldr	r1, [pc, #32]	; (8006850 <usbd_edpt_stall+0x94>)
 8006830:	0052      	lsls	r2, r2, #1
 8006832:	440a      	add	r2, r1
 8006834:	4413      	add	r3, r2
 8006836:	f103 0218 	add.w	r2, r3, #24
 800683a:	79d3      	ldrb	r3, [r2, #7]
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	71d3      	strb	r3, [r2, #7]
  }
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000031 	.word	0x20000031
 8006850:	200019ac 	.word	0x200019ac

08006854 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	460a      	mov	r2, r1
 800685e:	71fb      	strb	r3, [r7, #7]
 8006860:	4613      	mov	r3, r2
 8006862:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006864:	4b1f      	ldr	r3, [pc, #124]	; (80068e4 <usbd_edpt_clear_stall+0x90>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	71fb      	strb	r3, [r7, #7]
 800686a:	79bb      	ldrb	r3, [r7, #6]
 800686c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800686e:	7b3b      	ldrb	r3, [r7, #12]
 8006870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006874:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	79bb      	ldrb	r3, [r7, #6]
 800687a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800687c:	7b7b      	ldrb	r3, [r7, #13]
 800687e:	09db      	lsrs	r3, r3, #7
 8006880:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006882:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	4917      	ldr	r1, [pc, #92]	; (80068e8 <usbd_edpt_clear_stall+0x94>)
 800688a:	0052      	lsls	r2, r2, #1
 800688c:	440a      	add	r2, r1
 800688e:	4413      	add	r3, r2
 8006890:	3318      	adds	r3, #24
 8006892:	79db      	ldrb	r3, [r3, #7]
 8006894:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01d      	beq.n	80068da <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 800689e:	79ba      	ldrb	r2, [r7, #6]
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f9a5 	bl	8007bf4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	490e      	ldr	r1, [pc, #56]	; (80068e8 <usbd_edpt_clear_stall+0x94>)
 80068b0:	0052      	lsls	r2, r2, #1
 80068b2:	440a      	add	r2, r1
 80068b4:	4413      	add	r3, r2
 80068b6:	f103 0218 	add.w	r2, r3, #24
 80068ba:	79d3      	ldrb	r3, [r2, #7]
 80068bc:	f36f 0341 	bfc	r3, #1, #1
 80068c0:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <usbd_edpt_clear_stall+0x94>)
 80068c8:	0052      	lsls	r2, r2, #1
 80068ca:	440a      	add	r2, r1
 80068cc:	4413      	add	r3, r2
 80068ce:	f103 0218 	add.w	r2, r3, #24
 80068d2:	79d3      	ldrb	r3, [r2, #7]
 80068d4:	f36f 0300 	bfc	r3, #0, #1
 80068d8:	71d3      	strb	r3, [r2, #7]
  }
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000031 	.word	0x20000031
 80068e8:	200019ac 	.word	0x200019ac

080068ec <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	460a      	mov	r2, r1
 80068f6:	71fb      	strb	r3, [r7, #7]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71bb      	strb	r3, [r7, #6]
 80068fc:	79bb      	ldrb	r3, [r7, #6]
 80068fe:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006900:	7b3b      	ldrb	r3, [r7, #12]
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006908:	73fb      	strb	r3, [r7, #15]
 800690a:	79bb      	ldrb	r3, [r7, #6]
 800690c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800690e:	7b7b      	ldrb	r3, [r7, #13]
 8006910:	09db      	lsrs	r3, r3, #7
 8006912:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006914:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	490a      	ldr	r1, [pc, #40]	; (8006944 <usbd_edpt_stalled+0x58>)
 800691c:	0052      	lsls	r2, r2, #1
 800691e:	440a      	add	r2, r1
 8006920:	4413      	add	r3, r2
 8006922:	3318      	adds	r3, #24
 8006924:	79db      	ldrb	r3, [r3, #7]
 8006926:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	200019ac 	.word	0x200019ac

08006948 <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	460a      	mov	r2, r1
 8006952:	71fb      	strb	r3, [r7, #7]
 8006954:	4613      	mov	r3, r2
 8006956:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <usbd_edpt_close+0xa8>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 800695e:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <usbd_edpt_close+0xac>)
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <usbd_edpt_close+0x30>
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <usbd_edpt_close+0xb0>)
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d039      	beq.n	80069e8 <usbd_edpt_close+0xa0>
 8006974:	be00      	bkpt	0x0000
 8006976:	e037      	b.n	80069e8 <usbd_edpt_close+0xa0>
 8006978:	79bb      	ldrb	r3, [r7, #6]
 800697a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006982:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006984:	75fb      	strb	r3, [r7, #23]
 8006986:	79bb      	ldrb	r3, [r7, #6]
 8006988:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006990:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 8006992:	79ba      	ldrb	r2, [r7, #6]
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f001 f8b3 	bl	8007b04 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800699e:	7dfa      	ldrb	r2, [r7, #23]
 80069a0:	7dbb      	ldrb	r3, [r7, #22]
 80069a2:	4916      	ldr	r1, [pc, #88]	; (80069fc <usbd_edpt_close+0xb4>)
 80069a4:	0052      	lsls	r2, r2, #1
 80069a6:	440a      	add	r2, r1
 80069a8:	4413      	add	r3, r2
 80069aa:	f103 0218 	add.w	r2, r3, #24
 80069ae:	79d3      	ldrb	r3, [r2, #7]
 80069b0:	f36f 0341 	bfc	r3, #1, #1
 80069b4:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80069b6:	7dfa      	ldrb	r2, [r7, #23]
 80069b8:	7dbb      	ldrb	r3, [r7, #22]
 80069ba:	4910      	ldr	r1, [pc, #64]	; (80069fc <usbd_edpt_close+0xb4>)
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	440a      	add	r2, r1
 80069c0:	4413      	add	r3, r2
 80069c2:	f103 0218 	add.w	r2, r3, #24
 80069c6:	79d3      	ldrb	r3, [r2, #7]
 80069c8:	f36f 0300 	bfc	r3, #0, #1
 80069cc:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	490a      	ldr	r1, [pc, #40]	; (80069fc <usbd_edpt_close+0xb4>)
 80069d4:	0052      	lsls	r2, r2, #1
 80069d6:	440a      	add	r2, r1
 80069d8:	4413      	add	r3, r2
 80069da:	f103 0218 	add.w	r2, r3, #24
 80069de:	79d3      	ldrb	r3, [r2, #7]
 80069e0:	f36f 0382 	bfc	r3, #2, #1
 80069e4:	71d3      	strb	r3, [r2, #7]

  return;
 80069e6:	e000      	b.n	80069ea <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 80069e8:	bf00      	nop
}
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000031 	.word	0x20000031
 80069f4:	08007b05 	.word	0x08007b05
 80069f8:	e000edf0 	.word	0xe000edf0
 80069fc:	200019ac 	.word	0x200019ac

08006a00 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <_status_stage_xact+0x1e>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <_status_stage_xact+0x20>
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8006a22:	7bf9      	ldrb	r1, [r7, #15]
 8006a24:	79f8      	ldrb	r0, [r7, #7]
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7ff fddb 	bl	80065e4 <usbd_edpt_xfer>
 8006a2e:	4603      	mov	r3, r0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <tud_control_status+0x3c>)
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	6810      	ldr	r0, [r2, #0]
 8006a4a:	6851      	ldr	r1, [r2, #4]
 8006a4c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <tud_control_status+0x3c>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <tud_control_status+0x3c>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <tud_control_status+0x3c>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff ffcb 	bl	8006a00 <_status_stage_xact>
 8006a6a:	4603      	mov	r3, r0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20001aa4 	.word	0x20001aa4

08006a78 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8006a82:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <_data_stage_xact+0x9c>)
 8006a84:	899a      	ldrh	r2, [r3, #12]
 8006a86:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <_data_stage_xact+0x9c>)
 8006a88:	89db      	ldrh	r3, [r3, #14]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	837b      	strh	r3, [r7, #26]
 8006a90:	2340      	movs	r3, #64	; 0x40
 8006a92:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006a94:	8b7a      	ldrh	r2, [r7, #26]
 8006a96:	8b3b      	ldrh	r3, [r7, #24]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	bf28      	it	cs
 8006a9c:	4613      	movcs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8006aa6:	4b1b      	ldr	r3, [pc, #108]	; (8006b14 <_data_stage_xact+0x9c>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01e      	beq.n	8006af2 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8006ab8:	8bbb      	ldrh	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d019      	beq.n	8006af2 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <_data_stage_xact+0x9c>)
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	8bbb      	ldrh	r3, [r7, #28]
 8006ac4:	4914      	ldr	r1, [pc, #80]	; (8006b18 <_data_stage_xact+0xa0>)
 8006ac6:	6179      	str	r1, [r7, #20]
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	6139      	str	r1, [r7, #16]
 8006acc:	60fa      	str	r2, [r7, #12]
 8006ace:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d202      	bcs.n	8006ade <_data_stage_xact+0x66>
    return -1;
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	e005      	b.n	8006aea <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	6978      	ldr	r0, [r7, #20]
 8006ae4:	f001 febc 	bl	8008860 <memcpy>
  return 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <_data_stage_xact+0x7a>
 8006aee:	2300      	movs	r3, #0
 8006af0:	e00b      	b.n	8006b0a <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8006af2:	8bbb      	ldrh	r3, [r7, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <_data_stage_xact+0x84>
 8006af8:	4a07      	ldr	r2, [pc, #28]	; (8006b18 <_data_stage_xact+0xa0>)
 8006afa:	e000      	b.n	8006afe <_data_stage_xact+0x86>
 8006afc:	2200      	movs	r2, #0
 8006afe:	8bbb      	ldrh	r3, [r7, #28]
 8006b00:	7ff9      	ldrb	r1, [r7, #31]
 8006b02:	79f8      	ldrb	r0, [r7, #7]
 8006b04:	f7ff fd6e 	bl	80065e4 <usbd_edpt_xfer>
 8006b08:	4603      	mov	r3, r0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20001aa4 	.word	0x20001aa4
 8006b18:	20001ab8 	.word	0x20001ab8

08006b1c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	461a      	mov	r2, r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8006b30:	4b30      	ldr	r3, [pc, #192]	; (8006bf4 <tud_control_xfer+0xd8>)
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	6810      	ldr	r0, [r2, #0]
 8006b36:	6851      	ldr	r1, [r2, #4]
 8006b38:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8006b3a:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <tud_control_xfer+0xd8>)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8006b40:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <tud_control_xfer+0xd8>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	88db      	ldrh	r3, [r3, #6]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	89bb      	ldrh	r3, [r7, #12]
 8006b4e:	827b      	strh	r3, [r7, #18]
 8006b50:	4613      	mov	r3, r2
 8006b52:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006b54:	8a7a      	ldrh	r2, [r7, #18]
 8006b56:	8a3b      	ldrh	r3, [r7, #16]
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	bf28      	it	cs
 8006b5c:	4613      	movcs	r3, r2
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <tud_control_xfer+0xd8>)
 8006b62:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d026      	beq.n	8006bbc <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <tud_control_xfer+0xd8>)
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <tud_control_xfer+0x76>
 8006b7c:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <tud_control_xfer+0xdc>)
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d000      	beq.n	8006b8e <tud_control_xfer+0x72>
 8006b8c:	be00      	bkpt	0x0000
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e02b      	b.n	8006bea <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff ff6f 	bl	8006a78 <_data_stage_xact>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f083 0301 	eor.w	r3, r3, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d020      	beq.n	8006be8 <tud_control_xfer+0xcc>
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <tud_control_xfer+0xdc>)
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d000      	beq.n	8006bb8 <tud_control_xfer+0x9c>
 8006bb6:	be00      	bkpt	0x0000
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e016      	b.n	8006bea <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff ff1d 	bl	8006a00 <_status_stage_xact>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f083 0301 	eor.w	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <tud_control_xfer+0xcc>
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <tud_control_xfer+0xdc>)
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d000      	beq.n	8006be4 <tud_control_xfer+0xc8>
 8006be2:	be00      	bkpt	0x0000
 8006be4:	2300      	movs	r3, #0
 8006be6:	e000      	b.n	8006bea <tud_control_xfer+0xce>
  }

  return true;
 8006be8:	2301      	movs	r3, #1
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20001aa4 	.word	0x20001aa4
 8006bf8:	e000edf0 	.word	0xe000edf0

08006bfc <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8006c00:	2214      	movs	r2, #20
 8006c02:	2100      	movs	r1, #0
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <usbd_control_reset+0x14>)
 8006c06:	f001 fe39 	bl	800887c <memset>
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20001aa4 	.word	0x20001aa4

08006c14 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <usbd_control_set_complete_callback+0x1c>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6113      	str	r3, [r2, #16]
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20001aa4 	.word	0x20001aa4

08006c34 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <usbd_control_set_request+0x30>)
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6810      	ldr	r0, [r2, #0]
 8006c42:	6851      	ldr	r1, [r2, #4]
 8006c44:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <usbd_control_set_request+0x30>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <usbd_control_set_request+0x30>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006c52:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <usbd_control_set_request+0x30>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	819a      	strh	r2, [r3, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20001aa4 	.word	0x20001aa4

08006c68 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4603      	mov	r3, r0
 8006c72:	71fb      	strb	r3, [r7, #7]
 8006c74:	460b      	mov	r3, r1
 8006c76:	71bb      	strb	r3, [r7, #6]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	717b      	strb	r3, [r7, #5]
 8006c7c:	79bb      	ldrb	r3, [r7, #6]
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8006c86:	4a50      	ldr	r2, [pc, #320]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d021      	beq.n	8006cd8 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <usbd_control_xfer_cb+0x48>
 8006c9a:	4b4c      	ldr	r3, [pc, #304]	; (8006dcc <usbd_control_xfer_cb+0x164>)
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d000      	beq.n	8006cac <usbd_control_xfer_cb+0x44>
 8006caa:	be00      	bkpt	0x0000
 8006cac:	2300      	movs	r3, #0
 8006cae:	e087      	b.n	8006dc0 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8006cb0:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <usbd_control_xfer_cb+0x168>)
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <usbd_control_xfer_cb+0x58>
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	4943      	ldr	r1, [pc, #268]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8006cc0:	4b41      	ldr	r3, [pc, #260]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8006cc8:	4b3f      	ldr	r3, [pc, #252]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	79f8      	ldrb	r0, [r7, #7]
 8006cce:	4a3e      	ldr	r2, [pc, #248]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cd0:	2103      	movs	r1, #3
 8006cd2:	4798      	blx	r3
    }

    return true;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e073      	b.n	8006dc0 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8006ce6:	4b38      	ldr	r3, [pc, #224]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <usbd_control_xfer_cb+0x8a>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e066      	b.n	8006dc0 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8006cf2:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	4936      	ldr	r1, [pc, #216]	; (8006dd4 <usbd_control_xfer_cb+0x16c>)
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fdb0 	bl	8008860 <memcpy>
    TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8006d00:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d02:	89da      	ldrh	r2, [r3, #14]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d0e:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8006d10:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4413      	add	r3, r2
 8006d18:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d1a:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8006d1c:	4b2a      	ldr	r3, [pc, #168]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d1e:	88da      	ldrh	r2, [r3, #6]
 8006d20:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d22:	89db      	ldrh	r3, [r3, #14]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d002      	beq.n	8006d2e <usbd_control_xfer_cb+0xc6>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b3f      	cmp	r3, #63	; 0x3f
 8006d2c:	d831      	bhi.n	8006d92 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	79f8      	ldrb	r0, [r7, #7]
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d42:	2102      	movs	r1, #2
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8006d4a:	7ffb      	ldrb	r3, [r7, #31]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d015      	beq.n	8006d7c <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	491d      	ldr	r1, [pc, #116]	; (8006dc8 <usbd_control_xfer_cb+0x160>)
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fe53 	bl	8006a00 <_status_stage_xact>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f083 0301 	eor.w	r3, r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d02a      	beq.n	8006dbc <usbd_control_xfer_cb+0x154>
 8006d66:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <usbd_control_xfer_cb+0x164>)
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d000      	beq.n	8006d78 <usbd_control_xfer_cb+0x110>
 8006d76:	be00      	bkpt	0x0000
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e021      	b.n	8006dc0 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 ff25 	bl	8007bd0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff20 	bl	8007bd0 <dcd_edpt_stall>
  {
 8006d90:	e014      	b.n	8006dbc <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fe6f 	bl	8006a78 <_data_stage_xact>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <usbd_control_xfer_cb+0x156>
 8006da6:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <usbd_control_xfer_cb+0x164>)
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d000      	beq.n	8006db8 <usbd_control_xfer_cb+0x150>
 8006db6:	be00      	bkpt	0x0000
 8006db8:	2300      	movs	r3, #0
 8006dba:	e001      	b.n	8006dc0 <usbd_control_xfer_cb+0x158>
  {
 8006dbc:	bf00      	nop
  }

  return true;
 8006dbe:	2301      	movs	r3, #1
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20001aa4 	.word	0x20001aa4
 8006dcc:	e000edf0 	.word	0xe000edf0
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	20001ab8 	.word	0x20001ab8

08006dd8 <__NVIC_EnableIRQ>:
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	db0b      	blt.n	8006e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	f003 021f 	and.w	r2, r3, #31
 8006df0:	4907      	ldr	r1, [pc, #28]	; (8006e10 <__NVIC_EnableIRQ+0x38>)
 8006df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	2001      	movs	r0, #1
 8006dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8006dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000e100 	.word	0xe000e100

08006e14 <__NVIC_DisableIRQ>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	db12      	blt.n	8006e4c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	f003 021f 	and.w	r2, r3, #31
 8006e2c:	490a      	ldr	r1, [pc, #40]	; (8006e58 <__NVIC_DisableIRQ+0x44>)
 8006e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	2001      	movs	r0, #1
 8006e36:	fa00 f202 	lsl.w	r2, r0, r2
 8006e3a:	3320      	adds	r3, #32
 8006e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e40:	f3bf 8f4f 	dsb	sy
}
 8006e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e46:	f3bf 8f6f 	isb	sy
}
 8006e4a:	bf00      	nop
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	e000e100 	.word	0xe000e100

08006e5c <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3317      	adds	r3, #23
 8006e72:	b29b      	uxth	r3, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006e8e:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8006e94:	2300      	movs	r3, #0
 8006e96:	757b      	strb	r3, [r7, #21]
 8006e98:	e013      	b.n	8006ec2 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8006e9a:	7d7b      	ldrb	r3, [r7, #21]
 8006e9c:	4a10      	ldr	r2, [pc, #64]	; (8006ee0 <update_grxfsiz+0x60>)
 8006e9e:	015b      	lsls	r3, r3, #5
 8006ea0:	4413      	add	r3, r2
 8006ea2:	330a      	adds	r3, #10
 8006ea4:	881a      	ldrh	r2, [r3, #0]
 8006ea6:	8afb      	ldrh	r3, [r7, #22]
 8006ea8:	81fb      	strh	r3, [r7, #14]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8006eae:	89fa      	ldrh	r2, [r7, #14]
 8006eb0:	89bb      	ldrh	r3, [r7, #12]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bf38      	it	cc
 8006eb6:	4613      	movcc	r3, r2
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8006ebc:	7d7b      	ldrb	r3, [r7, #21]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	757b      	strb	r3, [r7, #21]
 8006ec2:	7d7b      	ldrb	r3, [r7, #21]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d9e8      	bls.n	8006e9a <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8006ec8:	8afb      	ldrh	r3, [r7, #22]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff ffc6 	bl	8006e5c <calc_rx_ff_size>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001b00 	.word	0x20001b00

08006ee4 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006eee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ef2:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006ef4:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <bus_reset+0xd4>)
 8006ef6:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006ef8:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <bus_reset+0xd8>)
 8006efa:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006efc:	4b30      	ldr	r3, [pc, #192]	; (8006fc0 <bus_reset+0xdc>)
 8006efe:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	2100      	movs	r1, #0
 8006f04:	482f      	ldr	r0, [pc, #188]	; (8006fc4 <bus_reset+0xe0>)
 8006f06:	f001 fcb9 	bl	800887c <memset>
  _out_ep_closed = false;
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <bus_reset+0xe4>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e00e      	b.n	8006f40 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
 8006f24:	015b      	lsls	r3, r3, #5
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4413      	add	r3, r2
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
 8006f2e:	015b      	lsls	r3, r3, #5
 8006f30:	6939      	ldr	r1, [r7, #16]
 8006f32:	440b      	add	r3, r1
 8006f34:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006f38:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	7ffb      	ldrb	r3, [r7, #31]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d9ed      	bls.n	8006f22 <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006f4c:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2209      	movs	r2, #9
 8006f52:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2209      	movs	r2, #9
 8006f58:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 8006f5a:	2040      	movs	r0, #64	; 0x40
 8006f5c:	f7ff ff7e 	bl	8006e5c <calc_rx_ff_size>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8006f68:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <bus_reset+0xe8>)
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <bus_reset+0xe8>)
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8006f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 0203 	bic.w	r2, r3, #3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <bus_reset+0xe0>)
 8006f8c:	2240      	movs	r2, #64	; 0x40
 8006f8e:	835a      	strh	r2, [r3, #26]
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <bus_reset+0xe0>)
 8006f92:	8b5a      	ldrh	r2, [r3, #26]
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <bus_reset+0xe0>)
 8006f96:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	619a      	str	r2, [r3, #24]
}
 8006fb0:	bf00      	nop
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	50000800 	.word	0x50000800
 8006fbc:	50000b00 	.word	0x50000b00
 8006fc0:	50000900 	.word	0x50000900
 8006fc4:	20001b00 	.word	0x20001b00
 8006fc8:	20001b86 	.word	0x20001b86
 8006fcc:	20001b84 	.word	0x20001b84

08006fd0 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d106      	bne.n	8006ffc <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 8006ffa:	e050      	b.n	800709e <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <set_turnaround+0xdc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a2b      	ldr	r2, [pc, #172]	; (80070b0 <set_turnaround+0xe0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d302      	bcc.n	800700c <set_turnaround+0x3c>
      turnaround = 0x6U;
 8007006:	2306      	movs	r3, #6
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e041      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <set_turnaround+0xdc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a28      	ldr	r2, [pc, #160]	; (80070b4 <set_turnaround+0xe4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d902      	bls.n	800701c <set_turnaround+0x4c>
      turnaround = 0x7U;
 8007016:	2307      	movs	r3, #7
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	e039      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <set_turnaround+0xdc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a25      	ldr	r2, [pc, #148]	; (80070b8 <set_turnaround+0xe8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d302      	bcc.n	800702c <set_turnaround+0x5c>
      turnaround = 0x8U;
 8007026:	2308      	movs	r3, #8
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	e031      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 800702c:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <set_turnaround+0xdc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a22      	ldr	r2, [pc, #136]	; (80070bc <set_turnaround+0xec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d902      	bls.n	800703c <set_turnaround+0x6c>
      turnaround = 0x9U;
 8007036:	2309      	movs	r3, #9
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	e029      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <set_turnaround+0xdc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1f      	ldr	r2, [pc, #124]	; (80070c0 <set_turnaround+0xf0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d902      	bls.n	800704c <set_turnaround+0x7c>
      turnaround = 0xAU;
 8007046:	230a      	movs	r3, #10
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e021      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <set_turnaround+0xdc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <set_turnaround+0xf4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d902      	bls.n	800705c <set_turnaround+0x8c>
      turnaround = 0xBU;
 8007056:	230b      	movs	r3, #11
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e019      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <set_turnaround+0xdc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <set_turnaround+0xf8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d302      	bcc.n	800706c <set_turnaround+0x9c>
      turnaround = 0xCU;
 8007066:	230c      	movs	r3, #12
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e011      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <set_turnaround+0xdc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <set_turnaround+0xfc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d302      	bcc.n	800707c <set_turnaround+0xac>
      turnaround = 0xDU;
 8007076:	230d      	movs	r3, #13
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e009      	b.n	8007090 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <set_turnaround+0xdc>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <set_turnaround+0x100>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d302      	bcc.n	800708c <set_turnaround+0xbc>
      turnaround = 0xEU;
 8007086:	230e      	movs	r3, #14
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e001      	b.n	8007090 <set_turnaround+0xc0>
      turnaround = 0xFU;
 800708c:	230f      	movs	r3, #15
 800708e:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000000c 	.word	0x2000000c
 80070b0:	01e84800 	.word	0x01e84800
 80070b4:	01a39ddf 	.word	0x01a39ddf
 80070b8:	016e3600 	.word	0x016e3600
 80070bc:	014ca43f 	.word	0x014ca43f
 80070c0:	01312cff 	.word	0x01312cff
 80070c4:	011a499f 	.word	0x011a499f
 80070c8:	01067380 	.word	0x01067380
 80070cc:	00f42400 	.word	0x00f42400
 80070d0:	00e4e1c0 	.word	0x00e4e1c0

080070d4 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80070de:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <get_speed+0x34>)
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <get_speed+0x24>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e000      	b.n	80070fa <get_speed+0x26>
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	50000800 	.word	0x50000800

0800710c <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	460a      	mov	r2, r1
 8007116:	71fb      	strb	r3, [r7, #7]
 8007118:	4613      	mov	r3, r2
 800711a:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d107      	bne.n	8007132 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8007122:	79bb      	ldrb	r3, [r7, #6]
 8007124:	2b02      	cmp	r3, #2
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e001      	b.n	8007136 <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8007132:	2303      	movs	r3, #3
 8007134:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007136:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <set_speed+0x54>)
 8007138:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 0203 	bic.w	r2, r3, #3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	431a      	orrs	r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	601a      	str	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	50000800 	.word	0x50000800

08007164 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8007164:	b490      	push	{r4, r7}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af00      	add	r7, sp, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	461a      	mov	r2, r3
 8007172:	4623      	mov	r3, r4
 8007174:	71fb      	strb	r3, [r7, #7]
 8007176:	4603      	mov	r3, r0
 8007178:	71bb      	strb	r3, [r7, #6]
 800717a:	460b      	mov	r3, r1
 800717c:	717b      	strb	r3, [r7, #5]
 800717e:	4613      	mov	r3, r2
 8007180:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007182:	4b6c      	ldr	r3, [pc, #432]	; (8007334 <edpt_schedule_packets+0x1d0>)
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007186:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <edpt_schedule_packets+0x1d4>)
 8007188:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800718a:	4b6c      	ldr	r3, [pc, #432]	; (800733c <edpt_schedule_packets+0x1d8>)
 800718c:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 800718e:	79bb      	ldrb	r3, [r7, #6]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d121      	bne.n	80071d8 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8007194:	79ba      	ldrb	r2, [r7, #6]
 8007196:	797b      	ldrb	r3, [r7, #5]
 8007198:	0052      	lsls	r2, r2, #1
 800719a:	4413      	add	r3, r2
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	4a68      	ldr	r2, [pc, #416]	; (8007340 <edpt_schedule_packets+0x1dc>)
 80071a0:	4413      	add	r3, r2
 80071a2:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80071a4:	797b      	ldrb	r3, [r7, #5]
 80071a6:	4a67      	ldr	r2, [pc, #412]	; (8007344 <edpt_schedule_packets+0x1e0>)
 80071a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	895b      	ldrh	r3, [r3, #10]
 80071b0:	81fa      	strh	r2, [r7, #14]
 80071b2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80071b4:	89fa      	ldrh	r2, [r7, #14]
 80071b6:	89bb      	ldrh	r3, [r7, #12]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf28      	it	cs
 80071bc:	4613      	movcs	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 80071c2:	797b      	ldrb	r3, [r7, #5]
 80071c4:	4a5f      	ldr	r2, [pc, #380]	; (8007344 <edpt_schedule_packets+0x1e0>)
 80071c6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80071ca:	797b      	ldrb	r3, [r7, #5]
 80071cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80071ce:	1a8a      	subs	r2, r1, r2
 80071d0:	b291      	uxth	r1, r2
 80071d2:	4a5c      	ldr	r2, [pc, #368]	; (8007344 <edpt_schedule_packets+0x1e0>)
 80071d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 80071d8:	797b      	ldrb	r3, [r7, #5]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d14f      	bne.n	800727e <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80071de:	887b      	ldrh	r3, [r7, #2]
 80071e0:	04db      	lsls	r3, r3, #19
 80071e2:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 80071e4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80071e6:	79bb      	ldrb	r3, [r7, #6]
 80071e8:	015b      	lsls	r3, r3, #5
 80071ea:	69f9      	ldr	r1, [r7, #28]
 80071ec:	440b      	add	r3, r1
 80071ee:	4302      	orrs	r2, r0
 80071f0:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80071f2:	79bb      	ldrb	r3, [r7, #6]
 80071f4:	015b      	lsls	r3, r3, #5
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	015b      	lsls	r3, r3, #5
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	440b      	add	r3, r1
 8007204:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007208:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 800720a:	79bb      	ldrb	r3, [r7, #6]
 800720c:	015b      	lsls	r3, r3, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800721c:	d122      	bne.n	8007264 <edpt_schedule_packets+0x100>
 800721e:	79ba      	ldrb	r2, [r7, #6]
 8007220:	797b      	ldrb	r3, [r7, #5]
 8007222:	4947      	ldr	r1, [pc, #284]	; (8007340 <edpt_schedule_packets+0x1dc>)
 8007224:	0052      	lsls	r2, r2, #1
 8007226:	4413      	add	r3, r2
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	440b      	add	r3, r1
 800722c:	330c      	adds	r3, #12
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d117      	bne.n	8007264 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723c:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 800723e:	79bb      	ldrb	r3, [r7, #6]
 8007240:	015b      	lsls	r3, r3, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <edpt_schedule_packets+0xf0>
 800724e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007252:	e001      	b.n	8007258 <edpt_schedule_packets+0xf4>
 8007254:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8007258:	79bb      	ldrb	r3, [r7, #6]
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	69f8      	ldr	r0, [r7, #28]
 800725e:	4403      	add	r3, r0
 8007260:	430a      	orrs	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8007264:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007266:	2b00      	cmp	r3, #0
 8007268:	d05e      	beq.n	8007328 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	79ba      	ldrb	r2, [r7, #6]
 8007270:	2101      	movs	r1, #1
 8007272:	fa01 f202 	lsl.w	r2, r1, r2
 8007276:	431a      	orrs	r2, r3
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 800727c:	e054      	b.n	8007328 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 800727e:	79bb      	ldrb	r3, [r7, #6]
 8007280:	015b      	lsls	r3, r3, #5
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	4413      	add	r3, r2
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	79bb      	ldrb	r3, [r7, #6]
 800728a:	015b      	lsls	r3, r3, #5
 800728c:	6a39      	ldr	r1, [r7, #32]
 800728e:	440b      	add	r3, r1
 8007290:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8007294:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8007296:	79bb      	ldrb	r3, [r7, #6]
 8007298:	015b      	lsls	r3, r3, #5
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	4413      	add	r3, r2
 800729e:	6919      	ldr	r1, [r3, #16]
 80072a0:	887b      	ldrh	r3, [r7, #2]
 80072a2:	04db      	lsls	r3, r3, #19
 80072a4:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 80072a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 80072a8:	431a      	orrs	r2, r3
 80072aa:	79bb      	ldrb	r3, [r7, #6]
 80072ac:	015b      	lsls	r3, r3, #5
 80072ae:	6a38      	ldr	r0, [r7, #32]
 80072b0:	4403      	add	r3, r0
 80072b2:	430a      	orrs	r2, r1
 80072b4:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 80072b6:	79bb      	ldrb	r3, [r7, #6]
 80072b8:	015b      	lsls	r3, r3, #5
 80072ba:	6a3a      	ldr	r2, [r7, #32]
 80072bc:	4413      	add	r3, r2
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	79bb      	ldrb	r3, [r7, #6]
 80072c2:	015b      	lsls	r3, r3, #5
 80072c4:	6a39      	ldr	r1, [r7, #32]
 80072c6:	440b      	add	r3, r1
 80072c8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80072cc:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80072ce:	79bb      	ldrb	r3, [r7, #6]
 80072d0:	015b      	lsls	r3, r3, #5
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	4413      	add	r3, r2
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80072dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e0:	d122      	bne.n	8007328 <edpt_schedule_packets+0x1c4>
 80072e2:	79ba      	ldrb	r2, [r7, #6]
 80072e4:	797b      	ldrb	r3, [r7, #5]
 80072e6:	4916      	ldr	r1, [pc, #88]	; (8007340 <edpt_schedule_packets+0x1dc>)
 80072e8:	0052      	lsls	r2, r2, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	440b      	add	r3, r1
 80072f0:	330c      	adds	r3, #12
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d117      	bne.n	8007328 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8007302:	79bb      	ldrb	r3, [r7, #6]
 8007304:	015b      	lsls	r3, r3, #5
 8007306:	6a3a      	ldr	r2, [r7, #32]
 8007308:	4413      	add	r3, r2
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <edpt_schedule_packets+0x1b4>
 8007312:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007316:	e001      	b.n	800731c <edpt_schedule_packets+0x1b8>
 8007318:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800731c:	79bb      	ldrb	r3, [r7, #6]
 800731e:	015b      	lsls	r3, r3, #5
 8007320:	6a38      	ldr	r0, [r7, #32]
 8007322:	4403      	add	r3, r0
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
}
 8007328:	bf00      	nop
 800732a:	3728      	adds	r7, #40	; 0x28
 800732c:	46bd      	mov	sp, r7
 800732e:	bc90      	pop	{r4, r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	50000800 	.word	0x50000800
 8007338:	50000b00 	.word	0x50000b00
 800733c:	50000900 	.word	0x50000900
 8007340:	20001b00 	.word	0x20001b00
 8007344:	20001b80 	.word	0x20001b80

08007348 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007352:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007356:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d106      	bne.n	800736c <dcd_init+0x24>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e005      	b.n	8007378 <dcd_init+0x30>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8007378:	bf00      	nop
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dafb      	bge.n	800737a <dcd_init+0x32>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f043 0201 	orr.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 800738e:	bf00      	nop
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b01      	cmp	r3, #1
 800739a:	d0f9      	beq.n	8007390 <dcd_init+0x48>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 800739c:	4b1b      	ldr	r3, [pc, #108]	; (800740c <dcd_init+0xc4>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	695a      	ldr	r2, [r3, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f043 0206 	orr.w	r2, r3, #6
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80073bc:	4b14      	ldr	r3, [pc, #80]	; (8007410 <dcd_init+0xc8>)
 80073be:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f043 0204 	orr.w	r2, r3, #4
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff fe9b 	bl	800710c <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <dcd_init+0xcc>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f043 0201 	orr.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f851 	bl	80074a4 <dcd_connect>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	50000e00 	.word	0x50000e00
 8007410:	50000800 	.word	0x50000800
 8007414:	80003810 	.word	0x80003810

08007418 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8007422:	2043      	movs	r0, #67	; 0x43
 8007424:	f7ff fcd8 	bl	8006dd8 <__NVIC_EnableIRQ>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 800743a:	2043      	movs	r0, #67	; 0x43
 800743c:	f7ff fcea 	bl	8006e14 <__NVIC_DisableIRQ>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	460a      	mov	r2, r1
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	4613      	mov	r3, r2
 8007456:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <dcd_set_address+0x58>)
 800745a:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007464:	79ba      	ldrb	r2, [r7, #6]
 8007466:	0112      	lsls	r2, r2, #4
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	2300      	movs	r3, #0
 8007470:	72fb      	strb	r3, [r7, #11]
 8007472:	2301      	movs	r3, #1
 8007474:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8007476:	7abb      	ldrb	r3, [r7, #10]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <dcd_set_address+0x3a>
 800747c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007480:	e000      	b.n	8007484 <dcd_set_address+0x3c>
 8007482:	2300      	movs	r3, #0
 8007484:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007488:	4313      	orrs	r3, r2
 800748a:	b25b      	sxtb	r3, r3
 800748c:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800748e:	79f8      	ldrb	r0, [r7, #7]
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	f000 f97a 	bl	800778c <dcd_edpt_xfer>
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	50000800 	.word	0x50000800

080074a4 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <dcd_connect+0x28>)
 80074b0:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f023 0202 	bic.w	r2, r3, #2
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	605a      	str	r2, [r3, #4]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	50000800 	.word	0x50000800

080074d0 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b090      	sub	sp, #64	; 0x40
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80074dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80074e2:	4b81      	ldr	r3, [pc, #516]	; (80076e8 <dcd_edpt_open+0x218>)
 80074e4:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80074e6:	4b81      	ldr	r3, [pc, #516]	; (80076ec <dcd_edpt_open+0x21c>)
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80074ea:	4b81      	ldr	r3, [pc, #516]	; (80076f0 <dcd_edpt_open+0x220>)
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	789b      	ldrb	r3, [r3, #2]
 80074f2:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80074f4:	7cbb      	ldrb	r3, [r7, #18]
 80074f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	789b      	ldrb	r3, [r3, #2]
 8007504:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007506:	7cfb      	ldrb	r3, [r7, #19]
 8007508:	09db      	lsrs	r3, r3, #7
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8007510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007514:	2b03      	cmp	r3, #3
 8007516:	d90a      	bls.n	800752e <dcd_edpt_open+0x5e>
 8007518:	4b76      	ldr	r3, [pc, #472]	; (80076f4 <dcd_edpt_open+0x224>)
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d000      	beq.n	800752a <dcd_edpt_open+0x5a>
 8007528:	be00      	bkpt	0x0000
 800752a:	2300      	movs	r3, #0
 800752c:	e0d8      	b.n	80076e0 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800752e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	4413      	add	r3, r2
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	4a6e      	ldr	r2, [pc, #440]	; (80076f8 <dcd_edpt_open+0x228>)
 800753e:	4413      	add	r3, r2
 8007540:	62bb      	str	r3, [r7, #40]	; 0x28
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	889b      	ldrh	r3, [r3, #4]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007550:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	799a      	ldrb	r2, [r3, #6]
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	895b      	ldrh	r3, [r3, #10]
 8007562:	3303      	adds	r3, #3
 8007564:	2b00      	cmp	r3, #0
 8007566:	da00      	bge.n	800756a <dcd_edpt_open+0x9a>
 8007568:	3303      	adds	r3, #3
 800756a:	109b      	asrs	r3, r3, #2
 800756c:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 800756e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007572:	2b00      	cmp	r3, #0
 8007574:	d152      	bne.n	800761c <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8007576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	b29b      	uxth	r3, r3
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fc6d 	bl	8006e5c <calc_rx_ff_size>
 8007582:	4603      	mov	r3, r0
 8007584:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 8007586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758a:	8bfb      	ldrh	r3, [r7, #30]
 800758c:	429a      	cmp	r2, r3
 800758e:	d214      	bcs.n	80075ba <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8007590:	8bfb      	ldrh	r3, [r7, #30]
 8007592:	4a5a      	ldr	r2, [pc, #360]	; (80076fc <dcd_edpt_open+0x22c>)
 8007594:	8812      	ldrh	r2, [r2, #0]
 8007596:	4413      	add	r3, r2
 8007598:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800759c:	d90a      	bls.n	80075b4 <dcd_edpt_open+0xe4>
 800759e:	4b55      	ldr	r3, [pc, #340]	; (80076f4 <dcd_edpt_open+0x224>)
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d000      	beq.n	80075b0 <dcd_edpt_open+0xe0>
 80075ae:	be00      	bkpt	0x0000
 80075b0:	2300      	movs	r3, #0
 80075b2:	e095      	b.n	80076e0 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 80075b4:	8bfa      	ldrh	r2, [r7, #30]
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80075ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075be:	015b      	lsls	r3, r3, #5
 80075c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075c2:	4413      	add	r3, r2
 80075c4:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	049b      	lsls	r3, r3, #18
 80075d2:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	78db      	ldrb	r3, [r3, #3]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d002      	beq.n	80075e8 <dcd_edpt_open+0x118>
 80075e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075e6:	e000      	b.n	80075ea <dcd_edpt_open+0x11a>
 80075e8:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 80075ea:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 80075ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ee:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 80075f0:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 80075f2:	431a      	orrs	r2, r3
 80075f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075f8:	015b      	lsls	r3, r3, #5
 80075fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075fc:	440b      	add	r3, r1
 80075fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007602:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800760c:	3210      	adds	r2, #16
 800760e:	2101      	movs	r1, #1
 8007610:	fa01 f202 	lsl.w	r2, r1, r2
 8007614:	431a      	orrs	r2, r3
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	61da      	str	r2, [r3, #28]
 800761a:	e060      	b.n	80076de <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 800761c:	4b37      	ldr	r3, [pc, #220]	; (80076fc <dcd_edpt_open+0x22c>)
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007624:	4413      	add	r3, r2
 8007626:	461a      	mov	r2, r3
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	4413      	add	r3, r2
 800762e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007632:	d90a      	bls.n	800764a <dcd_edpt_open+0x17a>
 8007634:	4b2f      	ldr	r3, [pc, #188]	; (80076f4 <dcd_edpt_open+0x224>)
 8007636:	623b      	str	r3, [r7, #32]
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d000      	beq.n	8007646 <dcd_edpt_open+0x176>
 8007644:	be00      	bkpt	0x0000
 8007646:	2300      	movs	r3, #0
 8007648:	e04a      	b.n	80076e0 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 800764a:	4b2c      	ldr	r3, [pc, #176]	; (80076fc <dcd_edpt_open+0x22c>)
 800764c:	881a      	ldrh	r2, [r3, #0]
 800764e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007650:	4413      	add	r3, r2
 8007652:	b29a      	uxth	r2, r3
 8007654:	4b29      	ldr	r3, [pc, #164]	; (80076fc <dcd_edpt_open+0x22c>)
 8007656:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8007658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	4619      	mov	r1, r3
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <dcd_edpt_open+0x22c>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8007666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800766a:	3b01      	subs	r3, #1
 800766c:	430a      	orrs	r2, r1
 800766e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007670:	3340      	adds	r3, #64	; 0x40
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800767c:	015b      	lsls	r3, r3, #5
 800767e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007680:	4413      	add	r3, r2
 8007682:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8007684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007688:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800768a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	78db      	ldrb	r3, [r3, #3]
 8007692:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007696:	b2db      	uxtb	r3, r3
 8007698:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800769a:	4313      	orrs	r3, r2
 800769c:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	78db      	ldrb	r3, [r3, #3]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <dcd_edpt_open+0x1e2>
 80076ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076b0:	e000      	b.n	80076b4 <dcd_edpt_open+0x1e4>
 80076b2:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 80076b4:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80076b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b8:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 80076ba:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 80076bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076c0:	015b      	lsls	r3, r3, #5
 80076c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076c4:	4403      	add	r3, r0
 80076c6:	430a      	orrs	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80076d2:	2101      	movs	r1, #1
 80076d4:	fa01 f202 	lsl.w	r2, r1, r2
 80076d8:	431a      	orrs	r2, r3
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	61da      	str	r2, [r3, #28]
  }

  return true;
 80076de:	2301      	movs	r3, #1
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3740      	adds	r7, #64	; 0x40
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	50000800 	.word	0x50000800
 80076ec:	50000b00 	.word	0x50000b00
 80076f0:	50000900 	.word	0x50000900
 80076f4:	e000edf0 	.word	0xe000edf0
 80076f8:	20001b00 	.word	0x20001b00
 80076fc:	20001b84 	.word	0x20001b84

08007700 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800770a:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <dcd_edpt_close_all+0x78>)
 800770c:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800770e:	4b1b      	ldr	r3, [pc, #108]	; (800777c <dcd_edpt_close_all+0x7c>)
 8007710:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007712:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <dcd_edpt_close_all+0x80>)
 8007714:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800771c:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
 8007722:	e01c      	b.n	800775e <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	015b      	lsls	r3, r3, #5
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	4a14      	ldr	r2, [pc, #80]	; (8007784 <dcd_edpt_close_all+0x84>)
 8007734:	015b      	lsls	r3, r3, #5
 8007736:	4413      	add	r3, r2
 8007738:	330a      	adds	r3, #10
 800773a:	2200      	movs	r2, #0
 800773c:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	015b      	lsls	r3, r3, #5
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4413      	add	r3, r2
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <dcd_edpt_close_all+0x84>)
 800774e:	015b      	lsls	r3, r3, #5
 8007750:	4413      	add	r3, r2
 8007752:	331a      	adds	r3, #26
 8007754:	2200      	movs	r2, #0
 8007756:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	3301      	adds	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d9df      	bls.n	8007724 <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <dcd_edpt_close_all+0x88>)
 8007766:	2210      	movs	r2, #16
 8007768:	801a      	strh	r2, [r3, #0]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	50000800 	.word	0x50000800
 800777c:	50000b00 	.word	0x50000b00
 8007780:	50000900 	.word	0x50000900
 8007784:	20001b00 	.word	0x20001b00
 8007788:	20001b84 	.word	0x20001b84

0800778c <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af02      	add	r7, sp, #8
 8007792:	603a      	str	r2, [r7, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	4603      	mov	r3, r0
 8007798:	71fb      	strb	r3, [r7, #7]
 800779a:	460b      	mov	r3, r1
 800779c:	71bb      	strb	r3, [r7, #6]
 800779e:	4613      	mov	r3, r2
 80077a0:	80bb      	strh	r3, [r7, #4]
 80077a2:	79bb      	ldrb	r3, [r7, #6]
 80077a4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80077a6:	7b3b      	ldrb	r3, [r7, #12]
 80077a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ac:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80077ae:	757b      	strb	r3, [r7, #21]
 80077b0:	79bb      	ldrb	r3, [r7, #6]
 80077b2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80077b4:	7b7b      	ldrb	r3, [r7, #13]
 80077b6:	09db      	lsrs	r3, r3, #7
 80077b8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80077ba:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80077bc:	7d7a      	ldrb	r2, [r7, #21]
 80077be:	7d3b      	ldrb	r3, [r7, #20]
 80077c0:	0052      	lsls	r2, r2, #1
 80077c2:	4413      	add	r3, r2
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4a23      	ldr	r2, [pc, #140]	; (8007854 <dcd_edpt_xfer+0xc8>)
 80077c8:	4413      	add	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	88ba      	ldrh	r2, [r7, #4]
 80077dc:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 80077de:	7d7b      	ldrb	r3, [r7, #21]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d111      	bne.n	8007808 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 80077e4:	7d3b      	ldrb	r3, [r7, #20]
 80077e6:	491c      	ldr	r1, [pc, #112]	; (8007858 <dcd_edpt_xfer+0xcc>)
 80077e8:	88ba      	ldrh	r2, [r7, #4]
 80077ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80077ee:	7d3b      	ldrb	r3, [r7, #20]
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <dcd_edpt_xfer+0xcc>)
 80077f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f6:	7d3a      	ldrb	r2, [r7, #20]
 80077f8:	7d79      	ldrb	r1, [r7, #21]
 80077fa:	79f8      	ldrb	r0, [r7, #7]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2301      	movs	r3, #1
 8007800:	f7ff fcb0 	bl	8007164 <edpt_schedule_packets>
    return true;
 8007804:	2301      	movs	r3, #1
 8007806:	e021      	b.n	800784c <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	895b      	ldrh	r3, [r3, #10]
 800780c:	88ba      	ldrh	r2, [r7, #4]
 800780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007812:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	895a      	ldrh	r2, [r3, #10]
 8007818:	88bb      	ldrh	r3, [r7, #4]
 800781a:	fbb3 f1f2 	udiv	r1, r3, r2
 800781e:	fb01 f202 	mul.w	r2, r1, r2
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8007826:	89fb      	ldrh	r3, [r7, #14]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d102      	bne.n	8007832 <dcd_edpt_xfer+0xa6>
 800782c:	88bb      	ldrh	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <dcd_edpt_xfer+0xac>
    num_packets++;
 8007832:	8afb      	ldrh	r3, [r7, #22]
 8007834:	3301      	adds	r3, #1
 8007836:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8007838:	8afc      	ldrh	r4, [r7, #22]
 800783a:	7d3a      	ldrb	r2, [r7, #20]
 800783c:	7d79      	ldrb	r1, [r7, #21]
 800783e:	79f8      	ldrb	r0, [r7, #7]
 8007840:	88bb      	ldrh	r3, [r7, #4]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	4623      	mov	r3, r4
 8007846:	f7ff fc8d 	bl	8007164 <edpt_schedule_packets>

  return true;
 800784a:	2301      	movs	r3, #1
}
 800784c:	4618      	mov	r0, r3
 800784e:	371c      	adds	r7, #28
 8007850:	46bd      	mov	sp, r7
 8007852:	bd90      	pop	{r4, r7, pc}
 8007854:	20001b00 	.word	0x20001b00
 8007858:	20001b80 	.word	0x20001b80

0800785c <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b08b      	sub	sp, #44	; 0x2c
 8007860:	af02      	add	r7, sp, #8
 8007862:	603a      	str	r2, [r7, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4603      	mov	r3, r0
 8007868:	71fb      	strb	r3, [r7, #7]
 800786a:	460b      	mov	r3, r1
 800786c:	71bb      	strb	r3, [r7, #6]
 800786e:	4613      	mov	r3, r2
 8007870:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	88db      	ldrh	r3, [r3, #6]
 8007876:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d00a      	beq.n	8007896 <dcd_edpt_xfer_fifo+0x3a>
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <dcd_edpt_xfer_fifo+0xc4>)
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d000      	beq.n	8007892 <dcd_edpt_xfer_fifo+0x36>
 8007890:	be00      	bkpt	0x0000
 8007892:	2300      	movs	r3, #0
 8007894:	e03f      	b.n	8007916 <dcd_edpt_xfer_fifo+0xba>
 8007896:	79bb      	ldrb	r3, [r7, #6]
 8007898:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80078a2:	777b      	strb	r3, [r7, #29]
 80078a4:	79bb      	ldrb	r3, [r7, #6]
 80078a6:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	09db      	lsrs	r3, r3, #7
 80078ac:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80078ae:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80078b0:	7f7a      	ldrb	r2, [r7, #29]
 80078b2:	7f3b      	ldrb	r3, [r7, #28]
 80078b4:	0052      	lsls	r2, r2, #1
 80078b6:	4413      	add	r3, r2
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <dcd_edpt_xfer_fifo+0xc8>)
 80078bc:	4413      	add	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	88ba      	ldrh	r2, [r7, #4]
 80078d0:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	88ba      	ldrh	r2, [r7, #4]
 80078d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078dc:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	895a      	ldrh	r2, [r3, #10]
 80078e2:	88bb      	ldrh	r3, [r7, #4]
 80078e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078e8:	fb01 f202 	mul.w	r2, r1, r2
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80078f0:	8afb      	ldrh	r3, [r7, #22]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <dcd_edpt_xfer_fifo+0xa0>
 80078f6:	88bb      	ldrh	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <dcd_edpt_xfer_fifo+0xa6>
 80078fc:	8bfb      	ldrh	r3, [r7, #30]
 80078fe:	3301      	adds	r3, #1
 8007900:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8007902:	8bfc      	ldrh	r4, [r7, #30]
 8007904:	7f3a      	ldrb	r2, [r7, #28]
 8007906:	7f79      	ldrb	r1, [r7, #29]
 8007908:	79f8      	ldrb	r0, [r7, #7]
 800790a:	88bb      	ldrh	r3, [r7, #4]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	4623      	mov	r3, r4
 8007910:	f7ff fc28 	bl	8007164 <edpt_schedule_packets>

  return true;
 8007914:	2301      	movs	r3, #1
}
 8007916:	4618      	mov	r0, r3
 8007918:	3724      	adds	r7, #36	; 0x24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}
 800791e:	bf00      	nop
 8007920:	e000edf0 	.word	0xe000edf0
 8007924:	20001b00 	.word	0x20001b00

08007928 <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8007928:	b480      	push	{r7}
 800792a:	b089      	sub	sp, #36	; 0x24
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
 8007932:	460b      	mov	r3, r1
 8007934:	71bb      	strb	r3, [r7, #6]
 8007936:	4613      	mov	r3, r2
 8007938:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800793a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800793e:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007940:	4b6c      	ldr	r3, [pc, #432]	; (8007af4 <dcd_edpt_disable+0x1cc>)
 8007942:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007944:	4b6c      	ldr	r3, [pc, #432]	; (8007af8 <dcd_edpt_disable+0x1d0>)
 8007946:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007948:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <dcd_edpt_disable+0x1d4>)
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	79bb      	ldrb	r3, [r7, #6]
 800794e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007950:	7b3b      	ldrb	r3, [r7, #12]
 8007952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007956:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	79bb      	ldrb	r3, [r7, #6]
 800795c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	09db      	lsrs	r3, r3, #7
 8007962:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007964:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d16a      	bne.n	8007a42 <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <dcd_edpt_disable+0x58>
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	015b      	lsls	r3, r3, #5
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4413      	add	r3, r2
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	db13      	blt.n	80079a8 <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	015b      	lsls	r3, r3, #5
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	797b      	ldrb	r3, [r7, #5]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <dcd_edpt_disable+0x6e>
 8007990:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8007994:	e001      	b.n	800799a <dcd_edpt_disable+0x72>
 8007996:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	015b      	lsls	r3, r3, #5
 800799e:	6938      	ldr	r0, [r7, #16]
 80079a0:	4403      	add	r3, r0
 80079a2:	430a      	orrs	r2, r1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e037      	b.n	8007a18 <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	015b      	lsls	r3, r3, #5
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4413      	add	r3, r2
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	015b      	lsls	r3, r3, #5
 80079b6:	6939      	ldr	r1, [r7, #16]
 80079b8:	440b      	add	r3, r1
 80079ba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80079be:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80079c0:	bf00      	nop
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	015b      	lsls	r3, r3, #5
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4413      	add	r3, r2
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f6      	beq.n	80079c2 <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	015b      	lsls	r3, r3, #5
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	797b      	ldrb	r3, [r7, #5]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <dcd_edpt_disable+0xc0>
 80079e4:	4946      	ldr	r1, [pc, #280]	; (8007b00 <dcd_edpt_disable+0x1d8>)
 80079e6:	e001      	b.n	80079ec <dcd_edpt_disable+0xc4>
 80079e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	015b      	lsls	r3, r3, #5
 80079f0:	6938      	ldr	r0, [r7, #16]
 80079f2:	4403      	add	r3, r0
 80079f4:	430a      	orrs	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80079f8:	bf00      	nop
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	015b      	lsls	r3, r3, #5
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4413      	add	r3, r2
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f6      	beq.n	80079fa <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	015b      	lsls	r3, r3, #5
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4413      	add	r3, r2
 8007a14:	2202      	movs	r2, #2
 8007a16:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	7bfa      	ldrb	r2, [r7, #15]
 8007a1e:	0192      	lsls	r2, r2, #6
 8007a20:	431a      	orrs	r2, r3
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f043 0220 	orr.w	r2, r3, #32
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8007a32:	bf00      	nop
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f9      	bne.n	8007a34 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8007a40:	e051      	b.n	8007ae6 <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d006      	beq.n	8007a56 <dcd_edpt_disable+0x12e>
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	015b      	lsls	r3, r3, #5
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4413      	add	r3, r2
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db12      	blt.n	8007a7c <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	015b      	lsls	r3, r3, #5
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	797b      	ldrb	r3, [r7, #5]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <dcd_edpt_disable+0x144>
 8007a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a6a:	e000      	b.n	8007a6e <dcd_edpt_disable+0x146>
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	6978      	ldr	r0, [r7, #20]
 8007a74:	4403      	add	r3, r0
 8007a76:	430a      	orrs	r2, r1
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	e034      	b.n	8007ae6 <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8007a88:	bf00      	nop
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0f9      	beq.n	8007a8a <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	015b      	lsls	r3, r3, #5
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	797b      	ldrb	r3, [r7, #5]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <dcd_edpt_disable+0x182>
 8007aa6:	4916      	ldr	r1, [pc, #88]	; (8007b00 <dcd_edpt_disable+0x1d8>)
 8007aa8:	e001      	b.n	8007aae <dcd_edpt_disable+0x186>
 8007aaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	015b      	lsls	r3, r3, #5
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	4403      	add	r3, r0
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 8007aba:	bf00      	nop
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	015b      	lsls	r3, r3, #5
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f6      	beq.n	8007abc <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	015b      	lsls	r3, r3, #5
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	605a      	str	r2, [r3, #4]
}
 8007ae6:	bf00      	nop
 8007ae8:	3724      	adds	r7, #36	; 0x24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	50000800 	.word	0x50000800
 8007af8:	50000b00 	.word	0x50000b00
 8007afc:	50000900 	.word	0x50000900
 8007b00:	40200000 	.word	0x40200000

08007b04 <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	71fb      	strb	r3, [r7, #7]
 8007b10:	4613      	mov	r3, r2
 8007b12:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b18:	61fb      	str	r3, [r7, #28]
 8007b1a:	79bb      	ldrb	r3, [r7, #6]
 8007b1c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007b26:	76fb      	strb	r3, [r7, #27]
 8007b28:	79bb      	ldrb	r3, [r7, #6]
 8007b2a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	09db      	lsrs	r3, r3, #7
 8007b30:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007b32:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 8007b34:	79b9      	ldrb	r1, [r7, #6]
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff fef4 	bl	8007928 <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8007b40:	7efa      	ldrb	r2, [r7, #27]
 8007b42:	7ebb      	ldrb	r3, [r7, #26]
 8007b44:	491e      	ldr	r1, [pc, #120]	; (8007bc0 <dcd_edpt_close+0xbc>)
 8007b46:	0052      	lsls	r2, r2, #1
 8007b48:	4413      	add	r3, r2
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	440b      	add	r3, r1
 8007b4e:	330a      	adds	r3, #10
 8007b50:	2200      	movs	r2, #0
 8007b52:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 8007b54:	7ebb      	ldrb	r3, [r7, #26]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d129      	bne.n	8007bae <dcd_edpt_close+0xaa>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 8007b5a:	7efb      	ldrb	r3, [r7, #27]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	3340      	adds	r3, #64	; 0x40
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 8007b6c:	7efb      	ldrb	r3, [r7, #27]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	3340      	adds	r3, #64	; 0x40
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8007b7c:	8afa      	ldrh	r2, [r7, #22]
 8007b7e:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <dcd_edpt_close+0xc0>)
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d009      	beq.n	8007b9e <dcd_edpt_close+0x9a>
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <dcd_edpt_close+0xc4>)
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <dcd_edpt_close+0xb2>
 8007b9a:	be00      	bkpt	0x0000
 8007b9c:	e00b      	b.n	8007bb6 <dcd_edpt_close+0xb2>
    _allocated_fifo_words_tx -= fifo_size;
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <dcd_edpt_close+0xc0>)
 8007ba0:	881a      	ldrh	r2, [r3, #0]
 8007ba2:	8b3b      	ldrh	r3, [r7, #24]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <dcd_edpt_close+0xc0>)
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e004      	b.n	8007bb8 <dcd_edpt_close+0xb4>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <dcd_edpt_close+0xc8>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e000      	b.n	8007bb8 <dcd_edpt_close+0xb4>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 8007bb6:	bf00      	nop
  }
}
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20001b00 	.word	0x20001b00
 8007bc4:	20001b84 	.word	0x20001b84
 8007bc8:	e000edf0 	.word	0xe000edf0
 8007bcc:	20001b86 	.word	0x20001b86

08007bd0 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	460a      	mov	r2, r1
 8007bda:	71fb      	strb	r3, [r7, #7]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8007be0:	79b9      	ldrb	r1, [r7, #6]
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	2201      	movs	r2, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fe9e 	bl	8007928 <dcd_edpt_disable>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	460a      	mov	r2, r1
 8007bfe:	71fb      	strb	r3, [r7, #7]
 8007c00:	4613      	mov	r3, r2
 8007c02:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007c04:	4b25      	ldr	r3, [pc, #148]	; (8007c9c <dcd_edpt_clear_stall+0xa8>)
 8007c06:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007c08:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <dcd_edpt_clear_stall+0xac>)
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	79bb      	ldrb	r3, [r7, #6]
 8007c0e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007c10:	7b3b      	ldrb	r3, [r7, #12]
 8007c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c16:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007c18:	73fb      	strb	r3, [r7, #15]
 8007c1a:	79bb      	ldrb	r3, [r7, #6]
 8007c1c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007c1e:	7b7b      	ldrb	r3, [r7, #13]
 8007c20:	09db      	lsrs	r3, r3, #7
 8007c22:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007c24:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d118      	bne.n	8007c5e <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	015b      	lsls	r3, r3, #5
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4413      	add	r3, r2
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	015b      	lsls	r3, r3, #5
 8007c3a:	6939      	ldr	r1, [r7, #16]
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007c42:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	015b      	lsls	r3, r3, #5
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	015b      	lsls	r3, r3, #5
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	440b      	add	r3, r1
 8007c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8007c5c:	e017      	b.n	8007c8e <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	015b      	lsls	r3, r3, #5
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	015b      	lsls	r3, r3, #5
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	440b      	add	r3, r1
 8007c70:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007c74:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	015b      	lsls	r3, r3, #5
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	015b      	lsls	r3, r3, #5
 8007c84:	6979      	ldr	r1, [r7, #20]
 8007c86:	440b      	add	r3, r1
 8007c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	50000b00 	.word	0x50000b00
 8007ca0:	50000900 	.word	0x50000900

08007ca4 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b089      	sub	sp, #36	; 0x24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	71fb      	strb	r3, [r7, #7]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8007cb4:	4b28      	ldr	r3, [pc, #160]	; (8007d58 <read_fifo_packet+0xb4>)
 8007cb6:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8007cb8:	88bb      	ldrh	r3, [r7, #4]
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	83fb      	strh	r3, [r7, #30]
 8007cc2:	e01e      	b.n	8007d02 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	0a1a      	lsrs	r2, r3, #8
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	0c1a      	lsrs	r2, r3, #16
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	0e1a      	lsrs	r2, r3, #24
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	3303      	adds	r3, #3
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
    dst += 4;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 8007cfc:	8bfb      	ldrh	r3, [r7, #30]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	83fb      	strh	r3, [r7, #30]
 8007d02:	8bfa      	ldrh	r2, [r7, #30]
 8007d04:	8afb      	ldrh	r3, [r7, #22]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3dc      	bcc.n	8007cc4 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 8007d0a:	88bb      	ldrh	r3, [r7, #4]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 8007d14:	7d7b      	ldrb	r3, [r7, #21]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 8007d28:	7d7b      	ldrb	r3, [r7, #21]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d905      	bls.n	8007d3a <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	0a1a      	lsrs	r2, r3, #8
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 8007d3a:	7d7b      	ldrb	r3, [r7, #21]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d905      	bls.n	8007d4c <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	0c1a      	lsrs	r2, r3, #16
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	3302      	adds	r3, #2
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3724      	adds	r7, #36	; 0x24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	50001000 	.word	0x50001000

08007d5c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	603a      	str	r2, [r7, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	71bb      	strb	r3, [r7, #6]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8007d72:	79bb      	ldrb	r3, [r7, #6]
 8007d74:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8007d78:	3301      	adds	r3, #1
 8007d7a:	031b      	lsls	r3, r3, #12
 8007d7c:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8007d7e:	88bb      	ldrh	r3, [r7, #4]
 8007d80:	089b      	lsrs	r3, r3, #2
 8007d82:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8007d84:	2300      	movs	r3, #0
 8007d86:	82fb      	strh	r3, [r7, #22]
 8007d88:	e019      	b.n	8007dbe <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	3303      	adds	r3, #3
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	061a      	lsls	r2, r3, #24
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	3302      	adds	r3, #2
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	4313      	orrs	r3, r2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]
    src += 4;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	3304      	adds	r3, #4
 8007db6:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8007db8:	8afb      	ldrh	r3, [r7, #22]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	82fb      	strh	r3, [r7, #22]
 8007dbe:	8afa      	ldrh	r2, [r7, #22]
 8007dc0:	897b      	ldrh	r3, [r7, #10]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d3e1      	bcc.n	8007d8a <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 8007dd0:	7a7b      	ldrb	r3, [r7, #9]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 8007de6:	7a7b      	ldrb	r3, [r7, #9]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d907      	bls.n	8007dfc <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	461a      	mov	r2, r3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 8007dfc:	7a7b      	ldrb	r3, [r7, #9]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d907      	bls.n	8007e12 <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	3302      	adds	r3, #2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	041b      	lsls	r3, r3, #16
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	601a      	str	r2, [r3, #0]
  }
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	6039      	str	r1, [r7, #0]
 8007e2e:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e34:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8007e36:	4b49      	ldr	r3, [pc, #292]	; (8007f5c <handle_rxflvl_ints+0x138>)
 8007e38:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	0c5b      	lsrs	r3, r3, #17
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e60:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8007e62:	7cfb      	ldrb	r3, [r7, #19]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d864      	bhi.n	8007f34 <handle_rxflvl_ints+0x110>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <handle_rxflvl_ints+0x4c>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007f49 	.word	0x08007f49
 8007e74:	08007e89 	.word	0x08007e89
 8007e78:	08007f49 	.word	0x08007f49
 8007e7c:	08007f09 	.word	0x08007f09
 8007e80:	08007f35 	.word	0x08007f35
 8007e84:	08007f23 	.word	0x08007f23
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007e88:	7cbb      	ldrb	r3, [r7, #18]
 8007e8a:	015b      	lsls	r3, r3, #5
 8007e8c:	4a34      	ldr	r2, [pc, #208]	; (8007f60 <handle_rxflvl_ints+0x13c>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	8a3a      	ldrh	r2, [r7, #16]
 8007ea0:	69b9      	ldr	r1, [r7, #24]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fd f94a 	bl	800513c <tu_fifo_write_n_const_addr_full_words>
 8007ea8:	e00c      	b.n	8007ec4 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	8a3a      	ldrh	r2, [r7, #16]
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fef6 	bl	8007ca4 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	8a3b      	ldrh	r3, [r7, #16]
 8007ebe:	441a      	add	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	895b      	ldrh	r3, [r3, #10]
 8007ec8:	8a3a      	ldrh	r2, [r7, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d23e      	bcs.n	8007f4c <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 8007ece:	7cbb      	ldrb	r3, [r7, #18]
 8007ed0:	015b      	lsls	r3, r3, #5
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	891a      	ldrh	r2, [r3, #8]
 8007ee0:	b28b      	uxth	r3, r1
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 8007eea:	7cbb      	ldrb	r3, [r7, #18]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d12d      	bne.n	8007f4c <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	891a      	ldrh	r2, [r3, #8]
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <handle_rxflvl_ints+0x140>)
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8007f00:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <handle_rxflvl_ints+0x140>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 8007f06:	e021      	b.n	8007f4c <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8007f08:	7cbb      	ldrb	r3, [r7, #18]
 8007f0a:	015b      	lsls	r3, r3, #5
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	4413      	add	r3, r2
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	7cbb      	ldrb	r3, [r7, #18]
 8007f14:	015b      	lsls	r3, r3, #5
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	440b      	add	r3, r1
 8007f1a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007f1e:	611a      	str	r2, [r3, #16]
      break;
 8007f20:	e017      	b.n	8007f52 <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <handle_rxflvl_ints+0x144>)
 8007f28:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a0e      	ldr	r2, [pc, #56]	; (8007f68 <handle_rxflvl_ints+0x144>)
 8007f30:	6053      	str	r3, [r2, #4]
      break;
 8007f32:	e00e      	b.n	8007f52 <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8007f34:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <handle_rxflvl_ints+0x148>)
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <handle_rxflvl_ints+0x12c>
 8007f44:	be00      	bkpt	0x0000
      break;
 8007f46:	e003      	b.n	8007f50 <handle_rxflvl_ints+0x12c>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <handle_rxflvl_ints+0x12e>
    break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <handle_rxflvl_ints+0x12e>
      break;
 8007f50:	bf00      	nop
  }
}
 8007f52:	bf00      	nop
 8007f54:	3720      	adds	r7, #32
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	50001000 	.word	0x50001000
 8007f60:	20001b00 	.word	0x20001b00
 8007f64:	20001b80 	.word	0x20001b80
 8007f68:	20001af8 	.word	0x20001af8
 8007f6c:	e000edf0 	.word	0xe000edf0

08007f70 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b094      	sub	sp, #80	; 0x50
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	4603      	mov	r3, r0
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f84:	e09e      	b.n	80080c4 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8007f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f8a:	015b      	lsls	r3, r3, #5
 8007f8c:	4a52      	ldr	r2, [pc, #328]	; (80080d8 <handle_epout_ints+0x168>)
 8007f8e:	4413      	add	r3, r2
 8007f90:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007f9a:	3210      	adds	r2, #16
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8088 	beq.w	80080ba <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8007faa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fae:	015b      	lsls	r3, r3, #5
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d028      	beq.n	8008010 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8007fbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fc2:	015b      	lsls	r3, r3, #5
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	2208      	movs	r2, #8
 8007fca:	609a      	str	r2, [r3, #8]
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007fd2:	4b42      	ldr	r3, [pc, #264]	; (80080dc <handle_epout_ints+0x16c>)
 8007fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8007fdc:	f107 0314 	add.w	r3, r7, #20
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	605a      	str	r2, [r3, #4]
 8007fe6:	609a      	str	r2, [r3, #8]
 8007fe8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fec:	753b      	strb	r3, [r7, #20]
 8007fee:	2306      	movs	r3, #6
 8007ff0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8007ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff4:	f107 0318 	add.w	r3, r7, #24
 8007ff8:	6810      	ldr	r0, [r2, #0]
 8007ffa:	6851      	ldr	r1, [r2, #4]
 8007ffc:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8007ffe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd ffdb 	bl	8005fc4 <dcd_event_handler>
}
 800800e:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8008010:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008014:	015b      	lsls	r3, r3, #5
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d04a      	beq.n	80080ba <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8008024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008028:	015b      	lsls	r3, r3, #5
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	2201      	movs	r2, #1
 8008030:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8008032:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10e      	bne.n	8008058 <handle_epout_ints+0xe8>
 800803a:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <handle_epout_ints+0x170>)
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8008042:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <handle_epout_ints+0x170>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800804a:	7bf8      	ldrb	r0, [r7, #15]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2301      	movs	r3, #1
 8008050:	2200      	movs	r2, #0
 8008052:	f7ff f887 	bl	8007164 <edpt_schedule_packets>
 8008056:	e030      	b.n	80080ba <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800805a:	891b      	ldrh	r3, [r3, #8]
 800805c:	461a      	mov	r2, r3
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800806c:	633a      	str	r2, [r7, #48]	; 0x30
 800806e:	2300      	movs	r3, #0
 8008070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008074:	2301      	movs	r3, #1
 8008076:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800807a:	f107 0320 	add.w	r3, r7, #32
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	605a      	str	r2, [r3, #4]
 8008084:	609a      	str	r2, [r3, #8]
 8008086:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800808a:	f887 3020 	strb.w	r3, [r7, #32]
 800808e:	2307      	movs	r3, #7
 8008090:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 8008094:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008098:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 80080a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 80080a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80080ac:	f107 0320 	add.w	r3, r7, #32
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd ff86 	bl	8005fc4 <dcd_event_handler>
}
 80080b8:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 80080ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080be:	3301      	adds	r3, #1
 80080c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80080c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	f67f af5c 	bls.w	8007f86 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 80080ce:	bf00      	nop
 80080d0:	bf00      	nop
 80080d2:	3748      	adds	r7, #72	; 0x48
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20001b00 	.word	0x20001b00
 80080dc:	20001af8 	.word	0x20001af8
 80080e0:	20001b80 	.word	0x20001b80

080080e4 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b092      	sub	sp, #72	; 0x48
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	4603      	mov	r3, r0
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80080f8:	e0ec      	b.n	80082d4 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80080fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080fe:	015b      	lsls	r3, r3, #5
 8008100:	3310      	adds	r3, #16
 8008102:	4a79      	ldr	r2, [pc, #484]	; (80082e8 <handle_epin_ints+0x204>)
 8008104:	4413      	add	r3, r2
 8008106:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008110:	2101      	movs	r1, #1
 8008112:	fa01 f202 	lsl.w	r2, r1, r2
 8008116:	4013      	ands	r3, r2
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80d6 	beq.w	80082ca <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 800811e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008122:	015b      	lsls	r3, r3, #5
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04a      	beq.n	80081c8 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8008132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008136:	015b      	lsls	r3, r3, #5
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	2201      	movs	r2, #1
 800813e:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8008140:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10e      	bne.n	8008166 <handle_epin_ints+0x82>
 8008148:	4b68      	ldr	r3, [pc, #416]	; (80082ec <handle_epin_ints+0x208>)
 800814a:	885b      	ldrh	r3, [r3, #2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8008150:	4b66      	ldr	r3, [pc, #408]	; (80082ec <handle_epin_ints+0x208>)
 8008152:	885b      	ldrh	r3, [r3, #2]
 8008154:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008158:	7bf8      	ldrb	r0, [r7, #15]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2301      	movs	r3, #1
 800815e:	2201      	movs	r2, #1
 8008160:	f7ff f800 	bl	8007164 <edpt_schedule_packets>
 8008164:	e030      	b.n	80081c8 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800816a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800816e:	b2d9      	uxtb	r1, r3
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	891b      	ldrh	r3, [r3, #8]
 8008174:	461a      	mov	r2, r3
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817c:	460b      	mov	r3, r1
 800817e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008182:	627a      	str	r2, [r7, #36]	; 0x24
 8008184:	2300      	movs	r3, #0
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8008190:	f107 0310 	add.w	r3, r7, #16
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081a0:	743b      	strb	r3, [r7, #16]
 80081a2:	2307      	movs	r3, #7
 80081a4:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 80081a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80081aa:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 80081b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081b4:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80081b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081ba:	f107 0310 	add.w	r3, r7, #16
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd feff 	bl	8005fc4 <dcd_event_handler>
}
 80081c6:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 80081c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081cc:	015b      	lsls	r3, r3, #5
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d076      	beq.n	80082ca <handle_epin_ints+0x1e6>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80081e4:	2101      	movs	r1, #1
 80081e6:	fa01 f202 	lsl.w	r2, r1, r2
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d06c      	beq.n	80082ca <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 80081f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081f4:	015b      	lsls	r3, r3, #5
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	0cdb      	lsrs	r3, r3, #19
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008204:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 8008206:	2300      	movs	r3, #0
 8008208:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800820a:	e043      	b.n	8008294 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 800820c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008210:	015b      	lsls	r3, r3, #5
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	895a      	ldrh	r2, [r3, #10]
 800821e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008220:	843b      	strh	r3, [r7, #32]
 8008222:	4613      	mov	r3, r2
 8008224:	83fb      	strh	r3, [r7, #30]
 8008226:	8c3a      	ldrh	r2, [r7, #32]
 8008228:	8bfb      	ldrh	r3, [r7, #30]
 800822a:	4293      	cmp	r3, r2
 800822c:	bf28      	it	cs
 800822e:	4613      	movcs	r3, r2
 8008230:	b29b      	uxth	r3, r3
 8008232:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8008234:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008236:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800823a:	015b      	lsls	r3, r3, #5
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	440b      	add	r3, r1
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	0099      	lsls	r1, r3, #2
 8008244:	4b2a      	ldr	r3, [pc, #168]	; (80082f0 <handle_epin_ints+0x20c>)
 8008246:	400b      	ands	r3, r1
 8008248:	429a      	cmp	r2, r3
 800824a:	d828      	bhi.n	800829e <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8008254:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008258:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 800825c:	3301      	adds	r3, #1
 800825e:	031b      	lsls	r3, r3, #12
 8008260:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800826a:	4618      	mov	r0, r3
 800826c:	f7fc feff 	bl	800506e <tu_fifo_read_n_const_addr_full_words>
 8008270:	e00d      	b.n	800828e <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008278:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800827c:	7bf8      	ldrb	r0, [r7, #15]
 800827e:	f7ff fd6d 	bl	8007d5c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008288:	441a      	add	r2, r3
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 800828e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008290:	3301      	adds	r3, #1
 8008292:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008294:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008298:	429a      	cmp	r2, r3
 800829a:	d3b7      	bcc.n	800820c <handle_epin_ints+0x128>
 800829c:	e000      	b.n	80082a0 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800829e:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 80082a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082a4:	015b      	lsls	r3, r3, #5
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80082bc:	2101      	movs	r1, #1
 80082be:	fa01 f202 	lsl.w	r2, r1, r2
 80082c2:	43d2      	mvns	r2, r2
 80082c4:	401a      	ands	r2, r3
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 80082ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082ce:	3301      	adds	r3, #1
 80082d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80082d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082d8:	2b03      	cmp	r3, #3
 80082da:	f67f af0e 	bls.w	80080fa <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	3740      	adds	r7, #64	; 0x40
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20001b00 	.word	0x20001b00
 80082ec:	20001b80 	.word	0x20001b80
 80082f0:	0003fffc 	.word	0x0003fffc

080082f4 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b09c      	sub	sp, #112	; 0x70
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80082fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008302:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008304:	4b9e      	ldr	r3, [pc, #632]	; (8008580 <dcd_int_handler+0x28c>)
 8008306:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008308:	4b9e      	ldr	r3, [pc, #632]	; (8008584 <dcd_int_handler+0x290>)
 800830a:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800830c:	4b9e      	ldr	r3, [pc, #632]	; (8008588 <dcd_int_handler+0x294>)
 800830e:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8008310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008312:	695a      	ldr	r2, [r3, #20]
 8008314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	4013      	ands	r3, r2
 800831a:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 800831c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8008326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800832c:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fdd7 	bl	8006ee4 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8008336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d031      	beq.n	80083a4 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8008340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008346:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fec2 	bl	80070d4 <get_speed>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8008356:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800835a:	4619      	mov	r1, r3
 800835c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800835e:	f7fe fe37 	bl	8006fd0 <set_turnaround>
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008368:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800836c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	605a      	str	r2, [r3, #4]
 8008380:	609a      	str	r2, [r3, #8]
 8008382:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008386:	753b      	strb	r3, [r7, #20]
 8008388:	2301      	movs	r3, #1
 800838a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 800838c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008390:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8008392:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8008396:	f107 0314 	add.w	r3, r7, #20
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd fe11 	bl	8005fc4 <dcd_event_handler>
}
 80083a2:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 80083a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d023      	beq.n	80083f6 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 80083ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083b4:	615a      	str	r2, [r3, #20]
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80083c2:	2301      	movs	r3, #1
 80083c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80083c8:	f107 0320 	add.w	r3, r7, #32
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	609a      	str	r2, [r3, #8]
 80083d4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80083d8:	f887 3020 	strb.w	r3, [r7, #32]
 80083dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80083e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 80083e4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80083e8:	f107 0320 	add.w	r3, r7, #32
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fd fde8 	bl	8005fc4 <dcd_event_handler>
}
 80083f4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 80083f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	da23      	bge.n	8008444 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008402:	615a      	str	r2, [r3, #20]
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800840a:	2305      	movs	r3, #5
 800840c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8008410:	2301      	movs	r3, #1
 8008412:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	609a      	str	r2, [r3, #8]
 8008422:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008426:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800842a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800842e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8008432:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8008436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fdc1 	bl	8005fc4 <dcd_event_handler>
}
 8008442:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8008444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d028      	beq.n	80084a0 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8008454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01d      	beq.n	800849a <dcd_int_handler+0x1a6>
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8008464:	2302      	movs	r3, #2
 8008466:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800846a:	2301      	movs	r3, #1
 800846c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008470:	f107 0308 	add.w	r3, r7, #8
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	605a      	str	r2, [r3, #4]
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008480:	723b      	strb	r3, [r7, #8]
 8008482:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8008486:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8008488:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800848c:	f107 0308 	add.w	r3, r7, #8
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7fd fd96 	bl	8005fc4 <dcd_event_handler>
}
 8008498:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800849e:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 80084a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d028      	beq.n	80084fc <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 80084aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ac:	2208      	movs	r2, #8
 80084ae:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f023 0208 	bic.w	r2, r3, #8
 80084b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ba:	619a      	str	r2, [r3, #24]
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084c2:	2303      	movs	r3, #3
 80084c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80084ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	605a      	str	r2, [r3, #4]
 80084d8:	609a      	str	r2, [r3, #8]
 80084da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80084e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 80084ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80084ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fd fd65 	bl	8005fc4 <dcd_event_handler>
}
 80084fa:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 80084fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b00      	cmp	r3, #0
 8008504:	d021      	beq.n	800854a <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8008506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f023 0210 	bic.w	r2, r3, #16
 800850e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008510:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fc84 	bl	8007e24 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 800851c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1f4      	bne.n	8008512 <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8008528:	4b18      	ldr	r3, [pc, #96]	; (800858c <dcd_int_handler+0x298>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d006      	beq.n	800853e <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fca4 	bl	8006e80 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8008538:	4b14      	ldr	r3, [pc, #80]	; (800858c <dcd_int_handler+0x298>)
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800853e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f043 0210 	orr.w	r2, r3, #16
 8008546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008548:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 800854a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008558:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fd08 	bl	8007f70 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8008560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800856e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fdb7 	bl	80080e4 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8008576:	bf00      	nop
 8008578:	3770      	adds	r7, #112	; 0x70
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	50000800 	.word	0x50000800
 8008584:	50000b00 	.word	0x50000b00
 8008588:	50000900 	.word	0x50000900
 800858c:	20001b86 	.word	0x20001b86

08008590 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8008596:	2000      	movs	r0, #0
 8008598:	f7fc fe72 	bl	8005280 <tud_init>
 800859c:	4603      	mov	r3, r0
 800859e:	f083 0301 	eor.w	r3, r3, #1
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <tusb_init+0x2e>
 80085a8:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <tusb_init+0x38>)
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d000      	beq.n	80085ba <tusb_init+0x2a>
 80085b8:	be00      	bkpt	0x0000
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 80085be:	2301      	movs	r3, #1
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000edf0 	.word	0xe000edf0

080085cc <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <tu_edpt_claim+0x26>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <tu_edpt_claim+0x2a>
 80085f2:	2300      	movs	r3, #0
 80085f4:	e01e      	b.n	8008634 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d108      	bne.n	8008616 <tu_edpt_claim+0x4a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <tu_edpt_claim+0x4a>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <tu_edpt_claim+0x4c>
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
  if (available)
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7813      	ldrb	r3, [r2, #0]
 800862c:	f043 0304 	orr.w	r3, r3, #4
 8008630:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d108      	bne.n	800866a <tu_edpt_release+0x2a>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <tu_edpt_release+0x2a>
 8008666:	2301      	movs	r3, #1
 8008668:	e000      	b.n	800866c <tu_edpt_release+0x2c>
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7813      	ldrb	r3, [r2, #0]
 8008680:	f36f 0382 	bfc	r3, #2, #1
 8008684:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8008694:	b480      	push	{r7}
 8008696:	b08b      	sub	sp, #44	; 0x2c
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	889b      	ldrh	r3, [r3, #4]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ae:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80086b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	78db      	ldrb	r3, [r3, #3]
 80086b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d03e      	beq.n	800873e <tu_edpt_validate+0xaa>
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	dc53      	bgt.n	800876c <tu_edpt_validate+0xd8>
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d002      	beq.n	80086ce <tu_edpt_validate+0x3a>
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d018      	beq.n	80086fe <tu_edpt_validate+0x6a>
 80086cc:	e04e      	b.n	800876c <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d102      	bne.n	80086da <tu_edpt_validate+0x46>
 80086d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d8:	e001      	b.n	80086de <tu_edpt_validate+0x4a>
 80086da:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80086de:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80086e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086e2:	8afb      	ldrh	r3, [r7, #22]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d943      	bls.n	8008770 <tu_edpt_validate+0xdc>
 80086e8:	4b27      	ldr	r3, [pc, #156]	; (8008788 <tu_edpt_validate+0xf4>)
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d000      	beq.n	80086fa <tu_edpt_validate+0x66>
 80086f8:	be00      	bkpt	0x0000
 80086fa:	2300      	movs	r3, #0
 80086fc:	e03e      	b.n	800877c <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d10e      	bne.n	8008722 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870a:	d033      	beq.n	8008774 <tu_edpt_validate+0xe0>
 800870c:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <tu_edpt_validate+0xf4>)
 800870e:	61bb      	str	r3, [r7, #24]
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d000      	beq.n	800871e <tu_edpt_validate+0x8a>
 800871c:	be00      	bkpt	0x0000
 800871e:	2300      	movs	r3, #0
 8008720:	e02c      	b.n	800877c <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8008722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d925      	bls.n	8008774 <tu_edpt_validate+0xe0>
 8008728:	4b17      	ldr	r3, [pc, #92]	; (8008788 <tu_edpt_validate+0xf4>)
 800872a:	61fb      	str	r3, [r7, #28]
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d000      	beq.n	800873a <tu_edpt_validate+0xa6>
 8008738:	be00      	bkpt	0x0000
 800873a:	2300      	movs	r3, #0
 800873c:	e01e      	b.n	800877c <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d102      	bne.n	800874a <tu_edpt_validate+0xb6>
 8008744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008748:	e000      	b.n	800874c <tu_edpt_validate+0xb8>
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800874e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008752:	429a      	cmp	r2, r3
 8008754:	d910      	bls.n	8008778 <tu_edpt_validate+0xe4>
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <tu_edpt_validate+0xf4>)
 8008758:	623b      	str	r3, [r7, #32]
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d000      	beq.n	8008768 <tu_edpt_validate+0xd4>
 8008766:	be00      	bkpt	0x0000
 8008768:	2300      	movs	r3, #0
 800876a:	e007      	b.n	800877c <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 800876c:	2300      	movs	r3, #0
 800876e:	e005      	b.n	800877c <tu_edpt_validate+0xe8>
    break;
 8008770:	bf00      	nop
 8008772:	e002      	b.n	800877a <tu_edpt_validate+0xe6>
    break;
 8008774:	bf00      	nop
 8008776:	e000      	b.n	800877a <tu_edpt_validate+0xe6>
    break;
 8008778:	bf00      	nop
  }

  return true;
 800877a:	2301      	movs	r3, #1
}
 800877c:	4618      	mov	r0, r3
 800877e:	372c      	adds	r7, #44	; 0x2c
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	e000edf0 	.word	0xe000edf0

0800878c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 800878c:	b480      	push	{r7}
 800878e:	b08d      	sub	sp, #52	; 0x34
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4611      	mov	r1, r2
 8008798:	461a      	mov	r2, r3
 800879a:	460b      	mov	r3, r1
 800879c:	80fb      	strh	r3, [r7, #6]
 800879e:	4613      	mov	r3, r2
 80087a0:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087aa:	4413      	add	r3, r2
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80087ae:	e027      	b.n	8008800 <tu_edpt_bind_driver+0x74>
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	3301      	adds	r3, #1
 80087b8:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d116      	bne.n	80087ec <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	789b      	ldrb	r3, [r3, #2]
 80087c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ca:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80087cc:	7fbb      	ldrb	r3, [r7, #30]
 80087ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d2:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80087de:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80087e0:	7ffa      	ldrb	r2, [r7, #31]
 80087e2:	09d2      	lsrs	r2, r2, #7
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	4611      	mov	r1, r2
 80087e8:	797a      	ldrb	r2, [r7, #5]
 80087ea:	545a      	strb	r2, [r3, r1]
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8008800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	429a      	cmp	r2, r3
 8008806:	d3d3      	bcc.n	80087b0 <tu_edpt_bind_driver+0x24>
  }
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	3734      	adds	r7, #52	; 0x34
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
	...

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4d0d      	ldr	r5, [pc, #52]	; (8008850 <__libc_init_array+0x38>)
 800881c:	4c0d      	ldr	r4, [pc, #52]	; (8008854 <__libc_init_array+0x3c>)
 800881e:	1b64      	subs	r4, r4, r5
 8008820:	10a4      	asrs	r4, r4, #2
 8008822:	2600      	movs	r6, #0
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	4d0b      	ldr	r5, [pc, #44]	; (8008858 <__libc_init_array+0x40>)
 800882a:	4c0c      	ldr	r4, [pc, #48]	; (800885c <__libc_init_array+0x44>)
 800882c:	f000 f82e 	bl	800888c <_init>
 8008830:	1b64      	subs	r4, r4, r5
 8008832:	10a4      	asrs	r4, r4, #2
 8008834:	2600      	movs	r6, #0
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	08008b04 	.word	0x08008b04
 8008854:	08008b04 	.word	0x08008b04
 8008858:	08008b04 	.word	0x08008b04
 800885c:	08008b08 	.word	0x08008b08

08008860 <memcpy>:
 8008860:	440a      	add	r2, r1
 8008862:	4291      	cmp	r1, r2
 8008864:	f100 33ff 	add.w	r3, r0, #4294967295
 8008868:	d100      	bne.n	800886c <memcpy+0xc>
 800886a:	4770      	bx	lr
 800886c:	b510      	push	{r4, lr}
 800886e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008876:	4291      	cmp	r1, r2
 8008878:	d1f9      	bne.n	800886e <memcpy+0xe>
 800887a:	bd10      	pop	{r4, pc}

0800887c <memset>:
 800887c:	4402      	add	r2, r0
 800887e:	4603      	mov	r3, r0
 8008880:	4293      	cmp	r3, r2
 8008882:	d100      	bne.n	8008886 <memset+0xa>
 8008884:	4770      	bx	lr
 8008886:	f803 1b01 	strb.w	r1, [r3], #1
 800888a:	e7f9      	b.n	8008880 <memset+0x4>

0800888c <_init>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr

08008898 <_fini>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr
