
TinyUSB_UAC_CDC_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f94  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800a130  0800a130  0001a130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a560  0800a560  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a568  0800a568  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a568  0800a568  0001a568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a56c  0800a56c  0001a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800a570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  20000044  0800a5b4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800a5b4  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cf7  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335b  00000000  00000000  00033d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00037eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dbe  00000000  00000000  00038c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001172a  00000000  00000000  000519ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099256  00000000  00000000  00063118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc36e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000fc3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000044 	.word	0x20000044
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a114 	.word	0x0800a114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000048 	.word	0x20000048
 80001d4:	0800a114 	.word	0x0800a114

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b974 	b.w	8000de4 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	468e      	mov	lr, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d14d      	bne.n	8000bbe <__udivmoddi4+0xaa>
 8000b22:	428a      	cmp	r2, r1
 8000b24:	4694      	mov	ip, r2
 8000b26:	d969      	bls.n	8000bfc <__udivmoddi4+0xe8>
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	b152      	cbz	r2, 8000b44 <__udivmoddi4+0x30>
 8000b2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b32:	f1c2 0120 	rsb	r1, r2, #32
 8000b36:	fa20 f101 	lsr.w	r1, r0, r1
 8000b3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b42:	4094      	lsls	r4, r2
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	0c21      	lsrs	r1, r4, #16
 8000b4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b4e:	fa1f f78c 	uxth.w	r7, ip
 8000b52:	fb08 e316 	mls	r3, r8, r6, lr
 8000b56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b5a:	fb06 f107 	mul.w	r1, r6, r7
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x64>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6a:	f080 811f 	bcs.w	8000dac <__udivmoddi4+0x298>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 811c 	bls.w	8000dac <__udivmoddi4+0x298>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b80:	fb08 3310 	mls	r3, r8, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 f707 	mul.w	r7, r0, r7
 8000b8c:	42a7      	cmp	r7, r4
 8000b8e:	d90a      	bls.n	8000ba6 <__udivmoddi4+0x92>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b98:	f080 810a 	bcs.w	8000db0 <__udivmoddi4+0x29c>
 8000b9c:	42a7      	cmp	r7, r4
 8000b9e:	f240 8107 	bls.w	8000db0 <__udivmoddi4+0x29c>
 8000ba2:	4464      	add	r4, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000baa:	1be4      	subs	r4, r4, r7
 8000bac:	2600      	movs	r6, #0
 8000bae:	b11d      	cbz	r5, 8000bb8 <__udivmoddi4+0xa4>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xc2>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	f000 80ef 	beq.w	8000da6 <__udivmoddi4+0x292>
 8000bc8:	2600      	movs	r6, #0
 8000bca:	e9c5 0100 	strd	r0, r1, [r5]
 8000bce:	4630      	mov	r0, r6
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f683 	clz	r6, r3
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d14a      	bne.n	8000c74 <__udivmoddi4+0x160>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd4>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80f9 	bhi.w	8000dda <__udivmoddi4+0x2c6>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa4>
 8000bf6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa4>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xec>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 8092 	bne.w	8000d2e <__udivmoddi4+0x21a>
 8000c0a:	eba1 010c 	sub.w	r1, r1, ip
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2601      	movs	r6, #1
 8000c18:	0c20      	lsrs	r0, r4, #16
 8000c1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c26:	fb0e f003 	mul.w	r0, lr, r3
 8000c2a:	4288      	cmp	r0, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x12c>
 8000c2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x12a>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2c0>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	1a09      	subs	r1, r1, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c48:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x156>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x154>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2ca>
 8000c68:	4608      	mov	r0, r1
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c72:	e79c      	b.n	8000bae <__udivmoddi4+0x9a>
 8000c74:	f1c6 0720 	rsb	r7, r6, #32
 8000c78:	40b3      	lsls	r3, r6
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa20 f407 	lsr.w	r4, r0, r7
 8000c86:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8a:	431c      	orrs	r4, r3
 8000c8c:	40f9      	lsrs	r1, r7
 8000c8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c92:	fa00 f306 	lsl.w	r3, r0, r6
 8000c96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c9a:	0c20      	lsrs	r0, r4, #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ca4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cac:	4288      	cmp	r0, r1
 8000cae:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b8>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2bc>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1a09      	subs	r1, r1, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce0:	458e      	cmp	lr, r1
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1e2>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cee:	458e      	cmp	lr, r1
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2b4>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4461      	add	r1, ip
 8000cf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000cfe:	eba1 010e 	sub.w	r1, r1, lr
 8000d02:	42a1      	cmp	r1, r4
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46a6      	mov	lr, r4
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x2a4>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x2a0>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x212>
 8000d0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d12:	eb61 010e 	sbc.w	r1, r1, lr
 8000d16:	fa01 f707 	lsl.w	r7, r1, r7
 8000d1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d1e:	40f1      	lsrs	r1, r6
 8000d20:	431f      	orrs	r7, r3
 8000d22:	e9c5 7100 	strd	r7, r1, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	40d8      	lsrs	r0, r3
 8000d34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d38:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	4301      	orrs	r1, r0
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d50:	0c0b      	lsrs	r3, r1, #16
 8000d52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d56:	fb00 f60e 	mul.w	r6, r0, lr
 8000d5a:	429e      	cmp	r6, r3
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x260>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b8>
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b8>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	1b9b      	subs	r3, r3, r6
 8000d76:	b289      	uxth	r1, r1
 8000d78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb06 f30e 	mul.w	r3, r6, lr
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x28a>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2b0>
 8000d9a:	3e02      	subs	r6, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0x104>
 8000da6:	462e      	mov	r6, r5
 8000da8:	4628      	mov	r0, r5
 8000daa:	e705      	b.n	8000bb8 <__udivmoddi4+0xa4>
 8000dac:	4606      	mov	r6, r0
 8000dae:	e6e3      	b.n	8000b78 <__udivmoddi4+0x64>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6f8      	b.n	8000ba6 <__udivmoddi4+0x92>
 8000db4:	454b      	cmp	r3, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f8>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f8>
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x28a>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1e2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x260>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b8>
 8000dd4:	3b02      	subs	r3, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x12c>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e709      	b.n	8000bf2 <__udivmoddi4+0xde>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x156>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f003 fb59 	bl	80044a4 <tud_cdc_n_connected>
 8000df2:	4603      	mov	r3, r0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f003 fb91 	bl	8004524 <tud_cdc_n_available>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	2000      	movs	r0, #0
 8000e18:	f003 fb9c 	bl	8004554 <tud_cdc_n_read>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2000      	movs	r0, #0
 8000e36:	f003 fbb1 	bl	800459c <tud_cdc_n_write>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f003 fbd3 	bl	80045f4 <tud_cdc_n_write_flush>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <tud_cdc_write_available>:

static inline uint32_t tud_cdc_write_available(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_available(0);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f003 fc47 	bl	80046ec <tud_cdc_n_write_available>
 8000e5e:	4603      	mov	r3, r0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <tud_audio_read>:
{
  return tud_audio_n_available(0);
}

static inline uint16_t tud_audio_read(void* buffer, uint16_t bufsize)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_read(0, buffer, bufsize);
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	461a      	mov	r2, r3
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	2000      	movs	r0, #0
 8000e78:	f002 f99c 	bl	80031b4 <tud_audio_n_read>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <tud_audio_write>:
// TX API

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

static inline uint16_t tud_audio_write(const void * data, uint16_t len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
  return tud_audio_n_write(0, data, len);
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	461a      	mov	r2, r3
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f002 fa2d 	bl	80032f8 <tud_audio_n_write>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <tud_mount_cb>:
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <tud_mount_cb+0x18>)
 8000eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_NOT_MOUNTED;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <tud_umount_cb+0x14>)
 8000eca:	22fa      	movs	r2, #250	; 0xfa
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000004 	.word	0x20000004

08000edc <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	(void)remote_wakeup_en;
	blink_interval_ms = BLINK_SUSPENDED;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <tud_suspend_cb+0x20>)
 8000ee8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000004 	.word	0x20000004

08000f00 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	blink_interval_ms = BLINK_MOUNTED;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <tud_resume_cb+0x18>)
 8000f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000004 	.word	0x20000004

08000f1c <tud_audio_clock_get_request>:

// Helper for clock get requests
static bool tud_audio_clock_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00a      	beq.n	8000f46 <tud_audio_clock_get_request+0x2a>
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <tud_audio_clock_get_request+0x128>)
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d000      	beq.n	8000f42 <tud_audio_clock_get_request+0x26>
 8000f40:	be00      	bkpt	0x0000
 8000f42:	2300      	movs	r3, #0
 8000f44:	e07a      	b.n	800103c <tud_audio_clock_get_request+0x120>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	78db      	ldrb	r3, [r3, #3]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d161      	bne.n	8001012 <tud_audio_clock_get_request+0xf6>
	{
		if (request->bRequest == AUDIO_CS_REQ_CUR)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10b      	bne.n	8000f6e <tud_audio_clock_get_request+0x52>
		{
			TU_LOG1("Clock get current freq %lu\r\n", current_sample_rate);

			audio_control_cur_4_t curf = { (int32_t) tu_htole32(current_sample_rate) };
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <tud_audio_clock_get_request+0x12c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &curf, sizeof(curf));
 8000f5c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f60:	79f8      	ldrb	r0, [r7, #7]
 8000f62:	2304      	movs	r3, #4
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	f002 ff87 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	e066      	b.n	800103c <tud_audio_clock_get_request+0x120>
		}
		else if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d161      	bne.n	800103a <tud_audio_clock_get_request+0x11e>
		{
			audio_control_range_4_n_t(N_SAMPLE_RATES) rangef =
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	2232      	movs	r2, #50	; 0x32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f008 f874 	bl	800906c <memset>
 8000f84:	2304      	movs	r3, #4
 8000f86:	81bb      	strh	r3, [r7, #12]
			{
					.wNumSubRanges = tu_htole16(N_SAMPLE_RATES)
			};
			TU_LOG1("Clock get %d freq ranges\r\n", N_SAMPLE_RATES);
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000f8e:	e033      	b.n	8000ff8 <tud_audio_clock_get_request+0xdc>
			{
				rangef.subrange[i].bMin = (int32_t) sample_rates[i];
 8000f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <tud_audio_clock_get_request+0x130>)
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	3350      	adds	r3, #80	; 0x50
 8000faa:	443b      	add	r3, r7
 8000fac:	3b44      	subs	r3, #68	; 0x44
 8000fae:	f8c3 1002 	str.w	r1, [r3, #2]
				rangef.subrange[i].bMax = (int32_t) sample_rates[i];
 8000fb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fb6:	4a25      	ldr	r2, [pc, #148]	; (800104c <tud_audio_clock_get_request+0x130>)
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	3350      	adds	r3, #80	; 0x50
 8000fcc:	443b      	add	r3, r7
 8000fce:	3b44      	subs	r3, #68	; 0x44
 8000fd0:	f8c3 1006 	str.w	r1, [r3, #6]
				rangef.subrange[i].bRes = 0;
 8000fd4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	3350      	adds	r3, #80	; 0x50
 8000fe2:	443b      	add	r3, r7
 8000fe4:	3b3c      	subs	r3, #60	; 0x3c
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	805a      	strh	r2, [r3, #2]
 8000fea:	2200      	movs	r2, #0
 8000fec:	809a      	strh	r2, [r3, #4]
			for(uint8_t i = 0; i < N_SAMPLE_RATES; i++)
 8000fee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000ff8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d9c7      	bls.n	8000f90 <tud_audio_clock_get_request+0x74>
				TU_LOG1("Range %d (%d, %d, %d)\r\n", i, (int)rangef.subrange[i].bMin, (int)rangef.subrange[i].bMax, (int)rangef.subrange[i].bRes);
			}

			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &rangef, sizeof(rangef));
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	79f8      	ldrb	r0, [r7, #7]
 8001006:	2332      	movs	r3, #50	; 0x32
 8001008:	6839      	ldr	r1, [r7, #0]
 800100a:	f002 ff35 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 800100e:	4603      	mov	r3, r0
 8001010:	e014      	b.n	800103c <tud_audio_clock_get_request+0x120>
		}
	}
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	78db      	ldrb	r3, [r3, #3]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d10f      	bne.n	800103a <tud_audio_clock_get_request+0x11e>
			request->bRequest == AUDIO_CS_REQ_CUR)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	785b      	ldrb	r3, [r3, #1]
	else if (request->bControlSelector == AUDIO_CS_CTRL_CLK_VALID &&
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10b      	bne.n	800103a <tud_audio_clock_get_request+0x11e>
	{
		audio_control_cur_1_t cur_valid = { .bCur = 1 };
 8001022:	2301      	movs	r3, #1
 8001024:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		TU_LOG1("Clock get is valid %u\r\n", cur_valid.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_valid, sizeof(cur_valid));
 8001028:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800102c:	79f8      	ldrb	r0, [r7, #7]
 800102e:	2301      	movs	r3, #1
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	f002 ff21 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 8001036:	4603      	mov	r3, r0
 8001038:	e000      	b.n	800103c <tud_audio_clock_get_request+0x120>
	}
	TU_LOG1("Clock get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);
	return false;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	e000edf0 	.word	0xe000edf0
 8001048:	20000000 	.word	0x20000000
 800104c:	0800a198 	.word	0x0800a198

08001050 <tud_audio_clock_set_request>:

// Helper for clock set requests
static bool tud_audio_clock_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_CLOCK);
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	795b      	ldrb	r3, [r3, #5]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d00a      	beq.n	800107c <tud_audio_clock_set_request+0x2c>
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <tud_audio_clock_set_request+0x6c>)
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d000      	beq.n	8001078 <tud_audio_clock_set_request+0x28>
 8001076:	be00      	bkpt	0x0000
 8001078:	2300      	movs	r3, #0
 800107a:	e018      	b.n	80010ae <tud_audio_clock_set_request+0x5e>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d001      	beq.n	8001088 <tud_audio_clock_set_request+0x38>
 8001084:	2300      	movs	r3, #0
 8001086:	e012      	b.n	80010ae <tud_audio_clock_set_request+0x5e>

	if (request->bControlSelector == AUDIO_CS_CTRL_SAM_FREQ)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	78db      	ldrb	r3, [r3, #3]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10d      	bne.n	80010ac <tud_audio_clock_set_request+0x5c>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_4_t));
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	88db      	ldrh	r3, [r3, #6]
 8001094:	b29b      	uxth	r3, r3
 8001096:	2b04      	cmp	r3, #4
 8001098:	d001      	beq.n	800109e <tud_audio_clock_set_request+0x4e>
 800109a:	2300      	movs	r3, #0
 800109c:	e007      	b.n	80010ae <tud_audio_clock_set_request+0x5e>

		current_sample_rate = (uint32_t) ((audio_control_cur_4_t const *)buf)->bCur;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <tud_audio_clock_set_request+0x70>)
 80010a6:	601a      	str	r2, [r3, #0]

		TU_LOG1("Clock set current freq: %ld\r\n", current_sample_rate);

		return true;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <tud_audio_clock_set_request+0x5e>
	}
	else
	{
		TU_LOG1("Clock set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 80010ac:	2300      	movs	r3, #0
	}
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000edf0 	.word	0xe000edf0
 80010c0:	20000000 	.word	0x20000000

080010c4 <tud_audio_feature_unit_get_request>:

// Helper for feature unit get requests
static bool tud_audio_feature_unit_get_request(uint8_t rhport, audio_control_request_t const *request)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	795b      	ldrb	r3, [r3, #5]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d00a      	beq.n	80010ee <tud_audio_feature_unit_get_request+0x2a>
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <tud_audio_feature_unit_get_request+0xbc>)
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <tud_audio_feature_unit_get_request+0x26>
 80010e8:	be00      	bkpt	0x0000
 80010ea:	2300      	movs	r3, #0
 80010ec:	e043      	b.n	8001176 <tud_audio_feature_unit_get_request+0xb2>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE && request->bRequest == AUDIO_CS_REQ_CUR)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	78db      	ldrb	r3, [r3, #3]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d112      	bne.n	800111c <tud_audio_feature_unit_get_request+0x58>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10e      	bne.n	800111c <tud_audio_feature_unit_get_request+0x58>
	{
		audio_control_cur_1_t mute1 = { .bCur = mute[request->bChannelNumber] };
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	789b      	ldrb	r3, [r3, #2]
 8001102:	461a      	mov	r2, r3
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <tud_audio_feature_unit_get_request+0xc0>)
 8001106:	569b      	ldrsb	r3, [r3, r2]
 8001108:	763b      	strb	r3, [r7, #24]
		TU_LOG1("Get channel %u mute %d\r\n", request->bChannelNumber, mute1.bCur);
		return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &mute1, sizeof(mute1));
 800110a:	f107 0218 	add.w	r2, r7, #24
 800110e:	79f8      	ldrb	r0, [r7, #7]
 8001110:	2301      	movs	r3, #1
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	f002 feb0 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 8001118:	4603      	mov	r3, r0
 800111a:	e02c      	b.n	8001176 <tud_audio_feature_unit_get_request+0xb2>
	}
	else if (UAC2_ENTITY_SPK_FEATURE_UNIT && request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	78db      	ldrb	r3, [r3, #3]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d127      	bne.n	8001174 <tud_audio_feature_unit_get_request+0xb0>
	{
		if (request->bRequest == AUDIO_CS_REQ_RANGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d10f      	bne.n	800114c <tud_audio_feature_unit_get_request+0x88>
		{
			audio_control_range_2_n_t(1) range_vol = {
 800112c:	4a16      	ldr	r2, [pc, #88]	; (8001188 <tud_audio_feature_unit_get_request+0xc4>)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001136:	e883 0003 	stmia.w	r3, {r0, r1}
					.wNumSubRanges = tu_htole16(1),
					.subrange[0] = { .bMin = tu_htole16(-VOLUME_CTRL_50_DB), tu_htole16(VOLUME_CTRL_0_DB), tu_htole16(256) }
			};
			TU_LOG1("Get channel %u volume range (%d, %d, %u) dB\r\n", request->bChannelNumber,
					range_vol.subrange[0].bMin / 256, range_vol.subrange[0].bMax / 256, range_vol.subrange[0].bRes / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &range_vol, sizeof(range_vol));
 800113a:	f107 0210 	add.w	r2, r7, #16
 800113e:	79f8      	ldrb	r0, [r7, #7]
 8001140:	2308      	movs	r3, #8
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	f002 fe98 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 8001148:	4603      	mov	r3, r0
 800114a:	e014      	b.n	8001176 <tud_audio_feature_unit_get_request+0xb2>
		}
		else if (request->bRequest == AUDIO_CS_REQ_CUR)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10f      	bne.n	8001174 <tud_audio_feature_unit_get_request+0xb0>
		{
			audio_control_cur_2_t cur_vol = { .bCur = tu_htole16(volume[request->bChannelNumber]) };
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	461a      	mov	r2, r3
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <tud_audio_feature_unit_get_request+0xc8>)
 800115c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001160:	81bb      	strh	r3, [r7, #12]
			TU_LOG1("Get channel %u volume %d dB\r\n", request->bChannelNumber, cur_vol.bCur / 256);
			return tud_audio_buffer_and_schedule_control_xfer(rhport, (tusb_control_request_t const *)request, &cur_vol, sizeof(cur_vol));
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	79f8      	ldrb	r0, [r7, #7]
 8001168:	2302      	movs	r3, #2
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	f002 fe84 	bl	8003e78 <tud_audio_buffer_and_schedule_control_xfer>
 8001170:	4603      	mov	r3, r0
 8001172:	e000      	b.n	8001176 <tud_audio_feature_unit_get_request+0xb2>
		}
	}
	TU_LOG1("Feature unit get request not supported, entity = %u, selector = %u, request = %u\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000edf0 	.word	0xe000edf0
 8001184:	2000056c 	.word	0x2000056c
 8001188:	0800a130 	.word	0x0800a130
 800118c:	20000570 	.word	0x20000570

08001190 <tud_audio_feature_unit_set_request>:

// Helper for feature unit set requests
static bool tud_audio_feature_unit_set_request(uint8_t rhport, audio_control_request_t const *request, uint8_t const *buf)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	73fb      	strb	r3, [r7, #15]
	(void)rhport;

	TU_ASSERT(request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT);
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	795b      	ldrb	r3, [r3, #5]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d00a      	beq.n	80011bc <tud_audio_feature_unit_set_request+0x2c>
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <tud_audio_feature_unit_set_request+0xa0>)
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d000      	beq.n	80011b8 <tud_audio_feature_unit_set_request+0x28>
 80011b6:	be00      	bkpt	0x0000
 80011b8:	2300      	movs	r3, #0
 80011ba:	e032      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>
	TU_VERIFY(request->bRequest == AUDIO_CS_REQ_CUR);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <tud_audio_feature_unit_set_request+0x38>
 80011c4:	2300      	movs	r3, #0
 80011c6:	e02c      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>

	if (request->bControlSelector == AUDIO_FU_CTRL_MUTE)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d110      	bne.n	80011f2 <tud_audio_feature_unit_set_request+0x62>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_1_t));
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	88db      	ldrh	r3, [r3, #6]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d001      	beq.n	80011de <tud_audio_feature_unit_set_request+0x4e>
 80011da:	2300      	movs	r3, #0
 80011dc:	e021      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>

		mute[request->bChannelNumber] = ((audio_control_cur_1_t const *)buf)->bCur;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f993 1000 	ldrsb.w	r1, [r3]
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <tud_audio_feature_unit_set_request+0xa4>)
 80011ec:	5499      	strb	r1, [r3, r2]

		TU_LOG1("Set channel %d Mute: %d\r\n", request->bChannelNumber, mute[request->bChannelNumber]);

		return true;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e017      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>
	}
	else if (request->bControlSelector == AUDIO_FU_CTRL_VOLUME)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d112      	bne.n	8001220 <tud_audio_feature_unit_set_request+0x90>
	{
		TU_VERIFY(request->wLength == sizeof(audio_control_cur_2_t));
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	88db      	ldrh	r3, [r3, #6]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d001      	beq.n	8001208 <tud_audio_feature_unit_set_request+0x78>
 8001204:	2300      	movs	r3, #0
 8001206:	e00c      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>

		volume[request->bChannelNumber] = ((audio_control_cur_2_t const *)buf)->bCur;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	b219      	sxth	r1, r3
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <tud_audio_feature_unit_set_request+0xa8>)
 8001218:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		TU_LOG1("Set channel %d volume: %d dB\r\n", request->bChannelNumber, volume[request->bChannelNumber] / 256);

		return true;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <tud_audio_feature_unit_set_request+0x92>
	}
	else
	{
		TU_LOG1("Feature unit set request not supported, entity = %u, selector = %u, request = %u\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
		return false;
 8001220:	2300      	movs	r3, #0
	}
}
 8001222:	4618      	mov	r0, r3
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000edf0 	.word	0xe000edf0
 8001234:	2000056c 	.word	0x2000056c
 8001238:	20000570 	.word	0x20000570

0800123c <tud_audio_get_req_entity_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	60fb      	str	r3, [r7, #12]

	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d106      	bne.n	8001262 <tud_audio_get_req_entity_cb+0x26>
		return tud_audio_clock_get_request(rhport, request);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe5f 	bl	8000f1c <tud_audio_clock_get_request>
 800125e:	4603      	mov	r3, r0
 8001260:	e00b      	b.n	800127a <tud_audio_get_req_entity_cb+0x3e>
	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	795b      	ldrb	r3, [r3, #5]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d106      	bne.n	8001278 <tud_audio_get_req_entity_cb+0x3c>
		return tud_audio_feature_unit_get_request(rhport, request);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	68f9      	ldr	r1, [r7, #12]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff28 	bl	80010c4 <tud_audio_feature_unit_get_request>
 8001274:	4603      	mov	r3, r0
 8001276:	e000      	b.n	800127a <tud_audio_get_req_entity_cb+0x3e>
	else
	{
		TU_LOG1("Get request not handled, entity = %d, selector = %d, request = %d\r\n",
				request->bEntityID, request->bControlSelector, request->bRequest);
	}
	return false;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const *p_request, uint8_t *buf)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
	audio_control_request_t const *request = (audio_control_request_t const *)p_request;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	617b      	str	r3, [r7, #20]

	if (request->bEntityID == UAC2_ENTITY_SPK_FEATURE_UNIT)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d107      	bne.n	80012ac <tud_audio_set_req_entity_cb+0x2a>
		return tud_audio_feature_unit_set_request(rhport, request, buf);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6979      	ldr	r1, [r7, #20]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff74 	bl	8001190 <tud_audio_feature_unit_set_request>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e00c      	b.n	80012c6 <tud_audio_set_req_entity_cb+0x44>
	if (request->bEntityID == UAC2_ENTITY_CLOCK)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d107      	bne.n	80012c4 <tud_audio_set_req_entity_cb+0x42>
		return tud_audio_clock_set_request(rhport, request, buf);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6979      	ldr	r1, [r7, #20]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fec8 	bl	8001050 <tud_audio_clock_set_request>
 80012c0:	4603      	mov	r3, r0
 80012c2:	e000      	b.n	80012c6 <tud_audio_set_req_entity_cb+0x44>
	TU_LOG1("Set request not handled, entity = %d, selector = %d, request = %d\r\n",
			request->bEntityID, request->bControlSelector, request->bRequest);

	return false;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
	(void)rhport;

	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	817b      	strh	r3, [r7, #10]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	885b      	ldrh	r3, [r3, #2]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	81bb      	strh	r3, [r7, #12]
 80012f2:	89bb      	ldrh	r3, [r7, #12]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	73bb      	strb	r3, [r7, #14]

	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt == 0)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d106      	bne.n	800130c <tud_audio_set_itf_close_EP_cb+0x3c>
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <tud_audio_set_itf_close_EP_cb+0x3c>
		blink_interval_ms = BLINK_MOUNTED;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <tud_audio_set_itf_close_EP_cb+0x4c>)
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	601a      	str	r2, [r3, #0]

	return true;
 800130c:	2301      	movs	r3, #1
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004

08001320 <tud_audio_set_itf_cb>:

bool tud_audio_set_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
	(void)rhport;
	uint8_t const itf = tu_u16_low(tu_le16toh(p_request->wIndex));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	b29b      	uxth	r3, r3
 8001332:	817b      	strh	r3, [r7, #10]
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	73fb      	strb	r3, [r7, #15]
	uint8_t const alt = tu_u16_low(tu_le16toh(p_request->wValue));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	b29b      	uxth	r3, r3
 8001340:	81bb      	strh	r3, [r7, #12]
 8001342:	89bb      	ldrh	r3, [r7, #12]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	73bb      	strb	r3, [r7, #14]

	TU_LOG2("Set interface %d alt %d\r\n", itf, alt);
	if (ITF_NUM_AUDIO_STREAMING_SPK == itf && alt != 0)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <tud_audio_set_itf_cb+0x3a>
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <tud_audio_set_itf_cb+0x3a>
		blink_interval_ms = BLINK_STREAMING;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <tud_audio_set_itf_cb+0x60>)
 8001356:	2219      	movs	r2, #25
 8001358:	601a      	str	r2, [r3, #0]

	// Clear buffer when streaming format is changed
	spk_data_size = 0;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <tud_audio_set_itf_cb+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
	if(alt != 0)
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <tud_audio_set_itf_cb+0x52>
	{
		current_resolution = resolutions_per_format[alt-1];
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <tud_audio_set_itf_cb+0x68>)
 800136c:	5cd2      	ldrb	r2, [r2, r3]
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <tud_audio_set_itf_cb+0x6c>)
 8001370:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000004 	.word	0x20000004
 8001384:	20000e90 	.word	0x20000e90
 8001388:	0800a1a8 	.word	0x0800a1a8
 800138c:	20000e94 	.word	0x20000e94

08001390 <tud_audio_rx_done_pre_read_cb>:

bool tud_audio_rx_done_pre_read_cb(uint8_t rhport, uint16_t n_bytes_received, uint8_t func_id, uint8_t ep_out, uint8_t cur_alt_setting)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	4603      	mov	r3, r0
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	4613      	mov	r3, r2
 80013ac:	70fb      	strb	r3, [r7, #3]
	(void)rhport;
	(void)func_id;
	(void)ep_out;
	(void)cur_alt_setting;

	spk_data_size = tud_audio_read(spk_buf, n_bytes_received);
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <tud_audio_rx_done_pre_read_cb+0x3c>)
 80013b4:	f7ff fd56 	bl	8000e64 <tud_audio_read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <tud_audio_rx_done_pre_read_cb+0x40>)
 80013be:	601a      	str	r2, [r3, #0]
	return true;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000880 	.word	0x20000880
 80013d0:	20000e90 	.word	0x20000e90
 80013d4:	00000000 	.word	0x00000000

080013d8 <tud_audio_tx_done_pre_load_cb>:

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	4603      	mov	r3, r0
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	460b      	mov	r3, r1
 80013f0:	717b      	strb	r3, [r7, #5]
 80013f2:	4613      	mov	r3, r2
 80013f4:	713b      	strb	r3, [r7, #4]
	(void)rhport;
	(void)itf;
	(void)ep_in;
	(void)cur_alt_setting;
	int16_t *dst = (int16_t*)mic_buf;
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <tud_audio_tx_done_pre_load_cb+0xc8>)
 80013f8:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < 48000/1000; i++ )
 80013fa:	2300      	movs	r3, #0
 80013fc:	817b      	strh	r3, [r7, #10]
 80013fe:	e035      	b.n	800146c <tud_audio_tx_done_pre_load_cb+0x94>
	{
		*dst ++ = (int16_t)(20000.0 * sin(432.0 * 6.28 * AudioCounter++ / 48000));
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <tud_audio_tx_done_pre_load_cb+0xcc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	4927      	ldr	r1, [pc, #156]	; (80014a4 <tud_audio_tx_done_pre_load_cb+0xcc>)
 8001408:	600a      	str	r2, [r1, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f82e 	bl	800046c <__aeabi_ui2d>
 8001410:	a31d      	add	r3, pc, #116	; (adr r3, 8001488 <tud_audio_tx_done_pre_load_cb+0xb0>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8a3 	bl	8000560 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	a31b      	add	r3, pc, #108	; (adr r3, 8001490 <tud_audio_tx_done_pre_load_cb+0xb8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f9c4 	bl	80007b4 <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	ec43 2b17 	vmov	d7, r2, r3
 8001434:	eeb0 0a47 	vmov.f32	s0, s14
 8001438:	eef0 0a67 	vmov.f32	s1, s15
 800143c:	f007 fe20 	bl	8009080 <sin>
 8001440:	ec51 0b10 	vmov	r0, r1, d0
 8001444:	a314      	add	r3, pc, #80	; (adr r3, 8001498 <tud_audio_tx_done_pre_load_cb+0xc0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f889 	bl	8000560 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	68fc      	ldr	r4, [r7, #12]
 8001458:	1ca3      	adds	r3, r4, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	f7ff fb1a 	bl	8000a94 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	b21b      	sxth	r3, r3
 8001464:	8023      	strh	r3, [r4, #0]
	for (uint16_t i = 0; i < 48000/1000; i++ )
 8001466:	897b      	ldrh	r3, [r7, #10]
 8001468:	3301      	adds	r3, #1
 800146a:	817b      	strh	r3, [r7, #10]
 800146c:	897b      	ldrh	r3, [r7, #10]
 800146e:	2b2f      	cmp	r3, #47	; 0x2f
 8001470:	d9c6      	bls.n	8001400 <tud_audio_tx_done_pre_load_cb+0x28>
	}
	tud_audio_write((uint8_t *)mic_buf, (uint16_t) (2 * 48000 /1000));
 8001472:	2160      	movs	r1, #96	; 0x60
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <tud_audio_tx_done_pre_load_cb+0xc8>)
 8001476:	f7ff fd06 	bl	8000e86 <tud_audio_write>



	// This callback could be used to fill microphone data separately
	return true;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	851eb852 	.word	0x851eb852
 800148c:	40a531eb 	.word	0x40a531eb
 8001490:	00000000 	.word	0x00000000
 8001494:	40e77000 	.word	0x40e77000
 8001498:	00000000 	.word	0x00000000
 800149c:	40d38800 	.word	0x40d38800
 80014a0:	20000578 	.word	0x20000578
 80014a4:	20000e98 	.word	0x20000e98

080014a8 <tud_cdc_line_state_cb>:
//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	717b      	strb	r3, [r7, #5]
		// Terminal connected
	}else
	{
		// Terminal disconnected
	}
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
	(void) itf;
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <cdc_task>:

void cdc_task(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b092      	sub	sp, #72	; 0x48
 80014e0:	af00      	add	r7, sp, #0
	// connected() check for DTR bit
	// Most but not all terminal client set this when making connection
	if ( tud_cdc_connected() )
 80014e2:	f7ff fc81 	bl	8000de8 <tud_cdc_connected>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <cdc_task+0x58>
	{
		//TODO: terminal shows message only after a key is pressed. Why?
		if (SendGreetings && tud_cdc_write_available())
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <cdc_task+0x60>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00d      	beq.n	8001510 <cdc_task+0x34>
 80014f4:	f7ff fcae 	bl	8000e54 <tud_cdc_write_available>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <cdc_task+0x34>
		{
			tud_cdc_write("\n\rHello!\n\r", 8);
 80014fe:	2108      	movs	r1, #8
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <cdc_task+0x64>)
 8001502:	f7ff fc90 	bl	8000e26 <tud_cdc_write>
			tud_cdc_write_flush();
 8001506:	f7ff fc9d 	bl	8000e44 <tud_cdc_write_flush>
			SendGreetings = 0;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <cdc_task+0x60>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
		}
		// connected and there are data available
		if ( tud_cdc_available() )
 8001510:	f7ff fc72 	bl	8000df8 <tud_cdc_available>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <cdc_task+0x58>
		{
			// read data
			char buf[64];
			uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc72 	bl	8000e08 <tud_cdc_read>
 8001524:	6478      	str	r0, [r7, #68]	; 0x44

			// Echo back
			// Note: Skip echo by commenting out write() and write_flush()
			// for throughput test e.g
			//    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
			tud_cdc_write(buf, count);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc7b 	bl	8000e26 <tud_cdc_write>
			tud_cdc_write_flush();
 8001530:	f7ff fc88 	bl	8000e44 <tud_cdc_write_flush>
		}
	}
}
 8001534:	bf00      	nop
 8001536:	3748      	adds	r7, #72	; 0x48
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000008 	.word	0x20000008
 8001540:	0800a138 	.word	0x0800a138

08001544 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
			tud_audio_write((uint8_t *)mic_buf, (uint16_t) (spk_data_size / 2));
			spk_data_size = 0;
		}
	}
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155a:	f000 fa63 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155e:	f000 f841 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001562:	f000 f8e1 	bl	8001728 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001566:	f000 f8b1 	bl	80016cc <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800156a:	f000 f8a3 	bl	80016b4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <main+0x88>)
 8001576:	f000 fd81 	bl	800207c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800157a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157e:	f000 fac3 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <main+0x88>)
 800158a:	f000 fd77 	bl	800207c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800158e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001592:	f000 fab9 	bl	8001b08 <HAL_Delay>
	//  board_init();
	TU_ASSERT(tusb_init());
 8001596:	f007 fbf3 	bl	8008d80 <tusb_init>
 800159a:	4603      	mov	r3, r0
 800159c:	f083 0301 	eor.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <main+0x68>
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <main+0x8c>)
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d000      	beq.n	80015b8 <main+0x64>
 80015b6:	be00      	bkpt	0x0000
 80015b8:	2300      	movs	r3, #0
 80015ba:	e00a      	b.n	80015d2 <main+0x7e>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 80015bc:	2100      	movs	r1, #0
 80015be:	f04f 30ff 	mov.w	r0, #4294967295
 80015c2:	f004 fb21 	bl	8005c08 <tud_task_ext>
}
 80015c6:	bf00      	nop
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tud_task();
		audio_task();
 80015c8:	f7ff ffbc 	bl	8001544 <audio_task>
		cdc_task();
 80015cc:	f7ff ff86 	bl	80014dc <cdc_task>
		tud_task();
 80015d0:	e7f4      	b.n	80015bc <main+0x68>
	}
  /* USER CODE END 3 */
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000
 80015e0:	e000edf0 	.word	0xe000edf0

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fd3a 	bl	800906c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <SystemClock_Config+0xc8>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <SystemClock_Config+0xc8>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <SystemClock_Config+0xc8>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <SystemClock_Config+0xcc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <SystemClock_Config+0xcc>)
 800162e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <SystemClock_Config+0xcc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001654:	2308      	movs	r3, #8
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fe3d 	bl	80022e8 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001674:	f000 f880 	bl	8001778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2103      	movs	r1, #3
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f89f 	bl	80027d8 <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016a0:	f000 f86a 	bl	8001778 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2043      	movs	r0, #67	; 0x43
 80016be:	f000 fb22 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016c2:	2043      	movs	r0, #67	; 0x43
 80016c4:	f000 fb3b 	bl	8001d3e <HAL_NVIC_EnableIRQ>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016da:	2204      	movs	r2, #4
 80016dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001710:	f000 fccd 	bl	80020ae <HAL_PCD_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 f82d 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000060 	.word	0x20000060

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_GPIO_Init+0x4c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <MX_GPIO_Init+0x4c>)
 8001738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_GPIO_Init+0x4c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_GPIO_Init+0x4c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <MX_GPIO_Init+0x4c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_GPIO_Init+0x4c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f4:	d132      	bne.n	800185c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_PCD_MspInit+0x90>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_PCD_MspInit+0x90>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_PCD_MspInit+0x90>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001824:	230a      	movs	r3, #10
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <HAL_PCD_MspInit+0x94>)
 8001830:	f000 faa0 	bl	8001d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_PCD_MspInit+0x90>)
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_PCD_MspInit+0x90>)
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	6353      	str	r3, [r2, #52]	; 0x34
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_PCD_MspInit+0x90>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_PCD_MspInit+0x90>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184e:	6453      	str	r3, [r2, #68]	; 0x44
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_PCD_MspInit+0x90>)
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f906 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f007 f90d 	bl	8008ae4 <dcd_int_handler>
	return;
 80018ca:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SystemInit+0x28>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <SystemInit+0x28>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0x28>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	return (uint8_t const *)&desc_device;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <tud_descriptor_device_cb+0x10>)
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	0800a1bc 	.word	0x0800a1bc

08001910 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
	(void)index; // for multiple configurations
	return desc_configuration;
 800191a:	4b03      	ldr	r3, [pc, #12]	; (8001928 <tud_descriptor_configuration_cb+0x18>)
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	0800a1d0 	.word	0x0800a1d0

0800192c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	80bb      	strh	r3, [r7, #4]
	(void)langid;

	uint8_t chr_count;

	if (index == 0)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <tud_descriptor_string_cb+0x28>
	{
		memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <tud_descriptor_string_cb+0x9c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <tud_descriptor_string_cb+0xa0>)
 800194c:	805a      	strh	r2, [r3, #2]
		chr_count = 1;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e027      	b.n	80019a4 <tud_descriptor_string_cb+0x78>
	}
	else
	{
		// Convert ASCII string into UTF-16

		if (!(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0]))) return NULL;
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d901      	bls.n	800195e <tud_descriptor_string_cb+0x32>
 800195a:	2300      	movs	r3, #0
 800195c:	e030      	b.n	80019c0 <tud_descriptor_string_cb+0x94>

		const char* str = string_desc_arr[index];
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <tud_descriptor_string_cb+0x9c>)
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	60bb      	str	r3, [r7, #8]

		// Cap at max char
		chr_count = (uint8_t) strlen(str);
 8001968:	68b8      	ldr	r0, [r7, #8]
 800196a:	f7fe fc35 	bl	80001d8 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
		if (chr_count > 31) chr_count = 31;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b1f      	cmp	r3, #31
 8001976:	d901      	bls.n	800197c <tud_descriptor_string_cb+0x50>
 8001978:	231f      	movs	r3, #31
 800197a:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < chr_count; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	73bb      	strb	r3, [r7, #14]
 8001980:	e00c      	b.n	800199c <tud_descriptor_string_cb+0x70>
		{
			_desc_str[1 + i] = str[i];
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	7bbb      	ldrb	r3, [r7, #14]
 800198c:	3301      	adds	r3, #1
 800198e:	b291      	uxth	r1, r2
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <tud_descriptor_string_cb+0xa0>)
 8001992:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < chr_count; i++)
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	3301      	adds	r3, #1
 800199a:	73bb      	strb	r3, [r7, #14]
 800199c:	7bba      	ldrb	r2, [r7, #14]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3ee      	bcc.n	8001982 <tud_descriptor_string_cb+0x56>
		}
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <tud_descriptor_string_cb+0xa0>)
 80019bc:	801a      	strh	r2, [r3, #0]

	return _desc_str;
 80019be:	4b03      	ldr	r3, [pc, #12]	; (80019cc <tud_descriptor_string_cb+0xa0>)
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000010 	.word	0x20000010
 80019cc:	20000e9c 	.word	0x20000e9c

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d6:	490e      	ldr	r1, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ec:	4c0b      	ldr	r4, [pc, #44]	; (8001a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fa:	f7ff ff69 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f007 fb03 	bl	8009008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff fda7 	bl	8001554 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001a14:	0800a570 	.word	0x0800a570
  ldr r2, =_sbss
 8001a18:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001a1c:	20001b78 	.word	0x20001b78

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f94f 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fe94 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f967 	bl	8001d5a <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f92f 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	20000030 	.word	0x20000030
 8001ac4:	2000002c 	.word	0x2000002c

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000030 	.word	0x20000030
 8001aec:	20000edc 	.word	0x20000edc

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000edc 	.word	0x20000edc

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffee 	bl	8001af0 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000030 	.word	0x20000030

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e159      	b.n	8002044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8148 	bne.w	800203e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a2 	beq.w	800203e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x202>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x1fe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x1fa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x1f2>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x304>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x304>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_GPIO_Init+0x304>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f aea2 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b0:	b08f      	sub	sp, #60	; 0x3c
 80020b2:	af0a      	add	r7, sp, #40	; 0x28
 80020b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e10f      	b.n	80022e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fb7a 	bl	80017d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2203      	movs	r2, #3
 80020e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fdb7 	bl	8002c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	687e      	ldr	r6, [r7, #4]
 800210c:	466d      	mov	r5, sp
 800210e:	f106 0410 	add.w	r4, r6, #16
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002122:	1d33      	adds	r3, r6, #4
 8002124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f000 fd42 	bl	8002bb0 <USB_CoreInit>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0d0      	b.n	80022e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fda5 	bl	8002c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e04a      	b.n	80021e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	333d      	adds	r3, #61	; 0x3d
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	333c      	adds	r3, #60	; 0x3c
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	b298      	uxth	r0, r3
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3344      	adds	r3, #68	; 0x44
 800218c:	4602      	mov	r2, r0
 800218e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3340      	adds	r3, #64	; 0x40
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3348      	adds	r3, #72	; 0x48
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	334c      	adds	r3, #76	; 0x4c
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3354      	adds	r3, #84	; 0x54
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	3301      	adds	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d3af      	bcc.n	8002150 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e044      	b.n	8002280 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3301      	adds	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3b5      	bcc.n	80021f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	687e      	ldr	r6, [r7, #4]
 8002292:	466d      	mov	r5, sp
 8002294:	f106 0410 	add.w	r4, r6, #16
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a8:	1d33      	adds	r3, r6, #4
 80022aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f000 fd3d 	bl	8002d2c <USB_DevInit>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e00d      	b.n	80022e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 ff08 	bl	80030ee <USB_DevDisconnect>

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e267      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b82      	ldr	r3, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b7e      	ldr	r3, [pc, #504]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e242      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6f      	ldr	r2, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6c      	ldr	r2, [pc, #432]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a68      	ldr	r2, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b66      	ldr	r3, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fba6 	bl	8001af0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fba2 	bl	8001af0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e207      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fb92 	bl	8001af0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fb8e 	bl	8001af0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1f3      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b51      	ldr	r3, [pc, #324]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1c7      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4937      	ldr	r1, [pc, #220]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCC_OscConfig+0x244>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7ff fb47 	bl	8001af0 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fb43 	bl	8001af0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1a8      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4925      	ldr	r1, [pc, #148]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x244>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fb26 	bl	8001af0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff fb22 	bl	8001af0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e187      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_RCC_OscConfig+0x248>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7ff fb06 	bl	8001af0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fb02 	bl	8001af0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e167      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x240>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e01b      	b.n	8002540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_OscConfig+0x248>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff faef 	bl	8001af0 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e00e      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7ff faeb 	bl	8001af0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d907      	bls.n	8002534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e150      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	42470000 	.word	0x42470000
 8002530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b88      	ldr	r3, [pc, #544]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ea      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8097 	beq.w	800267c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b81      	ldr	r3, [pc, #516]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b7d      	ldr	r3, [pc, #500]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a7c      	ldr	r2, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b7a      	ldr	r3, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b77      	ldr	r3, [pc, #476]	; (800275c <HAL_RCC_OscConfig+0x474>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b74      	ldr	r3, [pc, #464]	; (800275c <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a73      	ldr	r2, [pc, #460]	; (800275c <HAL_RCC_OscConfig+0x474>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7ff faab 	bl	8001af0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7ff faa7 	bl	8001af0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e10c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_RCC_OscConfig+0x474>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2ea>
 80025c4:	4b64      	ldr	r3, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	e01c      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x30c>
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a5e      	ldr	r2, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025f4:	4b58      	ldr	r3, [pc, #352]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a57      	ldr	r2, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	4b55      	ldr	r3, [pc, #340]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a54      	ldr	r2, [pc, #336]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d015      	beq.n	8002640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff fa6c 	bl	8001af0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7ff fa68 	bl	8001af0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0cb      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ee      	beq.n	800261c <HAL_RCC_OscConfig+0x334>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7ff fa56 	bl	8001af0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7ff fa52 	bl	8001af0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0b5      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ee      	bne.n	8002648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a1 	beq.w	80027c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002686:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d05c      	beq.n	800274c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d141      	bne.n	800271e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fa26 	bl	8001af0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff fa22 	bl	8001af0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e087      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	491b      	ldr	r1, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7ff f9fb 	bl	8001af0 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7ff f9f7 	bl	8001af0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e05c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x416>
 800271c:	e054      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f9e4 	bl	8001af0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f9e0 	bl	8001af0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e045      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x470>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x444>
 800274a:	e03d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e038      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000
 8002760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x4ec>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d028      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d121      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800279a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279c:	4293      	cmp	r3, r2
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0cc      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d90c      	bls.n	8002814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d044      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d003      	beq.n	8002896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	2b03      	cmp	r3, #3
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e067      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4934      	ldr	r1, [pc, #208]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff f912 	bl	8001af0 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff f90e 	bl	8001af0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e04f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d20c      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	490a      	ldr	r1, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f872 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00
 8002994:	40023800 	.word	0x40023800
 8002998:	0800a1ac 	.word	0x0800a1ac
 800299c:	2000000c 	.word	0x2000000c
 80029a0:	2000002c 	.word	0x2000002c

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b094      	sub	sp, #80	; 0x50
 80029aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	647b      	str	r3, [r7, #68]	; 0x44
 80029b0:	2300      	movs	r3, #0
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b4:	2300      	movs	r3, #0
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029bc:	4b79      	ldr	r3, [pc, #484]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x40>
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	f200 80e1 	bhi.w	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x34>
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x3a>
 80029d6:	e0db      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029dc:	e0db      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029de:	4b73      	ldr	r3, [pc, #460]	; (8002bac <HAL_RCC_GetSysClockFreq+0x208>)
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e2:	e0d8      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	2200      	movs	r2, #0
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
 8002a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	f04f 0000 	mov.w	r0, #0
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	0159      	lsls	r1, r3, #5
 8002a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a28:	0150      	lsls	r0, r2, #5
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4621      	mov	r1, r4
 8002a30:	1a51      	subs	r1, r2, r1
 8002a32:	6139      	str	r1, [r7, #16]
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a48:	4659      	mov	r1, fp
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a52:	4651      	mov	r1, sl
 8002a54:	018a      	lsls	r2, r1, #6
 8002a56:	4651      	mov	r1, sl
 8002a58:	ebb2 0801 	subs.w	r8, r2, r1
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4699      	mov	r9, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	eb18 0303 	adds.w	r3, r8, r3
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	462b      	mov	r3, r5
 8002a84:	eb49 0303 	adc.w	r3, r9, r3
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a96:	4629      	mov	r1, r5
 8002a98:	024b      	lsls	r3, r1, #9
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	024a      	lsls	r2, r1, #9
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab4:	f7fe f816 	bl	8000ae4 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4613      	mov	r3, r2
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	e058      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	4611      	mov	r1, r2
 8002ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0159      	lsls	r1, r3, #5
 8002aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aee:	0150      	lsls	r0, r2, #5
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4641      	mov	r1, r8
 8002af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b14:	ebb2 040a 	subs.w	r4, r2, sl
 8002b18:	eb63 050b 	sbc.w	r5, r3, fp
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	464b      	mov	r3, r9
 8002b38:	eb45 0303 	adc.w	r3, r5, r3
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	028b      	lsls	r3, r1, #10
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b54:	4621      	mov	r1, r4
 8002b56:	028a      	lsls	r2, r1, #10
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	61fa      	str	r2, [r7, #28]
 8002b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b68:	f7fd ffbc 	bl	8000ae4 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3750      	adds	r7, #80	; 0x50
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400
 8002bac:	007a1200 	.word	0x007a1200

08002bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	f107 001c 	add.w	r0, r7, #28
 8002bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d122      	bne.n	8002c0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 faa2 	bl	800314c <USB_CoreReset>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e01a      	b.n	8002c44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa96 	bl	800314c <USB_CoreReset>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
 8002c36:	e005      	b.n	8002c44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10b      	bne.n	8002c62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f043 0206 	orr.w	r2, r3, #6
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c6e:	b004      	add	sp, #16
 8002c70:	4770      	bx	lr

08002c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d115      	bne.n	8002ce2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7fe ff20 	bl	8001b08 <HAL_Delay>
      ms++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa2e 	bl	8003130 <USB_GetMode>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d01e      	beq.n	8002d18 <USB_SetCurrentMode+0x84>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b31      	cmp	r3, #49	; 0x31
 8002cde:	d9f0      	bls.n	8002cc2 <USB_SetCurrentMode+0x2e>
 8002ce0:	e01a      	b.n	8002d18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7fe ff07 	bl	8001b08 <HAL_Delay>
      ms++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fa15 	bl	8003130 <USB_GetMode>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <USB_SetCurrentMode+0x84>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b31      	cmp	r3, #49	; 0x31
 8002d10:	d9f0      	bls.n	8002cf4 <USB_SetCurrentMode+0x60>
 8002d12:	e001      	b.n	8002d18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e005      	b.n	8002d24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b32      	cmp	r3, #50	; 0x32
 8002d1c:	d101      	bne.n	8002d22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e009      	b.n	8002d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3340      	adds	r3, #64	; 0x40
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0e      	cmp	r3, #14
 8002d64:	d9f2      	bls.n	8002d4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11c      	bne.n	8002da6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38
 8002da4:	e00b      	b.n	8002dbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	461a      	mov	r2, r3
 8002dda:	680b      	ldr	r3, [r1, #0]
 8002ddc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002dea:	2100      	movs	r1, #0
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f965 	bl	80030bc <USB_SetDevSpeed>
 8002df2:	e008      	b.n	8002e06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002df4:	2101      	movs	r1, #1
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f960 	bl	80030bc <USB_SetDevSpeed>
 8002dfc:	e003      	b.n	8002e06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dfe:	2103      	movs	r1, #3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f95b 	bl	80030bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e06:	2110      	movs	r1, #16
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f8f3 	bl	8002ff4 <USB_FlushTxFifo>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f91f 	bl	800305c <USB_FlushRxFifo>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	461a      	mov	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e043      	b.n	8002eda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e68:	d118      	bne.n	8002e9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e013      	b.n	8002eae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e92:	461a      	mov	r2, r3
 8002e94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e008      	b.n	8002eae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d3b7      	bcc.n	8002e52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	e043      	b.n	8002f70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efe:	d118      	bne.n	8002f32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e013      	b.n	8002f44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	e008      	b.n	8002f44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2300      	movs	r3, #0
 8002f42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	2300      	movs	r3, #0
 8002f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3b7      	bcc.n	8002ee8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f043 0210 	orr.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <USB_DevInit+0x2c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f043 0208 	orr.w	r2, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fec:	b004      	add	sp, #16
 8002fee:	4770      	bx	lr
 8002ff0:	803c3800 	.word	0x803c3800

08002ff4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <USB_FlushTxFifo+0x64>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e01b      	b.n	800304c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	daf2      	bge.n	8003002 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a08      	ldr	r2, [pc, #32]	; (8003058 <USB_FlushTxFifo+0x64>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e006      	b.n	800304c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d0f0      	beq.n	800302c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	00030d40 	.word	0x00030d40

0800305c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <USB_FlushRxFifo+0x5c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e018      	b.n	80030ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	daf2      	bge.n	8003068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2210      	movs	r2, #16
 800308a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3301      	adds	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <USB_FlushRxFifo+0x5c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e006      	b.n	80030ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d0f0      	beq.n	800308c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	00030d40 	.word	0x00030d40

080030bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003108:	f023 0303 	bic.w	r3, r3, #3
 800310c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <USB_CoreReset+0x64>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e01b      	b.n	80031a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	daf2      	bge.n	8003158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <USB_CoreReset+0x64>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e006      	b.n	80031a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d0f0      	beq.n	8003182 <USB_CoreReset+0x36>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	00030d40 	.word	0x00030d40

080031b4 <tud_audio_n_read>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
  return tu_fifo_count(&_audiod_fct[func_id].ep_out_ff);
}

uint16_t tud_audio_n_read(uint8_t func_id, void* buffer, uint16_t bufsize)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <tud_audio_n_read+0x2c>
 80031ca:	79fa      	ldrb	r2, [r7, #7]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <tud_audio_n_read+0x54>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	3304      	adds	r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <tud_audio_n_read+0x30>
 80031e0:	2300      	movs	r3, #0
 80031e2:	e00d      	b.n	8003200 <tud_audio_n_read+0x4c>
  return tu_fifo_read_n(&_audiod_fct[func_id].ep_out_ff, buffer, bufsize);
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3320      	adds	r3, #32
 80031f0:	4a05      	ldr	r2, [pc, #20]	; (8003208 <tud_audio_n_read+0x54>)
 80031f2:	4413      	add	r3, r2
 80031f4:	88ba      	ldrh	r2, [r7, #4]
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fb1e 	bl	800583a <tu_fifo_read_n>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000183c 	.word	0x2000183c

0800320c <audiod_rx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_DECODING = 0.

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

static bool audiod_rx_done_cb(uint8_t rhport, audiod_function_t* audio, uint16_t n_bytes_received)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b087      	sub	sp, #28
 8003210:	af02      	add	r7, sp, #8
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
 8003218:	4613      	mov	r3, r2
 800321a:	80bb      	strh	r3, [r7, #4]
  uint8_t idxItf = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	73bb      	strb	r3, [r7, #14]
  uint8_t const *dummy2;
  uint8_t idx_audio_fct = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]

  if (tud_audio_rx_done_pre_read_cb || tud_audio_rx_done_post_read_cb)
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <audiod_rx_done_cb+0xe4>)
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <audiod_rx_done_cb+0x24>
 800322a:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <audiod_rx_done_cb+0xe8>)
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <audiod_rx_done_cb+0x50>
  {
    idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f001 f8d3 	bl	80043dc <audiod_get_audio_fct_idx>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
    TU_VERIFY(audiod_get_AS_interface_index(audio->ep_out_as_intf_num, audio, &idxItf, &dummy2));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7c18      	ldrb	r0, [r3, #16]
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	f107 020e 	add.w	r2, r7, #14
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	f000 fee4 	bl	8004014 <audiod_get_AS_interface_index>
 800324c:	4603      	mov	r3, r0
 800324e:	f083 0301 	eor.w	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <audiod_rx_done_cb+0x50>
 8003258:	2300      	movs	r3, #0
 800325a:	e044      	b.n	80032e6 <audiod_rx_done_cb+0xda>
  }

  // Call a weak callback here - a possibility for user to get informed an audio packet was received and data gets now loaded into EP FIFO (or decoded into support RX software FIFO)
  if (tud_audio_rx_done_pre_read_cb)
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <audiod_rx_done_cb+0xe4>)
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <audiod_rx_done_cb+0x82>
  {
    TU_VERIFY(tud_audio_rx_done_pre_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	7b5c      	ldrb	r4, [r3, #13]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	7bba      	ldrb	r2, [r7, #14]
 800326c:	4413      	add	r3, r2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	88b9      	ldrh	r1, [r7, #4]
 8003274:	79f8      	ldrb	r0, [r7, #7]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4623      	mov	r3, r4
 800327a:	f7fe f889 	bl	8001390 <tud_audio_rx_done_pre_read_cb>
 800327e:	4603      	mov	r3, r0
 8003280:	f083 0301 	eor.w	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <audiod_rx_done_cb+0x82>
 800328a:	2300      	movs	r3, #0
 800328c:	e02b      	b.n	80032e6 <audiod_rx_done_cb+0xda>

  // Schedule for next receive
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
#else
  // Data is already placed in EP FIFO, schedule for next receive
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	7b59      	ldrb	r1, [r3, #13]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f103 0220 	add.w	r2, r3, #32
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	89db      	ldrh	r3, [r3, #14]
 800329c:	79f8      	ldrb	r0, [r7, #7]
 800329e:	f003 fe0f 	bl	8006ec0 <usbd_edpt_xfer_fifo>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <audiod_rx_done_cb+0xa6>
 80032ae:	2300      	movs	r3, #0
 80032b0:	e019      	b.n	80032e6 <audiod_rx_done_cb+0xda>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed decoding was completed
  if (tud_audio_rx_done_post_read_cb)
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <audiod_rx_done_cb+0xe8>)
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <audiod_rx_done_cb+0xd8>
  {
    TU_VERIFY(tud_audio_rx_done_post_read_cb(rhport, n_bytes_received, idx_audio_fct, audio->ep_out, audio->alt_setting[idxItf]));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	7b5c      	ldrb	r4, [r3, #13]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	7bba      	ldrb	r2, [r7, #14]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	88b9      	ldrh	r1, [r7, #4]
 80032ca:	79f8      	ldrb	r0, [r7, #7]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4623      	mov	r3, r4
 80032d0:	f3af 8000 	nop.w
 80032d4:	4603      	mov	r3, r0
 80032d6:	f083 0301 	eor.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <audiod_rx_done_cb+0xd8>
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <audiod_rx_done_cb+0xda>
  }

  return true;
 80032e4:	2301      	movs	r3, #1
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08001391 	.word	0x08001391
 80032f4:	00000000 	.word	0x00000000

080032f8 <tud_audio_n_write>:
 * \param[in]       data: Pointer to data array to be copied from
 * \param[in]       len: # of array elements to copy
 * \return          Number of bytes actually written
 */
uint16_t tud_audio_n_write(uint8_t func_id, const void * data, uint16_t len)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
 8003304:	4613      	mov	r3, r2
 8003306:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <tud_audio_n_write+0x2c>
 800330e:	79fa      	ldrb	r2, [r7, #7]
 8003310:	490f      	ldr	r1, [pc, #60]	; (8003350 <tud_audio_n_write+0x58>)
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	3304      	adds	r3, #4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <tud_audio_n_write+0x30>
 8003324:	2300      	movs	r3, #0
 8003326:	e00e      	b.n	8003346 <tud_audio_n_write+0x4e>
  return tu_fifo_write_n(&_audiod_fct[func_id].ep_in_ff, data, len);
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	3328      	adds	r3, #40	; 0x28
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <tud_audio_n_write+0x58>)
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	88ba      	ldrh	r2, [r7, #4]
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f002 fae2 	bl	8005908 <tu_fifo_write_n>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	2000183c 	.word	0x2000183c

08003354 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af02      	add	r7, sp, #8
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f001 f83b 	bl	80043dc <audiod_get_audio_fct_idx>
 8003366:	4603      	mov	r3, r0
 8003368:	75fb      	strb	r3, [r7, #23]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	7b18      	ldrb	r0, [r3, #12]
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	f107 020f 	add.w	r2, r7, #15
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	f000 fe4c 	bl	8004014 <audiod_get_AS_interface_index>
 800337c:	4603      	mov	r3, r0
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <audiod_tx_done_cb+0x38>
 8003388:	2300      	movs	r3, #0
 800338a:	e05b      	b.n	8003444 <audiod_tx_done_cb+0xf0>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <audiod_tx_done_cb+0x4a>
 800339a:	2300      	movs	r3, #0
 800339c:	e052      	b.n	8003444 <audiod_tx_done_cb+0xf0>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <audiod_tx_done_cb+0xf8>)
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <audiod_tx_done_cb+0x76>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	7a1a      	ldrb	r2, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	7bf9      	ldrb	r1, [r7, #15]
 80033ae:	440b      	add	r3, r1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	7df9      	ldrb	r1, [r7, #23]
 80033b4:	79f8      	ldrb	r0, [r7, #7]
 80033b6:	f7fe f80f 	bl	80013d8 <tud_audio_tx_done_pre_load_cb>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f083 0301 	eor.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <audiod_tx_done_cb+0x76>
 80033c6:	2300      	movs	r3, #0
 80033c8:	e03c      	b.n	8003444 <audiod_tx_done_cb+0xf0>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));

#else
  // No support FIFOs, if no linear buffer required schedule transmit, else put data into linear buffer and schedule

  n_bytes_tx = tu_min16(tu_fifo_count(&audio->ep_in_ff), audio->ep_in_sz);      // Limit up to max packet size, more can not be done for ISO
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	332c      	adds	r3, #44	; 0x2c
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 f962 	bl	8005698 <tu_fifo_count>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	895b      	ldrh	r3, [r3, #10]
 80033dc:	827a      	strh	r2, [r7, #18]
 80033de:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80033e0:	8a7a      	ldrh	r2, [r7, #18]
 80033e2:	8a3b      	ldrh	r3, [r7, #16]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	bf28      	it	cs
 80033e8:	4613      	movcs	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	82bb      	strh	r3, [r7, #20]
#if USE_LINEAR_BUFFER_TX
  tu_fifo_read_n(&audio->ep_in_ff, audio->lin_buf_in, n_bytes_tx);
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
#else
  // Send everything in ISO EP FIFO
  TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_in, &audio->ep_in_ff, n_bytes_tx));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7a19      	ldrb	r1, [r3, #8]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80033f8:	8abb      	ldrh	r3, [r7, #20]
 80033fa:	79f8      	ldrb	r0, [r7, #7]
 80033fc:	f003 fd60 	bl	8006ec0 <usbd_edpt_xfer_fifo>
 8003400:	4603      	mov	r3, r0
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <audiod_tx_done_cb+0xbc>
 800340c:	2300      	movs	r3, #0
 800340e:	e019      	b.n	8003444 <audiod_tx_done_cb+0xf0>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <audiod_tx_done_cb+0xfc>)
 8003412:	2b00      	cmp	r3, #0
 8003414:	d015      	beq.n	8003442 <audiod_tx_done_cb+0xee>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	7a1c      	ldrb	r4, [r3, #8]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	4413      	add	r3, r2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	7dfa      	ldrb	r2, [r7, #23]
 8003426:	8ab9      	ldrh	r1, [r7, #20]
 8003428:	79f8      	ldrb	r0, [r7, #7]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4623      	mov	r3, r4
 800342e:	f3af 8000 	nop.w
 8003432:	4603      	mov	r3, r0
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <audiod_tx_done_cb+0xee>
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <audiod_tx_done_cb+0xf0>

  return true;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	080013d9 	.word	0x080013d9
 8003450:	00000000 	.word	0x00000000

08003454 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 800345a:	2238      	movs	r2, #56	; 0x38
 800345c:	2100      	movs	r1, #0
 800345e:	4824      	ldr	r0, [pc, #144]	; (80034f0 <audiod_init+0x9c>)
 8003460:	f005 fe04 	bl	800906c <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	e039      	b.n	80034de <audiod_init+0x8a>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 800346a:	79fa      	ldrb	r2, [r7, #7]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <audiod_init+0x9c>)
 8003476:	4413      	add	r3, r2
 8003478:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <audiod_init+0x3a>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <audiod_init+0xa0>)
 8003484:	615a      	str	r2, [r3, #20]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	761a      	strb	r2, [r3, #24]
        break;
 800348c:	bf00      	nop
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <audiod_init+0x48>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <audiod_init+0xa4>)
 8003498:	61da      	str	r2, [r3, #28]
        break;
 800349a:	bf00      	nop
    }

    // Initialize IN EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <audiod_init+0x66>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_in_ff, audio_ep_in_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_IN_SW_BUF_SZ, 1, true);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80034a8:	2301      	movs	r3, #1
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2301      	movs	r3, #1
 80034ae:	f44f 7242 	mov.w	r2, #776	; 0x308
 80034b2:	4912      	ldr	r1, [pc, #72]	; (80034fc <audiod_init+0xa8>)
 80034b4:	f001 fc5e 	bl	8004d74 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_in_ff, osal_mutex_create(&ep_in_ff_mutex_wr_1), NULL);
#endif
        break;
 80034b8:	bf00      	nop
#endif // USE_LINEAR_BUFFER_TX

    // Initialize OUT EP FIFO if required
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING

    switch (i)
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <audiod_init+0x84>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ > 0
      case 0:
        tu_fifo_config(&audio->ep_out_ff, audio_ep_out_sw_buf_1, CFG_TUD_AUDIO_FUNC_1_EP_OUT_SW_BUF_SZ, 1, true);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f103 0020 	add.w	r0, r3, #32
 80034c6:	2301      	movs	r3, #1
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2301      	movs	r3, #1
 80034cc:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <audiod_init+0xac>)
 80034d2:	f001 fc4f 	bl	8004d74 <tu_fifo_config>
#if CFG_FIFO_MUTEX
        tu_fifo_config_mutex(&audio->ep_out_ff, NULL, osal_mutex_create(&ep_out_ff_mutex_rd_1));
#endif
        break;
 80034d6:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	3301      	adds	r3, #1
 80034dc:	71fb      	strb	r3, [r7, #7]
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0c2      	beq.n	800346a <audiod_init+0x16>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000183c 	.word	0x2000183c
 80034f4:	200017f8 	.word	0x200017f8
 80034f8:	20001838 	.word	0x20001838
 80034fc:	20000ee0 	.word	0x20000ee0
 8003500:	200011e8 	.word	0x200011e8

08003504 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e019      	b.n	8003548 <audiod_reset+0x44>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <audiod_reset+0x54>)
 8003520:	4413      	add	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8003524:	2214      	movs	r2, #20
 8003526:	2100      	movs	r1, #0
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f005 fd9f 	bl	800906c <memset>

#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	332c      	adds	r3, #44	; 0x2c
 8003532:	4618      	mov	r0, r3
 8003534:	f002 fa0c 	bl	8005950 <tu_fifo_clear>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	3320      	adds	r3, #32
 800353c:	4618      	mov	r0, r3
 800353e:	f002 fa07 	bl	8005950 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	3301      	adds	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0e2      	beq.n	8003514 <audiod_reset+0x10>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	2000183c 	.word	0x2000183c

0800355c <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
 8003568:	4613      	mov	r3, r2
 800356a:	80bb      	strh	r3, [r7, #4]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	795b      	ldrb	r3, [r3, #5]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d103      	bne.n	800357c <audiod_open+0x20>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	799b      	ldrb	r3, [r3, #6]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d001      	beq.n	8003580 <audiod_open+0x24>
 800357c:	2300      	movs	r3, #0
 800357e:	e064      	b.n	800364a <audiod_open+0xee>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	2b20      	cmp	r3, #32
 8003586:	d001      	beq.n	800358c <audiod_open+0x30>
 8003588:	2300      	movs	r3, #0
 800358a:	e05e      	b.n	800364a <audiod_open+0xee>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	791b      	ldrb	r3, [r3, #4]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <audiod_open+0x3c>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 8003594:	2300      	movs	r3, #0
 8003596:	e058      	b.n	800364a <audiod_open+0xee>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <audiod_open+0x48>
 80035a0:	2300      	movs	r3, #0
 80035a2:	e052      	b.n	800364a <audiod_open+0xee>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e030      	b.n	800360c <audiod_open+0xb0>
  {
    if (!_audiod_fct[i].p_desc)
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	492a      	ldr	r1, [pc, #168]	; (8003658 <audiod_open+0xfc>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d122      	bne.n	8003606 <audiod_open+0xaa>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	4925      	ldr	r1, [pc, #148]	; (8003658 <audiod_open+0xfc>)
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	3304      	adds	r3, #4
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	4920      	ldr	r1, [pc, #128]	; (8003658 <audiod_open+0xfc>)
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	79fa      	ldrb	r2, [r7, #7]
 80035e4:	701a      	strb	r2, [r3, #0]

      // Setup descriptor lengths
      switch (i)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d113      	bne.n	8003614 <audiod_open+0xb8>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	491a      	ldr	r1, [pc, #104]	; (8003658 <audiod_open+0xfc>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	3312      	adds	r3, #18
 80035fc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003600:	801a      	strh	r2, [r3, #0]
          break;
 8003602:	bf00      	nop
      }
  #endif

#endif // USE_ISO_EP_ALLOCATION

      break;
 8003604:	e006      	b.n	8003614 <audiod_open+0xb8>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3301      	adds	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0cb      	beq.n	80035aa <audiod_open+0x4e>
 8003612:	e000      	b.n	8003616 <audiod_open+0xba>
      break;
 8003614:	bf00      	nop
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <audiod_open+0xd6>
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <audiod_open+0x100>)
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d000      	beq.n	800362e <audiod_open+0xd2>
 800362c:	be00      	bkpt	0x0000
 800362e:	2300      	movs	r3, #0
 8003630:	e00b      	b.n	800364a <audiod_open+0xee>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	4908      	ldr	r1, [pc, #32]	; (8003658 <audiod_open+0xfc>)
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3312      	adds	r3, #18
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	3b08      	subs	r3, #8
 8003646:	81bb      	strh	r3, [r7, #12]

  return drv_len;
 8003648:	89bb      	ldrh	r3, [r7, #12]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000183c 	.word	0x2000183c
 800365c:	e000edf0 	.word	0xe000edf0

08003660 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	889b      	ldrh	r3, [r3, #4]
 8003670:	b29b      	uxth	r3, r3
 8003672:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003674:	8abb      	ldrh	r3, [r7, #20]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	75fb      	strb	r3, [r7, #23]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	f107 0212 	add.w	r2, r7, #18
 8003682:	f107 0113 	add.w	r1, r7, #19
 8003686:	7df8      	ldrb	r0, [r7, #23]
 8003688:	f000 fd20 	bl	80040cc <audiod_get_AS_interface_index_global>
 800368c:	4603      	mov	r3, r0
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <audiod_get_interface+0x3c>
 8003698:	2300      	movs	r3, #0
 800369a:	e019      	b.n	80036d0 <audiod_get_interface+0x70>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	4619      	mov	r1, r3
 80036a0:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <audiod_get_interface+0x78>)
 80036a2:	460b      	mov	r3, r1
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a5b      	subs	r3, r3, r1
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	331c      	adds	r3, #28
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	7cba      	ldrb	r2, [r7, #18]
 80036b2:	441a      	add	r2, r3
 80036b4:	79f8      	ldrb	r0, [r7, #7]
 80036b6:	2301      	movs	r3, #1
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	f003 fe27 	bl	800730c <tud_control_xfer>
 80036be:	4603      	mov	r3, r0
 80036c0:	f083 0301 	eor.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <audiod_get_interface+0x6e>
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <audiod_get_interface+0x70>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	2000183c 	.word	0x2000183c

080036dc <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b096      	sub	sp, #88	; 0x58
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80036f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t const alt = tu_u16_low(p_request->wValue);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	885b      	ldrh	r3, [r3, #2]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003700:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	f107 020e 	add.w	r2, r7, #14
 8003710:	f107 010f 	add.w	r1, r7, #15
 8003714:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8003718:	f000 fcd8 	bl	80040cc <audiod_get_AS_interface_index_global>
 800371c:	4603      	mov	r3, r0
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <audiod_set_interface+0x50>
 8003728:	2300      	movs	r3, #0
 800372a:	e168      	b.n	80039fe <audiod_set_interface+0x322>

  audiod_function_t* audio = &_audiod_fct[func_id];
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	461a      	mov	r2, r3
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4aa9      	ldr	r2, [pc, #676]	; (80039e0 <audiod_set_interface+0x304>)
 800373a:	4413      	add	r3, r2
 800373c:	653b      	str	r3, [r7, #80]	; 0x50

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 800373e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003740:	7b1b      	ldrb	r3, [r3, #12]
 8003742:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003746:	429a      	cmp	r2, r3
 8003748:	d121      	bne.n	800378e <audiod_set_interface+0xb2>
  {
    audio->ep_in_as_intf_num = 0;
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	2200      	movs	r2, #0
 800374e:	731a      	strb	r2, [r3, #12]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_in);
 8003750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003752:	7a1a      	ldrb	r2, [r3, #8]
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fced 	bl	8007138 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
 800375e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003760:	332c      	adds	r3, #44	; 0x2c
 8003762:	4618      	mov	r0, r3
 8003764:	f002 f8f4 	bl	8005950 <tu_fifo_clear>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8003768:	4b9e      	ldr	r3, [pc, #632]	; (80039e4 <audiod_set_interface+0x308>)
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <audiod_set_interface+0xac>
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fdac 	bl	80012d0 <tud_audio_set_itf_close_EP_cb>
 8003778:	4603      	mov	r3, r0
 800377a:	f083 0301 	eor.w	r3, r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <audiod_set_interface+0xac>
 8003784:	2300      	movs	r3, #0
 8003786:	e13a      	b.n	80039fe <audiod_set_interface+0x322>

    audio->ep_in = 0;                           // Necessary?
 8003788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378a:	2200      	movs	r2, #0
 800378c:	721a      	strb	r2, [r3, #8]

  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT
  if (audio->ep_out_as_intf_num == itf)
 800378e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003790:	7c1b      	ldrb	r3, [r3, #16]
 8003792:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003796:	429a      	cmp	r2, r3
 8003798:	d121      	bne.n	80037de <audiod_set_interface+0x102>
  {
    audio->ep_out_as_intf_num = 0;
 800379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379c:	2200      	movs	r2, #0
 800379e:	741a      	strb	r2, [r3, #16]
  #if !USE_ISO_EP_ALLOCATION
    usbd_edpt_close(rhport, audio->ep_out);
 80037a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a2:	7b5a      	ldrb	r2, [r3, #13]
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fcc5 	bl	8007138 <usbd_edpt_close>
  #endif

    // Clear FIFOs, since data is no longer valid
  #if !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	3320      	adds	r3, #32
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 f8cc 	bl	8005950 <tu_fifo_clear>
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
  #endif

    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80037b8:	4b8a      	ldr	r3, [pc, #552]	; (80039e4 <audiod_set_interface+0x308>)
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <audiod_set_interface+0xfc>
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fd84 	bl	80012d0 <tud_audio_set_itf_close_EP_cb>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f083 0301 	eor.w	r3, r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <audiod_set_interface+0xfc>
 80037d4:	2300      	movs	r3, #0
 80037d6:	e112      	b.n	80039fe <audiod_set_interface+0x322>

    audio->ep_out = 0;                          // Necessary?
 80037d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037da:	2200      	movs	r2, #0
 80037dc:	735a      	strb	r2, [r3, #13]
  #endif
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	7bba      	ldrb	r2, [r7, #14]
 80037e4:	4413      	add	r3, r2
 80037e6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80037ea:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80037ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f2:	8a5b      	ldrh	r3, [r3, #18]
 80037f4:	3b08      	subs	r3, #8
 80037f6:	4413      	add	r3, r2
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 80037fa:	e0ea      	b.n	80039d2 <audiod_set_interface+0x2f6>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b04      	cmp	r3, #4
 8003808:	f040 80d9 	bne.w	80039be <audiod_set_interface+0x2e2>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	789b      	ldrb	r3, [r3, #2]
 8003810:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003814:	429a      	cmp	r2, r3
 8003816:	f040 80d2 	bne.w	80039be <audiod_set_interface+0x2e2>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	78db      	ldrb	r3, [r3, #3]
 800381e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003822:	429a      	cmp	r2, r3
 8003824:	f040 80cb 	bne.w	80039be <audiod_set_interface+0x2e2>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	791b      	ldrb	r3, [r3, #4]
 8003832:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003836:	e09f      	b.n	8003978 <audiod_set_interface+0x29c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	3301      	adds	r3, #1
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b05      	cmp	r3, #5
 8003844:	f040 808e 	bne.w	8003964 <audiod_set_interface+0x288>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
#if USE_ISO_EP_ALLOCATION
          TU_ASSERT(usbd_edpt_iso_activate(rhport, desc_ep));
#else
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003850:	4618      	mov	r0, r3
 8003852:	f003 fa27 	bl	8006ca4 <usbd_edpt_open>
 8003856:	4603      	mov	r3, r0
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <audiod_set_interface+0x19c>
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <audiod_set_interface+0x30c>)
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d000      	beq.n	8003874 <audiod_set_interface+0x198>
 8003872:	be00      	bkpt	0x0000
 8003874:	2300      	movs	r3, #0
 8003876:	e0c2      	b.n	80039fe <audiod_set_interface+0x322>
#endif
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	789b      	ldrb	r3, [r3, #2]
 800387c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 8003880:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f003 fbdb 	bl	8007044 <usbd_edpt_clear_stall>
 800388e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800389a:	09db      	lsrs	r3, r3, #7
 800389c:	b2db      	uxtb	r3, r3

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d12d      	bne.n	80038fe <audiod_set_interface+0x222>
 80038a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a4:	78db      	ldrb	r3, [r3, #3]
 80038a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d126      	bne.n	80038fe <audiod_set_interface+0x222>
          {
            // Save address
            audio->ep_in = ep_addr;
 80038b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80038b6:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 80038b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ba:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80038be:	731a      	strb	r2, [r3, #12]
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	889b      	ldrh	r3, [r3, #4]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ce:	b29a      	uxth	r2, r3
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 80038d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d2:	815a      	strh	r2, [r3, #10]
    #endif
  #endif

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	461a      	mov	r2, r3
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4a3f      	ldr	r2, [pc, #252]	; (80039e0 <audiod_set_interface+0x304>)
 80038e2:	441a      	add	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fd33 	bl	8003354 <audiod_tx_done_cb>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f083 0301 	eor.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <audiod_set_interface+0x222>
 80038fa:	2300      	movs	r3, #0
 80038fc:	e07f      	b.n	80039fe <audiod_set_interface+0x322>
 80038fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	b2db      	uxtb	r3, r3
          }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

          if (tu_edpt_dir(ep_addr) == TUSB_DIR_OUT)     // Checking usage not necessary
 800390e:	2b00      	cmp	r3, #0
 8003910:	d123      	bne.n	800395a <audiod_set_interface+0x27e>
          {
            // Save address
            audio->ep_out = ep_addr;
 8003912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003914:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003918:	735a      	strb	r2, [r3, #13]
            audio->ep_out_as_intf_num = itf;
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003920:	741a      	strb	r2, [r3, #16]
 8003922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003924:	623b      	str	r3, [r7, #32]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	889b      	ldrh	r3, [r3, #4]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003930:	b29a      	uxth	r2, r3
            audio->ep_out_sz = tu_edpt_packet_size(desc_ep);
 8003932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003934:	81da      	strh	r2, [r3, #14]

            // Prepare for incoming data
  #if USE_LINEAR_BUFFER_RX
            TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_out, audio->lin_buf_out, audio->ep_out_sz), false);
  #else
            TU_VERIFY(usbd_edpt_xfer_fifo(rhport, audio->ep_out, &audio->ep_out_ff, audio->ep_out_sz), false);
 8003936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003938:	7b59      	ldrb	r1, [r3, #13]
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	f103 0220 	add.w	r2, r3, #32
 8003940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003942:	89db      	ldrh	r3, [r3, #14]
 8003944:	79f8      	ldrb	r0, [r7, #7]
 8003946:	f003 fabb 	bl	8006ec0 <usbd_edpt_xfer_fifo>
 800394a:	4603      	mov	r3, r0
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <audiod_set_interface+0x27e>
 8003956:	2300      	movs	r3, #0
 8003958:	e051      	b.n	80039fe <audiod_set_interface+0x322>
            if (tud_audio_feedback_interval_isr) usbd_sof_enable(rhport, true);
          }
  #endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 800395a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800395e:	3301      	adds	r3, #1
 8003960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        }
        p_desc = tu_desc_next(p_desc);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4413      	add	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8003978:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800397c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003980:	429a      	cmp	r2, r3
 8003982:	d204      	bcs.n	800398e <audiod_set_interface+0x2b2>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003988:	429a      	cmp	r2, r3
 800398a:	f63f af55 	bhi.w	8003838 <audiod_set_interface+0x15c>
      }

      TU_VERIFY(foundEPs == nEps);
 800398e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003992:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <audiod_set_interface+0x2c2>
 800399a:	2300      	movs	r3, #0
 800399c:	e02f      	b.n	80039fe <audiod_set_interface+0x322>

      // Invoke one callback for a final set interface
      if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <audiod_set_interface+0x310>)
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d025      	beq.n	80039f0 <audiod_set_interface+0x314>
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd fcb9 	bl	8001320 <tud_audio_set_itf_cb>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f083 0301 	eor.w	r3, r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01a      	beq.n	80039f0 <audiod_set_interface+0x314>
 80039ba:	2300      	movs	r3, #0
 80039bc:	e01f      	b.n	80039fe <audiod_set_interface+0x322>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f63f af10 	bhi.w	80037fc <audiod_set_interface+0x120>
 80039dc:	e009      	b.n	80039f2 <audiod_set_interface+0x316>
 80039de:	bf00      	nop
 80039e0:	2000183c 	.word	0x2000183c
 80039e4:	080012d1 	.word	0x080012d1
 80039e8:	e000edf0 	.word	0xe000edf0
 80039ec:	08001321 	.word	0x08001321
      break;
 80039f0:	bf00      	nop
    }
  }
  if (disable) usbd_sof_enable(rhport, false);
#endif

  tud_control_status(rhport, p_request);
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fc16 	bl	8007228 <tud_control_status>

  return true;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3758      	adds	r7, #88	; 0x58
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop

08003a08 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	71fb      	strb	r3, [r7, #7]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	f040 809d 	bne.w	8003b5e <audiod_control_complete+0x156>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 8095 	bne.w	8003b5e <audiod_control_complete+0x156>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d002      	beq.n	8003a48 <audiod_control_complete+0x40>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d057      	beq.n	8003af6 <audiod_control_complete+0xee>
 8003a46:	e07f      	b.n	8003b48 <audiod_control_complete+0x140>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	889b      	ldrh	r3, [r3, #4]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	75bb      	strb	r3, [r7, #22]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	889b      	ldrh	r3, [r3, #4]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	757b      	strb	r3, [r7, #21]

        if (entityID != 0)
 8003a5c:	7d7b      	ldrb	r3, [r7, #21]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d024      	beq.n	8003aac <audiod_control_complete+0xa4>
        {
          if (tud_audio_set_req_entity_cb)
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <audiod_control_complete+0x160>)
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01f      	beq.n	8003aa8 <audiod_control_complete+0xa0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003a68:	f107 020f 	add.w	r2, r7, #15
 8003a6c:	7d79      	ldrb	r1, [r7, #21]
 8003a6e:	7dbb      	ldrb	r3, [r7, #22]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fb57 	bl	8004124 <audiod_verify_entity_exists>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <audiod_control_complete+0x7e>
 8003a82:	2300      	movs	r3, #0
 8003a84:	e06c      	b.n	8003b60 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4a38      	ldr	r2, [pc, #224]	; (8003b6c <audiod_control_complete+0x164>)
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a5b      	subs	r3, r3, r1
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	3314      	adds	r3, #20
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fbef 	bl	8001282 <tud_audio_set_req_entity_cb>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	e05b      	b.n	8003b60 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e059      	b.n	8003b60 <audiod_control_complete+0x158>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <audiod_control_complete+0x168>)
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01f      	beq.n	8003af2 <audiod_control_complete+0xea>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003ab2:	f107 020f 	add.w	r2, r7, #15
 8003ab6:	7dbb      	ldrb	r3, [r7, #22]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fbaa 	bl	8004214 <audiod_verify_itf_exists>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <audiod_control_complete+0xc8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	e047      	b.n	8003b60 <audiod_control_complete+0x158>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <audiod_control_complete+0x164>)
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a5b      	subs	r3, r3, r1
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3314      	adds	r3, #20
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f3af 8000 	nop.w
 8003aee:	4603      	mov	r3, r0
 8003af0:	e036      	b.n	8003b60 <audiod_control_complete+0x158>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8003af2:	2300      	movs	r3, #0
 8003af4:	e034      	b.n	8003b60 <audiod_control_complete+0x158>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	889b      	ldrh	r3, [r3, #4]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	75fb      	strb	r3, [r7, #23]

        if (tud_audio_set_req_ep_cb)
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <audiod_control_complete+0x16c>)
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01f      	beq.n	8003b44 <audiod_control_complete+0x13c>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003b04:	f107 020f 	add.w	r2, r7, #15
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fbeb 	bl	80042e8 <audiod_verify_ep_exists>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <audiod_control_complete+0x11a>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e01e      	b.n	8003b60 <audiod_control_complete+0x158>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	4619      	mov	r1, r3
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <audiod_control_complete+0x164>)
 8003b28:	460b      	mov	r3, r1
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	1a5b      	subs	r3, r3, r1
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	3314      	adds	r3, #20
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f3af 8000 	nop.w
 8003b40:	4603      	mov	r3, r0
 8003b42:	e00d      	b.n	8003b60 <audiod_control_complete+0x158>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8003b44:	2300      	movs	r3, #0
 8003b46:	e00b      	b.n	8003b60 <audiod_control_complete+0x158>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <audiod_control_complete+0x170>)
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d000      	beq.n	8003b5a <audiod_control_complete+0x152>
 8003b58:	be00      	bkpt	0x0000
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <audiod_control_complete+0x158>
    }
  }
  return true;
 8003b5e:	2301      	movs	r3, #1
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08001283 	.word	0x08001283
 8003b6c:	2000183c 	.word	0x2000183c
	...
 8003b78:	e000edf0 	.word	0xe000edf0

08003b7c <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <audiod_control_request+0x5a>
  {
    switch (p_request->bRequest)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d002      	beq.n	8003ba4 <audiod_control_request+0x28>
 8003b9e:	2b0b      	cmp	r3, #11
 8003ba0:	d007      	beq.n	8003bb2 <audiod_control_request+0x36>
 8003ba2:	e00d      	b.n	8003bc0 <audiod_control_request+0x44>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fd59 	bl	8003660 <audiod_get_interface>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	e0d5      	b.n	8003d5e <audiod_control_request+0x1e2>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fd90 	bl	80036dc <audiod_set_interface>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	e0ce      	b.n	8003d5e <audiod_control_request+0x1e2>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8003bc0:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <audiod_control_request+0x1ec>)
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d000      	beq.n	8003bd2 <audiod_control_request+0x56>
 8003bd0:	be00      	bkpt	0x0000
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e0c3      	b.n	8003d5e <audiod_control_request+0x1e2>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 80b2 	bne.w	8003d4a <audiod_control_request+0x1ce>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	889b      	ldrh	r3, [r3, #4]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	76fb      	strb	r3, [r7, #27]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d002      	beq.n	8003c02 <audiod_control_request+0x86>
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d04d      	beq.n	8003c9c <audiod_control_request+0x120>
 8003c00:	e072      	b.n	8003ce8 <audiod_control_request+0x16c>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	889b      	ldrh	r3, [r3, #4]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	767b      	strb	r3, [r7, #25]

        // Verify if entity is present
        if (entityID != 0)
 8003c0e:	7e7b      	ldrb	r3, [r7, #25]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d021      	beq.n	8003c58 <audiod_control_request+0xdc>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003c14:	f107 020f 	add.w	r2, r7, #15
 8003c18:	7e79      	ldrb	r1, [r7, #25]
 8003c1a:	7efb      	ldrb	r3, [r7, #27]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fa81 	bl	8004124 <audiod_verify_entity_exists>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <audiod_control_request+0xb6>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e095      	b.n	8003d5e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05e      	beq.n	8003cfe <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_entity_cb)
 8003c40:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <audiod_control_request+0x1f0>)
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <audiod_control_request+0xd8>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd faf6 	bl	800123c <tud_audio_get_req_entity_cb>
 8003c50:	4603      	mov	r3, r0
 8003c52:	e084      	b.n	8003d5e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8003c54:	2300      	movs	r3, #0
 8003c56:	e082      	b.n	8003d5e <audiod_control_request+0x1e2>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003c58:	f107 020f 	add.w	r2, r7, #15
 8003c5c:	7efb      	ldrb	r3, [r7, #27]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fad7 	bl	8004214 <audiod_verify_itf_exists>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f083 0301 	eor.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <audiod_control_request+0xfa>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e073      	b.n	8003d5e <audiod_control_request+0x1e2>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03c      	beq.n	8003cfe <audiod_control_request+0x182>
          {
            if (tud_audio_get_req_itf_cb)
 8003c84:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <audiod_control_request+0x1f4>)
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <audiod_control_request+0x11c>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f3af 8000 	nop.w
 8003c94:	4603      	mov	r3, r0
 8003c96:	e062      	b.n	8003d5e <audiod_control_request+0x1e2>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e060      	b.n	8003d5e <audiod_control_request+0x1e2>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	889b      	ldrh	r3, [r3, #4]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	76bb      	strb	r3, [r7, #26]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003ca4:	f107 020f 	add.w	r2, r7, #15
 8003ca8:	7ebb      	ldrb	r3, [r7, #26]
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fb1b 	bl	80042e8 <audiod_verify_ep_exists>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f083 0301 	eor.w	r3, r3, #1
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <audiod_control_request+0x146>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e04d      	b.n	8003d5e <audiod_control_request+0x1e2>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d018      	beq.n	8003d02 <audiod_control_request+0x186>
        {
          if (tud_audio_get_req_ep_cb)
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <audiod_control_request+0x1f8>)
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <audiod_control_request+0x168>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	e03c      	b.n	8003d5e <audiod_control_request+0x1e2>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e03a      	b.n	8003d5e <audiod_control_request+0x1e2>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <audiod_control_request+0x1ec>)
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d000      	beq.n	8003cfa <audiod_control_request+0x17e>
 8003cf8:	be00      	bkpt	0x0000
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e02f      	b.n	8003d5e <audiod_control_request+0x1e2>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <audiod_control_request+0x188>
      break;
 8003d02:	bf00      	nop
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <audiod_control_request+0x1fc>)
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	1a5b      	subs	r3, r3, r1
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	3314      	adds	r3, #20
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	4916      	ldr	r1, [pc, #88]	; (8003d78 <audiod_control_request+0x1fc>)
 8003d1e:	4603      	mov	r3, r0
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a1b      	subs	r3, r3, r0
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	3318      	adds	r3, #24
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	79f8      	ldrb	r0, [r7, #7]
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	f003 faeb 	bl	800730c <tud_control_xfer>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <audiod_control_request+0x1ca>
 8003d42:	2300      	movs	r3, #0
 8003d44:	e00b      	b.n	8003d5e <audiod_control_request+0x1e2>
    return true;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e009      	b.n	8003d5e <audiod_control_request+0x1e2>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <audiod_control_request+0x1ec>)
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d000      	beq.n	8003d5c <audiod_control_request+0x1e0>
 8003d5a:	be00      	bkpt	0x0000
  return false;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000edf0 	.word	0xe000edf0
 8003d6c:	0800123d 	.word	0x0800123d
	...
 8003d78:	2000183c 	.word	0x2000183c

08003d7c <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	603a      	str	r2, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 8003d8c:	79bb      	ldrb	r3, [r7, #6]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <audiod_control_xfer_cb+0x24>
  {
    return audiod_control_request(rhport, request);
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fef0 	bl	8003b7c <audiod_control_request>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	e00a      	b.n	8003db6 <audiod_control_xfer_cb+0x3a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 8003da0:	79bb      	ldrb	r3, [r7, #6]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d106      	bne.n	8003db4 <audiod_control_xfer_cb+0x38>
  {
    return audiod_control_complete(rhport, request);
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fe2c 	bl	8003a08 <audiod_control_complete>
 8003db0:	4603      	mov	r3, r0
 8003db2:	e000      	b.n	8003db6 <audiod_control_xfer_cb+0x3a>
  }

  return true;
 8003db4:	2301      	movs	r3, #1
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	71bb      	strb	r3, [r7, #6]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	717b      	strb	r3, [r7, #5]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e038      	b.n	8003e4c <audiod_xfer_cb+0x8c>
  {
    audiod_function_t* audio = &_audiod_fct[func_id];
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <audiod_xfer_cb+0x9c>)
 8003de6:	4413      	add	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (audio->ep_in == ep_addr && audio->alt_setting != 0)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	7a1b      	ldrb	r3, [r3, #8]
 8003dee:	79ba      	ldrb	r2, [r7, #6]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d112      	bne.n	8003e1a <audiod_xfer_cb+0x5a>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <audiod_xfer_cb+0x5a>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, audio));
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff faa7 	bl	8003354 <audiod_tx_done_cb>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f083 0301 	eor.w	r3, r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <audiod_xfer_cb+0x56>
 8003e12:	2300      	movs	r3, #0
 8003e14:	e01e      	b.n	8003e54 <audiod_xfer_cb+0x94>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e01c      	b.n	8003e54 <audiod_xfer_cb+0x94>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_OUT

    // New audio packet received
    if (audio->ep_out == ep_addr)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	7b5b      	ldrb	r3, [r3, #13]
 8003e1e:	79ba      	ldrb	r2, [r7, #6]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d110      	bne.n	8003e46 <audiod_xfer_cb+0x86>
    {
      TU_VERIFY(audiod_rx_done_cb(rhport, audio, (uint16_t) xferred_bytes));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f9ed 	bl	800320c <audiod_rx_done_cb>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <audiod_xfer_cb+0x82>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e008      	b.n	8003e54 <audiod_xfer_cb+0x94>
      return true;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e006      	b.n	8003e54 <audiod_xfer_cb+0x94>
  for (uint8_t func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0c3      	beq.n	8003dda <audiod_xfer_cb+0x1a>
    }
#endif
#endif
  }

  return false;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000183c 	.word	0x2000183c

08003e60 <audiod_sof_isr>:
  return feedback;
}
#endif

TU_ATTR_FAST_FUNC void audiod_sof_isr (uint8_t rhport, uint32_t frame_count)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
        if(tud_audio_feedback_interval_isr) tud_audio_feedback_interval_isr(i, frame_count, audio->feedback.frame_shift);
      }
    }
  }
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT && CFG_TUD_AUDIO_ENABLE_FEEDBACK_EP
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	; 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	81bb      	strh	r3, [r7, #12]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <tud_audio_buffer_and_schedule_control_xfer+0x26>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e0b2      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	889b      	ldrh	r3, [r3, #4]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <tud_audio_buffer_and_schedule_control_xfer+0x44>
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d02c      	beq.n	8003f14 <tud_audio_buffer_and_schedule_control_xfer+0x9c>
 8003eba:	e040      	b.n	8003f3e <tud_audio_buffer_and_schedule_control_xfer+0xc6>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	889b      	ldrh	r3, [r3, #4]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      // Verify if entity is present
      if (entityID != 0)
 8003eca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <tud_audio_buffer_and_schedule_control_xfer+0x7c>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8003ed2:	f107 0217 	add.w	r2, r7, #23
 8003ed6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f920 	bl	8004124 <audiod_verify_entity_exists>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f083 0301 	eor.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d031      	beq.n	8003f54 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e087      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8003ef4:	f107 0217 	add.w	r2, r7, #23
 8003ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f988 	bl	8004214 <audiod_verify_itf_exists>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f083 0301 	eor.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d021      	beq.n	8003f54 <tud_audio_buffer_and_schedule_control_xfer+0xdc>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e077      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	889b      	ldrh	r3, [r3, #4]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003f1e:	f107 0217 	add.w	r2, r7, #23
 8003f22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f9dd 	bl	80042e8 <audiod_verify_ep_exists>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <tud_audio_buffer_and_schedule_control_xfer+0xe0>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e062      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8003f3e:	4b33      	ldr	r3, [pc, #204]	; (800400c <tud_audio_buffer_and_schedule_control_xfer+0x194>)
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d000      	beq.n	8003f50 <tud_audio_buffer_and_schedule_control_xfer+0xd8>
 8003f4e:	be00      	bkpt	0x0000
 8003f50:	2300      	movs	r3, #0
 8003f52:	e057      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>
    break;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <tud_audio_buffer_and_schedule_control_xfer+0xe2>
    break;
 8003f58:	bf00      	nop
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003f60:	460b      	mov	r3, r1
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	1a5b      	subs	r3, r3, r1
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	89ba      	ldrh	r2, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90a      	bls.n	8003f8c <tud_audio_buffer_and_schedule_control_xfer+0x114>
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4a25      	ldr	r2, [pc, #148]	; (8004010 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	1a5b      	subs	r3, r3, r1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	3318      	adds	r3, #24
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	81bb      	strh	r3, [r7, #12]

  // Copy into buffer
  TU_VERIFY(0 == tu_memcpy_s(_audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz, data, (size_t)len));
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003f92:	460b      	mov	r3, r1
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a5b      	subs	r3, r3, r1
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	491a      	ldr	r1, [pc, #104]	; (8004010 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	1a1b      	subs	r3, r3, r0
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	89bb      	ldrh	r3, [r7, #12]
 8003fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fba:	6239      	str	r1, [r7, #32]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	61fa      	str	r2, [r7, #28]
 8003fc0:	61bb      	str	r3, [r7, #24]
  if (count > destsz) {
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d202      	bcs.n	8003fd0 <tud_audio_buffer_and_schedule_control_xfer+0x158>
    return -1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	e005      	b.n	8003fdc <tud_audio_buffer_and_schedule_control_xfer+0x164>
  memcpy(dest, src, count);
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	69f9      	ldr	r1, [r7, #28]
 8003fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fd6:	f005 f83b 	bl	8009050 <memcpy>
  return 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <tud_audio_buffer_and_schedule_control_xfer+0x16c>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e00f      	b.n	8004004 <tud_audio_buffer_and_schedule_control_xfer+0x18c>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8003fea:	460b      	mov	r3, r1
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	1a5b      	subs	r3, r3, r1
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	7bf8      	ldrb	r0, [r7, #15]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	f003 f985 	bl	800730c <tud_control_xfer>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3730      	adds	r7, #48	; 0x30
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000edf0 	.word	0xe000edf0
 8004010:	2000183c 	.word	0x2000183c

08004014 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8004014:	b480      	push	{r7}
 8004016:	b08d      	sub	sp, #52	; 0x34
 8004018:	af00      	add	r7, sp, #0
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
  if (audio->p_desc)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d048      	beq.n	80040be <audiod_get_AS_interface_index+0xaa>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	8a5b      	ldrh	r3, [r3, #18]
 8004034:	3b08      	subs	r3, #8
 8004036:	4413      	add	r3, r2
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	88db      	ldrh	r3, [r3, #6]
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	4413      	add	r3, r2
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t tmp = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while (p_desc < p_desc_end)
 8004064:	e027      	b.n	80040b6 <audiod_get_AS_interface_index+0xa2>
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	3301      	adds	r3, #1
 800406e:	781b      	ldrb	r3, [r3, #0]
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8004070:	2b04      	cmp	r3, #4
 8004072:	d116      	bne.n	80040a2 <audiod_get_AS_interface_index+0x8e>
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d112      	bne.n	80040a2 <audiod_get_AS_interface_index+0x8e>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	789b      	ldrb	r3, [r3, #2]
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	429a      	cmp	r2, r3
 8004084:	d108      	bne.n	8004098 <audiod_get_AS_interface_index+0x84>
        {
          *idxItf = tmp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800408c:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	601a      	str	r2, [r3, #0]
          return true;
 8004094:	2301      	movs	r3, #1
 8004096:	e013      	b.n	80040c0 <audiod_get_AS_interface_index+0xac>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8004098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800409c:	3301      	adds	r3, #1
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
      }
      p_desc = tu_desc_next(p_desc);
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p_desc < p_desc_end)
 80040b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d3d3      	bcc.n	8004066 <audiod_get_AS_interface_index+0x52>
    }
  }
  return false;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3734      	adds	r7, #52	; 0x34
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
 80040e0:	e016      	b.n	8004110 <audiod_get_AS_interface_index_global+0x44>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 80040e2:	7dfa      	ldrb	r2, [r7, #23]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <audiod_get_AS_interface_index_global+0x54>)
 80040ee:	1899      	adds	r1, r3, r2
 80040f0:	7bf8      	ldrb	r0, [r7, #15]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	f7ff ff8d 	bl	8004014 <audiod_get_AS_interface_index>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <audiod_get_AS_interface_index_global+0x3e>
    {
      *func_id = i;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	7dfa      	ldrb	r2, [r7, #23]
 8004104:	701a      	strb	r2, [r3, #0]
      return true;
 8004106:	2301      	movs	r3, #1
 8004108:	e006      	b.n	8004118 <audiod_get_AS_interface_index_global+0x4c>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	3301      	adds	r3, #1
 800410e:	75fb      	strb	r3, [r7, #23]
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0e5      	beq.n	80040e2 <audiod_get_AS_interface_index_global+0x16>
    }
  }

  return false;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000183c 	.word	0x2000183c

08004124 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8004124:	b480      	push	{r7}
 8004126:	b08d      	sub	sp, #52	; 0x34
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	460b      	mov	r3, r1
 8004132:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8004134:	2300      	movs	r3, #0
 8004136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800413a:	e05d      	b.n	80041f8 <audiod_verify_entity_exists+0xd4>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800413c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004140:	4933      	ldr	r1, [pc, #204]	; (8004210 <audiod_verify_entity_exists+0xec>)
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	3304      	adds	r3, #4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d04c      	beq.n	80041ee <audiod_verify_entity_exists+0xca>
 8004154:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004158:	492d      	ldr	r1, [pc, #180]	; (8004210 <audiod_verify_entity_exists+0xec>)
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	3304      	adds	r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	789b      	ldrb	r3, [r3, #2]
 800416a:	79fa      	ldrb	r2, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d13e      	bne.n	80041ee <audiod_verify_entity_exists+0xca>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8004170:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004174:	4926      	ldr	r1, [pc, #152]	; (8004210 <audiod_verify_entity_exists+0xec>)
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	3304      	adds	r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4413      	add	r3, r2
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	88db      	ldrh	r3, [r3, #6]
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	4413      	add	r3, r2
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	623b      	str	r3, [r7, #32]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28

      while (p_desc < p_desc_end)
 80041b8:	e015      	b.n	80041e6 <audiod_verify_entity_exists+0xc2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	3303      	adds	r3, #3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	79ba      	ldrb	r2, [r7, #6]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d105      	bne.n	80041d2 <audiod_verify_entity_exists+0xae>
        {
          *func_id = i;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80041cc:	701a      	strb	r2, [r3, #0]
          return true;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e017      	b.n	8004202 <audiod_verify_entity_exists+0xde>
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p_desc < p_desc_end)
 80041e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3e5      	bcc.n	80041ba <audiod_verify_entity_exists+0x96>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80041ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041f2:	3301      	adds	r3, #1
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80041f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d09d      	beq.n	800413c <audiod_verify_entity_exists+0x18>
      }
    }
  }
  return false;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3734      	adds	r7, #52	; 0x34
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	2000183c 	.word	0x2000183c

08004214 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e054      	b.n	80042d0 <audiod_verify_itf_exists+0xbc>
  {
    if (_audiod_fct[i].p_desc)
 8004226:	7ffa      	ldrb	r2, [r7, #31]
 8004228:	492e      	ldr	r1, [pc, #184]	; (80042e4 <audiod_verify_itf_exists+0xd0>)
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d046      	beq.n	80042ca <audiod_verify_itf_exists+0xb6>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 800423c:	7ffa      	ldrb	r2, [r7, #31]
 800423e:	4929      	ldr	r1, [pc, #164]	; (80042e4 <audiod_verify_itf_exists+0xd0>)
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	440b      	add	r3, r1
 800424a:	3304      	adds	r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	61bb      	str	r3, [r7, #24]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8004250:	7ffa      	ldrb	r2, [r7, #31]
 8004252:	4924      	ldr	r1, [pc, #144]	; (80042e4 <audiod_verify_itf_exists+0xd0>)
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	3304      	adds	r3, #4
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	7ffa      	ldrb	r2, [r7, #31]
 8004264:	481f      	ldr	r0, [pc, #124]	; (80042e4 <audiod_verify_itf_exists+0xd0>)
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4403      	add	r3, r0
 8004270:	3312      	adds	r3, #18
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	3b08      	subs	r3, #8
 8004276:	440b      	add	r3, r1
 8004278:	617b      	str	r3, [r7, #20]

      while (p_desc < p_desc_end)
 800427a:	e022      	b.n	80042c2 <audiod_verify_itf_exists+0xae>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3301      	adds	r3, #1
 8004284:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8004286:	2b04      	cmp	r3, #4
 8004288:	d111      	bne.n	80042ae <audiod_verify_itf_exists+0x9a>
 800428a:	7ffa      	ldrb	r2, [r7, #31]
 800428c:	4915      	ldr	r1, [pc, #84]	; (80042e4 <audiod_verify_itf_exists+0xd0>)
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	789b      	ldrb	r3, [r3, #2]
 800429e:	79fa      	ldrb	r2, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d104      	bne.n	80042ae <audiod_verify_itf_exists+0x9a>
        {
          *func_id = i;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	7ffa      	ldrb	r2, [r7, #31]
 80042a8:	701a      	strb	r2, [r3, #0]
          return true;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e014      	b.n	80042d8 <audiod_verify_itf_exists+0xc4>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80042c0:	61bb      	str	r3, [r7, #24]
      while (p_desc < p_desc_end)
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3d8      	bcc.n	800427c <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	3301      	adds	r3, #1
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0a7      	beq.n	8004226 <audiod_verify_itf_exists+0x12>
      }
    }
  }
  return false;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3724      	adds	r7, #36	; 0x24
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	2000183c 	.word	0x2000183c

080042e8 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b08b      	sub	sp, #44	; 0x2c
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042fa:	e061      	b.n	80043c0 <audiod_verify_ep_exists+0xd8>
  {
    if (_audiod_fct[i].p_desc)
 80042fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004300:	4935      	ldr	r1, [pc, #212]	; (80043d8 <audiod_verify_ep_exists+0xf0>)
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	3304      	adds	r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d050      	beq.n	80043b6 <audiod_verify_ep_exists+0xce>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8004314:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004318:	492f      	ldr	r1, [pc, #188]	; (80043d8 <audiod_verify_ep_exists+0xf0>)
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	3304      	adds	r3, #4
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800432c:	482a      	ldr	r0, [pc, #168]	; (80043d8 <audiod_verify_ep_exists+0xf0>)
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4403      	add	r3, r0
 8004338:	3312      	adds	r3, #18
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	440b      	add	r3, r1
 800433e:	61fb      	str	r3, [r7, #28]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 8004340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004344:	4924      	ldr	r1, [pc, #144]	; (80043d8 <audiod_verify_ep_exists+0xf0>)
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	3304      	adds	r3, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	623b      	str	r3, [r7, #32]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	88db      	ldrh	r3, [r3, #6]
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	4413      	add	r3, r2
 8004372:	623b      	str	r3, [r7, #32]

      while (p_desc < p_desc_end)
 8004374:	e01b      	b.n	80043ae <audiod_verify_ep_exists+0xc6>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3301      	adds	r3, #1
 800437e:	781b      	ldrb	r3, [r3, #0]
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8004380:	2b05      	cmp	r3, #5
 8004382:	d10a      	bne.n	800439a <audiod_verify_ep_exists+0xb2>
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	789b      	ldrb	r3, [r3, #2]
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	d105      	bne.n	800439a <audiod_verify_ep_exists+0xb2>
        {
          *func_id = i;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004394:	701a      	strb	r2, [r3, #0]
          return true;
 8004396:	2301      	movs	r3, #1
 8004398:	e017      	b.n	80043ca <audiod_verify_ep_exists+0xe2>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	60fb      	str	r3, [r7, #12]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	60bb      	str	r3, [r7, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4413      	add	r3, r2
        }
        p_desc = tu_desc_next(p_desc);
 80043ac:	623b      	str	r3, [r7, #32]
      while (p_desc < p_desc_end)
 80043ae:	6a3a      	ldr	r2, [r7, #32]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3df      	bcc.n	8004376 <audiod_verify_ep_exists+0x8e>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80043b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ba:	3301      	adds	r3, #1
 80043bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d099      	beq.n	80042fc <audiod_verify_ep_exists+0x14>
      }
    }
  }
  return false;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	372c      	adds	r7, #44	; 0x2c
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000183c 	.word	0x2000183c

080043dc <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e00e      	b.n	8004408 <audiod_get_audio_fct_idx+0x2c>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4a09      	ldr	r2, [pc, #36]	; (800441c <audiod_get_audio_fct_idx+0x40>)
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d101      	bne.n	8004402 <audiod_get_audio_fct_idx+0x26>
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	e006      	b.n	8004410 <audiod_get_audio_fct_idx+0x34>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	3301      	adds	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ed      	beq.n	80043ea <audiod_get_audio_fct_idx+0xe>
  }
  return 0;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000183c 	.word	0x2000183c

08004420 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3310      	adds	r3, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f001 f9a6 	bl	8005782 <tu_fifo_remaining>
 8004436:	4603      	mov	r3, r0
 8004438:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 800443a:	89bb      	ldrh	r3, [r7, #12]
 800443c:	2b3f      	cmp	r3, #63	; 0x3f
 800443e:	d801      	bhi.n	8004444 <_prep_out_transaction+0x24>
 8004440:	2300      	movs	r3, #0
 8004442:	e02b      	b.n	800449c <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	78da      	ldrb	r2, [r3, #3]
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fc6d 	bl	8006d2c <usbd_edpt_claim>
 8004452:	4603      	mov	r3, r0
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <_prep_out_transaction+0x42>
 800445e:	2300      	movs	r3, #0
 8004460:	e01c      	b.n	800449c <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3310      	adds	r3, #16
 8004466:	4618      	mov	r0, r3
 8004468:	f001 f98b 	bl	8005782 <tu_fifo_remaining>
 800446c:	4603      	mov	r3, r0
 800446e:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8004470:	89bb      	ldrh	r3, [r7, #12]
 8004472:	2b3f      	cmp	r3, #63	; 0x3f
 8004474:	d90a      	bls.n	800448c <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	78d9      	ldrb	r1, [r3, #3]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004480:	7bf8      	ldrb	r0, [r7, #15]
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	f002 fca6 	bl	8006dd4 <usbd_edpt_xfer>
 8004488:	4603      	mov	r3, r0
 800448a:	e007      	b.n	800449c <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	78da      	ldrb	r2, [r3, #3]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f002 fc73 	bl	8006d80 <usbd_edpt_release>

    return false;
 800449a:	2300      	movs	r3, #0
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 80044ae:	f001 faa9 	bl	8005a04 <tud_mounted>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <tud_cdc_n_connected+0x28>
 80044b8:	f001 fab6 	bl	8005a28 <tud_suspended>
 80044bc:	4603      	mov	r3, r0
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <tud_cdc_n_connected+0x28>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <tud_cdc_n_connected+0x2a>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01a      	beq.n	800450e <tud_cdc_n_connected+0x6a>
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <tud_cdc_n_connected+0x7c>)
 80044dc:	f44f 7194 	mov.w	r1, #296	; 0x128
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	2300      	movs	r3, #0
 80044ee:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <tud_cdc_n_connected+0x6a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <tud_cdc_n_connected+0x6c>
 800450e:	2300      	movs	r3, #0
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20001874 	.word	0x20001874

08004524 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	3310      	adds	r3, #16
 800453a:	4a05      	ldr	r2, [pc, #20]	; (8004550 <tud_cdc_n_available+0x2c>)
 800453c:	4413      	add	r3, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f8aa 	bl	8005698 <tu_fifo_count>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20001874 	.word	0x20001874

08004554 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <tud_cdc_n_read+0x44>)
 800456e:	4413      	add	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	3310      	adds	r3, #16
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	b292      	uxth	r2, r2
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f001 f95c 	bl	800583a <tu_fifo_read_n>
 8004582:	4603      	mov	r3, r0
 8004584:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff4a 	bl	8004420 <_prep_out_transaction>
  return num_read;
 800458c:	693b      	ldr	r3, [r7, #16]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20001874 	.word	0x20001874

0800459c <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	f44f 7294 	mov.w	r2, #296	; 0x128
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <tud_cdc_n_write+0x54>)
 80045b6:	4413      	add	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	331c      	adds	r3, #28
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	b292      	uxth	r2, r2
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f99f 	bl	8005908 <tu_fifo_write_n>
 80045ca:	4603      	mov	r3, r0
 80045cc:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	331c      	adds	r3, #28
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f860 	bl	8005698 <tu_fifo_count>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b3f      	cmp	r3, #63	; 0x3f
 80045dc:	d903      	bls.n	80045e6 <tud_cdc_n_write+0x4a>
  {
    tud_cdc_n_write_flush(itf);
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f807 	bl	80045f4 <tud_cdc_n_write_flush>
  }

  return ret;
 80045e6:	8a7b      	ldrh	r3, [r7, #18]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20001874 	.word	0x20001874

080045f4 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	4a36      	ldr	r2, [pc, #216]	; (80046e4 <tud_cdc_n_write_flush+0xf0>)
 800460a:	4413      	add	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	f001 f9f9 	bl	8005a04 <tud_mounted>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <tud_cdc_n_write_flush+0x38>
 8004618:	f001 fa06 	bl	8005a28 <tud_suspended>
 800461c:	4603      	mov	r3, r0
 800461e:	f083 0301 	eor.w	r3, r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <tud_cdc_n_write_flush+0x38>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <tud_cdc_n_write_flush+0x3a>
 800462c:	2300      	movs	r3, #0
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8004634:	f083 0301 	eor.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <tud_cdc_n_write_flush+0x4e>
 800463e:	2300      	movs	r3, #0
 8004640:	e04c      	b.n	80046dc <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	331c      	adds	r3, #28
 8004646:	4618      	mov	r0, r3
 8004648:	f001 f826 	bl	8005698 <tu_fifo_count>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <tud_cdc_n_write_flush+0x62>
 8004652:	2300      	movs	r3, #0
 8004654:	e042      	b.n	80046dc <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	789a      	ldrb	r2, [r3, #2]
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f002 fb62 	bl	8006d2c <usbd_edpt_claim>
 8004668:	4603      	mov	r3, r0
 800466a:	f083 0301 	eor.w	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <tud_cdc_n_write_flush+0x84>
 8004674:	2300      	movs	r3, #0
 8004676:	e031      	b.n	80046dc <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f103 001c 	add.w	r0, r3, #28
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	33e8      	adds	r3, #232	; 0xe8
 8004682:	2240      	movs	r2, #64	; 0x40
 8004684:	4619      	mov	r1, r3
 8004686:	f001 f8d8 	bl	800583a <tu_fifo_read_n>
 800468a:	4603      	mov	r3, r0
 800468c:	823b      	strh	r3, [r7, #16]

  if ( count )
 800468e:	8a3b      	ldrh	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	7899      	ldrb	r1, [r3, #2]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800469e:	8a3b      	ldrh	r3, [r7, #16]
 80046a0:	7cf8      	ldrb	r0, [r7, #19]
 80046a2:	f002 fb97 	bl	8006dd4 <usbd_edpt_xfer>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <tud_cdc_n_write_flush+0xd4>
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <tud_cdc_n_write_flush+0xf4>)
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d000      	beq.n	80046c4 <tud_cdc_n_write_flush+0xd0>
 80046c2:	be00      	bkpt	0x0000
 80046c4:	2300      	movs	r3, #0
 80046c6:	e009      	b.n	80046dc <tud_cdc_n_write_flush+0xe8>
    return count;
 80046c8:	8a3b      	ldrh	r3, [r7, #16]
 80046ca:	e007      	b.n	80046dc <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	789a      	ldrb	r2, [r3, #2]
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 fb53 	bl	8006d80 <usbd_edpt_release>
    return 0;
 80046da:	2300      	movs	r3, #0
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20001874 	.word	0x20001874
 80046e8:	e000edf0 	.word	0xe000edf0

080046ec <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	3318      	adds	r3, #24
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <tud_cdc_n_write_available+0x2c>)
 8004704:	4413      	add	r3, r2
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f83a 	bl	8005782 <tu_fifo_remaining>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20001874 	.word	0x20001874

0800471c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8004722:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004726:	2100      	movs	r1, #0
 8004728:	4820      	ldr	r0, [pc, #128]	; (80047ac <cdcd_init+0x90>)
 800472a:	f004 fc9f 	bl	800906c <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800472e:	2300      	movs	r3, #0
 8004730:	71fb      	strb	r3, [r7, #7]
 8004732:	e032      	b.n	800479a <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	f44f 7294 	mov.w	r2, #296	; 0x128
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <cdcd_init+0x90>)
 8004740:	4413      	add	r3, r2
 8004742:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	22ff      	movs	r2, #255	; 0xff
 8004748:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004750:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2208      	movs	r2, #8
 8004762:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f103 0010 	add.w	r0, r3, #16
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004770:	2300      	movs	r3, #0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2301      	movs	r3, #1
 8004776:	2240      	movs	r2, #64	; 0x40
 8004778:	f000 fafc 	bl	8004d74 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f103 001c 	add.w	r0, r3, #28
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8004788:	2301      	movs	r3, #1
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	f000 faf0 	bl	8004d74 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	3301      	adds	r3, #1
 8004798:	71fb      	strb	r3, [r7, #7]
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0c9      	beq.n	8004734 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20001874 	.word	0x20001874

080047b0 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	e01f      	b.n	8004800 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a11      	ldr	r2, [pc, #68]	; (8004810 <cdcd_reset+0x60>)
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80047d0:	2205      	movs	r2, #5
 80047d2:	2100      	movs	r1, #0
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f004 fc49 	bl	800906c <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3310      	adds	r3, #16
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 f8b6 	bl	8005950 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	331c      	adds	r3, #28
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f8b1 	bl	8005950 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	331c      	adds	r3, #28
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f8bc 	bl	8005972 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	3301      	adds	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0dc      	beq.n	80047c0 <cdcd_reset+0x10>
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20001874 	.word	0x20001874

08004814 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b09a      	sub	sp, #104	; 0x68
 8004818:	af02      	add	r7, sp, #8
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
 8004820:	4613      	mov	r3, r2
 8004822:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	795b      	ldrb	r3, [r3, #5]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d103      	bne.n	8004834 <cdcd_open+0x20>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	799b      	ldrb	r3, [r3, #6]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d001      	beq.n	8004838 <cdcd_open+0x24>
 8004834:	2300      	movs	r3, #0
 8004836:	e0e1      	b.n	80049fc <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 800483c:	2300      	movs	r3, #0
 800483e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8004842:	e01a      	b.n	800487a <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8004844:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004848:	4a6e      	ldr	r2, [pc, #440]	; (8004a04 <cdcd_open+0x1f0>)
 800484a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3302      	adds	r3, #2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 800485c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004860:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004864:	fb02 f303 	mul.w	r3, r2, r3
 8004868:	4a66      	ldr	r2, [pc, #408]	; (8004a04 <cdcd_open+0x1f0>)
 800486a:	4413      	add	r3, r2
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800486e:	e008      	b.n	8004882 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8004870:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004874:	3301      	adds	r3, #1
 8004876:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800487a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0e0      	beq.n	8004844 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8004882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <cdcd_open+0x8a>
 8004888:	4b5f      	ldr	r3, [pc, #380]	; (8004a08 <cdcd_open+0x1f4>)
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d000      	beq.n	800489a <cdcd_open+0x86>
 8004898:	be00      	bkpt	0x0000
 800489a:	2300      	movs	r3, #0
 800489c:	e0ae      	b.n	80049fc <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	789a      	ldrb	r2, [r3, #2]
 80048a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a4:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80048a6:	2309      	movs	r3, #9
 80048a8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 80048be:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80048c0:	e013      	b.n	80048ea <cdcd_open+0xd6>
 80048c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80048d0:	4413      	add	r3, r2
 80048d2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80048de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80048e8:	657b      	str	r3, [r7, #84]	; 0x54
 80048ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	3301      	adds	r3, #1
 80048f2:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 80048f4:	2b24      	cmp	r3, #36	; 0x24
 80048f6:	d104      	bne.n	8004902 <cdcd_open+0xee>
 80048f8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80048fc:	88bb      	ldrh	r3, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d9df      	bls.n	80048c2 <cdcd_open+0xae>
 8004902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	3301      	adds	r3, #1
 800490a:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800490c:	2b05      	cmp	r3, #5
 800490e:	d12f      	bne.n	8004970 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8004910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004912:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004918:	4618      	mov	r0, r3
 800491a:	f002 f9c3 	bl	8006ca4 <usbd_edpt_open>
 800491e:	4603      	mov	r3, r0
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <cdcd_open+0x12c>
 800492a:	4b37      	ldr	r3, [pc, #220]	; (8004a08 <cdcd_open+0x1f4>)
 800492c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d000      	beq.n	800493c <cdcd_open+0x128>
 800493a:	be00      	bkpt	0x0000
 800493c:	2300      	movs	r3, #0
 800493e:	e05d      	b.n	80049fc <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	789a      	ldrb	r2, [r3, #2]
 8004944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004946:	705a      	strb	r2, [r3, #1]
 8004948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494a:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8004950:	b29a      	uxth	r2, r3
 8004952:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004956:	4413      	add	r3, r2
 8004958:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	3301      	adds	r3, #1
 8004978:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800497a:	2b04      	cmp	r3, #4
 800497c:	d139      	bne.n	80049f2 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 800497e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004980:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004982:	2b0a      	cmp	r3, #10
 8004984:	d135      	bne.n	80049f2 <cdcd_open+0x1de>
 8004986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004988:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800498e:	b29a      	uxth	r2, r3
 8004990:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004994:	4413      	add	r3, r2
 8004996:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499c:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80049ac:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	3303      	adds	r3, #3
 80049b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049b4:	3202      	adds	r2, #2
 80049b6:	79f8      	ldrb	r0, [r7, #7]
 80049b8:	9201      	str	r2, [sp, #4]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2302      	movs	r3, #2
 80049be:	2202      	movs	r2, #2
 80049c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049c2:	f002 f907 	bl	8006bd4 <usbd_open_edpt_pair>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <cdcd_open+0x1d4>
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <cdcd_open+0x1f4>)
 80049d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d000      	beq.n	80049e4 <cdcd_open+0x1d0>
 80049e2:	be00      	bkpt	0x0000
 80049e4:	2300      	movs	r3, #0
 80049e6:	e009      	b.n	80049fc <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 80049e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80049ec:	330e      	adds	r3, #14
 80049ee:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 80049f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80049f4:	f7ff fd14 	bl	8004420 <_prep_out_transaction>

  return drv_len;
 80049f8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3760      	adds	r7, #96	; 0x60
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20001874 	.word	0x20001874
 8004a08:	e000edf0 	.word	0xe000edf0

08004a0c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	603a      	str	r2, [r7, #0]
 8004a16:	71fb      	strb	r3, [r7, #7]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d001      	beq.n	8004a2e <cdcd_control_xfer_cb+0x22>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e0cf      	b.n	8004bce <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8004a34:	4b68      	ldr	r3, [pc, #416]	; (8004bd8 <cdcd_control_xfer_cb+0x1cc>)
 8004a36:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <cdcd_control_xfer_cb+0x38>
 8004a40:	2300      	movs	r3, #0
 8004a42:	e0c4      	b.n	8004bce <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	889b      	ldrh	r3, [r3, #4]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d009      	beq.n	8004a68 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8004a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a64:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8004a66:	e7e7      	b.n	8004a38 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8004a68:	bf00      	nop
  }

  switch ( request->bRequest )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	3b20      	subs	r3, #32
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	f200 80a2 	bhi.w	8004bba <cdcd_control_xfer_cb+0x1ae>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <cdcd_control_xfer_cb+0x70>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a8d 	.word	0x08004a8d
 8004a80:	08004ac9 	.word	0x08004ac9
 8004a84:	08004ae1 	.word	0x08004ae1
 8004a88:	08004b89 	.word	0x08004b89
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004a8c:	79bb      	ldrb	r3, [r7, #6]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d108      	bne.n	8004aa4 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f103 0208 	add.w	r2, r3, #8
 8004a98:	79f8      	ldrb	r0, [r7, #7]
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	f002 fc35 	bl	800730c <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8004aa2:	e08c      	b.n	8004bbe <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8004aa4:	79bb      	ldrb	r3, [r7, #6]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	f040 8089 	bne.w	8004bbe <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <cdcd_control_xfer_cb+0x1d0>)
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8085 	beq.w	8004bbe <cdcd_control_xfer_cb+0x1b2>
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f103 0208 	add.w	r2, r3, #8
 8004aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f3af 8000 	nop.w
    break;
 8004ac6:	e07a      	b.n	8004bbe <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8004ac8:	79bb      	ldrb	r3, [r7, #6]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d179      	bne.n	8004bc2 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f103 0208 	add.w	r2, r3, #8
 8004ad4:	79f8      	ldrb	r0, [r7, #7]
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	f002 fc17 	bl	800730c <tud_control_xfer>
      }
    break;
 8004ade:	e070      	b.n	8004bc2 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8004ae0:	79bb      	ldrb	r3, [r7, #6]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f002 fb9c 	bl	8007228 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8004af0:	e069      	b.n	8004bc6 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8004af2:	79bb      	ldrb	r3, [r7, #6]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d166      	bne.n	8004bc6 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	885b      	ldrh	r3, [r3, #2]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	885b      	ldrh	r3, [r3, #2]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f103 021c 	add.w	r2, r3, #28
 8004b52:	7ffb      	ldrb	r3, [r7, #31]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 ff00 	bl	8005972 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <cdcd_control_xfer_cb+0x1d4>)
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d026      	beq.n	8004bc6 <cdcd_control_xfer_cb+0x1ba>
 8004b78:	7fba      	ldrb	r2, [r7, #30]
 8004b7a:	7ff9      	ldrb	r1, [r7, #31]
 8004b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc fc91 	bl	80014a8 <tud_cdc_line_state_cb>
    break;
 8004b86:	e01e      	b.n	8004bc6 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f002 fb48 	bl	8007228 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8004b98:	e017      	b.n	8004bca <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8004b9a:	79bb      	ldrb	r3, [r7, #6]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d114      	bne.n	8004bca <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <cdcd_control_xfer_cb+0x1d8>)
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <cdcd_control_xfer_cb+0x1be>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	885b      	ldrh	r3, [r3, #2]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f3af 8000 	nop.w
    break;
 8004bb8:	e007      	b.n	8004bca <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e007      	b.n	8004bce <cdcd_control_xfer_cb+0x1c2>
    break;
 8004bbe:	bf00      	nop
 8004bc0:	e004      	b.n	8004bcc <cdcd_control_xfer_cb+0x1c0>
    break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <cdcd_control_xfer_cb+0x1c0>
    break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <cdcd_control_xfer_cb+0x1c0>
    break;
 8004bca:	bf00      	nop
  }

  return true;
 8004bcc:	2301      	movs	r3, #1
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20001874 	.word	0x20001874
 8004bdc:	00000000 	.word	0x00000000
 8004be0:	080014a9 	.word	0x080014a9
 8004be4:	00000000 	.word	0x00000000

08004be8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	71fb      	strb	r3, [r7, #7]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	71bb      	strb	r3, [r7, #6]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	75fb      	strb	r3, [r7, #23]
 8004c00:	e014      	b.n	8004c2c <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	4a54      	ldr	r2, [pc, #336]	; (8004d60 <cdcd_xfer_cb+0x178>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	79ba      	ldrb	r2, [r7, #6]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d00a      	beq.n	8004c32 <cdcd_xfer_cb+0x4a>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	789b      	ldrb	r3, [r3, #2]
 8004c20:	79ba      	ldrb	r2, [r7, #6]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d005      	beq.n	8004c32 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0e7      	beq.n	8004c02 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <cdcd_xfer_cb+0x66>
 8004c38:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <cdcd_xfer_cb+0x17c>)
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d000      	beq.n	8004c4a <cdcd_xfer_cb+0x62>
 8004c48:	be00      	bkpt	0x0000
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e084      	b.n	8004d58 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	79ba      	ldrb	r2, [r7, #6]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d14a      	bne.n	8004cee <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f103 0010 	add.w	r0, r3, #16
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	33a8      	adds	r3, #168	; 0xa8
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	b292      	uxth	r2, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	f000 fe4e 	bl	8005908 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <cdcd_xfer_cb+0x180>)
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d028      	beq.n	8004cc4 <cdcd_xfer_cb+0xdc>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	795b      	ldrb	r3, [r3, #5]
 8004c76:	2bff      	cmp	r3, #255	; 0xff
 8004c78:	d024      	beq.n	8004cc4 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e01d      	b.n	8004cbc <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	795a      	ldrb	r2, [r3, #5]
 8004c84:	6939      	ldr	r1, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	440b      	add	r3, r1
 8004c8a:	33a8      	adds	r3, #168	; 0xa8
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d111      	bne.n	8004cb6 <cdcd_xfer_cb+0xce>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fd30 	bl	80056fc <tu_fifo_empty>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f083 0301 	eor.w	r3, r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	795a      	ldrb	r2, [r3, #5]
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3dd      	bcc.n	8004c80 <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <cdcd_xfer_cb+0x184>)
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <cdcd_xfer_cb+0x100>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3310      	adds	r3, #16
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fd14 	bl	80056fc <tu_fifo_empty>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f083 0301 	eor.w	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <cdcd_xfer_cb+0x100>
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc fbef 	bl	80014c6 <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8004ce8:	6938      	ldr	r0, [r7, #16]
 8004cea:	f7ff fb99 	bl	8004420 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	79ba      	ldrb	r2, [r7, #6]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d12e      	bne.n	8004d56 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <cdcd_xfer_cb+0x188>)
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <cdcd_xfer_cb+0x11e>
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fc73 	bl	80045f4 <tud_cdc_n_write_flush>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d120      	bne.n	8004d56 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	331c      	adds	r3, #28
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fcbd 	bl	8005698 <tu_fifo_count>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d118      	bne.n	8004d56 <cdcd_xfer_cb+0x16e>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <cdcd_xfer_cb+0x16e>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d110      	bne.n	8004d56 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	789a      	ldrb	r2, [r3, #2]
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 fff5 	bl	8006d2c <usbd_edpt_claim>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	7899      	ldrb	r1, [r3, #2]
 8004d4c:	79f8      	ldrb	r0, [r7, #7]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2200      	movs	r2, #0
 8004d52:	f002 f83f 	bl	8006dd4 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8004d56:	2301      	movs	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20001874 	.word	0x20001874
 8004d64:	e000edf0 	.word	0xe000edf0
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	080014c7 	.word	0x080014c7
 8004d70:	00000000 	.word	0x00000000

08004d74 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	460b      	mov	r3, r1
 8004d84:	80fb      	strh	r3, [r7, #6]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d90:	d901      	bls.n	8004d96 <tu_fifo_config+0x22>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e01b      	b.n	8004dce <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8004da2:	88bb      	ldrh	r3, [r7, #4]
 8004da4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004da8:	b299      	uxth	r1, r3
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	88d3      	ldrh	r3, [r2, #6]
 8004dae:	f361 030e 	bfi	r3, r1, #0, #15
 8004db2:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	79d3      	ldrb	r3, [r2, #7]
 8004db8:	7e39      	ldrb	r1, [r7, #24]
 8004dba:	f361 13c7 	bfi	r3, r1, #7, #1
 8004dbe:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004dcc:	2301      	movs	r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b08a      	sub	sp, #40	; 0x28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	4613      	mov	r3, r2
 8004de6:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004df2:	e00b      	b.n	8004e0c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	61ba      	str	r2, [r7, #24]
 8004dfc:	617b      	str	r3, [r7, #20]

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	bf00      	nop
    ff_buf += 4;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8004e0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ee      	bne.n	8004df4 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004e2c:	7ffa      	ldrb	r2, [r7, #31]
 8004e2e:	f107 0310 	add.w	r3, r7, #16
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f004 f90b 	bl	8009050 <memcpy>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08a      	sub	sp, #40	; 0x28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004e5a:	e008      	b.n	8004e6e <_ff_pull_const_addr+0x2c>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8004e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f1      	bne.n	8004e5c <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004e8c:	7ffa      	ldrb	r2, [r7, #31]
 8004e8e:	f107 0314 	add.w	r3, r7, #20
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 f8db 	bl	8009050 <memcpy>

    *reg_tx = tmp32;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	601a      	str	r2, [r3, #0]
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	88c9      	ldrh	r1, [r1, #6]
 8004ec0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004ec4:	b289      	uxth	r1, r1
 8004ec6:	fb01 f202 	mul.w	r2, r1, r2
 8004eca:	1898      	adds	r0, r3, r2
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	88db      	ldrh	r3, [r3, #6]
 8004ed0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	f004 f8b9 	bl	8009050 <memcpy>
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08e      	sub	sp, #56	; 0x38
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	80fb      	strh	r3, [r7, #6]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	889a      	ldrh	r2, [r3, #4]
 8004f00:	88bb      	ldrh	r3, [r7, #4]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88db      	ldrh	r3, [r3, #6]
 8004f12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f1c:	fb13 f302 	smulbb	r3, r3, r2
 8004f20:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88db      	ldrh	r3, [r3, #6]
 8004f26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f30:	fb13 f302 	smulbb	r3, r3, r2
 8004f34:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	88ba      	ldrh	r2, [r7, #4]
 8004f3c:	68f9      	ldr	r1, [r7, #12]
 8004f3e:	88c9      	ldrh	r1, [r1, #6]
 8004f40:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004f44:	b289      	uxth	r1, r1
 8004f46:	fb01 f202 	mul.w	r2, r1, r2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004f4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <_ff_push_n+0x76>
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d022      	beq.n	8004fa0 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8004f5a:	e09e      	b.n	800509a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d80d      	bhi.n	8004f80 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	88d2      	ldrh	r2, [r2, #6]
 8004f6a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7a:	f004 f869 	bl	8009050 <memcpy>
      break;
 8004f7e:	e08c      	b.n	800509a <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8004f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f82:	461a      	mov	r2, r3
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f88:	f004 f862 	bl	8009050 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f004 f859 	bl	8009050 <memcpy>
      break;
 8004f9e:	e07c      	b.n	800509a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d80f      	bhi.n	8004fc8 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88db      	ldrh	r3, [r3, #6]
 8004fac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	fb13 f302 	smulbb	r3, r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc2:	f7ff ff0a 	bl	8004dda <_ff_push_const_addr>
      break;
 8004fc6:	e067      	b.n	8005098 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8004fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8004fd0:	8c3b      	ldrh	r3, [r7, #32]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd8:	f7ff feff 	bl	8004dda <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8004fdc:	8c3b      	ldrh	r3, [r7, #32]
 8004fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe0:	4413      	add	r3, r2
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8004fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d043      	beq.n	8005080 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005000:	b29b      	uxth	r3, r3
 8005002:	f1c3 0304 	rsb	r3, r3, #4
 8005006:	b29a      	uxth	r2, r3
 8005008:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800500a:	837b      	strh	r3, [r7, #26]
 800500c:	4613      	mov	r3, r2
 800500e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005010:	8b7a      	ldrh	r2, [r7, #26]
 8005012:	8b3b      	ldrh	r3, [r7, #24]
 8005014:	4293      	cmp	r3, r2
 8005016:	bf28      	it	cs
 8005018:	4613      	movcs	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8005020:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005024:	b29b      	uxth	r3, r3
 8005026:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8005032:	f107 0314 	add.w	r3, r7, #20
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8005038:	e007      	b.n	800504a <_ff_push_n+0x164>
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	1c53      	adds	r3, r2, #1
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	6339      	str	r1, [r7, #48]	; 0x30
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800505e:	e007      	b.n	8005070 <_ff_push_n+0x18a>
 8005060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005062:	1c53      	adds	r3, r2, #1
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	1c59      	adds	r1, r3, #1
 800506a:	6339      	str	r1, [r7, #48]	; 0x30
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <_ff_push_n+0x17a>
 800507e:	e002      	b.n	8005086 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8005086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <_ff_push_n+0x1b2>
 800508c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800508e:	461a      	mov	r2, r3
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005094:	f7ff fea1 	bl	8004dda <_ff_push_const_addr>
      break;
 8005098:	bf00      	nop
}
 800509a:	bf00      	nop
 800509c:	3738      	adds	r7, #56	; 0x38
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	88c9      	ldrh	r1, [r1, #6]
 80050ba:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80050be:	b289      	uxth	r1, r1
 80050c0:	fb01 f202 	mul.w	r2, r1, r2
 80050c4:	1899      	adds	r1, r3, r2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88db      	ldrh	r3, [r3, #6]
 80050ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	68b8      	ldr	r0, [r7, #8]
 80050d4:	f003 ffbc 	bl	8009050 <memcpy>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08e      	sub	sp, #56	; 0x38
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	460b      	mov	r3, r1
 80050f0:	80fb      	strh	r3, [r7, #6]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	889a      	ldrh	r2, [r3, #4]
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88db      	ldrh	r3, [r3, #6]
 800510c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005116:	fb13 f302 	smulbb	r3, r3, r2
 800511a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88db      	ldrh	r3, [r3, #6]
 8005120:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005124:	b29b      	uxth	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800512a:	fb13 f302 	smulbb	r3, r3, r2
 800512e:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	88ba      	ldrh	r2, [r7, #4]
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	88c9      	ldrh	r1, [r1, #6]
 800513a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800513e:	b289      	uxth	r1, r1
 8005140:	fb01 f202 	mul.w	r2, r1, r2
 8005144:	4413      	add	r3, r2
 8005146:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8005148:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <_ff_pull_n+0x76>
 8005150:	2b01      	cmp	r3, #1
 8005152:	d022      	beq.n	800519a <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8005154:	e0a0      	b.n	8005298 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800515a:	429a      	cmp	r2, r3
 800515c:	d80d      	bhi.n	800517a <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	88d2      	ldrh	r2, [r2, #6]
 8005164:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005168:	b292      	uxth	r2, r2
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	461a      	mov	r2, r3
 8005170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f003 ff6c 	bl	8009050 <memcpy>
    break;
 8005178:	e08e      	b.n	8005298 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800517a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800517c:	461a      	mov	r2, r3
 800517e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005180:	68b8      	ldr	r0, [r7, #8]
 8005182:	f003 ff65 	bl	8009050 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8005186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	18d0      	adds	r0, r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005192:	4619      	mov	r1, r3
 8005194:	f003 ff5c 	bl	8009050 <memcpy>
    break;
 8005198:	e07e      	b.n	8005298 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800519e:	429a      	cmp	r2, r3
 80051a0:	d80f      	bhi.n	80051c2 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	fb13 f302 	smulbb	r3, r3, r2
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff fe41 	bl	8004e42 <_ff_pull_const_addr>
    break;
 80051c0:	e069      	b.n	8005296 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80051c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80051ca:	8c3b      	ldrh	r3, [r7, #32]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	f7ff fe36 	bl	8004e42 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80051d6:	8c3b      	ldrh	r3, [r7, #32]
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	4413      	add	r3, r2
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80051de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80051ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d045      	beq.n	800527e <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80051f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f1c3 0304 	rsb	r3, r3, #4
 8005200:	b29a      	uxth	r2, r3
 8005202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005204:	837b      	strh	r3, [r7, #26]
 8005206:	4613      	mov	r3, r2
 8005208:	833b      	strh	r3, [r7, #24]
 800520a:	8b7a      	ldrh	r2, [r7, #26]
 800520c:	8b3b      	ldrh	r3, [r7, #24]
 800520e:	4293      	cmp	r3, r2
 8005210:	bf28      	it	cs
 8005212:	4613      	movcs	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 800521a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800521e:	b29b      	uxth	r3, r3
 8005220:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8005230:	e007      	b.n	8005242 <_ff_pull_n+0x162>
 8005232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005234:	1c53      	adds	r3, r2, #1
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	1c59      	adds	r1, r3, #1
 800523c:	62b9      	str	r1, [r7, #40]	; 0x28
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8005256:	e007      	b.n	8005268 <_ff_pull_n+0x188>
 8005258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525a:	1c53      	adds	r3, r2, #1
 800525c:	633b      	str	r3, [r7, #48]	; 0x30
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	62b9      	str	r1, [r7, #40]	; 0x28
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e002      	b.n	8005284 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8005284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <_ff_pull_n+0x1b6>
 800528a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800528c:	461a      	mov	r2, r3
 800528e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	f7ff fdd6 	bl	8004e42 <_ff_pull_const_addr>
    break;
 8005296:	bf00      	nop
  }
}
 8005298:	bf00      	nop
 800529a:	3738      	adds	r7, #56	; 0x38
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]
 80052aa:	460b      	mov	r3, r1
 80052ac:	80bb      	strh	r3, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80052b2:	88ba      	ldrh	r2, [r7, #4]
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	4413      	add	r3, r2
 80052b8:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80052ba:	88ba      	ldrh	r2, [r7, #4]
 80052bc:	89fb      	ldrh	r3, [r7, #14]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d804      	bhi.n	80052cc <advance_index+0x2c>
 80052c2:	89fa      	ldrh	r2, [r7, #14]
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	429a      	cmp	r2, r3
 80052ca:	db08      	blt.n	80052de <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	425b      	negs	r3, r3
 80052d4:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80052d6:	89fa      	ldrh	r2, [r7, #14]
 80052d8:	89bb      	ldrh	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80052de:	89fb      	ldrh	r3, [r7, #14]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	80fb      	strh	r3, [r7, #6]
 80052fe:	4613      	mov	r3, r2
 8005300:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	889b      	ldrh	r3, [r3, #4]
 8005306:	847b      	strh	r3, [r7, #34]	; 0x22
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	843b      	strh	r3, [r7, #32]
 800530c:	88bb      	ldrh	r3, [r7, #4]
 800530e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8005310:	8c3a      	ldrh	r2, [r7, #32]
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	429a      	cmp	r2, r3
 8005316:	d304      	bcc.n	8005322 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8005318:	8c3a      	ldrh	r2, [r7, #32]
 800531a:	8bfb      	ldrh	r3, [r7, #30]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	e008      	b.n	8005334 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	8c39      	ldrh	r1, [r7, #32]
 800532a:	8bfb      	ldrh	r3, [r7, #30]
 800532c:	1acb      	subs	r3, r1, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	4413      	add	r3, r2
 8005332:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005334:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8005336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <_tu_fifo_peek+0x54>
 800533c:	2300      	movs	r3, #0
 800533e:	e037      	b.n	80053b0 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	889b      	ldrh	r3, [r3, #4]
 8005344:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005346:	429a      	cmp	r2, r3
 8005348:	d91b      	bls.n	8005382 <_tu_fifo_peek+0x96>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	889b      	ldrh	r3, [r3, #4]
 8005356:	8afa      	ldrh	r2, [r7, #22]
 8005358:	429a      	cmp	r2, r3
 800535a:	d305      	bcc.n	8005368 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	889b      	ldrh	r3, [r3, #4]
 8005360:	8afa      	ldrh	r2, [r7, #22]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	82bb      	strh	r3, [r7, #20]
 8005366:	e004      	b.n	8005372 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	889a      	ldrh	r2, [r3, #4]
 800536c:	8afb      	ldrh	r3, [r7, #22]
 800536e:	4413      	add	r3, r2
 8005370:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	8aba      	ldrh	r2, [r7, #20]
 8005376:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005378:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800537a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	889b      	ldrh	r3, [r3, #4]
 8005380:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	889b      	ldrh	r3, [r3, #4]
 8005386:	827b      	strh	r3, [r7, #18]
 8005388:	88bb      	ldrh	r3, [r7, #4]
 800538a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800538c:	e003      	b.n	8005396 <_tu_fifo_peek+0xaa>
 800538e:	8a3a      	ldrh	r2, [r7, #16]
 8005390:	8a7b      	ldrh	r3, [r7, #18]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	823b      	strh	r3, [r7, #16]
 8005396:	8a7a      	ldrh	r2, [r7, #18]
 8005398:	8a3b      	ldrh	r3, [r7, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d9f7      	bls.n	800538e <_tu_fifo_peek+0xa2>
  return idx;
 800539e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80053a0:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80053a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053a4:	461a      	mov	r2, r3
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fe7a 	bl	80050a2 <_ff_pull>

  return true;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	460b      	mov	r3, r1
 80053c8:	80fb      	strh	r3, [r7, #6]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	889b      	ldrh	r3, [r3, #4]
 80053d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80053d4:	88bb      	ldrh	r3, [r7, #4]
 80053d6:	843b      	strh	r3, [r7, #32]
 80053d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80053da:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80053dc:	8c3a      	ldrh	r2, [r7, #32]
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d304      	bcc.n	80053ee <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80053e4:	8c3a      	ldrh	r2, [r7, #32]
 80053e6:	8bfb      	ldrh	r3, [r7, #30]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	e008      	b.n	8005400 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80053ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	8c39      	ldrh	r1, [r7, #32]
 80053f6:	8bfb      	ldrh	r3, [r7, #30]
 80053f8:	1acb      	subs	r3, r1, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4413      	add	r3, r2
 80053fe:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005400:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8005402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <_tu_fifo_peek_n+0x54>
 8005408:	2300      	movs	r3, #0
 800540a:	e041      	b.n	8005490 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	889b      	ldrh	r3, [r3, #4]
 8005410:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005412:	429a      	cmp	r2, r3
 8005414:	d91b      	bls.n	800544e <_tu_fifo_peek_n+0x96>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	88bb      	ldrh	r3, [r7, #4]
 800541c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	889b      	ldrh	r3, [r3, #4]
 8005422:	8afa      	ldrh	r2, [r7, #22]
 8005424:	429a      	cmp	r2, r3
 8005426:	d305      	bcc.n	8005434 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	889b      	ldrh	r3, [r3, #4]
 800542c:	8afa      	ldrh	r2, [r7, #22]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	82bb      	strh	r3, [r7, #20]
 8005432:	e004      	b.n	800543e <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	889a      	ldrh	r2, [r3, #4]
 8005438:	8afb      	ldrh	r3, [r7, #22]
 800543a:	4413      	add	r3, r2
 800543c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	8aba      	ldrh	r2, [r7, #20]
 8005442:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005444:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8005446:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	889b      	ldrh	r3, [r3, #4]
 800544c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800544e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	429a      	cmp	r2, r3
 8005454:	d201      	bcs.n	800545a <_tu_fifo_peek_n+0xa2>
 8005456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005458:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	889b      	ldrh	r3, [r3, #4]
 800545e:	827b      	strh	r3, [r7, #18]
 8005460:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005462:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8005464:	e003      	b.n	800546e <_tu_fifo_peek_n+0xb6>
 8005466:	8a3a      	ldrh	r2, [r7, #16]
 8005468:	8a7b      	ldrh	r3, [r7, #18]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	823b      	strh	r3, [r7, #16]
 800546e:	8a7a      	ldrh	r2, [r7, #18]
 8005470:	8a3b      	ldrh	r3, [r7, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d9f7      	bls.n	8005466 <_tu_fifo_peek_n+0xae>
  return idx;
 8005476:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005478:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800547a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	460b      	mov	r3, r1
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff fe29 	bl	80050e0 <_ff_pull_n>

  return n;
 800548e:	88fb      	ldrh	r3, [r7, #6]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3728      	adds	r7, #40	; 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b092      	sub	sp, #72	; 0x48
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	460b      	mov	r3, r1
 80054a8:	80fb      	strh	r3, [r7, #6]
 80054aa:	4613      	mov	r3, r2
 80054ac:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <_tu_fifo_write_n+0x20>
 80054b4:	2300      	movs	r3, #0
 80054b6:	e0bc      	b.n	8005632 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	891b      	ldrh	r3, [r3, #8]
 80054bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	79db      	ldrb	r3, [r3, #7]
 80054cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f083 0301 	eor.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d036      	beq.n	800554a <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	889b      	ldrh	r3, [r3, #4]
 80054e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80054e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80054f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054f4:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80054f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80054f8:	8c3b      	ldrh	r3, [r7, #32]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d304      	bcc.n	8005508 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80054fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005500:	8c3b      	ldrh	r3, [r7, #32]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	b29b      	uxth	r3, r3
 8005506:	e008      	b.n	800551a <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005510:	8c3b      	ldrh	r3, [r7, #32]
 8005512:	1acb      	subs	r3, r1, r3
 8005514:	b29b      	uxth	r3, r3
 8005516:	4413      	add	r3, r2
 8005518:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800551a:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 800551c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800551e:	8bfb      	ldrh	r3, [r7, #30]
 8005520:	429a      	cmp	r2, r3
 8005522:	d904      	bls.n	800552e <_tu_fifo_write_n+0x96>
 8005524:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005526:	8bfb      	ldrh	r3, [r7, #30]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	e000      	b.n	8005530 <_tu_fifo_write_n+0x98>
 800552e:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8005530:	867b      	strh	r3, [r7, #50]	; 0x32
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005536:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005538:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800553a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800553c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800553e:	4293      	cmp	r3, r2
 8005540:	bf28      	it	cs
 8005542:	4613      	movcs	r3, r2
 8005544:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8005546:	80fb      	strh	r3, [r7, #6]
 8005548:	e04b      	b.n	80055e2 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	889b      	ldrh	r3, [r3, #4]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	429a      	cmp	r2, r3
 8005552:	d317      	bcc.n	8005584 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8005554:	797b      	ldrb	r3, [r7, #5]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10e      	bne.n	8005578 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	8892      	ldrh	r2, [r2, #4]
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	88d2      	ldrh	r2, [r2, #6]
 8005566:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800556a:	b292      	uxth	r2, r2
 800556c:	fb02 f303 	mul.w	r3, r2, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	4413      	add	r3, r2
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	889b      	ldrh	r3, [r3, #4]
 800557c:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800557e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005580:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005582:	e02e      	b.n	80055e2 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	889b      	ldrh	r3, [r3, #4]
 8005588:	83bb      	strh	r3, [r7, #28]
 800558a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800558c:	837b      	strh	r3, [r7, #26]
 800558e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005590:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8005592:	8b7a      	ldrh	r2, [r7, #26]
 8005594:	8b3b      	ldrh	r3, [r7, #24]
 8005596:	429a      	cmp	r2, r3
 8005598:	d304      	bcc.n	80055a4 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 800559a:	8b7a      	ldrh	r2, [r7, #26]
 800559c:	8b3b      	ldrh	r3, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	e008      	b.n	80055b6 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80055a4:	8bbb      	ldrh	r3, [r7, #28]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	8b79      	ldrh	r1, [r7, #26]
 80055ac:	8b3b      	ldrh	r3, [r7, #24]
 80055ae:	1acb      	subs	r3, r1, r3
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80055b6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 80055b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	889b      	ldrh	r3, [r3, #4]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	429a      	cmp	r2, r3
 80055c6:	db0c      	blt.n	80055e2 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8898      	ldrh	r0, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	889a      	ldrh	r2, [r3, #4]
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d8:	4619      	mov	r1, r3
 80055da:	f7ff fe61 	bl	80052a0 <advance_index>
 80055de:	4603      	mov	r3, r0
 80055e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d023      	beq.n	8005630 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	889b      	ldrh	r3, [r3, #4]
 80055ec:	82fb      	strh	r3, [r7, #22]
 80055ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055f0:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80055f2:	e003      	b.n	80055fc <_tu_fifo_write_n+0x164>
 80055f4:	8aba      	ldrh	r2, [r7, #20]
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	82bb      	strh	r3, [r7, #20]
 80055fc:	8afa      	ldrh	r2, [r7, #22]
 80055fe:	8abb      	ldrh	r3, [r7, #20]
 8005600:	429a      	cmp	r2, r3
 8005602:	d9f7      	bls.n	80055f4 <_tu_fifo_write_n+0x15c>
  return idx;
 8005604:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005606:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8005608:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	797b      	ldrb	r3, [r7, #5]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	460b      	mov	r3, r1
 8005612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fc66 	bl	8004ee6 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	889b      	ldrh	r3, [r3, #4]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fe3c 	bl	80052a0 <advance_index>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8005630:	88fb      	ldrh	r3, [r7, #6]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3740      	adds	r7, #64	; 0x40
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4611      	mov	r1, r2
 8005646:	461a      	mov	r2, r3
 8005648:	460b      	mov	r3, r1
 800564a:	80fb      	strh	r3, [r7, #6]
 800564c:	4613      	mov	r3, r2
 800564e:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	891b      	ldrh	r3, [r3, #8]
 8005654:	b298      	uxth	r0, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	895b      	ldrh	r3, [r3, #10]
 800565a:	b29b      	uxth	r3, r3
 800565c:	88f9      	ldrh	r1, [r7, #6]
 800565e:	797a      	ldrb	r2, [r7, #5]
 8005660:	9201      	str	r2, [sp, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4603      	mov	r3, r0
 8005666:	460a      	mov	r2, r1
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fea4 	bl	80053b8 <_tu_fifo_peek_n>
 8005670:	4603      	mov	r3, r0
 8005672:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8898      	ldrh	r0, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	895b      	ldrh	r3, [r3, #10]
 800567c:	b29b      	uxth	r3, r3
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	4619      	mov	r1, r3
 8005682:	f7ff fe0d 	bl	80052a0 <advance_index>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800568e:	88fb      	ldrh	r3, [r7, #6]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8899      	ldrh	r1, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	891b      	ldrh	r3, [r3, #8]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	895b      	ldrh	r3, [r3, #10]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8279      	strh	r1, [r7, #18]
 80056b2:	823a      	strh	r2, [r7, #16]
 80056b4:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80056b6:	8a3a      	ldrh	r2, [r7, #16]
 80056b8:	89fb      	ldrh	r3, [r7, #14]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d304      	bcc.n	80056c8 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80056be:	8a3a      	ldrh	r2, [r7, #16]
 80056c0:	89fb      	ldrh	r3, [r7, #14]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	e008      	b.n	80056da <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80056c8:	8a7b      	ldrh	r3, [r7, #18]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	8a39      	ldrh	r1, [r7, #16]
 80056d0:	89fb      	ldrh	r3, [r7, #14]
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	8892      	ldrh	r2, [r2, #4]
 80056de:	82fb      	strh	r3, [r7, #22]
 80056e0:	4613      	mov	r3, r2
 80056e2:	82bb      	strh	r3, [r7, #20]
 80056e4:	8afa      	ldrh	r2, [r7, #22]
 80056e6:	8abb      	ldrh	r3, [r7, #20]
 80056e8:	4293      	cmp	r3, r2
 80056ea:	bf28      	it	cs
 80056ec:	4613      	movcs	r3, r2
 80056ee:	b29b      	uxth	r3, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	891b      	ldrh	r3, [r3, #8]
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	895b      	ldrh	r3, [r3, #10]
 800570e:	b29b      	uxth	r3, r3
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8899      	ldrh	r1, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	891b      	ldrh	r3, [r3, #8]
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	895b      	ldrh	r3, [r3, #10]
 800573c:	b29b      	uxth	r3, r3
 800573e:	81f9      	strh	r1, [r7, #14]
 8005740:	81ba      	strh	r2, [r7, #12]
 8005742:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8005744:	89ba      	ldrh	r2, [r7, #12]
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	429a      	cmp	r2, r3
 800574a:	d304      	bcc.n	8005756 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800574c:	89ba      	ldrh	r2, [r7, #12]
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	e008      	b.n	8005768 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005756:	89fb      	ldrh	r3, [r7, #14]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	89b9      	ldrh	r1, [r7, #12]
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	1acb      	subs	r3, r1, r3
 8005762:	b29b      	uxth	r3, r3
 8005764:	4413      	add	r3, r2
 8005766:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	8892      	ldrh	r2, [r2, #4]
 800576c:	4293      	cmp	r3, r2
 800576e:	bf2c      	ite	cs
 8005770:	2301      	movcs	r3, #1
 8005772:	2300      	movcc	r3, #0
 8005774:	b2db      	uxtb	r3, r3
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8899      	ldrh	r1, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	891b      	ldrh	r3, [r3, #8]
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	895b      	ldrh	r3, [r3, #10]
 8005798:	b29b      	uxth	r3, r3
 800579a:	82f9      	strh	r1, [r7, #22]
 800579c:	82ba      	strh	r2, [r7, #20]
 800579e:	827b      	strh	r3, [r7, #18]
 80057a0:	8afb      	ldrh	r3, [r7, #22]
 80057a2:	823b      	strh	r3, [r7, #16]
 80057a4:	8abb      	ldrh	r3, [r7, #20]
 80057a6:	81fb      	strh	r3, [r7, #14]
 80057a8:	8a7b      	ldrh	r3, [r7, #18]
 80057aa:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80057ac:	89fa      	ldrh	r2, [r7, #14]
 80057ae:	89bb      	ldrh	r3, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d304      	bcc.n	80057be <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80057b4:	89fa      	ldrh	r2, [r7, #14]
 80057b6:	89bb      	ldrh	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	e008      	b.n	80057d0 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80057be:	8a3b      	ldrh	r3, [r7, #16]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	89f9      	ldrh	r1, [r7, #14]
 80057c6:	89bb      	ldrh	r3, [r7, #12]
 80057c8:	1acb      	subs	r3, r1, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80057d0:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80057d2:	8afa      	ldrh	r2, [r7, #22]
 80057d4:	897b      	ldrh	r3, [r7, #10]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d904      	bls.n	80057e4 <tu_fifo_remaining+0x62>
 80057da:	8afa      	ldrh	r2, [r7, #22]
 80057dc:	897b      	ldrh	r3, [r7, #10]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	e000      	b.n	80057e6 <tu_fifo_remaining+0x64>
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	891b      	ldrh	r3, [r3, #8]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	895b      	ldrh	r3, [r3, #10]
 8005806:	b29b      	uxth	r3, r3
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fd6e 	bl	80052ec <_tu_fifo_peek>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8898      	ldrh	r0, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	895b      	ldrh	r3, [r3, #10]
 800581c:	b29b      	uxth	r3, r3
 800581e:	7bfa      	ldrb	r2, [r7, #15]
 8005820:	b292      	uxth	r2, r2
 8005822:	4619      	mov	r1, r3
 8005824:	f7ff fd3c 	bl	80052a0 <advance_index>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	4613      	mov	r3, r2
 8005846:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	2300      	movs	r3, #0
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fef3 	bl	800563a <_tu_fifo_read_n>
 8005854:	4603      	mov	r3, r0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	4613      	mov	r3, r2
 800586a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	2301      	movs	r3, #1
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fee1 	bl	800563a <_tu_fifo_read_n>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	891b      	ldrh	r3, [r3, #8]
 8005890:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff47 	bl	8005726 <tu_fifo_full>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <tu_fifo_write+0x36>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	79db      	ldrb	r3, [r3, #7]
 80058a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f083 0301 	eor.w	r3, r3, #1
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <tu_fifo_write+0x36>
  {
    ret = false;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]
 80058b6:	e022      	b.n	80058fe <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	889b      	ldrh	r3, [r3, #4]
 80058bc:	823b      	strh	r3, [r7, #16]
 80058be:	8abb      	ldrh	r3, [r7, #20]
 80058c0:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80058c2:	e003      	b.n	80058cc <tu_fifo_write+0x4a>
 80058c4:	89fa      	ldrh	r2, [r7, #14]
 80058c6:	8a3b      	ldrh	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	81fb      	strh	r3, [r7, #14]
 80058cc:	8a3a      	ldrh	r2, [r7, #16]
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d9f7      	bls.n	80058c4 <tu_fifo_write+0x42>
  return idx;
 80058d4:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80058d6:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80058d8:	8a7b      	ldrh	r3, [r7, #18]
 80058da:	461a      	mov	r2, r3
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fae2 	bl	8004ea8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	889b      	ldrh	r3, [r3, #4]
 80058e8:	8ab9      	ldrh	r1, [r7, #20]
 80058ea:	2201      	movs	r2, #1
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fcd7 	bl	80052a0 <advance_index>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	811a      	strh	r2, [r3, #8]

    ret = true;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	2300      	movs	r3, #0
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fdbb 	bl	8005498 <_tu_fifo_write_n>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	2301      	movs	r3, #1
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fda9 	bl	8005498 <_tu_fifo_write_n>
 8005946:	4603      	mov	r3, r0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	79d3      	ldrb	r3, [r2, #7]
 8005982:	78f9      	ldrb	r1, [r7, #3]
 8005984:	f361 13c7 	bfi	r3, r1, #7, #1
 8005988:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800598a:	2301      	movs	r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <get_driver>:
tu_static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80059a2:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <get_driver+0x5c>)
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <get_driver+0x60>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	79fa      	ldrb	r2, [r7, #7]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d208      	bcs.n	80059c4 <get_driver+0x2c>
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <get_driver+0x64>)
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	79fa      	ldrb	r2, [r7, #7]
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	440b      	add	r3, r1
 80059c2:	e010      	b.n	80059e6 <get_driver+0x4e>
    drvid -= _app_driver_count;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <get_driver+0x60>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	79fa      	ldrb	r2, [r7, #7]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d807      	bhi.n	80059e4 <get_driver+0x4c>
 80059d4:	79fa      	ldrb	r2, [r7, #7]
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <get_driver+0x68>)
 80059e0:	4413      	add	r3, r2
 80059e2:	e000      	b.n	80059e6 <get_driver+0x4e>

  return NULL;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	00000000 	.word	0x00000000
 80059f8:	200019cc 	.word	0x200019cc
 80059fc:	200019c8 	.word	0x200019c8
 8005a00:	0800a358 	.word	0x0800a358

08005a04 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <tud_mounted+0x20>)
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000199c 	.word	0x2000199c

08005a28 <tud_suspended>:

bool tud_suspended(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8005a2c:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <tud_suspended+0x24>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf14      	ite	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	2300      	moveq	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	2000199c 	.word	0x2000199c

08005a50 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <tud_inited+0x1c>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2bff      	cmp	r3, #255	; 0xff
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000031 	.word	0x20000031

08005a70 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8005a7a:	f7ff ffe9 	bl	8005a50 <tud_inited>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <tud_init+0x18>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e054      	b.n	8005b32 <tud_init+0xc2>
  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_fifo_t));
  TU_LOG_INT(USBD_DBG, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8005a88:	222b      	movs	r2, #43	; 0x2b
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	482b      	ldr	r0, [pc, #172]	; (8005b3c <tud_init+0xcc>)
 8005a8e:	f003 faed 	bl	800906c <memset>
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <tud_init+0xd0>)
 8005a94:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff58 	bl	8005950 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8005aa2:	4a28      	ldr	r2, [pc, #160]	; (8005b44 <tud_init+0xd4>)
 8005aa4:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8005aa6:	4b27      	ldr	r3, [pc, #156]	; (8005b44 <tud_init+0xd4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <tud_init+0x54>
 8005aae:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <tud_init+0xd8>)
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d000      	beq.n	8005ac0 <tud_init+0x50>
 8005abe:	be00      	bkpt	0x0000
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e036      	b.n	8005b32 <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8005ac4:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <tud_init+0xdc>)
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8005aca:	4821      	ldr	r0, [pc, #132]	; (8005b50 <tud_init+0xe0>)
 8005acc:	f3af 8000 	nop.w
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <tud_init+0xe4>)
 8005ad4:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e018      	b.n	8005b0e <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8005adc:	7ffb      	ldrb	r3, [r7, #31]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff5a 	bl	8005998 <get_driver>
 8005ae4:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <tud_init+0x92>
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <tud_init+0xd8>)
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d000      	beq.n	8005afe <tud_init+0x8e>
 8005afc:	be00      	bkpt	0x0000
 8005afe:	2300      	movs	r3, #0
 8005b00:	e017      	b.n	8005b32 <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005b08:	7ffb      	ldrb	r3, [r7, #31]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <tud_init+0xe0>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	dae0      	bge.n	8005adc <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 8005b1a:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <tud_init+0xe8>)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 f808 	bl	8007b38 <dcd_init>
  dcd_int_enable(rhport);
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 f86c 	bl	8007c08 <dcd_int_enable>

  return true;
 8005b30:	2301      	movs	r3, #1
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000199c 	.word	0x2000199c
 8005b40:	20000034 	.word	0x20000034
 8005b44:	20001a90 	.word	0x20001a90
 8005b48:	e000edf0 	.word	0xe000edf0
 8005b4c:	00000000 	.word	0x00000000
 8005b50:	200019cc 	.word	0x200019cc
 8005b54:	200019c8 	.word	0x200019c8
 8005b58:	20000031 	.word	0x20000031

08005b5c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
 8005b6a:	e019      	b.n	8005ba0 <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ff12 	bl	8005998 <get_driver>
 8005b74:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <configuration_reset+0x34>
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <configuration_reset+0x78>)
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01f      	beq.n	8005bcc <configuration_reset+0x70>
 8005b8c:	be00      	bkpt	0x0000
 8005b8e:	e01d      	b.n	8005bcc <configuration_reset+0x70>
    driver->reset(rhport);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	79fa      	ldrb	r2, [r7, #7]
 8005b96:	4610      	mov	r0, r2
 8005b98:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <configuration_reset+0x7c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	dadf      	bge.n	8005b6c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005bac:	222b      	movs	r2, #43	; 0x2b
 8005bae:	2100      	movs	r1, #0
 8005bb0:	480a      	ldr	r0, [pc, #40]	; (8005bdc <configuration_reset+0x80>)
 8005bb2:	f003 fa5b 	bl	800906c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	21ff      	movs	r1, #255	; 0xff
 8005bba:	4809      	ldr	r0, [pc, #36]	; (8005be0 <configuration_reset+0x84>)
 8005bbc:	f003 fa56 	bl	800906c <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8005bc0:	220c      	movs	r2, #12
 8005bc2:	21ff      	movs	r1, #255	; 0xff
 8005bc4:	4807      	ldr	r0, [pc, #28]	; (8005be4 <configuration_reset+0x88>)
 8005bc6:	f003 fa51 	bl	800906c <memset>
 8005bca:	e000      	b.n	8005bce <configuration_reset+0x72>
    TU_ASSERT(driver, );
 8005bcc:	bf00      	nop
}
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	e000edf0 	.word	0xe000edf0
 8005bd8:	200019cc 	.word	0x200019cc
 8005bdc:	2000199c 	.word	0x2000199c
 8005be0:	2000199f 	.word	0x2000199f
 8005be4:	200019af 	.word	0x200019af

08005be8 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffb1 	bl	8005b5c <configuration_reset>
  usbd_control_reset();
 8005bfa:	f001 fbf7 	bl	80073ec <usbd_control_reset>
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b091      	sub	sp, #68	; 0x44
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8005c14:	f7ff ff1c 	bl	8005a50 <tud_inited>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f083 0301 	eor.w	r3, r3, #1
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 812a 	bne.w	8005e7a <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005c26:	4b99      	ldr	r3, [pc, #612]	; (8005e8c <tud_task_ext+0x284>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2000      	movs	r0, #0
 8005c40:	4798      	blx	r3
}
 8005c42:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	3304      	adds	r3, #4
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fdd1 	bl	80057f2 <tu_fifo_read>
 8005c50:	4603      	mov	r3, r0
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	4798      	blx	r3
}
 8005c60:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
 8005c64:	f083 0301 	eor.w	r3, r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 8107 	bne.w	8005e7e <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8005c70:	7a7b      	ldrb	r3, [r7, #9]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	2b07      	cmp	r3, #7
 8005c76:	f200 80ea 	bhi.w	8005e4e <tud_task_ext+0x246>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <tud_task_ext+0x78>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca1 	.word	0x08005ca1
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005e4f 	.word	0x08005e4f
 8005c8c:	08005df5 	.word	0x08005df5
 8005c90:	08005e25 	.word	0x08005e25
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005d35 	.word	0x08005d35
 8005c9c:	08005e3f 	.word	0x08005e3f
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8005ca0:	7a3b      	ldrb	r3, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ffa0 	bl	8005be8 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8005ca8:	7b3a      	ldrb	r2, [r7, #12]
 8005caa:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <tud_task_ext+0x288>)
 8005cac:	709a      	strb	r2, [r3, #2]
      break;
 8005cae:	e0e3      	b.n	8005e78 <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 8005cb0:	7a3b      	ldrb	r3, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff98 	bl	8005be8 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8005cb8:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <tud_task_ext+0x28c>)
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80d1 	beq.w	8005e62 <tud_task_ext+0x25a>
 8005cc0:	f7fb f900 	bl	8000ec4 <tud_umount_cb>
      break;
 8005cc4:	e0cd      	b.n	8005e62 <tud_task_ext+0x25a>
        TU_LOG_PTR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8005cc6:	4a72      	ldr	r2, [pc, #456]	; (8005e90 <tud_task_ext+0x288>)
 8005cc8:	7813      	ldrb	r3, [r2, #0]
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8005cd0:	4a6f      	ldr	r2, [pc, #444]	; (8005e90 <tud_task_ext+0x288>)
 8005cd2:	7fd3      	ldrb	r3, [r2, #31]
 8005cd4:	f36f 0300 	bfc	r3, #0, #1
 8005cd8:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8005cda:	4a6d      	ldr	r2, [pc, #436]	; (8005e90 <tud_task_ext+0x288>)
 8005cdc:	7fd3      	ldrb	r3, [r2, #31]
 8005cde:	f36f 0382 	bfc	r3, #2, #1
 8005ce2:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8005ce4:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <tud_task_ext+0x288>)
 8005ce6:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005cea:	f36f 0300 	bfc	r3, #0, #1
 8005cee:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8005cf2:	4a67      	ldr	r2, [pc, #412]	; (8005e90 <tud_task_ext+0x288>)
 8005cf4:	f892 3020 	ldrb.w	r3, [r2, #32]
 8005cf8:	f36f 0382 	bfc	r3, #2, #1
 8005cfc:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8005d00:	7a3a      	ldrb	r2, [r7, #8]
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 f8e2 	bl	8005ed4 <process_control_request>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80a4 	beq.w	8005e66 <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8005d1e:	7a3b      	ldrb	r3, [r7, #8]
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f002 fb4c 	bl	80083c0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8005d28:	7a3b      	ldrb	r3, [r7, #8]
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f002 fb47 	bl	80083c0 <dcd_edpt_stall>
        }
      break;
 8005d32:	e098      	b.n	8005e66 <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8005d34:	7b3b      	ldrb	r3, [r7, #12]
 8005d36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005d3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d3e:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005d40:	7dbb      	ldrb	r3, [r7, #22]
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8005d48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005d4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d50:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005d58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8005d5c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005d60:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005d64:	494a      	ldr	r1, [pc, #296]	; (8005e90 <tud_task_ext+0x288>)
 8005d66:	0052      	lsls	r2, r2, #1
 8005d68:	440a      	add	r2, r1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f103 0218 	add.w	r2, r3, #24
 8005d70:	79d3      	ldrb	r3, [r2, #7]
 8005d72:	f36f 0300 	bfc	r3, #0, #1
 8005d76:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8005d78:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005d7c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005d80:	4943      	ldr	r1, [pc, #268]	; (8005e90 <tud_task_ext+0x288>)
 8005d82:	0052      	lsls	r2, r2, #1
 8005d84:	440a      	add	r2, r1
 8005d86:	4413      	add	r3, r2
 8005d88:	f103 0218 	add.w	r2, r3, #24
 8005d8c:	79d3      	ldrb	r3, [r2, #7]
 8005d8e:	f36f 0382 	bfc	r3, #2, #1
 8005d92:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8005d94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d107      	bne.n	8005dac <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 8005d9c:	7a38      	ldrb	r0, [r7, #8]
 8005d9e:	7b7a      	ldrb	r2, [r7, #13]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005da6:	f001 fb57 	bl	8007458 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8005daa:	e065      	b.n	8005e78 <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005dac:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005db0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005db4:	4936      	ldr	r1, [pc, #216]	; (8005e90 <tud_task_ext+0x288>)
 8005db6:	0052      	lsls	r2, r2, #1
 8005db8:	440a      	add	r2, r1
 8005dba:	4413      	add	r3, r2
 8005dbc:	3313      	adds	r3, #19
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fde9 	bl	8005998 <get_driver>
 8005dc6:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <tud_task_ext+0x1da>
 8005dce:	4b32      	ldr	r3, [pc, #200]	; (8005e98 <tud_task_ext+0x290>)
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d051      	beq.n	8005e82 <tud_task_ext+0x27a>
 8005dde:	be00      	bkpt	0x0000
 8005de0:	e04f      	b.n	8005e82 <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	691c      	ldr	r4, [r3, #16]
 8005de6:	7a38      	ldrb	r0, [r7, #8]
 8005de8:	7b7a      	ldrb	r2, [r7, #13]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005df0:	47a0      	blx	r4
      break;
 8005df2:	e041      	b.n	8005e78 <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8005df4:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <tud_task_ext+0x288>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d033      	beq.n	8005e6a <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <tud_task_ext+0x294>)
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d030      	beq.n	8005e6a <tud_task_ext+0x262>
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <tud_task_ext+0x288>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fb f85d 	bl	8000edc <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8005e22:	e022      	b.n	8005e6a <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <tud_task_ext+0x288>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01d      	beq.n	8005e6e <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8005e32:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <tud_task_ext+0x298>)
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01a      	beq.n	8005e6e <tud_task_ext+0x266>
 8005e38:	f7fb f862 	bl	8000f00 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8005e3c:	e017      	b.n	8005e6e <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d016      	beq.n	8005e72 <tud_task_ext+0x26a>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
      break;
 8005e4c:	e011      	b.n	8005e72 <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <tud_task_ext+0x290>)
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <tud_task_ext+0x26e>
 8005e5e:	be00      	bkpt	0x0000
      break;
 8005e60:	e009      	b.n	8005e76 <tud_task_ext+0x26e>
      break;
 8005e62:	bf00      	nop
 8005e64:	e6df      	b.n	8005c26 <tud_task_ext+0x1e>
      break;
 8005e66:	bf00      	nop
 8005e68:	e6dd      	b.n	8005c26 <tud_task_ext+0x1e>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e6db      	b.n	8005c26 <tud_task_ext+0x1e>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e6d9      	b.n	8005c26 <tud_task_ext+0x1e>
      break;
 8005e72:	bf00      	nop
 8005e74:	e6d7      	b.n	8005c26 <tud_task_ext+0x1e>
      break;
 8005e76:	bf00      	nop
  {
 8005e78:	e6d5      	b.n	8005c26 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 8005e82:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8005e84:	3744      	adds	r7, #68	; 0x44
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20001a90 	.word	0x20001a90
 8005e90:	2000199c 	.word	0x2000199c
 8005e94:	08000ec5 	.word	0x08000ec5
 8005e98:	e000edf0 	.word	0xe000edf0
 8005e9c:	08000edd 	.word	0x08000edd
 8005ea0:	08000f01 	.word	0x08000f01

08005ea4 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 faa4 	bl	8007404 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	7bf8      	ldrb	r0, [r7, #15]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b094      	sub	sp, #80	; 0x50
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f001 fa8f 	bl	8007404 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d10a      	bne.n	8005f0a <process_control_request+0x36>
 8005ef4:	4ba4      	ldr	r3, [pc, #656]	; (8006188 <process_control_request+0x2b4>)
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d000      	beq.n	8005f06 <process_control_request+0x32>
 8005f04:	be00      	bkpt	0x0000
 8005f06:	2300      	movs	r3, #0
 8005f08:	e247      	b.n	800639a <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d10f      	bne.n	8005f38 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8005f18:	4b9c      	ldr	r3, [pc, #624]	; (800618c <process_control_request+0x2b8>)
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <process_control_request+0x4e>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e23b      	b.n	800639a <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8005f22:	489a      	ldr	r0, [pc, #616]	; (800618c <process_control_request+0x2b8>)
 8005f24:	f001 fa6e 	bl	8007404 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f3af 8000 	nop.w
 8005f34:	4603      	mov	r3, r0
 8005f36:	e230      	b.n	800639a <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	f000 8177 	beq.w	8006236 <process_control_request+0x362>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f300 821a 	bgt.w	8006382 <process_control_request+0x4ae>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <process_control_request+0x86>
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	f000 811e 	beq.w	8006194 <process_control_request+0x2c0>
 8005f58:	e213      	b.n	8006382 <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d123      	bne.n	8005fb0 <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	889b      	ldrh	r3, [r3, #4]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005f70:	8afb      	ldrh	r3, [r7, #22]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d901      	bls.n	8005f84 <process_control_request+0xb0>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e20a      	b.n	800639a <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f88:	4a81      	ldr	r2, [pc, #516]	; (8006190 <process_control_request+0x2bc>)
 8005f8a:	4413      	add	r3, r2
 8005f8c:	78db      	ldrb	r3, [r3, #3]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fd02 	bl	8005998 <get_driver>
 8005f94:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <process_control_request+0xcc>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e1fc      	b.n	800639a <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	6a39      	ldr	r1, [r7, #32]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff7c 	bl	8005ea4 <invoke_class_control>
 8005fac:	4603      	mov	r3, r0
 8005fae:	e1f4      	b.n	800639a <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8005fbe:	4b72      	ldr	r3, [pc, #456]	; (8006188 <process_control_request+0x2b4>)
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d000      	beq.n	8005fd0 <process_control_request+0xfc>
 8005fce:	be00      	bkpt	0x0000
        return false;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e1e2      	b.n	800639a <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	f200 80c8 	bhi.w	800616e <process_control_request+0x29a>
 8005fde:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <process_control_request+0x110>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08006139 	.word	0x08006139
 8005fe8:	08006115 	.word	0x08006115
 8005fec:	0800616f 	.word	0x0800616f
 8005ff0:	080060f1 	.word	0x080060f1
 8005ff4:	0800616f 	.word	0x0800616f
 8005ff8:	0800600d 	.word	0x0800600d
 8005ffc:	080060d7 	.word	0x080060d7
 8006000:	0800616f 	.word	0x0800616f
 8006004:	08006031 	.word	0x08006031
 8006008:	08006049 	.word	0x08006049
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	f001 fa09 	bl	8007424 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	885b      	ldrh	r3, [r3, #2]
 8006016:	b29b      	uxth	r3, r3
 8006018:	b2da      	uxtb	r2, r3
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fe0a 	bl	8007c38 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8006024:	4a5a      	ldr	r2, [pc, #360]	; (8006190 <process_control_request+0x2bc>)
 8006026:	7813      	ldrb	r3, [r2, #0]
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	7013      	strb	r3, [r2, #0]
        break;
 800602e:	e0aa      	b.n	8006186 <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8006030:	4b57      	ldr	r3, [pc, #348]	; (8006190 <process_control_request+0x2bc>)
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8006038:	f107 020f 	add.w	r2, r7, #15
 800603c:	79f8      	ldrb	r0, [r7, #7]
 800603e:	2301      	movs	r3, #1
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	f001 f963 	bl	800730c <tud_control_xfer>
        }
        break;
 8006046:	e09e      	b.n	8006186 <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	885b      	ldrh	r3, [r3, #2]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8006052:	4b4f      	ldr	r3, [pc, #316]	; (8006190 <process_control_request+0x2bc>)
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800605c:	429a      	cmp	r2, r3
 800605e:	d030      	beq.n	80060c2 <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 8006060:	4b4b      	ldr	r3, [pc, #300]	; (8006190 <process_control_request+0x2bc>)
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00f      	beq.n	800608a <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	4618      	mov	r0, r3
 800606e:	f001 ff3f 	bl	8007ef0 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <process_control_request+0x2bc>)
 8006074:	789b      	ldrb	r3, [r3, #2]
 8006076:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fd6d 	bl	8005b5c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8006082:	4a43      	ldr	r2, [pc, #268]	; (8006190 <process_control_request+0x2bc>)
 8006084:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006088:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 800608a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <process_control_request+0x1ee>
 8006092:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f986 	bl	80063ac <process_set_config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f083 0301 	eor.w	r3, r3, #1
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <process_control_request+0x1ee>
 80060ac:	4b36      	ldr	r3, [pc, #216]	; (8006188 <process_control_request+0x2b4>)
 80060ae:	633b      	str	r3, [r7, #48]	; 0x30
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d000      	beq.n	80060be <process_control_request+0x1ea>
 80060bc:	be00      	bkpt	0x0000
 80060be:	2300      	movs	r3, #0
 80060c0:	e16b      	b.n	800639a <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 80060c2:	4a33      	ldr	r2, [pc, #204]	; (8006190 <process_control_request+0x2bc>)
 80060c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060c8:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 f8aa 	bl	8007228 <tud_control_status>
        }
        break;
 80060d4:	e057      	b.n	8006186 <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fa82 	bl	80065e4 <process_get_descriptor>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f083 0301 	eor.w	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d04b      	beq.n	8006184 <process_control_request+0x2b0>
 80060ec:	2300      	movs	r3, #0
 80060ee:	e154      	b.n	800639a <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	885b      	ldrh	r3, [r3, #2]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <process_control_request+0x22a>
 80060fa:	2300      	movs	r3, #0
 80060fc:	e14d      	b.n	800639a <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80060fe:	4a24      	ldr	r2, [pc, #144]	; (8006190 <process_control_request+0x2bc>)
 8006100:	7813      	ldrb	r3, [r2, #0]
 8006102:	f043 0308 	orr.w	r3, r3, #8
 8006106:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f88b 	bl	8007228 <tud_control_status>
        break;
 8006112:	e038      	b.n	8006186 <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	885b      	ldrh	r3, [r3, #2]
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <process_control_request+0x24e>
 800611e:	2300      	movs	r3, #0
 8006120:	e13b      	b.n	800639a <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <process_control_request+0x2bc>)
 8006124:	7813      	ldrb	r3, [r2, #0]
 8006126:	f36f 03c3 	bfc	r3, #3, #1
 800612a:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f879 	bl	8007228 <tud_control_status>
        break;
 8006136:	e026      	b.n	8006186 <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <process_control_request+0x2bc>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	b2db      	uxtb	r3, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <process_control_request+0x2bc>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	b2db      	uxtb	r3, r3
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	b29b      	uxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b29b      	uxth	r3, r3
 800615c:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 800615e:	f107 020c 	add.w	r2, r7, #12
 8006162:	79f8      	ldrb	r0, [r7, #7]
 8006164:	2302      	movs	r3, #2
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	f001 f8d0 	bl	800730c <tud_control_xfer>
        }
        break;
 800616c:	e00b      	b.n	8006186 <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <process_control_request+0x2b4>)
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d000      	beq.n	8006180 <process_control_request+0x2ac>
 800617e:	be00      	bkpt	0x0000
 8006180:	2300      	movs	r3, #0
 8006182:	e10a      	b.n	800639a <process_control_request+0x4c6>
        break;
 8006184:	bf00      	nop
      }
    break;
 8006186:	e107      	b.n	8006398 <process_control_request+0x4c4>
 8006188:	e000edf0 	.word	0xe000edf0
 800618c:	00000000 	.word	0x00000000
 8006190:	2000199c 	.word	0x2000199c

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	889b      	ldrh	r3, [r3, #4]
 8006198:	b29b      	uxth	r3, r3
 800619a:	82bb      	strh	r3, [r7, #20]
 800619c:	8abb      	ldrh	r3, [r7, #20]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80061a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061a8:	2b0f      	cmp	r3, #15
 80061aa:	d901      	bls.n	80061b0 <process_control_request+0x2dc>
 80061ac:	2300      	movs	r3, #0
 80061ae:	e0f4      	b.n	800639a <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80061b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061b4:	4a7b      	ldr	r2, [pc, #492]	; (80063a4 <process_control_request+0x4d0>)
 80061b6:	4413      	add	r3, r2
 80061b8:	78db      	ldrb	r3, [r3, #3]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fbec 	bl	8005998 <get_driver>
 80061c0:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <process_control_request+0x2f8>
 80061c8:	2300      	movs	r3, #0
 80061ca:	e0e6      	b.n	800639a <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fe66 	bl	8005ea4 <invoke_class_control>
 80061d8:	4603      	mov	r3, r0
 80061da:	f083 0301 	eor.w	r3, r3, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d026      	beq.n	8006232 <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <process_control_request+0x322>
 80061f2:	2300      	movs	r3, #0
 80061f4:	e0d1      	b.n	800639a <process_control_request+0x4c6>

        switch(p_request->bRequest)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	3b0a      	subs	r3, #10
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d816      	bhi.n	800622e <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8006200:	2000      	movs	r0, #0
 8006202:	f001 f8ff 	bl	8007404 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b0a      	cmp	r3, #10
 800620c:	d109      	bne.n	8006222 <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8006212:	f107 020b 	add.w	r2, r7, #11
 8006216:	79f8      	ldrb	r0, [r7, #7]
 8006218:	2301      	movs	r3, #1
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	f001 f876 	bl	800730c <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8006220:	e008      	b.n	8006234 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fffe 	bl	8007228 <tud_control_status>
          break;
 800622c:	e002      	b.n	8006234 <process_control_request+0x360>

          default: return false;
 800622e:	2300      	movs	r3, #0
 8006230:	e0b3      	b.n	800639a <process_control_request+0x4c6>
        }
      }
 8006232:	bf00      	nop
    }
    break;
 8006234:	e0b0      	b.n	8006398 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	889b      	ldrh	r3, [r3, #4]
 800623a:	b29b      	uxth	r3, r3
 800623c:	823b      	strh	r3, [r7, #16]
 800623e:	8a3b      	ldrh	r3, [r7, #16]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006246:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800624a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800624c:	7cbb      	ldrb	r3, [r7, #18]
 800624e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006252:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8006254:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800625c:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800625e:	7cfb      	ldrb	r3, [r7, #19]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8006264:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8006268:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800626c:	2b05      	cmp	r3, #5
 800626e:	d90a      	bls.n	8006286 <process_control_request+0x3b2>
 8006270:	4b4d      	ldr	r3, [pc, #308]	; (80063a8 <process_control_request+0x4d4>)
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d000      	beq.n	8006282 <process_control_request+0x3ae>
 8006280:	be00      	bkpt	0x0000
 8006282:	2300      	movs	r3, #0
 8006284:	e089      	b.n	800639a <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8006286:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800628a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800628e:	4945      	ldr	r1, [pc, #276]	; (80063a4 <process_control_request+0x4d0>)
 8006290:	0052      	lsls	r2, r2, #1
 8006292:	440a      	add	r2, r1
 8006294:	4413      	add	r3, r2
 8006296:	3313      	adds	r3, #19
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fb7c 	bl	8005998 <get_driver>
 80062a0:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00c      	beq.n	80062ca <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80062b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <process_control_request+0x3e6>
 80062b6:	2300      	movs	r3, #0
 80062b8:	e06f      	b.n	800639a <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fdef 	bl	8005ea4 <invoke_class_control>
 80062c6:	4603      	mov	r3, r0
 80062c8:	e067      	b.n	800639a <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d018      	beq.n	8006304 <process_control_request+0x430>
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	dc48      	bgt.n	8006368 <process_control_request+0x494>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <process_control_request+0x40c>
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d012      	beq.n	8006304 <process_control_request+0x430>
 80062de:	e043      	b.n	8006368 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80062e0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fef7 	bl	80070dc <usbd_edpt_stalled>
 80062ee:	4603      	mov	r3, r0
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 80062f4:	f107 0208 	add.w	r2, r7, #8
 80062f8:	79f8      	ldrb	r0, [r7, #7]
 80062fa:	2302      	movs	r3, #2
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	f001 f805 	bl	800730c <tud_control_xfer>
          }
          break;
 8006302:	e03d      	b.n	8006380 <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	885b      	ldrh	r3, [r3, #2]
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d112      	bne.n	8006334 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d107      	bne.n	8006326 <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8006316:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fe90 	bl	8007044 <usbd_edpt_clear_stall>
 8006324:	e006      	b.n	8006334 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8006326:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fe3c 	bl	8006fac <usbd_edpt_stall>
              }
            }

            if (driver)
 8006334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006336:	2b00      	cmp	r3, #0
 8006338:	d021      	beq.n	800637e <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fdaf 	bl	8005ea4 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8006346:	2000      	movs	r0, #0
 8006348:	f001 f85c 	bl	8007404 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 800634c:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <process_control_request+0x4d0>)
 800634e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006352:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <process_control_request+0x4aa>
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 ff61 	bl	8007228 <tud_control_status>
            }
          }
          break;
 8006366:	e00a      	b.n	800637e <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <process_control_request+0x4d4>)
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d000      	beq.n	800637a <process_control_request+0x4a6>
 8006378:	be00      	bkpt	0x0000
 800637a:	2300      	movs	r3, #0
 800637c:	e00d      	b.n	800639a <process_control_request+0x4c6>
          break;
 800637e:	bf00      	nop
        }
      }
    }
    break;
 8006380:	e00a      	b.n	8006398 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <process_control_request+0x4d4>)
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d000      	beq.n	8006394 <process_control_request+0x4c0>
 8006392:	be00      	bkpt	0x0000
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <process_control_request+0x4c6>
  }

  return true;
 8006398:	2301      	movs	r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	3750      	adds	r7, #80	; 0x50
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	2000199c 	.word	0x2000199c
 80063a8:	e000edf0 	.word	0xe000edf0

080063ac <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b094      	sub	sp, #80	; 0x50
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	460a      	mov	r2, r1
 80063b6:	71fb      	strb	r3, [r7, #7]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80063bc:	79bb      	ldrb	r3, [r7, #6]
 80063be:	3b01      	subs	r3, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fb faa4 	bl	8001910 <tud_descriptor_configuration_cb>
 80063c8:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80063ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <process_set_config+0x2c>
 80063d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d00a      	beq.n	80063ee <process_set_config+0x42>
 80063d8:	4b7c      	ldr	r3, [pc, #496]	; (80065cc <process_set_config+0x220>)
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d000      	beq.n	80063ea <process_set_config+0x3e>
 80063e8:	be00      	bkpt	0x0000
 80063ea:	2300      	movs	r3, #0
 80063ec:	e0e9      	b.n	80065c2 <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80063ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f0:	79db      	ldrb	r3, [r3, #7]
 80063f2:	115b      	asrs	r3, r3, #5
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	b2d9      	uxtb	r1, r3
 80063fa:	4a75      	ldr	r2, [pc, #468]	; (80065d0 <process_set_config+0x224>)
 80063fc:	7813      	ldrb	r3, [r2, #0]
 80063fe:	f361 1304 	bfi	r3, r1, #4, #1
 8006402:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8006404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006406:	79db      	ldrb	r3, [r3, #7]
 8006408:	119b      	asrs	r3, r3, #6
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	b2d9      	uxtb	r1, r3
 8006410:	4a6f      	ldr	r2, [pc, #444]	; (80065d0 <process_set_config+0x224>)
 8006412:	7813      	ldrb	r3, [r2, #0]
 8006414:	f361 1345 	bfi	r3, r1, #5, #1
 8006418:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 800641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641c:	3309      	adds	r3, #9
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8006420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006422:	885b      	ldrh	r3, [r3, #2]
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	4413      	add	r3, r2
 800642c:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 800642e:	e0bd      	b.n	80065ac <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006438:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	3301      	adds	r3, #1
 800643e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8006440:	2b0b      	cmp	r3, #11
 8006442:	d10f      	bne.n	8006464 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3301      	adds	r3, #1
 800646c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800646e:	2b04      	cmp	r3, #4
 8006470:	d00a      	beq.n	8006488 <process_set_config+0xdc>
 8006472:	4b56      	ldr	r3, [pc, #344]	; (80065cc <process_set_config+0x220>)
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d000      	beq.n	8006484 <process_set_config+0xd8>
 8006482:	be00      	bkpt	0x0000
 8006484:	2300      	movs	r3, #0
 8006486:	e09c      	b.n	80065c2 <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 800648c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006494:	2300      	movs	r3, #0
 8006496:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800649a:	e06e      	b.n	800657a <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 800649c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fa79 	bl	8005998 <get_driver>
 80064a6:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <process_set_config+0x118>
 80064ae:	4b47      	ldr	r3, [pc, #284]	; (80065cc <process_set_config+0x220>)
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d000      	beq.n	80064c0 <process_set_config+0x114>
 80064be:	be00      	bkpt	0x0000
 80064c0:	2300      	movs	r3, #0
 80064c2:	e07e      	b.n	80065c2 <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064ca:	79f8      	ldrb	r0, [r7, #7]
 80064cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ce:	4798      	blx	r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80064d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d94a      	bls.n	8006570 <process_set_config+0x1c4>
 80064da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064de:	429a      	cmp	r2, r3
 80064e0:	d846      	bhi.n	8006570 <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80064e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4a39      	ldr	r2, [pc, #228]	; (80065d4 <process_set_config+0x228>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d102      	bne.n	80064fa <process_set_config+0x14e>
 80064f4:	2302      	movs	r3, #2
 80064f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006500:	e024      	b.n	800654c <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	789a      	ldrb	r2, [r3, #2]
 8006506:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800650a:	4413      	add	r3, r2
 800650c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8006510:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006514:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <process_set_config+0x224>)
 8006516:	4413      	add	r3, r2
 8006518:	78db      	ldrb	r3, [r3, #3]
 800651a:	2bff      	cmp	r3, #255	; 0xff
 800651c:	d00a      	beq.n	8006534 <process_set_config+0x188>
 800651e:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <process_set_config+0x220>)
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d000      	beq.n	8006530 <process_set_config+0x184>
 800652e:	be00      	bkpt	0x0000
 8006530:	2300      	movs	r3, #0
 8006532:	e046      	b.n	80065c2 <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8006534:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006538:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <process_set_config+0x224>)
 800653a:	4413      	add	r3, r2
 800653c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8006540:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006542:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006546:	3301      	adds	r3, #1
 8006548:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800654c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8006550:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006554:	429a      	cmp	r2, r3
 8006556:	d3d4      	bcc.n	8006502 <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8006558:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800655c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800655e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006560:	481d      	ldr	r0, [pc, #116]	; (80065d8 <process_set_config+0x22c>)
 8006562:	f002 fd0b 	bl	8008f7c <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8006566:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800656a:	4413      	add	r3, r2
 800656c:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 800656e:	e00b      	b.n	8006588 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006570:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006574:	3301      	adds	r3, #1
 8006576:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800657a:	4b18      	ldr	r3, [pc, #96]	; (80065dc <process_set_config+0x230>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006584:	429a      	cmp	r2, r3
 8006586:	da89      	bge.n	800649c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <process_set_config+0x230>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006592:	429a      	cmp	r2, r3
 8006594:	da0a      	bge.n	80065ac <process_set_config+0x200>
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <process_set_config+0x220>)
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d000      	beq.n	80065a8 <process_set_config+0x1fc>
 80065a6:	be00      	bkpt	0x0000
 80065a8:	2300      	movs	r3, #0
 80065aa:	e00a      	b.n	80065c2 <process_set_config+0x216>
  while( p_desc < desc_end )
 80065ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b0:	429a      	cmp	r2, r3
 80065b2:	f4ff af3d 	bcc.w	8006430 <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <process_set_config+0x234>)
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <process_set_config+0x214>
 80065bc:	f7fa fc74 	bl	8000ea8 <tud_mount_cb>

  return true;
 80065c0:	2301      	movs	r3, #1
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3750      	adds	r7, #80	; 0x50
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	e000edf0 	.word	0xe000edf0
 80065d0:	2000199c 	.word	0x2000199c
 80065d4:	08004815 	.word	0x08004815
 80065d8:	200019af 	.word	0x200019af
 80065dc:	200019cc 	.word	0x200019cc
 80065e0:	08000ea9 	.word	0x08000ea9

080065e4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b094      	sub	sp, #80	; 0x50
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80065f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	885b      	ldrh	r3, [r3, #2]
 8006608:	b29b      	uxth	r3, r3
 800660a:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800660c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8006614:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006618:	3b01      	subs	r3, #1
 800661a:	2b0e      	cmp	r3, #14
 800661c:	f200 80bc 	bhi.w	8006798 <process_get_descriptor+0x1b4>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <process_get_descriptor+0x44>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006665 	.word	0x08006665
 800662c:	080066c9 	.word	0x080066c9
 8006630:	08006731 	.word	0x08006731
 8006634:	08006799 	.word	0x08006799
 8006638:	08006799 	.word	0x08006799
 800663c:	08006767 	.word	0x08006767
 8006640:	080066c9 	.word	0x080066c9
 8006644:	08006799 	.word	0x08006799
 8006648:	08006799 	.word	0x08006799
 800664c:	08006799 	.word	0x08006799
 8006650:	08006799 	.word	0x08006799
 8006654:	08006799 	.word	0x08006799
 8006658:	08006799 	.word	0x08006799
 800665c:	08006799 	.word	0x08006799
 8006660:	0800667b 	.word	0x0800667b
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006664:	f7fb f94a 	bl	80018fc <tud_descriptor_device_cb>
 8006668:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 800666a:	79f8      	ldrb	r0, [r7, #7]
 800666c:	2312      	movs	r3, #18
 800666e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	f000 fe4b 	bl	800730c <tud_control_xfer>
 8006676:	4603      	mov	r3, r0
 8006678:	e08f      	b.n	800679a <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 800667a:	4b4a      	ldr	r3, [pc, #296]	; (80067a4 <process_get_descriptor+0x1c0>)
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <process_get_descriptor+0xa0>
 8006680:	2300      	movs	r3, #0
 8006682:	e08a      	b.n	800679a <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006684:	f3af 8000 	nop.w
 8006688:	4603      	mov	r3, r0
 800668a:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <process_get_descriptor+0xc4>
 8006692:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <process_get_descriptor+0x1c4>)
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d000      	beq.n	80066a4 <process_get_descriptor+0xc0>
 80066a2:	be00      	bkpt	0x0000
 80066a4:	2300      	movs	r3, #0
 80066a6:	e078      	b.n	800679a <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	3302      	adds	r3, #2
 80066ac:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80066b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80066bc:	79f8      	ldrb	r0, [r7, #7]
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	f000 fe24 	bl	800730c <tud_control_xfer>
 80066c4:	4603      	mov	r3, r0
 80066c6:	e068      	b.n	800679a <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80066c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d107      	bne.n	80066e0 <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80066d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fb f91b 	bl	8001910 <tud_descriptor_configuration_cb>
 80066da:	4603      	mov	r3, r0
 80066dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066de:	e00b      	b.n	80066f8 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80066e0:	4b32      	ldr	r3, [pc, #200]	; (80067ac <process_get_descriptor+0x1c8>)
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <process_get_descriptor+0x106>
 80066e6:	2300      	movs	r3, #0
 80066e8:	e057      	b.n	800679a <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80066ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80066ee:	4618      	mov	r0, r3
 80066f0:	f3af 8000 	nop.w
 80066f4:	4603      	mov	r3, r0
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 80066f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <process_get_descriptor+0x130>
 80066fe:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <process_get_descriptor+0x1c4>)
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d000      	beq.n	8006710 <process_get_descriptor+0x12c>
 800670e:	be00      	bkpt	0x0000
 8006710:	2300      	movs	r3, #0
 8006712:	e042      	b.n	800679a <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8006714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006716:	3302      	adds	r3, #2
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8006720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006722:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006724:	79f8      	ldrb	r0, [r7, #7]
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	f000 fdf0 	bl	800730c <tud_control_xfer>
 800672c:	4603      	mov	r3, r0
 800672e:	e034      	b.n	800679a <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	889b      	ldrh	r3, [r3, #4]
 8006734:	b29a      	uxth	r2, r3
 8006736:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f7fb f8f5 	bl	800192c <tud_descriptor_string_cb>
 8006742:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <process_get_descriptor+0x16a>
 800674a:	2300      	movs	r3, #0
 800674c:	e025      	b.n	800679a <process_get_descriptor+0x1b6>
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8006756:	b29b      	uxth	r3, r3
 8006758:	79f8      	ldrb	r0, [r7, #7]
 800675a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	f000 fdd5 	bl	800730c <tud_control_xfer>
 8006762:	4603      	mov	r3, r0
 8006764:	e019      	b.n	800679a <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8006766:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <process_get_descriptor+0x1cc>)
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <process_get_descriptor+0x18c>
 800676c:	2300      	movs	r3, #0
 800676e:	e014      	b.n	800679a <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8006770:	f3af 8000 	nop.w
 8006774:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <process_get_descriptor+0x19c>
 800677c:	2300      	movs	r3, #0
 800677e:	e00c      	b.n	800679a <process_get_descriptor+0x1b6>
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8006788:	b29b      	uxth	r3, r3
 800678a:	79f8      	ldrb	r0, [r7, #7]
 800678c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	f000 fdbc 	bl	800730c <tud_control_xfer>
 8006794:	4603      	mov	r3, r0
 8006796:	e000      	b.n	800679a <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8006798:	2300      	movs	r3, #0
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3750      	adds	r7, #80	; 0x50
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	00000000 	.word	0x00000000
 80067a8:	e000edf0 	.word	0xe000edf0
	...

080067b4 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b0aa      	sub	sp, #168	; 0xa8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	3b02      	subs	r3, #2
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	f200 8198 	bhi.w	8006afc <dcd_event_handler+0x348>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <dcd_event_handler+0x20>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	080069e9 	.word	0x080069e9
 80067dc:	080068a5 	.word	0x080068a5
 80067e0:	0800694b 	.word	0x0800694b
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 80067e4:	4a82      	ldr	r2, [pc, #520]	; (80069f0 <dcd_event_handler+0x23c>)
 80067e6:	7813      	ldrb	r3, [r2, #0]
 80067e8:	f36f 0300 	bfc	r3, #0, #1
 80067ec:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 80067ee:	4a80      	ldr	r2, [pc, #512]	; (80069f0 <dcd_event_handler+0x23c>)
 80067f0:	7813      	ldrb	r3, [r2, #0]
 80067f2:	f36f 0341 	bfc	r3, #1, #1
 80067f6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 80067f8:	4b7d      	ldr	r3, [pc, #500]	; (80069f0 <dcd_event_handler+0x23c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 80067fe:	4a7c      	ldr	r2, [pc, #496]	; (80069f0 <dcd_event_handler+0x23c>)
 8006800:	7813      	ldrb	r3, [r2, #0]
 8006802:	f36f 0382 	bfc	r3, #2, #1
 8006806:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8006808:	4b7a      	ldr	r3, [pc, #488]	; (80069f4 <dcd_event_handler+0x240>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 800681c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006820:	f083 0301 	eor.w	r3, r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <dcd_event_handler+0x8a>
 800682a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800682e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8006832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	4798      	blx	r3
}
 800683c:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800683e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006842:	3304      	adds	r3, #4
 8006844:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff f81a 	bl	8005882 <tu_fifo_write>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8006854:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006858:	f083 0301 	eor.w	r3, r3, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <dcd_event_handler+0xc2>
 8006862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 800686a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2001      	movs	r0, #1
 8006872:	4798      	blx	r3
}
 8006874:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8006876:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800687a:	f083 0301 	eor.w	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <dcd_event_handler+0xe8>
 8006884:	4b5c      	ldr	r3, [pc, #368]	; (80069f8 <dcd_event_handler+0x244>)
 8006886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800688a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <dcd_event_handler+0xec>
 8006898:	be00      	bkpt	0x0000
 800689a:	e001      	b.n	80068a0 <dcd_event_handler+0xec>

  return success;
 800689c:	bf00      	nop
 800689e:	e172      	b.n	8006b86 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 80068a0:	bf00      	nop
    break;
 80068a2:	e170      	b.n	8006b86 <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 80068a4:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <dcd_event_handler+0x23c>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8164 	beq.w	8006b7c <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 80068b4:	4a4e      	ldr	r2, [pc, #312]	; (80069f0 <dcd_event_handler+0x23c>)
 80068b6:	7813      	ldrb	r3, [r2, #0]
 80068b8:	f043 0304 	orr.w	r3, r3, #4
 80068bc:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80068be:	4b4d      	ldr	r3, [pc, #308]	; (80069f4 <dcd_event_handler+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 80068d0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80068d4:	f083 0301 	eor.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <dcd_event_handler+0x13a>
 80068de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068e2:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 80068e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	4798      	blx	r3
}
 80068ec:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80068ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068f2:	3304      	adds	r3, #4
 80068f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe ffc3 	bl	8005882 <tu_fifo_write>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8006902:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006906:	f083 0301 	eor.w	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <dcd_event_handler+0x16c>
 8006910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006914:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 8006916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2001      	movs	r0, #1
 800691c:	4798      	blx	r3
}
 800691e:	bf00      	nop
  TU_ASSERT(success);
 8006920:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <dcd_event_handler+0x18e>
 800692e:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <dcd_event_handler+0x244>)
 8006930:	66bb      	str	r3, [r7, #104]	; 0x68
 8006932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <dcd_event_handler+0x192>
 800693e:	be00      	bkpt	0x0000
 8006940:	e001      	b.n	8006946 <dcd_event_handler+0x192>
  return success;
 8006942:	bf00      	nop
 8006944:	e11a      	b.n	8006b7c <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 8006946:	bf00      	nop
      }
    break;
 8006948:	e118      	b.n	8006b7c <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800694a:	4b29      	ldr	r3, [pc, #164]	; (80069f0 <dcd_event_handler+0x23c>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8113 	beq.w	8006b80 <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 800695a:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <dcd_event_handler+0x23c>)
 800695c:	7813      	ldrb	r3, [r2, #0]
 800695e:	f36f 0382 	bfc	r3, #2, #1
 8006962:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8006964:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <dcd_event_handler+0x240>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	663b      	str	r3, [r7, #96]	; 0x60
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8006974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006978:	f083 0301 	eor.w	r3, r3, #1
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <dcd_event_handler+0x1dc>
 8006982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006984:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 8006986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2000      	movs	r0, #0
 800698c:	4798      	blx	r3
}
 800698e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006992:	3304      	adds	r3, #4
 8006994:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe ff73 	bl	8005882 <tu_fifo_write>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 80069a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d006      	beq.n	80069be <dcd_event_handler+0x20a>
 80069b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b2:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 80069b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2001      	movs	r0, #1
 80069ba:	4798      	blx	r3
}
 80069bc:	bf00      	nop
  TU_ASSERT(success);
 80069be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c2:	f083 0301 	eor.w	r3, r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <dcd_event_handler+0x22c>
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <dcd_event_handler+0x244>)
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <dcd_event_handler+0x230>
 80069dc:	be00      	bkpt	0x0000
 80069de:	e001      	b.n	80069e4 <dcd_event_handler+0x230>
  return success;
 80069e0:	bf00      	nop
 80069e2:	e0cd      	b.n	8006b80 <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 80069e4:	bf00      	nop
      }
    break;
 80069e6:	e0cb      	b.n	8006b80 <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80069ee:	e023      	b.n	8006a38 <dcd_event_handler+0x284>
 80069f0:	2000199c 	.word	0x2000199c
 80069f4:	20001a90 	.word	0x20001a90
 80069f8:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 80069fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe ffc9 	bl	8005998 <get_driver>
 8006a06:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8006a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00d      	beq.n	8006a2e <dcd_event_handler+0x27a>
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8006a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	7810      	ldrb	r0, [r2, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6852      	ldr	r2, [r2, #4]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8006a2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a32:	3301      	adds	r3, #1
 8006a34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006a38:	4b55      	ldr	r3, [pc, #340]	; (8006b90 <dcd_event_handler+0x3dc>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a42:	429a      	cmp	r2, r3
 8006a44:	dada      	bge.n	80069fc <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8006a46:	4b53      	ldr	r3, [pc, #332]	; (8006b94 <dcd_event_handler+0x3e0>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8097 	beq.w	8006b84 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 8006a56:	4a4f      	ldr	r2, [pc, #316]	; (8006b94 <dcd_event_handler+0x3e0>)
 8006a58:	7813      	ldrb	r3, [r2, #0]
 8006a5a:	f36f 0382 	bfc	r3, #2, #1
 8006a5e:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	723b      	strb	r3, [r7, #8]
 8006a72:	2305      	movs	r3, #5
 8006a74:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8006a76:	4b48      	ldr	r3, [pc, #288]	; (8006b98 <dcd_event_handler+0x3e4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7c:	f107 0308 	add.w	r3, r7, #8
 8006a80:	647b      	str	r3, [r7, #68]	; 0x44
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8006a88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a8c:	f083 0301 	eor.w	r3, r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <dcd_event_handler+0x2f0>
 8006a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	4798      	blx	r3
}
 8006aa2:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fee9 	bl	8005882 <tu_fifo_write>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 8006ab6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aba:	f083 0301 	eor.w	r3, r3, #1
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <dcd_event_handler+0x31e>
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2001      	movs	r0, #1
 8006ace:	4798      	blx	r3
}
 8006ad0:	bf00      	nop
  TU_ASSERT(success);
 8006ad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ad6:	f083 0301 	eor.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d009      	beq.n	8006af4 <dcd_event_handler+0x340>
 8006ae0:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <dcd_event_handler+0x3e8>)
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <dcd_event_handler+0x344>
 8006af0:	be00      	bkpt	0x0000
 8006af2:	e001      	b.n	8006af8 <dcd_event_handler+0x344>
  return success;
 8006af4:	bf00      	nop
 8006af6:	e045      	b.n	8006b84 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8006af8:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8006afa:	e043      	b.n	8006b84 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8006afc:	4b26      	ldr	r3, [pc, #152]	; (8006b98 <dcd_event_handler+0x3e4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	f083 0301 	eor.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <dcd_event_handler+0x374>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2000      	movs	r0, #0
 8006b24:	4798      	blx	r3
}
 8006b26:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fea7 	bl	8005882 <tu_fifo_write>
 8006b34:	4603      	mov	r3, r0
 8006b36:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8006b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b3c:	f083 0301 	eor.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <dcd_event_handler+0x3a0>
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2001      	movs	r0, #1
 8006b50:	4798      	blx	r3
}
 8006b52:	bf00      	nop
  TU_ASSERT(success);
 8006b54:	7ffb      	ldrb	r3, [r7, #31]
 8006b56:	f083 0301 	eor.w	r3, r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <dcd_event_handler+0x3c0>
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <dcd_event_handler+0x3e8>)
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <dcd_event_handler+0x3c4>
 8006b70:	be00      	bkpt	0x0000
 8006b72:	e001      	b.n	8006b78 <dcd_event_handler+0x3c4>
  return success;
 8006b74:	bf00      	nop
 8006b76:	e006      	b.n	8006b86 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8006b78:	bf00      	nop
    break;
 8006b7a:	e004      	b.n	8006b86 <dcd_event_handler+0x3d2>
    break;
 8006b7c:	bf00      	nop
 8006b7e:	e002      	b.n	8006b86 <dcd_event_handler+0x3d2>
    break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <dcd_event_handler+0x3d2>
    break;
 8006b84:	bf00      	nop
  }
}
 8006b86:	bf00      	nop
 8006b88:	37a8      	adds	r7, #168	; 0xa8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200019cc 	.word	0x200019cc
 8006b94:	2000199c 	.word	0x2000199c
 8006b98:	20001a90 	.word	0x20001a90
 8006b9c:	e000edf0 	.word	0xe000edf0

08006ba0 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <usbd_int_set+0x30>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f827 	bl	8007c08 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8006bba:	e004      	b.n	8006bc6 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8006bbc:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <usbd_int_set+0x30>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f82d 	bl	8007c20 <dcd_int_disable>
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000031 	.word	0x20000031

08006bd4 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6039      	str	r1, [r7, #0]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	461a      	mov	r2, r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	71fb      	strb	r3, [r7, #7]
 8006be4:	460b      	mov	r3, r1
 8006be6:	71bb      	strb	r3, [r7, #6]
 8006be8:	4613      	mov	r3, r2
 8006bea:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8006bec:	2300      	movs	r3, #0
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf0:	e04d      	b.n	8006c8e <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d108      	bne.n	8006c10 <usbd_open_edpt_pair+0x3c>
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	78db      	ldrb	r3, [r3, #3]
 8006c02:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	797b      	ldrb	r3, [r7, #5]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00a      	beq.n	8006c26 <usbd_open_edpt_pair+0x52>
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <usbd_open_edpt_pair+0xcc>)
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d000      	beq.n	8006c22 <usbd_open_edpt_pair+0x4e>
 8006c20:	be00      	bkpt	0x0000
 8006c22:	2300      	movs	r3, #0
 8006c24:	e038      	b.n	8006c98 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 f83a 	bl	8006ca4 <usbd_edpt_open>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f083 0301 	eor.w	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <usbd_open_edpt_pair+0x7e>
 8006c3c:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <usbd_open_edpt_pair+0xcc>)
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d000      	beq.n	8006c4e <usbd_open_edpt_pair+0x7a>
 8006c4c:	be00      	bkpt	0x0000
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e022      	b.n	8006c98 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	789b      	ldrb	r3, [r3, #2]
 8006c56:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	09db      	lsrs	r3, r3, #7
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d104      	bne.n	8006c6c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	789a      	ldrb	r2, [r3, #2]
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e003      	b.n	8006c74 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	789a      	ldrb	r2, [r3, #2]
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8006c86:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8e:	79bb      	ldrb	r3, [r7, #6]
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	429a      	cmp	r2, r3
 8006c94:	dbad      	blt.n	8006bf2 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8006c96:	2301      	movs	r3, #1
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	e000edf0 	.word	0xe000edf0

08006ca4 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <usbd_edpt_open+0x7c>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	789b      	ldrb	r3, [r3, #2]
 8006cba:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d90a      	bls.n	8006cde <usbd_edpt_open+0x3a>
 8006cc8:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <usbd_edpt_open+0x80>)
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d000      	beq.n	8006cda <usbd_edpt_open+0x36>
 8006cd8:	be00      	bkpt	0x0000
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e01c      	b.n	8006d18 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8006cde:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <usbd_edpt_open+0x84>)
 8006ce0:	789b      	ldrb	r3, [r3, #2]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f002 f8cd 	bl	8008e84 <tu_edpt_validate>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f083 0301 	eor.w	r3, r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <usbd_edpt_open+0x68>
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <usbd_edpt_open+0x80>)
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d000      	beq.n	8006d08 <usbd_edpt_open+0x64>
 8006d06:	be00      	bkpt	0x0000
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e005      	b.n	8006d18 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ffd5 	bl	8007cc0 <dcd_edpt_open>
 8006d16:	4603      	mov	r3, r0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000031 	.word	0x20000031
 8006d24:	e000edf0 	.word	0xe000edf0
 8006d28:	2000199c 	.word	0x2000199c

08006d2c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	460a      	mov	r2, r1
 8006d36:	71fb      	strb	r3, [r7, #7]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	71bb      	strb	r3, [r7, #6]
 8006d3c:	79bb      	ldrb	r3, [r7, #6]
 8006d3e:	73bb      	strb	r3, [r7, #14]
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d46:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8006d48:	75fb      	strb	r3, [r7, #23]
 8006d4a:	79bb      	ldrb	r3, [r7, #6]
 8006d4c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	09db      	lsrs	r3, r3, #7
 8006d52:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8006d54:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8006d56:	7dfa      	ldrb	r2, [r7, #23]
 8006d58:	7dbb      	ldrb	r3, [r7, #22]
 8006d5a:	0052      	lsls	r2, r2, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3318      	adds	r3, #24
 8006d60:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <usbd_edpt_claim+0x50>)
 8006d62:	4413      	add	r3, r2
 8006d64:	3307      	adds	r3, #7
 8006d66:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f002 f826 	bl	8008dbc <tu_edpt_claim>
 8006d70:	4603      	mov	r3, r0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	2000199c 	.word	0x2000199c

08006d80 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	460a      	mov	r2, r1
 8006d8a:	71fb      	strb	r3, [r7, #7]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71bb      	strb	r3, [r7, #6]
 8006d90:	79bb      	ldrb	r3, [r7, #6]
 8006d92:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8006d9c:	75fb      	strb	r3, [r7, #23]
 8006d9e:	79bb      	ldrb	r3, [r7, #6]
 8006da0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8006da8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8006daa:	7dfa      	ldrb	r2, [r7, #23]
 8006dac:	7dbb      	ldrb	r3, [r7, #22]
 8006dae:	0052      	lsls	r2, r2, #1
 8006db0:	4413      	add	r3, r2
 8006db2:	3318      	adds	r3, #24
 8006db4:	4a06      	ldr	r2, [pc, #24]	; (8006dd0 <usbd_edpt_release+0x50>)
 8006db6:	4413      	add	r3, r2
 8006db8:	3307      	adds	r3, #7
 8006dba:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f002 f836 	bl	8008e30 <tu_edpt_release>
 8006dc4:	4603      	mov	r3, r0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000199c 	.word	0x2000199c

08006dd4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	603a      	str	r2, [r7, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	71fb      	strb	r3, [r7, #7]
 8006de2:	460b      	mov	r3, r1
 8006de4:	71bb      	strb	r3, [r7, #6]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8006dea:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <usbd_edpt_xfer+0xe0>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
 8006df0:	79bb      	ldrb	r3, [r7, #6]
 8006df2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006df4:	7abb      	ldrb	r3, [r7, #10]
 8006df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfa:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006dfc:	75fb      	strb	r3, [r7, #23]
 8006dfe:	79bb      	ldrb	r3, [r7, #6]
 8006e00:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	09db      	lsrs	r3, r3, #7
 8006e06:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006e08:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8006e0a:	7dfa      	ldrb	r2, [r7, #23]
 8006e0c:	7dbb      	ldrb	r3, [r7, #22]
 8006e0e:	492a      	ldr	r1, [pc, #168]	; (8006eb8 <usbd_edpt_xfer+0xe4>)
 8006e10:	0052      	lsls	r2, r2, #1
 8006e12:	440a      	add	r2, r1
 8006e14:	4413      	add	r3, r2
 8006e16:	3318      	adds	r3, #24
 8006e18:	79db      	ldrb	r3, [r3, #7]
 8006e1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <usbd_edpt_xfer+0x66>
 8006e24:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <usbd_edpt_xfer+0xe8>)
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d000      	beq.n	8006e36 <usbd_edpt_xfer+0x62>
 8006e34:	be00      	bkpt	0x0000
 8006e36:	2300      	movs	r3, #0
 8006e38:	e038      	b.n	8006eac <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8006e3a:	7dfa      	ldrb	r2, [r7, #23]
 8006e3c:	7dbb      	ldrb	r3, [r7, #22]
 8006e3e:	491e      	ldr	r1, [pc, #120]	; (8006eb8 <usbd_edpt_xfer+0xe4>)
 8006e40:	0052      	lsls	r2, r2, #1
 8006e42:	440a      	add	r2, r1
 8006e44:	4413      	add	r3, r2
 8006e46:	f103 0218 	add.w	r2, r3, #24
 8006e4a:	79d3      	ldrb	r3, [r2, #7]
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8006e52:	88bb      	ldrh	r3, [r7, #4]
 8006e54:	79b9      	ldrb	r1, [r7, #6]
 8006e56:	79f8      	ldrb	r0, [r7, #7]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	f001 f88f 	bl	8007f7c <dcd_edpt_xfer>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <usbd_edpt_xfer+0x94>
  {
    return true;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e021      	b.n	8006eac <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006e68:	7dfa      	ldrb	r2, [r7, #23]
 8006e6a:	7dbb      	ldrb	r3, [r7, #22]
 8006e6c:	4912      	ldr	r1, [pc, #72]	; (8006eb8 <usbd_edpt_xfer+0xe4>)
 8006e6e:	0052      	lsls	r2, r2, #1
 8006e70:	440a      	add	r2, r1
 8006e72:	4413      	add	r3, r2
 8006e74:	f103 0218 	add.w	r2, r3, #24
 8006e78:	79d3      	ldrb	r3, [r2, #7]
 8006e7a:	f36f 0300 	bfc	r3, #0, #1
 8006e7e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006e80:	7dfa      	ldrb	r2, [r7, #23]
 8006e82:	7dbb      	ldrb	r3, [r7, #22]
 8006e84:	490c      	ldr	r1, [pc, #48]	; (8006eb8 <usbd_edpt_xfer+0xe4>)
 8006e86:	0052      	lsls	r2, r2, #1
 8006e88:	440a      	add	r2, r1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f103 0218 	add.w	r2, r3, #24
 8006e90:	79d3      	ldrb	r3, [r2, #7]
 8006e92:	f36f 0382 	bfc	r3, #2, #1
 8006e96:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <usbd_edpt_xfer+0xe8>)
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d000      	beq.n	8006eaa <usbd_edpt_xfer+0xd6>
 8006ea8:	be00      	bkpt	0x0000
    return false;
 8006eaa:	2300      	movs	r3, #0
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000031 	.word	0x20000031
 8006eb8:	2000199c 	.word	0x2000199c
 8006ebc:	e000edf0 	.word	0xe000edf0

08006ec0 <usbd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool usbd_edpt_xfer_fifo(uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	603a      	str	r2, [r7, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	71bb      	strb	r3, [r7, #6]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8006ed6:	4b32      	ldr	r3, [pc, #200]	; (8006fa0 <usbd_edpt_xfer_fifo+0xe0>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
 8006edc:	79bb      	ldrb	r3, [r7, #6]
 8006ede:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006ee0:	7abb      	ldrb	r3, [r7, #10]
 8006ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006ee8:	75fb      	strb	r3, [r7, #23]
 8006eea:	79bb      	ldrb	r3, [r7, #6]
 8006eec:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	09db      	lsrs	r3, r3, #7
 8006ef2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006ef4:	75bb      	strb	r3, [r7, #22]

  TU_LOG(USBD_DBG, "  Queue ISO EP %02X with %u bytes ... ", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8006ef6:	7dfa      	ldrb	r2, [r7, #23]
 8006ef8:	7dbb      	ldrb	r3, [r7, #22]
 8006efa:	492a      	ldr	r1, [pc, #168]	; (8006fa4 <usbd_edpt_xfer_fifo+0xe4>)
 8006efc:	0052      	lsls	r2, r2, #1
 8006efe:	440a      	add	r2, r1
 8006f00:	4413      	add	r3, r2
 8006f02:	3318      	adds	r3, #24
 8006f04:	79db      	ldrb	r3, [r3, #7]
 8006f06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <usbd_edpt_xfer_fifo+0x66>
 8006f10:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <usbd_edpt_xfer_fifo+0xe8>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d000      	beq.n	8006f22 <usbd_edpt_xfer_fifo+0x62>
 8006f20:	be00      	bkpt	0x0000
 8006f22:	2300      	movs	r3, #0
 8006f24:	e038      	b.n	8006f98 <usbd_edpt_xfer_fifo+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer() could return
  // and usbd task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8006f26:	7dfa      	ldrb	r2, [r7, #23]
 8006f28:	7dbb      	ldrb	r3, [r7, #22]
 8006f2a:	491e      	ldr	r1, [pc, #120]	; (8006fa4 <usbd_edpt_xfer_fifo+0xe4>)
 8006f2c:	0052      	lsls	r2, r2, #1
 8006f2e:	440a      	add	r2, r1
 8006f30:	4413      	add	r3, r2
 8006f32:	f103 0218 	add.w	r2, r3, #24
 8006f36:	79d3      	ldrb	r3, [r2, #7]
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	71d3      	strb	r3, [r2, #7]

  if (dcd_edpt_xfer_fifo(rhport, ep_addr, ff, total_bytes))
 8006f3e:	88bb      	ldrh	r3, [r7, #4]
 8006f40:	79b9      	ldrb	r1, [r7, #6]
 8006f42:	79f8      	ldrb	r0, [r7, #7]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	f001 f881 	bl	800804c <dcd_edpt_xfer_fifo>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <usbd_edpt_xfer_fifo+0x94>
  {
    TU_LOG(USBD_DBG, "OK\r\n");
    return true;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e021      	b.n	8006f98 <usbd_edpt_xfer_fifo+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006f54:	7dfa      	ldrb	r2, [r7, #23]
 8006f56:	7dbb      	ldrb	r3, [r7, #22]
 8006f58:	4912      	ldr	r1, [pc, #72]	; (8006fa4 <usbd_edpt_xfer_fifo+0xe4>)
 8006f5a:	0052      	lsls	r2, r2, #1
 8006f5c:	440a      	add	r2, r1
 8006f5e:	4413      	add	r3, r2
 8006f60:	f103 0218 	add.w	r2, r3, #24
 8006f64:	79d3      	ldrb	r3, [r2, #7]
 8006f66:	f36f 0300 	bfc	r3, #0, #1
 8006f6a:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006f6c:	7dfa      	ldrb	r2, [r7, #23]
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	490c      	ldr	r1, [pc, #48]	; (8006fa4 <usbd_edpt_xfer_fifo+0xe4>)
 8006f72:	0052      	lsls	r2, r2, #1
 8006f74:	440a      	add	r2, r1
 8006f76:	4413      	add	r3, r2
 8006f78:	f103 0218 	add.w	r2, r3, #24
 8006f7c:	79d3      	ldrb	r3, [r2, #7]
 8006f7e:	f36f 0382 	bfc	r3, #2, #1
 8006f82:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "failed\r\n");
    TU_BREAKPOINT();
 8006f84:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <usbd_edpt_xfer_fifo+0xe8>)
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d000      	beq.n	8006f96 <usbd_edpt_xfer_fifo+0xd6>
 8006f94:	be00      	bkpt	0x0000
    return false;
 8006f96:	2300      	movs	r3, #0
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000031 	.word	0x20000031
 8006fa4:	2000199c 	.word	0x2000199c
 8006fa8:	e000edf0 	.word	0xe000edf0

08006fac <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	460a      	mov	r2, r1
 8006fb6:	71fb      	strb	r3, [r7, #7]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006fbc:	4b1f      	ldr	r3, [pc, #124]	; (800703c <usbd_edpt_stall+0x90>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	71fb      	strb	r3, [r7, #7]
 8006fc2:	79bb      	ldrb	r3, [r7, #6]
 8006fc4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006fc6:	7b3b      	ldrb	r3, [r7, #12]
 8006fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fcc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	79bb      	ldrb	r3, [r7, #6]
 8006fd2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006fd4:	7b7b      	ldrb	r3, [r7, #13]
 8006fd6:	09db      	lsrs	r3, r3, #7
 8006fd8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006fda:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8006fdc:	7bfa      	ldrb	r2, [r7, #15]
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	4917      	ldr	r1, [pc, #92]	; (8007040 <usbd_edpt_stall+0x94>)
 8006fe2:	0052      	lsls	r2, r2, #1
 8006fe4:	440a      	add	r2, r1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3318      	adds	r3, #24
 8006fea:	79db      	ldrb	r3, [r3, #7]
 8006fec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11d      	bne.n	8007032 <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8006ff6:	79ba      	ldrb	r2, [r7, #6]
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 f9df 	bl	80083c0 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	490e      	ldr	r1, [pc, #56]	; (8007040 <usbd_edpt_stall+0x94>)
 8007008:	0052      	lsls	r2, r2, #1
 800700a:	440a      	add	r2, r1
 800700c:	4413      	add	r3, r2
 800700e:	f103 0218 	add.w	r2, r3, #24
 8007012:	79d3      	ldrb	r3, [r2, #7]
 8007014:	f043 0302 	orr.w	r3, r3, #2
 8007018:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 800701a:	7bfa      	ldrb	r2, [r7, #15]
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <usbd_edpt_stall+0x94>)
 8007020:	0052      	lsls	r2, r2, #1
 8007022:	440a      	add	r2, r1
 8007024:	4413      	add	r3, r2
 8007026:	f103 0218 	add.w	r2, r3, #24
 800702a:	79d3      	ldrb	r3, [r2, #7]
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	71d3      	strb	r3, [r2, #7]
  }
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000031 	.word	0x20000031
 8007040:	2000199c 	.word	0x2000199c

08007044 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	460a      	mov	r2, r1
 800704e:	71fb      	strb	r3, [r7, #7]
 8007050:	4613      	mov	r3, r2
 8007052:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007054:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <usbd_edpt_clear_stall+0x90>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	71fb      	strb	r3, [r7, #7]
 800705a:	79bb      	ldrb	r3, [r7, #6]
 800705c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800705e:	7b3b      	ldrb	r3, [r7, #12]
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	79bb      	ldrb	r3, [r7, #6]
 800706a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800706c:	7b7b      	ldrb	r3, [r7, #13]
 800706e:	09db      	lsrs	r3, r3, #7
 8007070:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007072:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	4917      	ldr	r1, [pc, #92]	; (80070d8 <usbd_edpt_clear_stall+0x94>)
 800707a:	0052      	lsls	r2, r2, #1
 800707c:	440a      	add	r2, r1
 800707e:	4413      	add	r3, r2
 8007080:	3318      	adds	r3, #24
 8007082:	79db      	ldrb	r3, [r3, #7]
 8007084:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01d      	beq.n	80070ca <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 800708e:	79ba      	ldrb	r2, [r7, #6]
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f9a5 	bl	80083e4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800709a:	7bfa      	ldrb	r2, [r7, #15]
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	490e      	ldr	r1, [pc, #56]	; (80070d8 <usbd_edpt_clear_stall+0x94>)
 80070a0:	0052      	lsls	r2, r2, #1
 80070a2:	440a      	add	r2, r1
 80070a4:	4413      	add	r3, r2
 80070a6:	f103 0218 	add.w	r2, r3, #24
 80070aa:	79d3      	ldrb	r3, [r2, #7]
 80070ac:	f36f 0341 	bfc	r3, #1, #1
 80070b0:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80070b2:	7bfa      	ldrb	r2, [r7, #15]
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	4908      	ldr	r1, [pc, #32]	; (80070d8 <usbd_edpt_clear_stall+0x94>)
 80070b8:	0052      	lsls	r2, r2, #1
 80070ba:	440a      	add	r2, r1
 80070bc:	4413      	add	r3, r2
 80070be:	f103 0218 	add.w	r2, r3, #24
 80070c2:	79d3      	ldrb	r3, [r2, #7]
 80070c4:	f36f 0300 	bfc	r3, #0, #1
 80070c8:	71d3      	strb	r3, [r2, #7]
  }
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000031 	.word	0x20000031
 80070d8:	2000199c 	.word	0x2000199c

080070dc <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	460a      	mov	r2, r1
 80070e6:	71fb      	strb	r3, [r7, #7]
 80070e8:	4613      	mov	r3, r2
 80070ea:	71bb      	strb	r3, [r7, #6]
 80070ec:	79bb      	ldrb	r3, [r7, #6]
 80070ee:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80070f0:	7b3b      	ldrb	r3, [r7, #12]
 80070f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	79bb      	ldrb	r3, [r7, #6]
 80070fc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	09db      	lsrs	r3, r3, #7
 8007102:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007104:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	490a      	ldr	r1, [pc, #40]	; (8007134 <usbd_edpt_stalled+0x58>)
 800710c:	0052      	lsls	r2, r2, #1
 800710e:	440a      	add	r2, r1
 8007110:	4413      	add	r3, r2
 8007112:	3318      	adds	r3, #24
 8007114:	79db      	ldrb	r3, [r3, #7]
 8007116:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000199c 	.word	0x2000199c

08007138 <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	460a      	mov	r2, r1
 8007142:	71fb      	strb	r3, [r7, #7]
 8007144:	4613      	mov	r3, r2
 8007146:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <usbd_edpt_close+0xa8>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(dcd_edpt_close, /**/);
 800714e:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <usbd_edpt_close+0xac>)
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <usbd_edpt_close+0x30>
 8007154:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <usbd_edpt_close+0xb0>)
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d039      	beq.n	80071d8 <usbd_edpt_close+0xa0>
 8007164:	be00      	bkpt	0x0000
 8007166:	e037      	b.n	80071d8 <usbd_edpt_close+0xa0>
 8007168:	79bb      	ldrb	r3, [r7, #6]
 800716a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007172:	b2db      	uxtb	r3, r3
  TU_LOG(USBD_DBG, "  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007174:	75fb      	strb	r3, [r7, #23]
 8007176:	79bb      	ldrb	r3, [r7, #6]
 8007178:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	09db      	lsrs	r3, r3, #7
 800717e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007180:	75bb      	strb	r3, [r7, #22]

  dcd_edpt_close(rhport, ep_addr);
 8007182:	79ba      	ldrb	r2, [r7, #6]
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f8b3 	bl	80082f4 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800718e:	7dfa      	ldrb	r2, [r7, #23]
 8007190:	7dbb      	ldrb	r3, [r7, #22]
 8007192:	4916      	ldr	r1, [pc, #88]	; (80071ec <usbd_edpt_close+0xb4>)
 8007194:	0052      	lsls	r2, r2, #1
 8007196:	440a      	add	r2, r1
 8007198:	4413      	add	r3, r2
 800719a:	f103 0218 	add.w	r2, r3, #24
 800719e:	79d3      	ldrb	r3, [r2, #7]
 80071a0:	f36f 0341 	bfc	r3, #1, #1
 80071a4:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 80071a6:	7dfa      	ldrb	r2, [r7, #23]
 80071a8:	7dbb      	ldrb	r3, [r7, #22]
 80071aa:	4910      	ldr	r1, [pc, #64]	; (80071ec <usbd_edpt_close+0xb4>)
 80071ac:	0052      	lsls	r2, r2, #1
 80071ae:	440a      	add	r2, r1
 80071b0:	4413      	add	r3, r2
 80071b2:	f103 0218 	add.w	r2, r3, #24
 80071b6:	79d3      	ldrb	r3, [r2, #7]
 80071b8:	f36f 0300 	bfc	r3, #0, #1
 80071bc:	71d3      	strb	r3, [r2, #7]
  _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80071be:	7dfa      	ldrb	r2, [r7, #23]
 80071c0:	7dbb      	ldrb	r3, [r7, #22]
 80071c2:	490a      	ldr	r1, [pc, #40]	; (80071ec <usbd_edpt_close+0xb4>)
 80071c4:	0052      	lsls	r2, r2, #1
 80071c6:	440a      	add	r2, r1
 80071c8:	4413      	add	r3, r2
 80071ca:	f103 0218 	add.w	r2, r3, #24
 80071ce:	79d3      	ldrb	r3, [r2, #7]
 80071d0:	f36f 0382 	bfc	r3, #2, #1
 80071d4:	71d3      	strb	r3, [r2, #7]

  return;
 80071d6:	e000      	b.n	80071da <usbd_edpt_close+0xa2>
  TU_ASSERT(dcd_edpt_close, /**/);
 80071d8:	bf00      	nop
}
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000031 	.word	0x20000031
 80071e4:	080082f5 	.word	0x080082f5
 80071e8:	e000edf0 	.word	0xe000edf0
 80071ec:	2000199c 	.word	0x2000199c

080071f0 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <_status_stage_xact+0x1e>
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <_status_stage_xact+0x20>
 800720e:	2380      	movs	r3, #128	; 0x80
 8007210:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8007212:	7bf9      	ldrb	r1, [r7, #15]
 8007214:	79f8      	ldrb	r0, [r7, #7]
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	f7ff fddb 	bl	8006dd4 <usbd_edpt_xfer>
 800721e:	4603      	mov	r3, r0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <tud_control_status+0x3c>)
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	6810      	ldr	r0, [r2, #0]
 800723a:	6851      	ldr	r1, [r2, #4]
 800723c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <tud_control_status+0x3c>)
 8007240:	2200      	movs	r2, #0
 8007242:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007244:	4b07      	ldr	r3, [pc, #28]	; (8007264 <tud_control_status+0x3c>)
 8007246:	2200      	movs	r2, #0
 8007248:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <tud_control_status+0x3c>)
 800724c:	2200      	movs	r2, #0
 800724e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff ffcb 	bl	80071f0 <_status_stage_xact>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20001a94 	.word	0x20001a94

08007268 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <_data_stage_xact+0x9c>)
 8007274:	899a      	ldrh	r2, [r3, #12]
 8007276:	4b23      	ldr	r3, [pc, #140]	; (8007304 <_data_stage_xact+0x9c>)
 8007278:	89db      	ldrh	r3, [r3, #14]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	b29b      	uxth	r3, r3
 800727e:	837b      	strh	r3, [r7, #26]
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007284:	8b7a      	ldrh	r2, [r7, #26]
 8007286:	8b3b      	ldrh	r3, [r7, #24]
 8007288:	4293      	cmp	r3, r2
 800728a:	bf28      	it	cs
 800728c:	4613      	movcs	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8007292:	2300      	movs	r3, #0
 8007294:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8007296:	4b1b      	ldr	r3, [pc, #108]	; (8007304 <_data_stage_xact+0x9c>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01e      	beq.n	80072e2 <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 80072a8:	8bbb      	ldrh	r3, [r7, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d019      	beq.n	80072e2 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <_data_stage_xact+0x9c>)
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	8bbb      	ldrh	r3, [r7, #28]
 80072b4:	4914      	ldr	r1, [pc, #80]	; (8007308 <_data_stage_xact+0xa0>)
 80072b6:	6179      	str	r1, [r7, #20]
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	6139      	str	r1, [r7, #16]
 80072bc:	60fa      	str	r2, [r7, #12]
 80072be:	60bb      	str	r3, [r7, #8]
  if (count > destsz) {
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d202      	bcs.n	80072ce <_data_stage_xact+0x66>
    return -1;
 80072c8:	f04f 33ff 	mov.w	r3, #4294967295
 80072cc:	e005      	b.n	80072da <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	68f9      	ldr	r1, [r7, #12]
 80072d2:	6978      	ldr	r0, [r7, #20]
 80072d4:	f001 febc 	bl	8009050 <memcpy>
  return 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <_data_stage_xact+0x7a>
 80072de:	2300      	movs	r3, #0
 80072e0:	e00b      	b.n	80072fa <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80072e2:	8bbb      	ldrh	r3, [r7, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <_data_stage_xact+0x84>
 80072e8:	4a07      	ldr	r2, [pc, #28]	; (8007308 <_data_stage_xact+0xa0>)
 80072ea:	e000      	b.n	80072ee <_data_stage_xact+0x86>
 80072ec:	2200      	movs	r2, #0
 80072ee:	8bbb      	ldrh	r3, [r7, #28]
 80072f0:	7ff9      	ldrb	r1, [r7, #31]
 80072f2:	79f8      	ldrb	r0, [r7, #7]
 80072f4:	f7ff fd6e 	bl	8006dd4 <usbd_edpt_xfer>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3720      	adds	r7, #32
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20001a94 	.word	0x20001a94
 8007308:	20001aa8 	.word	0x20001aa8

0800730c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]
 800731c:	4613      	mov	r3, r2
 800731e:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8007320:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <tud_control_xfer+0xd8>)
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	6810      	ldr	r0, [r2, #0]
 8007326:	6851      	ldr	r1, [r2, #4]
 8007328:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 800732a:	4a2e      	ldr	r2, [pc, #184]	; (80073e4 <tud_control_xfer+0xd8>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8007330:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <tud_control_xfer+0xd8>)
 8007332:	2200      	movs	r2, #0
 8007334:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	b29a      	uxth	r2, r3
 800733c:	89bb      	ldrh	r3, [r7, #12]
 800733e:	827b      	strh	r3, [r7, #18]
 8007340:	4613      	mov	r3, r2
 8007342:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007344:	8a7a      	ldrh	r2, [r7, #18]
 8007346:	8a3b      	ldrh	r3, [r7, #16]
 8007348:	4293      	cmp	r3, r2
 800734a:	bf28      	it	cs
 800734c:	4613      	movcs	r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <tud_control_xfer+0xd8>)
 8007352:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	88db      	ldrh	r3, [r3, #6]
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d026      	beq.n	80073ac <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 800735e:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <tud_control_xfer+0xd8>)
 8007360:	899b      	ldrh	r3, [r3, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00d      	beq.n	8007382 <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <tud_control_xfer+0x76>
 800736c:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <tud_control_xfer+0xdc>)
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d000      	beq.n	800737e <tud_control_xfer+0x72>
 800737c:	be00      	bkpt	0x0000
 800737e:	2300      	movs	r3, #0
 8007380:	e02b      	b.n	80073da <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ff6f 	bl	8007268 <_data_stage_xact>
 800738a:	4603      	mov	r3, r0
 800738c:	f083 0301 	eor.w	r3, r3, #1
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d020      	beq.n	80073d8 <tud_control_xfer+0xcc>
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <tud_control_xfer+0xdc>)
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d000      	beq.n	80073a8 <tud_control_xfer+0x9c>
 80073a6:	be00      	bkpt	0x0000
 80073a8:	2300      	movs	r3, #0
 80073aa:	e016      	b.n	80073da <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff ff1d 	bl	80071f0 <_status_stage_xact>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f083 0301 	eor.w	r3, r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <tud_control_xfer+0xcc>
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <tud_control_xfer+0xdc>)
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d000      	beq.n	80073d4 <tud_control_xfer+0xc8>
 80073d2:	be00      	bkpt	0x0000
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <tud_control_xfer+0xce>
  }

  return true;
 80073d8:	2301      	movs	r3, #1
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20001a94 	.word	0x20001a94
 80073e8:	e000edf0 	.word	0xe000edf0

080073ec <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80073f0:	2214      	movs	r2, #20
 80073f2:	2100      	movs	r1, #0
 80073f4:	4802      	ldr	r0, [pc, #8]	; (8007400 <usbd_control_reset+0x14>)
 80073f6:	f001 fe39 	bl	800906c <memset>
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20001a94 	.word	0x20001a94

08007404 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 800740c:	4a04      	ldr	r2, [pc, #16]	; (8007420 <usbd_control_set_complete_callback+0x1c>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6113      	str	r3, [r2, #16]
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20001a94 	.word	0x20001a94

08007424 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <usbd_control_set_request+0x30>)
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6810      	ldr	r0, [r2, #0]
 8007432:	6851      	ldr	r1, [r2, #4]
 8007434:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8007436:	4b07      	ldr	r3, [pc, #28]	; (8007454 <usbd_control_set_request+0x30>)
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <usbd_control_set_request+0x30>)
 800743e:	2200      	movs	r2, #0
 8007440:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8007442:	4b04      	ldr	r3, [pc, #16]	; (8007454 <usbd_control_set_request+0x30>)
 8007444:	2200      	movs	r2, #0
 8007446:	819a      	strh	r2, [r3, #12]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20001a94 	.word	0x20001a94

08007458 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4603      	mov	r3, r0
 8007462:	71fb      	strb	r3, [r7, #7]
 8007464:	460b      	mov	r3, r1
 8007466:	71bb      	strb	r3, [r7, #6]
 8007468:	4613      	mov	r3, r2
 800746a:	717b      	strb	r3, [r7, #5]
 800746c:	79bb      	ldrb	r3, [r7, #6]
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	09db      	lsrs	r3, r3, #7
 8007474:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8007476:	4a50      	ldr	r2, [pc, #320]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	4293      	cmp	r3, r2
 8007482:	d021      	beq.n	80074c8 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <usbd_control_xfer_cb+0x48>
 800748a:	4b4c      	ldr	r3, [pc, #304]	; (80075bc <usbd_control_xfer_cb+0x164>)
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d000      	beq.n	800749c <usbd_control_xfer_cb+0x44>
 800749a:	be00      	bkpt	0x0000
 800749c:	2300      	movs	r3, #0
 800749e:	e087      	b.n	80075b0 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80074a0:	4b47      	ldr	r3, [pc, #284]	; (80075c0 <usbd_control_xfer_cb+0x168>)
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <usbd_control_xfer_cb+0x58>
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	4943      	ldr	r1, [pc, #268]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074aa:	4618      	mov	r0, r3
 80074ac:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 80074b0:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80074b8:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	79f8      	ldrb	r0, [r7, #7]
 80074be:	4a3e      	ldr	r2, [pc, #248]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074c0:	2103      	movs	r1, #3
 80074c2:	4798      	blx	r3
    }

    return true;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e073      	b.n	80075b0 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 80074c8:	4b3b      	ldr	r3, [pc, #236]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10c      	bne.n	80074f0 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 80074d6:	4b38      	ldr	r3, [pc, #224]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <usbd_control_xfer_cb+0x8a>
 80074de:	2300      	movs	r3, #0
 80074e0:	e066      	b.n	80075b0 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 80074e2:	4b35      	ldr	r3, [pc, #212]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4936      	ldr	r1, [pc, #216]	; (80075c4 <usbd_control_xfer_cb+0x16c>)
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fdb0 	bl	8009050 <memcpy>
    TU_LOG_MEM(USBD_CONTROL_DEBUG, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80074f0:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074f2:	89da      	ldrh	r2, [r3, #14]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	4b2e      	ldr	r3, [pc, #184]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 80074fe:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	4413      	add	r3, r2
 8007508:	4a2b      	ldr	r2, [pc, #172]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 800750a:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 800750c:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 800750e:	88da      	ldrh	r2, [r3, #6]
 8007510:	4b29      	ldr	r3, [pc, #164]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007512:	89db      	ldrh	r3, [r3, #14]
 8007514:	429a      	cmp	r2, r3
 8007516:	d002      	beq.n	800751e <usbd_control_xfer_cb+0xc6>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b3f      	cmp	r3, #63	; 0x3f
 800751c:	d831      	bhi.n	8007582 <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 800751e:	2301      	movs	r3, #1
 8007520:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8007522:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= USBD_CONTROL_DEBUG
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800752a:	4b23      	ldr	r3, [pc, #140]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	79f8      	ldrb	r0, [r7, #7]
 8007530:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007532:	2102      	movs	r1, #2
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 800753a:	7ffb      	ldrb	r3, [r7, #31]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d015      	beq.n	800756c <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	491d      	ldr	r1, [pc, #116]	; (80075b8 <usbd_control_xfer_cb+0x160>)
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fe53 	bl	80071f0 <_status_stage_xact>
 800754a:	4603      	mov	r3, r0
 800754c:	f083 0301 	eor.w	r3, r3, #1
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02a      	beq.n	80075ac <usbd_control_xfer_cb+0x154>
 8007556:	4b19      	ldr	r3, [pc, #100]	; (80075bc <usbd_control_xfer_cb+0x164>)
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d000      	beq.n	8007568 <usbd_control_xfer_cb+0x110>
 8007566:	be00      	bkpt	0x0000
 8007568:	2300      	movs	r3, #0
 800756a:	e021      	b.n	80075b0 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f000 ff25 	bl	80083c0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	4618      	mov	r0, r3
 800757c:	f000 ff20 	bl	80083c0 <dcd_edpt_stall>
  {
 8007580:	e014      	b.n	80075ac <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fe6f 	bl	8007268 <_data_stage_xact>
 800758a:	4603      	mov	r3, r0
 800758c:	f083 0301 	eor.w	r3, r3, #1
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <usbd_control_xfer_cb+0x156>
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <usbd_control_xfer_cb+0x164>)
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d000      	beq.n	80075a8 <usbd_control_xfer_cb+0x150>
 80075a6:	be00      	bkpt	0x0000
 80075a8:	2300      	movs	r3, #0
 80075aa:	e001      	b.n	80075b0 <usbd_control_xfer_cb+0x158>
  {
 80075ac:	bf00      	nop
  }

  return true;
 80075ae:	2301      	movs	r3, #1
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3720      	adds	r7, #32
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20001a94 	.word	0x20001a94
 80075bc:	e000edf0 	.word	0xe000edf0
 80075c0:	00000000 	.word	0x00000000
 80075c4:	20001aa8 	.word	0x20001aa8

080075c8 <__NVIC_EnableIRQ>:
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	db0b      	blt.n	80075f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	f003 021f 	and.w	r2, r3, #31
 80075e0:	4907      	ldr	r1, [pc, #28]	; (8007600 <__NVIC_EnableIRQ+0x38>)
 80075e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2001      	movs	r0, #1
 80075ea:	fa00 f202 	lsl.w	r2, r0, r2
 80075ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	e000e100 	.word	0xe000e100

08007604 <__NVIC_DisableIRQ>:
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800760e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007612:	2b00      	cmp	r3, #0
 8007614:	db12      	blt.n	800763c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	f003 021f 	and.w	r2, r3, #31
 800761c:	490a      	ldr	r1, [pc, #40]	; (8007648 <__NVIC_DisableIRQ+0x44>)
 800761e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	2001      	movs	r0, #1
 8007626:	fa00 f202 	lsl.w	r2, r0, r2
 800762a:	3320      	adds	r3, #32
 800762c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007630:	f3bf 8f4f 	dsb	sy
}
 8007634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007636:	f3bf 8f6f 	isb	sy
}
 800763a:	bf00      	nop
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	e000e100 	.word	0xe000e100

0800764c <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	089b      	lsrs	r3, r3, #2
 800765a:	b29b      	uxth	r3, r3
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	b29b      	uxth	r3, r3
 8007660:	3317      	adds	r3, #23
 8007662:	b29b      	uxth	r3, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800767a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800767e:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8007684:	2300      	movs	r3, #0
 8007686:	757b      	strb	r3, [r7, #21]
 8007688:	e013      	b.n	80076b2 <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 800768a:	7d7b      	ldrb	r3, [r7, #21]
 800768c:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <update_grxfsiz+0x60>)
 800768e:	015b      	lsls	r3, r3, #5
 8007690:	4413      	add	r3, r2
 8007692:	330a      	adds	r3, #10
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	8afb      	ldrh	r3, [r7, #22]
 8007698:	81fb      	strh	r3, [r7, #14]
 800769a:	4613      	mov	r3, r2
 800769c:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 800769e:	89fa      	ldrh	r2, [r7, #14]
 80076a0:	89bb      	ldrh	r3, [r7, #12]
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bf38      	it	cc
 80076a6:	4613      	movcc	r3, r2
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 80076ac:	7d7b      	ldrb	r3, [r7, #21]
 80076ae:	3301      	adds	r3, #1
 80076b0:	757b      	strb	r3, [r7, #21]
 80076b2:	7d7b      	ldrb	r3, [r7, #21]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d9e8      	bls.n	800768a <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 80076b8:	8afb      	ldrh	r3, [r7, #22]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff ffc6 	bl	800764c <calc_rx_ff_size>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80076c8:	bf00      	nop
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20001af0 	.word	0x20001af0

080076d4 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80076de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80076e2:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80076e4:	4b30      	ldr	r3, [pc, #192]	; (80077a8 <bus_reset+0xd4>)
 80076e6:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80076e8:	4b30      	ldr	r3, [pc, #192]	; (80077ac <bus_reset+0xd8>)
 80076ea:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80076ec:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <bus_reset+0xdc>)
 80076ee:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 80076f0:	2280      	movs	r2, #128	; 0x80
 80076f2:	2100      	movs	r1, #0
 80076f4:	482f      	ldr	r0, [pc, #188]	; (80077b4 <bus_reset+0xe0>)
 80076f6:	f001 fcb9 	bl	800906c <memset>
  _out_ep_closed = false;
 80076fa:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <bus_reset+0xe4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800770c:	2300      	movs	r3, #0
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e00e      	b.n	8007730 <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	015b      	lsls	r3, r3, #5
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	7ffb      	ldrb	r3, [r7, #31]
 800771e:	015b      	lsls	r3, r3, #5
 8007720:	6939      	ldr	r1, [r7, #16]
 8007722:	440b      	add	r3, r1
 8007724:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007728:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	3301      	adds	r3, #1
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d9ed      	bls.n	8007712 <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800773c:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2209      	movs	r2, #9
 8007742:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2209      	movs	r2, #9
 8007748:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 800774a:	2040      	movs	r0, #64	; 0x40
 800774c:	f7ff ff7e 	bl	800764c <calc_rx_ff_size>
 8007750:	4603      	mov	r3, r0
 8007752:	461a      	mov	r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 8007758:	4b18      	ldr	r3, [pc, #96]	; (80077bc <bus_reset+0xe8>)
 800775a:	2210      	movs	r2, #16
 800775c:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 800775e:	4b17      	ldr	r3, [pc, #92]	; (80077bc <bus_reset+0xe8>)
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8007766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f023 0203 	bic.w	r2, r3, #3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800777a:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <bus_reset+0xe0>)
 800777c:	2240      	movs	r2, #64	; 0x40
 800777e:	835a      	strh	r2, [r3, #26]
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <bus_reset+0xe0>)
 8007782:	8b5a      	ldrh	r2, [r3, #26]
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <bus_reset+0xe0>)
 8007786:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	619a      	str	r2, [r3, #24]
}
 80077a0:	bf00      	nop
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	50000800 	.word	0x50000800
 80077ac:	50000b00 	.word	0x50000b00
 80077b0:	50000900 	.word	0x50000900
 80077b4:	20001af0 	.word	0x20001af0
 80077b8:	20001b76 	.word	0x20001b76
 80077bc:	20001b74 	.word	0x20001b74

080077c0 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d106      	bne.n	80077ec <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 80077ea:	e050      	b.n	800788e <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 80077ec:	4b2b      	ldr	r3, [pc, #172]	; (800789c <set_turnaround+0xdc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2b      	ldr	r2, [pc, #172]	; (80078a0 <set_turnaround+0xe0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d302      	bcc.n	80077fc <set_turnaround+0x3c>
      turnaround = 0x6U;
 80077f6:	2306      	movs	r3, #6
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e041      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 80077fc:	4b27      	ldr	r3, [pc, #156]	; (800789c <set_turnaround+0xdc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a28      	ldr	r2, [pc, #160]	; (80078a4 <set_turnaround+0xe4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d902      	bls.n	800780c <set_turnaround+0x4c>
      turnaround = 0x7U;
 8007806:	2307      	movs	r3, #7
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e039      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 800780c:	4b23      	ldr	r3, [pc, #140]	; (800789c <set_turnaround+0xdc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a25      	ldr	r2, [pc, #148]	; (80078a8 <set_turnaround+0xe8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d302      	bcc.n	800781c <set_turnaround+0x5c>
      turnaround = 0x8U;
 8007816:	2308      	movs	r3, #8
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	e031      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 800781c:	4b1f      	ldr	r3, [pc, #124]	; (800789c <set_turnaround+0xdc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a22      	ldr	r2, [pc, #136]	; (80078ac <set_turnaround+0xec>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d902      	bls.n	800782c <set_turnaround+0x6c>
      turnaround = 0x9U;
 8007826:	2309      	movs	r3, #9
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e029      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 800782c:	4b1b      	ldr	r3, [pc, #108]	; (800789c <set_turnaround+0xdc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <set_turnaround+0xf0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d902      	bls.n	800783c <set_turnaround+0x7c>
      turnaround = 0xAU;
 8007836:	230a      	movs	r3, #10
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e021      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 800783c:	4b17      	ldr	r3, [pc, #92]	; (800789c <set_turnaround+0xdc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <set_turnaround+0xf4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d902      	bls.n	800784c <set_turnaround+0x8c>
      turnaround = 0xBU;
 8007846:	230b      	movs	r3, #11
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e019      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 800784c:	4b13      	ldr	r3, [pc, #76]	; (800789c <set_turnaround+0xdc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a19      	ldr	r2, [pc, #100]	; (80078b8 <set_turnaround+0xf8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d302      	bcc.n	800785c <set_turnaround+0x9c>
      turnaround = 0xCU;
 8007856:	230c      	movs	r3, #12
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e011      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 800785c:	4b0f      	ldr	r3, [pc, #60]	; (800789c <set_turnaround+0xdc>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a16      	ldr	r2, [pc, #88]	; (80078bc <set_turnaround+0xfc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d302      	bcc.n	800786c <set_turnaround+0xac>
      turnaround = 0xDU;
 8007866:	230d      	movs	r3, #13
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e009      	b.n	8007880 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 800786c:	4b0b      	ldr	r3, [pc, #44]	; (800789c <set_turnaround+0xdc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a13      	ldr	r2, [pc, #76]	; (80078c0 <set_turnaround+0x100>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d302      	bcc.n	800787c <set_turnaround+0xbc>
      turnaround = 0xEU;
 8007876:	230e      	movs	r3, #14
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e001      	b.n	8007880 <set_turnaround+0xc0>
      turnaround = 0xFU;
 800787c:	230f      	movs	r3, #15
 800787e:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60da      	str	r2, [r3, #12]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	2000000c 	.word	0x2000000c
 80078a0:	01e84800 	.word	0x01e84800
 80078a4:	01a39ddf 	.word	0x01a39ddf
 80078a8:	016e3600 	.word	0x016e3600
 80078ac:	014ca43f 	.word	0x014ca43f
 80078b0:	01312cff 	.word	0x01312cff
 80078b4:	011a499f 	.word	0x011a499f
 80078b8:	01067380 	.word	0x01067380
 80078bc:	00f42400 	.word	0x00f42400
 80078c0:	00e4e1c0 	.word	0x00e4e1c0

080078c4 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80078ce:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <get_speed+0x34>)
 80078d0:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <get_speed+0x24>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e000      	b.n	80078ea <get_speed+0x26>
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	50000800 	.word	0x50000800

080078fc <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	460a      	mov	r2, r1
 8007906:	71fb      	strb	r3, [r7, #7]
 8007908:	4613      	mov	r3, r2
 800790a:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d107      	bne.n	8007922 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8007912:	79bb      	ldrb	r3, [r7, #6]
 8007914:	2b02      	cmp	r3, #2
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e001      	b.n	8007926 <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8007922:	2303      	movs	r3, #3
 8007924:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <set_speed+0x54>)
 8007928:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 0203 	bic.w	r2, r3, #3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	431a      	orrs	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	601a      	str	r2, [r3, #0]
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	50000800 	.word	0x50000800

08007954 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8007954:	b490      	push	{r4, r7}
 8007956:	b08a      	sub	sp, #40	; 0x28
 8007958:	af00      	add	r7, sp, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	4611      	mov	r1, r2
 8007960:	461a      	mov	r2, r3
 8007962:	4623      	mov	r3, r4
 8007964:	71fb      	strb	r3, [r7, #7]
 8007966:	4603      	mov	r3, r0
 8007968:	71bb      	strb	r3, [r7, #6]
 800796a:	460b      	mov	r3, r1
 800796c:	717b      	strb	r3, [r7, #5]
 800796e:	4613      	mov	r3, r2
 8007970:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007972:	4b6c      	ldr	r3, [pc, #432]	; (8007b24 <edpt_schedule_packets+0x1d0>)
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007976:	4b6c      	ldr	r3, [pc, #432]	; (8007b28 <edpt_schedule_packets+0x1d4>)
 8007978:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 800797a:	4b6c      	ldr	r3, [pc, #432]	; (8007b2c <edpt_schedule_packets+0x1d8>)
 800797c:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 800797e:	79bb      	ldrb	r3, [r7, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d121      	bne.n	80079c8 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8007984:	79ba      	ldrb	r2, [r7, #6]
 8007986:	797b      	ldrb	r3, [r7, #5]
 8007988:	0052      	lsls	r2, r2, #1
 800798a:	4413      	add	r3, r2
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	4a68      	ldr	r2, [pc, #416]	; (8007b30 <edpt_schedule_packets+0x1dc>)
 8007990:	4413      	add	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8007994:	797b      	ldrb	r3, [r7, #5]
 8007996:	4a67      	ldr	r2, [pc, #412]	; (8007b34 <edpt_schedule_packets+0x1e0>)
 8007998:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	895b      	ldrh	r3, [r3, #10]
 80079a0:	81fa      	strh	r2, [r7, #14]
 80079a2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80079a4:	89fa      	ldrh	r2, [r7, #14]
 80079a6:	89bb      	ldrh	r3, [r7, #12]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bf28      	it	cs
 80079ac:	4613      	movcs	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 80079b2:	797b      	ldrb	r3, [r7, #5]
 80079b4:	4a5f      	ldr	r2, [pc, #380]	; (8007b34 <edpt_schedule_packets+0x1e0>)
 80079b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80079ba:	797b      	ldrb	r3, [r7, #5]
 80079bc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80079be:	1a8a      	subs	r2, r1, r2
 80079c0:	b291      	uxth	r1, r2
 80079c2:	4a5c      	ldr	r2, [pc, #368]	; (8007b34 <edpt_schedule_packets+0x1e0>)
 80079c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 80079c8:	797b      	ldrb	r3, [r7, #5]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d14f      	bne.n	8007a6e <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80079ce:	887b      	ldrh	r3, [r7, #2]
 80079d0:	04db      	lsls	r3, r3, #19
 80079d2:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 80079d4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 80079d6:	79bb      	ldrb	r3, [r7, #6]
 80079d8:	015b      	lsls	r3, r3, #5
 80079da:	69f9      	ldr	r1, [r7, #28]
 80079dc:	440b      	add	r3, r1
 80079de:	4302      	orrs	r2, r0
 80079e0:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 80079e2:	79bb      	ldrb	r3, [r7, #6]
 80079e4:	015b      	lsls	r3, r3, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	79bb      	ldrb	r3, [r7, #6]
 80079ee:	015b      	lsls	r3, r3, #5
 80079f0:	69f9      	ldr	r1, [r7, #28]
 80079f2:	440b      	add	r3, r1
 80079f4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80079f8:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 80079fa:	79bb      	ldrb	r3, [r7, #6]
 80079fc:	015b      	lsls	r3, r3, #5
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a0c:	d122      	bne.n	8007a54 <edpt_schedule_packets+0x100>
 8007a0e:	79ba      	ldrb	r2, [r7, #6]
 8007a10:	797b      	ldrb	r3, [r7, #5]
 8007a12:	4947      	ldr	r1, [pc, #284]	; (8007b30 <edpt_schedule_packets+0x1dc>)
 8007a14:	0052      	lsls	r2, r2, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	440b      	add	r3, r1
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d117      	bne.n	8007a54 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8007a2e:	79bb      	ldrb	r3, [r7, #6]
 8007a30:	015b      	lsls	r3, r3, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <edpt_schedule_packets+0xf0>
 8007a3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007a42:	e001      	b.n	8007a48 <edpt_schedule_packets+0xf4>
 8007a44:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8007a48:	79bb      	ldrb	r3, [r7, #6]
 8007a4a:	015b      	lsls	r3, r3, #5
 8007a4c:	69f8      	ldr	r0, [r7, #28]
 8007a4e:	4403      	add	r3, r0
 8007a50:	430a      	orrs	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8007a54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d05e      	beq.n	8007b18 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	79ba      	ldrb	r2, [r7, #6]
 8007a60:	2101      	movs	r1, #1
 8007a62:	fa01 f202 	lsl.w	r2, r1, r2
 8007a66:	431a      	orrs	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8007a6c:	e054      	b.n	8007b18 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a6e:	79bb      	ldrb	r3, [r7, #6]
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	4413      	add	r3, r2
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	79bb      	ldrb	r3, [r7, #6]
 8007a7a:	015b      	lsls	r3, r3, #5
 8007a7c:	6a39      	ldr	r1, [r7, #32]
 8007a7e:	440b      	add	r3, r1
 8007a80:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8007a84:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8007a86:	79bb      	ldrb	r3, [r7, #6]
 8007a88:	015b      	lsls	r3, r3, #5
 8007a8a:	6a3a      	ldr	r2, [r7, #32]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	6919      	ldr	r1, [r3, #16]
 8007a90:	887b      	ldrh	r3, [r7, #2]
 8007a92:	04db      	lsls	r3, r3, #19
 8007a94:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8007a96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	79bb      	ldrb	r3, [r7, #6]
 8007a9c:	015b      	lsls	r3, r3, #5
 8007a9e:	6a38      	ldr	r0, [r7, #32]
 8007aa0:	4403      	add	r3, r0
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8007aa6:	79bb      	ldrb	r3, [r7, #6]
 8007aa8:	015b      	lsls	r3, r3, #5
 8007aaa:	6a3a      	ldr	r2, [r7, #32]
 8007aac:	4413      	add	r3, r2
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	79bb      	ldrb	r3, [r7, #6]
 8007ab2:	015b      	lsls	r3, r3, #5
 8007ab4:	6a39      	ldr	r1, [r7, #32]
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007abc:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8007abe:	79bb      	ldrb	r3, [r7, #6]
 8007ac0:	015b      	lsls	r3, r3, #5
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ad0:	d122      	bne.n	8007b18 <edpt_schedule_packets+0x1c4>
 8007ad2:	79ba      	ldrb	r2, [r7, #6]
 8007ad4:	797b      	ldrb	r3, [r7, #5]
 8007ad6:	4916      	ldr	r1, [pc, #88]	; (8007b30 <edpt_schedule_packets+0x1dc>)
 8007ad8:	0052      	lsls	r2, r2, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	440b      	add	r3, r1
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d117      	bne.n	8007b18 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8007af2:	79bb      	ldrb	r3, [r7, #6]
 8007af4:	015b      	lsls	r3, r3, #5
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	4413      	add	r3, r2
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <edpt_schedule_packets+0x1b4>
 8007b02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8007b06:	e001      	b.n	8007b0c <edpt_schedule_packets+0x1b8>
 8007b08:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8007b0c:	79bb      	ldrb	r3, [r7, #6]
 8007b0e:	015b      	lsls	r3, r3, #5
 8007b10:	6a38      	ldr	r0, [r7, #32]
 8007b12:	4403      	add	r3, r0
 8007b14:	430a      	orrs	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]
}
 8007b18:	bf00      	nop
 8007b1a:	3728      	adds	r7, #40	; 0x28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc90      	pop	{r4, r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	50000800 	.word	0x50000800
 8007b28:	50000b00 	.word	0x50000b00
 8007b2c:	50000900 	.word	0x50000900
 8007b30:	20001af0 	.word	0x20001af0
 8007b34:	20001b70 	.word	0x20001b70

08007b38 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b46:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <dcd_init+0x24>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	60da      	str	r2, [r3, #12]
 8007b5a:	e005      	b.n	8007b68 <dcd_init+0x30>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8007b68:	bf00      	nop
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dafb      	bge.n	8007b6a <dcd_init+0x32>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f043 0201 	orr.w	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8007b7e:	bf00      	nop
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d0f9      	beq.n	8007b80 <dcd_init+0x48>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <dcd_init+0xc4>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	695a      	ldr	r2, [r3, #20]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	f043 0206 	orr.w	r2, r3, #6
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007bac:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <dcd_init+0xc8>)
 8007bae:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f043 0204 	orr.w	r2, r3, #4
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fe9b 	bl	80078fc <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <dcd_init+0xcc>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f043 0201 	orr.w	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 f851 	bl	8007c94 <dcd_connect>
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	50000e00 	.word	0x50000e00
 8007c00:	50000800 	.word	0x50000800
 8007c04:	80003810 	.word	0x80003810

08007c08 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8007c12:	2043      	movs	r0, #67	; 0x43
 8007c14:	f7ff fcd8 	bl	80075c8 <__NVIC_EnableIRQ>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 8007c2a:	2043      	movs	r0, #67	; 0x43
 8007c2c:	f7ff fcea 	bl	8007604 <__NVIC_DisableIRQ>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	460a      	mov	r2, r1
 8007c42:	71fb      	strb	r3, [r7, #7]
 8007c44:	4613      	mov	r3, r2
 8007c46:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <dcd_set_address+0x58>)
 8007c4a:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c54:	79ba      	ldrb	r2, [r7, #6]
 8007c56:	0112      	lsls	r2, r2, #4
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	72fb      	strb	r3, [r7, #11]
 8007c62:	2301      	movs	r3, #1
 8007c64:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8007c66:	7abb      	ldrb	r3, [r7, #10]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <dcd_set_address+0x3a>
 8007c6c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007c70:	e000      	b.n	8007c74 <dcd_set_address+0x3c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b25b      	sxtb	r3, r3
 8007c7c:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8007c7e:	79f8      	ldrb	r0, [r7, #7]
 8007c80:	2300      	movs	r3, #0
 8007c82:	2200      	movs	r2, #0
 8007c84:	f000 f97a 	bl	8007f7c <dcd_edpt_xfer>
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	50000800 	.word	0x50000800

08007c94 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <dcd_connect+0x28>)
 8007ca0:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f023 0202 	bic.w	r2, r3, #2
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	605a      	str	r2, [r3, #4]
}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	50000800 	.word	0x50000800

08007cc0 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b090      	sub	sp, #64	; 0x40
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8007ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007cd2:	4b81      	ldr	r3, [pc, #516]	; (8007ed8 <dcd_edpt_open+0x218>)
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007cd6:	4b81      	ldr	r3, [pc, #516]	; (8007edc <dcd_edpt_open+0x21c>)
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007cda:	4b81      	ldr	r3, [pc, #516]	; (8007ee0 <dcd_edpt_open+0x220>)
 8007cdc:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007ce4:	7cbb      	ldrb	r3, [r7, #18]
 8007ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	789b      	ldrb	r3, [r3, #2]
 8007cf4:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007cf6:	7cfb      	ldrb	r3, [r7, #19]
 8007cf8:	09db      	lsrs	r3, r3, #7
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8007d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d90a      	bls.n	8007d1e <dcd_edpt_open+0x5e>
 8007d08:	4b76      	ldr	r3, [pc, #472]	; (8007ee4 <dcd_edpt_open+0x224>)
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d000      	beq.n	8007d1a <dcd_edpt_open+0x5a>
 8007d18:	be00      	bkpt	0x0000
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e0d8      	b.n	8007ed0 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8007d1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007d22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d26:	0052      	lsls	r2, r2, #1
 8007d28:	4413      	add	r3, r2
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	4a6e      	ldr	r2, [pc, #440]	; (8007ee8 <dcd_edpt_open+0x228>)
 8007d2e:	4413      	add	r3, r2
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	889b      	ldrh	r3, [r3, #4]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d40:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	799a      	ldrb	r2, [r3, #6]
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	895b      	ldrh	r3, [r3, #10]
 8007d52:	3303      	adds	r3, #3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da00      	bge.n	8007d5a <dcd_edpt_open+0x9a>
 8007d58:	3303      	adds	r3, #3
 8007d5a:	109b      	asrs	r3, r3, #2
 8007d5c:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 8007d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d152      	bne.n	8007e0c <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8007d66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fc6d 	bl	800764c <calc_rx_ff_size>
 8007d72:	4603      	mov	r3, r0
 8007d74:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7a:	8bfb      	ldrh	r3, [r7, #30]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d214      	bcs.n	8007daa <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8007d80:	8bfb      	ldrh	r3, [r7, #30]
 8007d82:	4a5a      	ldr	r2, [pc, #360]	; (8007eec <dcd_edpt_open+0x22c>)
 8007d84:	8812      	ldrh	r2, [r2, #0]
 8007d86:	4413      	add	r3, r2
 8007d88:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007d8c:	d90a      	bls.n	8007da4 <dcd_edpt_open+0xe4>
 8007d8e:	4b55      	ldr	r3, [pc, #340]	; (8007ee4 <dcd_edpt_open+0x224>)
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d000      	beq.n	8007da0 <dcd_edpt_open+0xe0>
 8007d9e:	be00      	bkpt	0x0000
 8007da0:	2300      	movs	r3, #0
 8007da2:	e095      	b.n	8007ed0 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 8007da4:	8bfa      	ldrh	r2, [r7, #30]
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8007daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dae:	015b      	lsls	r3, r3, #5
 8007db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007db2:	4413      	add	r3, r2
 8007db4:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	049b      	lsls	r3, r3, #18
 8007dc2:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	78db      	ldrb	r3, [r3, #3]
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d002      	beq.n	8007dd8 <dcd_edpt_open+0x118>
 8007dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dd6:	e000      	b.n	8007dda <dcd_edpt_open+0x11a>
 8007dd8:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8007dda:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 8007ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dde:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8007de0:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8007de2:	431a      	orrs	r2, r3
 8007de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007de8:	015b      	lsls	r3, r3, #5
 8007dea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dec:	440b      	add	r3, r1
 8007dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007df2:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007dfc:	3210      	adds	r2, #16
 8007dfe:	2101      	movs	r1, #1
 8007e00:	fa01 f202 	lsl.w	r2, r1, r2
 8007e04:	431a      	orrs	r2, r3
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	61da      	str	r2, [r3, #28]
 8007e0a:	e060      	b.n	8007ece <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8007e0c:	4b37      	ldr	r3, [pc, #220]	; (8007eec <dcd_edpt_open+0x22c>)
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e14:	4413      	add	r3, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007e22:	d90a      	bls.n	8007e3a <dcd_edpt_open+0x17a>
 8007e24:	4b2f      	ldr	r3, [pc, #188]	; (8007ee4 <dcd_edpt_open+0x224>)
 8007e26:	623b      	str	r3, [r7, #32]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d000      	beq.n	8007e36 <dcd_edpt_open+0x176>
 8007e34:	be00      	bkpt	0x0000
 8007e36:	2300      	movs	r3, #0
 8007e38:	e04a      	b.n	8007ed0 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 8007e3a:	4b2c      	ldr	r3, [pc, #176]	; (8007eec <dcd_edpt_open+0x22c>)
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e40:	4413      	add	r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	4b29      	ldr	r3, [pc, #164]	; (8007eec <dcd_edpt_open+0x22c>)
 8007e46:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8007e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4b27      	ldr	r3, [pc, #156]	; (8007eec <dcd_edpt_open+0x22c>)
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 8007e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e60:	3340      	adds	r3, #64	; 0x40
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	605a      	str	r2, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e6c:	015b      	lsls	r3, r3, #5
 8007e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e70:	4413      	add	r3, r2
 8007e72:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8007e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e78:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007e7a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	78db      	ldrb	r3, [r3, #3]
 8007e82:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	78db      	ldrb	r3, [r3, #3]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d002      	beq.n	8007ea2 <dcd_edpt_open+0x1e2>
 8007e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ea0:	e000      	b.n	8007ea4 <dcd_edpt_open+0x1e4>
 8007ea2:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8007ea4:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8007ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea8:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007eaa:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8007eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eb0:	015b      	lsls	r3, r3, #5
 8007eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb4:	4403      	add	r3, r0
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	61da      	str	r2, [r3, #28]
  }

  return true;
 8007ece:	2301      	movs	r3, #1
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3740      	adds	r7, #64	; 0x40
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	50000800 	.word	0x50000800
 8007edc:	50000b00 	.word	0x50000b00
 8007ee0:	50000900 	.word	0x50000900
 8007ee4:	e000edf0 	.word	0xe000edf0
 8007ee8:	20001af0 	.word	0x20001af0
 8007eec:	20001b74 	.word	0x20001b74

08007ef0 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <dcd_edpt_close_all+0x78>)
 8007efc:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8007efe:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <dcd_edpt_close_all+0x7c>)
 8007f00:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8007f02:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <dcd_edpt_close_all+0x80>)
 8007f04:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007f0c:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e01c      	b.n	8007f4e <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	015b      	lsls	r3, r3, #5
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <dcd_edpt_close_all+0x84>)
 8007f24:	015b      	lsls	r3, r3, #5
 8007f26:	4413      	add	r3, r2
 8007f28:	330a      	adds	r3, #10
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	015b      	lsls	r3, r3, #5
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	4a0d      	ldr	r2, [pc, #52]	; (8007f74 <dcd_edpt_close_all+0x84>)
 8007f3e:	015b      	lsls	r3, r3, #5
 8007f40:	4413      	add	r3, r2
 8007f42:	331a      	adds	r3, #26
 8007f44:	2200      	movs	r2, #0
 8007f46:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d9df      	bls.n	8007f14 <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8007f54:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <dcd_edpt_close_all+0x88>)
 8007f56:	2210      	movs	r2, #16
 8007f58:	801a      	strh	r2, [r3, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	50000800 	.word	0x50000800
 8007f6c:	50000b00 	.word	0x50000b00
 8007f70:	50000900 	.word	0x50000900
 8007f74:	20001af0 	.word	0x20001af0
 8007f78:	20001b74 	.word	0x20001b74

08007f7c <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b089      	sub	sp, #36	; 0x24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	603a      	str	r2, [r7, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	71bb      	strb	r3, [r7, #6]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80bb      	strh	r3, [r7, #4]
 8007f92:	79bb      	ldrb	r3, [r7, #6]
 8007f94:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007f96:	7b3b      	ldrb	r3, [r7, #12]
 8007f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007f9e:	757b      	strb	r3, [r7, #21]
 8007fa0:	79bb      	ldrb	r3, [r7, #6]
 8007fa2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	09db      	lsrs	r3, r3, #7
 8007fa8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8007faa:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8007fac:	7d7a      	ldrb	r2, [r7, #21]
 8007fae:	7d3b      	ldrb	r3, [r7, #20]
 8007fb0:	0052      	lsls	r2, r2, #1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	4a23      	ldr	r2, [pc, #140]	; (8008044 <dcd_edpt_xfer+0xc8>)
 8007fb8:	4413      	add	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	88ba      	ldrh	r2, [r7, #4]
 8007fcc:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 8007fce:	7d7b      	ldrb	r3, [r7, #21]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d111      	bne.n	8007ff8 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 8007fd4:	7d3b      	ldrb	r3, [r7, #20]
 8007fd6:	491c      	ldr	r1, [pc, #112]	; (8008048 <dcd_edpt_xfer+0xcc>)
 8007fd8:	88ba      	ldrh	r2, [r7, #4]
 8007fda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8007fde:	7d3b      	ldrb	r3, [r7, #20]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <dcd_edpt_xfer+0xcc>)
 8007fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe6:	7d3a      	ldrb	r2, [r7, #20]
 8007fe8:	7d79      	ldrb	r1, [r7, #21]
 8007fea:	79f8      	ldrb	r0, [r7, #7]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f7ff fcb0 	bl	8007954 <edpt_schedule_packets>
    return true;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e021      	b.n	800803c <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	895b      	ldrh	r3, [r3, #10]
 8007ffc:	88ba      	ldrh	r2, [r7, #4]
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	895a      	ldrh	r2, [r3, #10]
 8008008:	88bb      	ldrh	r3, [r7, #4]
 800800a:	fbb3 f1f2 	udiv	r1, r3, r2
 800800e:	fb01 f202 	mul.w	r2, r1, r2
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8008016:	89fb      	ldrh	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <dcd_edpt_xfer+0xa6>
 800801c:	88bb      	ldrh	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <dcd_edpt_xfer+0xac>
    num_packets++;
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	3301      	adds	r3, #1
 8008026:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8008028:	8afc      	ldrh	r4, [r7, #22]
 800802a:	7d3a      	ldrb	r2, [r7, #20]
 800802c:	7d79      	ldrb	r1, [r7, #21]
 800802e:	79f8      	ldrb	r0, [r7, #7]
 8008030:	88bb      	ldrh	r3, [r7, #4]
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	4623      	mov	r3, r4
 8008036:	f7ff fc8d 	bl	8007954 <edpt_schedule_packets>

  return true;
 800803a:	2301      	movs	r3, #1
}
 800803c:	4618      	mov	r0, r3
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	bd90      	pop	{r4, r7, pc}
 8008044:	20001af0 	.word	0x20001af0
 8008048:	20001b70 	.word	0x20001b70

0800804c <dcd_edpt_xfer_fifo>:
// The number of bytes has to be given explicitly to allow more flexible control of how many
// bytes should be written and second to keep the return value free to give back a boolean
// success message. If total_bytes is too big, the FIFO will copy only what is available
// into the USB buffer!
bool dcd_edpt_xfer_fifo (uint8_t rhport, uint8_t ep_addr, tu_fifo_t * ff, uint16_t total_bytes)
{
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b08b      	sub	sp, #44	; 0x2c
 8008050:	af02      	add	r7, sp, #8
 8008052:	603a      	str	r2, [r7, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	4603      	mov	r3, r0
 8008058:	71fb      	strb	r3, [r7, #7]
 800805a:	460b      	mov	r3, r1
 800805c:	71bb      	strb	r3, [r7, #6]
 800805e:	4613      	mov	r3, r2
 8008060:	80bb      	strh	r3, [r7, #4]
  // USB buffers always work in bytes so to avoid unnecessary divisions we demand item_size = 1
  TU_ASSERT(ff->item_size == 1);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d00a      	beq.n	8008086 <dcd_edpt_xfer_fifo+0x3a>
 8008070:	4b27      	ldr	r3, [pc, #156]	; (8008110 <dcd_edpt_xfer_fifo+0xc4>)
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d000      	beq.n	8008082 <dcd_edpt_xfer_fifo+0x36>
 8008080:	be00      	bkpt	0x0000
 8008082:	2300      	movs	r3, #0
 8008084:	e03f      	b.n	8008106 <dcd_edpt_xfer_fifo+0xba>
 8008086:	79bb      	ldrb	r3, [r7, #6]
 8008088:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008090:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008092:	777b      	strb	r3, [r7, #29]
 8008094:	79bb      	ldrb	r3, [r7, #6]
 8008096:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	09db      	lsrs	r3, r3, #7
 800809c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800809e:	773b      	strb	r3, [r7, #28]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 80080a0:	7f7a      	ldrb	r2, [r7, #29]
 80080a2:	7f3b      	ldrb	r3, [r7, #28]
 80080a4:	0052      	lsls	r2, r2, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <dcd_edpt_xfer_fifo+0xc8>)
 80080ac:	4413      	add	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
  xfer->buffer      = NULL;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
  xfer->ff          = ff;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	88ba      	ldrh	r2, [r7, #4]
 80080c0:	811a      	strh	r2, [r3, #8]

  uint16_t num_packets = (total_bytes / xfer->max_size);
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	895b      	ldrh	r3, [r3, #10]
 80080c6:	88ba      	ldrh	r2, [r7, #4]
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	83fb      	strh	r3, [r7, #30]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	895a      	ldrh	r2, [r3, #10]
 80080d2:	88bb      	ldrh	r3, [r7, #4]
 80080d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080d8:	fb01 f202 	mul.w	r2, r1, r2
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	82fb      	strh	r3, [r7, #22]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) num_packets++;
 80080e0:	8afb      	ldrh	r3, [r7, #22]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <dcd_edpt_xfer_fifo+0xa0>
 80080e6:	88bb      	ldrh	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <dcd_edpt_xfer_fifo+0xa6>
 80080ec:	8bfb      	ldrh	r3, [r7, #30]
 80080ee:	3301      	adds	r3, #1
 80080f0:	83fb      	strh	r3, [r7, #30]

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80080f2:	8bfc      	ldrh	r4, [r7, #30]
 80080f4:	7f3a      	ldrb	r2, [r7, #28]
 80080f6:	7f79      	ldrb	r1, [r7, #29]
 80080f8:	79f8      	ldrb	r0, [r7, #7]
 80080fa:	88bb      	ldrh	r3, [r7, #4]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	4623      	mov	r3, r4
 8008100:	f7ff fc28 	bl	8007954 <edpt_schedule_packets>

  return true;
 8008104:	2301      	movs	r3, #1
}
 8008106:	4618      	mov	r0, r3
 8008108:	3724      	adds	r7, #36	; 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd90      	pop	{r4, r7, pc}
 800810e:	bf00      	nop
 8008110:	e000edf0 	.word	0xe000edf0
 8008114:	20001af0 	.word	0x20001af0

08008118 <dcd_edpt_disable>:

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 8008118:	b480      	push	{r7}
 800811a:	b089      	sub	sp, #36	; 0x24
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
 8008122:	460b      	mov	r3, r1
 8008124:	71bb      	strb	r3, [r7, #6]
 8008126:	4613      	mov	r3, r2
 8008128:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800812a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800812e:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008130:	4b6c      	ldr	r3, [pc, #432]	; (80082e4 <dcd_edpt_disable+0x1cc>)
 8008132:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008134:	4b6c      	ldr	r3, [pc, #432]	; (80082e8 <dcd_edpt_disable+0x1d0>)
 8008136:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008138:	4b6c      	ldr	r3, [pc, #432]	; (80082ec <dcd_edpt_disable+0x1d4>)
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	79bb      	ldrb	r3, [r7, #6]
 800813e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008140:	7b3b      	ldrb	r3, [r7, #12]
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008148:	73fb      	strb	r3, [r7, #15]
 800814a:	79bb      	ldrb	r3, [r7, #6]
 800814c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800814e:	7b7b      	ldrb	r3, [r7, #13]
 8008150:	09db      	lsrs	r3, r3, #7
 8008152:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008154:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d16a      	bne.n	8008232 <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d006      	beq.n	8008170 <dcd_edpt_disable+0x58>
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	015b      	lsls	r3, r3, #5
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	db13      	blt.n	8008198 <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	015b      	lsls	r3, r3, #5
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4413      	add	r3, r2
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	797b      	ldrb	r3, [r7, #5]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <dcd_edpt_disable+0x6e>
 8008180:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8008184:	e001      	b.n	800818a <dcd_edpt_disable+0x72>
 8008186:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	015b      	lsls	r3, r3, #5
 800818e:	6938      	ldr	r0, [r7, #16]
 8008190:	4403      	add	r3, r0
 8008192:	430a      	orrs	r2, r1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e037      	b.n	8008208 <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	015b      	lsls	r3, r3, #5
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	015b      	lsls	r3, r3, #5
 80081a6:	6939      	ldr	r1, [r7, #16]
 80081a8:	440b      	add	r3, r1
 80081aa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80081ae:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 80081b0:	bf00      	nop
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	015b      	lsls	r3, r3, #5
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4413      	add	r3, r2
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f6      	beq.n	80081b2 <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	015b      	lsls	r3, r3, #5
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	797b      	ldrb	r3, [r7, #5]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <dcd_edpt_disable+0xc0>
 80081d4:	4946      	ldr	r1, [pc, #280]	; (80082f0 <dcd_edpt_disable+0x1d8>)
 80081d6:	e001      	b.n	80081dc <dcd_edpt_disable+0xc4>
 80081d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	015b      	lsls	r3, r3, #5
 80081e0:	6938      	ldr	r0, [r7, #16]
 80081e2:	4403      	add	r3, r0
 80081e4:	430a      	orrs	r2, r1
 80081e6:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 80081e8:	bf00      	nop
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	015b      	lsls	r3, r3, #5
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4413      	add	r3, r2
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f6      	beq.n	80081ea <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	015b      	lsls	r3, r3, #5
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	2202      	movs	r2, #2
 8008206:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	7bfa      	ldrb	r2, [r7, #15]
 800820e:	0192      	lsls	r2, r2, #6
 8008210:	431a      	orrs	r2, r3
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 8008222:	bf00      	nop
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f9      	bne.n	8008224 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 8008230:	e051      	b.n	80082d6 <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <dcd_edpt_disable+0x12e>
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	015b      	lsls	r3, r3, #5
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	db12      	blt.n	800826c <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	015b      	lsls	r3, r3, #5
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4413      	add	r3, r2
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	797b      	ldrb	r3, [r7, #5]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <dcd_edpt_disable+0x144>
 8008256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800825a:	e000      	b.n	800825e <dcd_edpt_disable+0x146>
 800825c:	2100      	movs	r1, #0
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	015b      	lsls	r3, r3, #5
 8008262:	6978      	ldr	r0, [r7, #20]
 8008264:	4403      	add	r3, r0
 8008266:	430a      	orrs	r2, r1
 8008268:	601a      	str	r2, [r3, #0]
}
 800826a:	e034      	b.n	80082d6 <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 8008278:	bf00      	nop
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f9      	beq.n	800827a <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	015b      	lsls	r3, r3, #5
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	797b      	ldrb	r3, [r7, #5]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <dcd_edpt_disable+0x182>
 8008296:	4916      	ldr	r1, [pc, #88]	; (80082f0 <dcd_edpt_disable+0x1d8>)
 8008298:	e001      	b.n	800829e <dcd_edpt_disable+0x186>
 800829a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	015b      	lsls	r3, r3, #5
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	4403      	add	r3, r0
 80082a6:	430a      	orrs	r2, r1
 80082a8:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 80082aa:	bf00      	nop
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	015b      	lsls	r3, r3, #5
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4413      	add	r3, r2
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f6      	beq.n	80082ac <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	015b      	lsls	r3, r3, #5
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4413      	add	r3, r2
 80082c6:	2202      	movs	r2, #2
 80082c8:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	605a      	str	r2, [r3, #4]
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	; 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	50000800 	.word	0x50000800
 80082e8:	50000b00 	.word	0x50000b00
 80082ec:	50000900 	.word	0x50000900
 80082f0:	40200000 	.word	0x40200000

080082f4 <dcd_edpt_close>:

/**
 * Close an endpoint.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	460a      	mov	r2, r1
 80082fe:	71fb      	strb	r3, [r7, #7]
 8008300:	4613      	mov	r3, r2
 8008302:	71bb      	strb	r3, [r7, #6]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	79bb      	ldrb	r3, [r7, #6]
 800830c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008314:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008316:	76fb      	strb	r3, [r7, #27]
 8008318:	79bb      	ldrb	r3, [r7, #6]
 800831a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	09db      	lsrs	r3, r3, #7
 8008320:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008322:	76bb      	strb	r3, [r7, #26]

  dcd_edpt_disable(rhport, ep_addr, false);
 8008324:	79b9      	ldrb	r1, [r7, #6]
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2200      	movs	r2, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff fef4 	bl	8008118 <dcd_edpt_disable>

  // Update max_size
  xfer_status[epnum][dir].max_size = 0;  // max_size = 0 marks a disabled EP - required for changing FIFO allocation
 8008330:	7efa      	ldrb	r2, [r7, #27]
 8008332:	7ebb      	ldrb	r3, [r7, #26]
 8008334:	491e      	ldr	r1, [pc, #120]	; (80083b0 <dcd_edpt_close+0xbc>)
 8008336:	0052      	lsls	r2, r2, #1
 8008338:	4413      	add	r3, r2
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	440b      	add	r3, r1
 800833e:	330a      	adds	r3, #10
 8008340:	2200      	movs	r2, #0
 8008342:	801a      	strh	r2, [r3, #0]

  if (dir == TUSB_DIR_IN)
 8008344:	7ebb      	ldrb	r3, [r7, #26]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d129      	bne.n	800839e <dcd_edpt_close+0xaa>
  {
    uint16_t const fifo_size = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXFD_Msk) >> USB_OTG_DIEPTXF_INEPTXFD_Pos;
 800834a:	7efb      	ldrb	r3, [r7, #27]
 800834c:	3b01      	subs	r3, #1
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	3340      	adds	r3, #64	; 0x40
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	0c1b      	lsrs	r3, r3, #16
 800835a:	833b      	strh	r3, [r7, #24]
    uint16_t const fifo_start = (usb_otg->DIEPTXF[epnum - 1] & USB_OTG_DIEPTXF_INEPTXSA_Msk) >> USB_OTG_DIEPTXF_INEPTXSA_Pos;
 800835c:	7efb      	ldrb	r3, [r7, #27]
 800835e:	3b01      	subs	r3, #1
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	3340      	adds	r3, #64	; 0x40
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	82fb      	strh	r3, [r7, #22]
    // For now only the last opened endpoint can be closed without fuss.
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 800836c:	8afa      	ldrh	r2, [r7, #22]
 800836e:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <dcd_edpt_close+0xc0>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8008376:	429a      	cmp	r2, r3
 8008378:	d009      	beq.n	800838e <dcd_edpt_close+0x9a>
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <dcd_edpt_close+0xc4>)
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <dcd_edpt_close+0xb2>
 800838a:	be00      	bkpt	0x0000
 800838c:	e00b      	b.n	80083a6 <dcd_edpt_close+0xb2>
    _allocated_fifo_words_tx -= fifo_size;
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <dcd_edpt_close+0xc0>)
 8008390:	881a      	ldrh	r2, [r3, #0]
 8008392:	8b3b      	ldrh	r3, [r7, #24]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	b29a      	uxth	r2, r3
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <dcd_edpt_close+0xc0>)
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	e004      	b.n	80083a8 <dcd_edpt_close+0xb4>
  }
  else
  {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <dcd_edpt_close+0xc8>)
 80083a0:	2201      	movs	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e000      	b.n	80083a8 <dcd_edpt_close+0xb4>
    TU_ASSERT(fifo_start == EP_FIFO_SIZE/4 - _allocated_fifo_words_tx,);
 80083a6:	bf00      	nop
  }
}
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20001af0 	.word	0x20001af0
 80083b4:	20001b74 	.word	0x20001b74
 80083b8:	e000edf0 	.word	0xe000edf0
 80083bc:	20001b76 	.word	0x20001b76

080083c0 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	460a      	mov	r2, r1
 80083ca:	71fb      	strb	r3, [r7, #7]
 80083cc:	4613      	mov	r3, r2
 80083ce:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 80083d0:	79b9      	ldrb	r1, [r7, #6]
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2201      	movs	r2, #1
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff fe9e 	bl	8008118 <dcd_edpt_disable>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	460a      	mov	r2, r1
 80083ee:	71fb      	strb	r3, [r7, #7]
 80083f0:	4613      	mov	r3, r2
 80083f2:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <dcd_edpt_clear_stall+0xa8>)
 80083f6:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80083f8:	4b25      	ldr	r3, [pc, #148]	; (8008490 <dcd_edpt_clear_stall+0xac>)
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	79bb      	ldrb	r3, [r7, #6]
 80083fe:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008400:	7b3b      	ldrb	r3, [r7, #12]
 8008402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008406:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008408:	73fb      	strb	r3, [r7, #15]
 800840a:	79bb      	ldrb	r3, [r7, #6]
 800840c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800840e:	7b7b      	ldrb	r3, [r7, #13]
 8008410:	09db      	lsrs	r3, r3, #7
 8008412:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008414:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d118      	bne.n	800844e <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	015b      	lsls	r3, r3, #5
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4413      	add	r3, r2
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	015b      	lsls	r3, r3, #5
 800842a:	6939      	ldr	r1, [r7, #16]
 800842c:	440b      	add	r3, r1
 800842e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008432:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	015b      	lsls	r3, r3, #5
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	015b      	lsls	r3, r3, #5
 8008442:	6939      	ldr	r1, [r7, #16]
 8008444:	440b      	add	r3, r1
 8008446:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 800844c:	e017      	b.n	800847e <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	015b      	lsls	r3, r3, #5
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4413      	add	r3, r2
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	015b      	lsls	r3, r3, #5
 800845c:	6979      	ldr	r1, [r7, #20]
 800845e:	440b      	add	r3, r1
 8008460:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008464:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	015b      	lsls	r3, r3, #5
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4413      	add	r3, r2
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	015b      	lsls	r3, r3, #5
 8008474:	6979      	ldr	r1, [r7, #20]
 8008476:	440b      	add	r3, r1
 8008478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800847c:	601a      	str	r2, [r3, #0]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	50000b00 	.word	0x50000b00
 8008490:	50000900 	.word	0x50000900

08008494 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 8008494:	b480      	push	{r7}
 8008496:	b089      	sub	sp, #36	; 0x24
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	71fb      	strb	r3, [r7, #7]
 80084a0:	4613      	mov	r3, r2
 80084a2:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 80084a4:	4b28      	ldr	r3, [pc, #160]	; (8008548 <read_fifo_packet+0xb4>)
 80084a6:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 80084a8:	88bb      	ldrh	r3, [r7, #4]
 80084aa:	089b      	lsrs	r3, r3, #2
 80084ac:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 80084ae:	2300      	movs	r3, #0
 80084b0:	83fb      	strh	r3, [r7, #30]
 80084b2:	e01e      	b.n	80084f2 <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0a1a      	lsrs	r2, r3, #8
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0c1a      	lsrs	r2, r3, #16
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	3302      	adds	r3, #2
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	0e1a      	lsrs	r2, r3, #24
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	3303      	adds	r3, #3
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]
    dst += 4;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	3304      	adds	r3, #4
 80084ea:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 80084ec:	8bfb      	ldrh	r3, [r7, #30]
 80084ee:	3301      	adds	r3, #1
 80084f0:	83fb      	strh	r3, [r7, #30]
 80084f2:	8bfa      	ldrh	r2, [r7, #30]
 80084f4:	8afb      	ldrh	r3, [r7, #22]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3dc      	bcc.n	80084b4 <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 80084fa:	88bb      	ldrh	r3, [r7, #4]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f003 0303 	and.w	r3, r3, #3
 8008502:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 8008504:	7d7b      	ldrb	r3, [r7, #21]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d018      	beq.n	800853c <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 8008518:	7d7b      	ldrb	r3, [r7, #21]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d905      	bls.n	800852a <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	0a1a      	lsrs	r2, r3, #8
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 800852a:	7d7b      	ldrb	r3, [r7, #21]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d905      	bls.n	800853c <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	0c1a      	lsrs	r2, r3, #16
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3302      	adds	r3, #2
 8008538:	b2d2      	uxtb	r2, r2
 800853a:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800853c:	bf00      	nop
 800853e:	3724      	adds	r7, #36	; 0x24
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	50001000 	.word	0x50001000

0800854c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	603a      	str	r2, [r7, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	4603      	mov	r3, r0
 8008558:	71fb      	strb	r3, [r7, #7]
 800855a:	460b      	mov	r3, r1
 800855c:	71bb      	strb	r3, [r7, #6]
 800855e:	4613      	mov	r3, r2
 8008560:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 8008562:	79bb      	ldrb	r3, [r7, #6]
 8008564:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8008568:	3301      	adds	r3, #1
 800856a:	031b      	lsls	r3, r3, #12
 800856c:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800856e:	88bb      	ldrh	r3, [r7, #4]
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 8008574:	2300      	movs	r3, #0
 8008576:	82fb      	strh	r3, [r7, #22]
 8008578:	e019      	b.n	80085ae <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	3303      	adds	r3, #3
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	061a      	lsls	r2, r3, #24
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	3302      	adds	r3, #2
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	041b      	lsls	r3, r3, #16
 800858a:	431a      	orrs	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	3301      	adds	r3, #1
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	4313      	orrs	r3, r2
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	461a      	mov	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]
    src += 4;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3304      	adds	r3, #4
 80085a6:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 80085a8:	8afb      	ldrh	r3, [r7, #22]
 80085aa:	3301      	adds	r3, #1
 80085ac:	82fb      	strh	r3, [r7, #22]
 80085ae:	8afa      	ldrh	r2, [r7, #22]
 80085b0:	897b      	ldrh	r3, [r7, #10]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d3e1      	bcc.n	800857a <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 80085b6:	88bb      	ldrh	r3, [r7, #4]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 80085c0:	7a7b      	ldrb	r3, [r7, #9]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d020      	beq.n	8008608 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 80085d6:	7a7b      	ldrb	r3, [r7, #9]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d907      	bls.n	80085ec <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	461a      	mov	r2, r3
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 80085ec:	7a7b      	ldrb	r3, [r7, #9]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d907      	bls.n	8008602 <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	3302      	adds	r3, #2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	461a      	mov	r2, r3
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	601a      	str	r2, [r3, #0]
  }
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	4603      	mov	r3, r0
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008624:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 8008626:	4b49      	ldr	r3, [pc, #292]	; (800874c <handle_rxflvl_ints+0x138>)
 8008628:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	0c5b      	lsrs	r3, r3, #17
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	091b      	lsrs	r3, r3, #4
 800864a:	b29b      	uxth	r3, r3
 800864c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008650:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 8008652:	7cfb      	ldrb	r3, [r7, #19]
 8008654:	3b01      	subs	r3, #1
 8008656:	2b05      	cmp	r3, #5
 8008658:	d864      	bhi.n	8008724 <handle_rxflvl_ints+0x110>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <handle_rxflvl_ints+0x4c>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008739 	.word	0x08008739
 8008664:	08008679 	.word	0x08008679
 8008668:	08008739 	.word	0x08008739
 800866c:	080086f9 	.word	0x080086f9
 8008670:	08008725 	.word	0x08008725
 8008674:	08008713 	.word	0x08008713
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008678:	7cbb      	ldrb	r3, [r7, #18]
 800867a:	015b      	lsls	r3, r3, #5
 800867c:	4a34      	ldr	r2, [pc, #208]	; (8008750 <handle_rxflvl_ints+0x13c>)
 800867e:	4413      	add	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	8a3a      	ldrh	r2, [r7, #16]
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fd f94a 	bl	800592c <tu_fifo_write_n_const_addr_full_words>
 8008698:	e00c      	b.n	80086b4 <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6819      	ldr	r1, [r3, #0]
 800869e:	8a3a      	ldrh	r2, [r7, #16]
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fef6 	bl	8008494 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	8a3b      	ldrh	r3, [r7, #16]
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	895b      	ldrh	r3, [r3, #10]
 80086b8:	8a3a      	ldrh	r2, [r7, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d23e      	bcs.n	800873c <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 80086be:	7cbb      	ldrb	r3, [r7, #18]
 80086c0:	015b      	lsls	r3, r3, #5
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4413      	add	r3, r2
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f3c3 0112 	ubfx	r1, r3, #0, #19
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	891a      	ldrh	r2, [r3, #8]
 80086d0:	b28b      	uxth	r3, r1
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 80086da:	7cbb      	ldrb	r3, [r7, #18]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d12d      	bne.n	800873c <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	891a      	ldrh	r2, [r3, #8]
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <handle_rxflvl_ints+0x140>)
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80086f0:	4b18      	ldr	r3, [pc, #96]	; (8008754 <handle_rxflvl_ints+0x140>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 80086f6:	e021      	b.n	800873c <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80086f8:	7cbb      	ldrb	r3, [r7, #18]
 80086fa:	015b      	lsls	r3, r3, #5
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	4413      	add	r3, r2
 8008700:	691a      	ldr	r2, [r3, #16]
 8008702:	7cbb      	ldrb	r3, [r7, #18]
 8008704:	015b      	lsls	r3, r3, #5
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	440b      	add	r3, r1
 800870a:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800870e:	611a      	str	r2, [r3, #16]
      break;
 8008710:	e017      	b.n	8008742 <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a10      	ldr	r2, [pc, #64]	; (8008758 <handle_rxflvl_ints+0x144>)
 8008718:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a0e      	ldr	r2, [pc, #56]	; (8008758 <handle_rxflvl_ints+0x144>)
 8008720:	6053      	str	r3, [r2, #4]
      break;
 8008722:	e00e      	b.n	8008742 <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <handle_rxflvl_ints+0x148>)
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <handle_rxflvl_ints+0x12c>
 8008734:	be00      	bkpt	0x0000
      break;
 8008736:	e003      	b.n	8008740 <handle_rxflvl_ints+0x12c>
      break;
 8008738:	bf00      	nop
 800873a:	e002      	b.n	8008742 <handle_rxflvl_ints+0x12e>
    break;
 800873c:	bf00      	nop
 800873e:	e000      	b.n	8008742 <handle_rxflvl_ints+0x12e>
      break;
 8008740:	bf00      	nop
  }
}
 8008742:	bf00      	nop
 8008744:	3720      	adds	r7, #32
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	50001000 	.word	0x50001000
 8008750:	20001af0 	.word	0x20001af0
 8008754:	20001b70 	.word	0x20001b70
 8008758:	20001ae8 	.word	0x20001ae8
 800875c:	e000edf0 	.word	0xe000edf0

08008760 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b094      	sub	sp, #80	; 0x50
 8008764:	af02      	add	r7, sp, #8
 8008766:	4603      	mov	r3, r0
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 800876e:	2300      	movs	r3, #0
 8008770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008774:	e09e      	b.n	80088b4 <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8008776:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800877a:	015b      	lsls	r3, r3, #5
 800877c:	4a52      	ldr	r2, [pc, #328]	; (80088c8 <handle_epout_ints+0x168>)
 800877e:	4413      	add	r3, r2
 8008780:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800878a:	3210      	adds	r2, #16
 800878c:	2101      	movs	r1, #1
 800878e:	fa01 f202 	lsl.w	r2, r1, r2
 8008792:	4013      	ands	r3, r2
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8088 	beq.w	80088aa <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 800879a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800879e:	015b      	lsls	r3, r3, #5
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d028      	beq.n	8008800 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 80087ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80087b2:	015b      	lsls	r3, r3, #5
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	2208      	movs	r2, #8
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80087c2:	4b42      	ldr	r3, [pc, #264]	; (80088cc <handle_epout_ints+0x16c>)
 80087c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80087cc:	f107 0314 	add.w	r3, r7, #20
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087dc:	753b      	strb	r3, [r7, #20]
 80087de:	2306      	movs	r3, #6
 80087e0:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 80087e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e4:	f107 0318 	add.w	r3, r7, #24
 80087e8:	6810      	ldr	r0, [r2, #0]
 80087ea:	6851      	ldr	r1, [r2, #4]
 80087ec:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 80087ee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	4611      	mov	r1, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fd ffdb 	bl	80067b4 <dcd_event_handler>
}
 80087fe:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 8008800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008804:	015b      	lsls	r3, r3, #5
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4413      	add	r3, r2
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d04a      	beq.n	80088aa <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 8008814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008818:	015b      	lsls	r3, r3, #5
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4413      	add	r3, r2
 800881e:	2201      	movs	r2, #1
 8008820:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8008822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10e      	bne.n	8008848 <handle_epout_ints+0xe8>
 800882a:	4b29      	ldr	r3, [pc, #164]	; (80088d0 <handle_epout_ints+0x170>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8008832:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <handle_epout_ints+0x170>)
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800883a:	7bf8      	ldrb	r0, [r7, #15]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2301      	movs	r3, #1
 8008840:	2200      	movs	r2, #0
 8008842:	f7ff f887 	bl	8007954 <edpt_schedule_packets>
 8008846:	e030      	b.n	80088aa <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884a:	891b      	ldrh	r3, [r3, #8]
 800884c:	461a      	mov	r2, r3
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008854:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008858:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800885c:	633a      	str	r2, [r7, #48]	; 0x30
 800885e:	2300      	movs	r3, #0
 8008860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008864:	2301      	movs	r3, #1
 8008866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800886a:	f107 0320 	add.w	r3, r7, #32
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	609a      	str	r2, [r3, #8]
 8008876:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800887a:	f887 3020 	strb.w	r3, [r7, #32]
 800887e:	2307      	movs	r3, #7
 8008880:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  event.xfer_complete.ep_addr = ep_addr;
 8008884:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008888:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8008890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008894:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  dcd_event_handler(&event, in_isr);
 8008898:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800889c:	f107 0320 	add.w	r3, r7, #32
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fd ff86 	bl	80067b4 <dcd_event_handler>
}
 80088a8:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 80088aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088ae:	3301      	adds	r3, #1
 80088b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	f67f af5c 	bls.w	8008776 <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	3748      	adds	r7, #72	; 0x48
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20001af0 	.word	0x20001af0
 80088cc:	20001ae8 	.word	0x20001ae8
 80088d0:	20001b70 	.word	0x20001b70

080088d4 <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b092      	sub	sp, #72	; 0x48
 80088d8:	af02      	add	r7, sp, #8
 80088da:	4603      	mov	r3, r0
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80088e8:	e0ec      	b.n	8008ac4 <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80088ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ee:	015b      	lsls	r3, r3, #5
 80088f0:	3310      	adds	r3, #16
 80088f2:	4a79      	ldr	r2, [pc, #484]	; (8008ad8 <handle_epin_ints+0x204>)
 80088f4:	4413      	add	r3, r2
 80088f6:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008900:	2101      	movs	r1, #1
 8008902:	fa01 f202 	lsl.w	r2, r1, r2
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80d6 	beq.w	8008aba <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 800890e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008912:	015b      	lsls	r3, r3, #5
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04a      	beq.n	80089b8 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 8008922:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008926:	015b      	lsls	r3, r3, #5
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	4413      	add	r3, r2
 800892c:	2201      	movs	r2, #1
 800892e:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8008930:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10e      	bne.n	8008956 <handle_epin_ints+0x82>
 8008938:	4b68      	ldr	r3, [pc, #416]	; (8008adc <handle_epin_ints+0x208>)
 800893a:	885b      	ldrh	r3, [r3, #2]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00a      	beq.n	8008956 <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8008940:	4b66      	ldr	r3, [pc, #408]	; (8008adc <handle_epin_ints+0x208>)
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008948:	7bf8      	ldrb	r0, [r7, #15]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	2301      	movs	r3, #1
 800894e:	2201      	movs	r2, #1
 8008950:	f7ff f800 	bl	8007954 <edpt_schedule_packets>
 8008954:	e030      	b.n	80089b8 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008956:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800895a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800895e:	b2d9      	uxtb	r1, r3
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	891b      	ldrh	r3, [r3, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896c:	460b      	mov	r3, r1
 800896e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008972:	627a      	str	r2, [r7, #36]	; 0x24
 8008974:	2300      	movs	r3, #0
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8008980:	f107 0310 	add.w	r3, r7, #16
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008990:	743b      	strb	r3, [r7, #16]
 8008992:	2307      	movs	r3, #7
 8008994:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8008996:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800899a:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 80089a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089a4:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80089a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80089aa:	f107 0310 	add.w	r3, r7, #16
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd feff 	bl	80067b4 <dcd_event_handler>
}
 80089b6:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 80089b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089bc:	015b      	lsls	r3, r3, #5
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d076      	beq.n	8008aba <handle_epin_ints+0x1e6>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f202 	lsl.w	r2, r1, r2
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d06c      	beq.n	8008aba <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 80089e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089e4:	015b      	lsls	r3, r3, #5
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	0cdb      	lsrs	r3, r3, #19
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089f4:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 80089f6:	2300      	movs	r3, #0
 80089f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80089fa:	e043      	b.n	8008a84 <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 80089fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a00:	015b      	lsls	r3, r3, #5
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	895a      	ldrh	r2, [r3, #10]
 8008a0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a10:	843b      	strh	r3, [r7, #32]
 8008a12:	4613      	mov	r3, r2
 8008a14:	83fb      	strh	r3, [r7, #30]
 8008a16:	8c3a      	ldrh	r2, [r7, #32]
 8008a18:	8bfb      	ldrh	r3, [r7, #30]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bf28      	it	cs
 8008a1e:	4613      	movcs	r3, r2
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8008a24:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008a26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a2a:	015b      	lsls	r3, r3, #5
 8008a2c:	6879      	ldr	r1, [r7, #4]
 8008a2e:	440b      	add	r3, r1
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	0099      	lsls	r1, r3, #2
 8008a34:	4b2a      	ldr	r3, [pc, #168]	; (8008ae0 <handle_epin_ints+0x20c>)
 8008a36:	400b      	ands	r3, r1
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d828      	bhi.n	8008a8e <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00e      	beq.n	8008a62 <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8008a44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a48:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	031b      	lsls	r3, r3, #12
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fc feff 	bl	800585e <tu_fifo_read_n_const_addr_full_words>
 8008a60:	e00d      	b.n	8008a7e <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a68:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008a6c:	7bf8      	ldrb	r0, [r7, #15]
 8008a6e:	f7ff fd6d 	bl	800854c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008a78:	441a      	add	r2, r3
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8008a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a80:	3301      	adds	r3, #1
 8008a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008a84:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008a86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d3b7      	bcc.n	80089fc <handle_epin_ints+0x128>
 8008a8c:	e000      	b.n	8008a90 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8008a8e:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8008a90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a94:	015b      	lsls	r3, r3, #5
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008aac:	2101      	movs	r1, #1
 8008aae:	fa01 f202 	lsl.w	r2, r1, r2
 8008ab2:	43d2      	mvns	r2, r2
 8008ab4:	401a      	ands	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8008aba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008abe:	3301      	adds	r3, #1
 8008ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	f67f af0e 	bls.w	80088ea <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	3740      	adds	r7, #64	; 0x40
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20001af0 	.word	0x20001af0
 8008adc:	20001b70 	.word	0x20001b70
 8008ae0:	0003fffc 	.word	0x0003fffc

08008ae4 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b09c      	sub	sp, #112	; 0x70
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8008aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008af2:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8008af4:	4b9e      	ldr	r3, [pc, #632]	; (8008d70 <dcd_int_handler+0x28c>)
 8008af6:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8008af8:	4b9e      	ldr	r3, [pc, #632]	; (8008d74 <dcd_int_handler+0x290>)
 8008afa:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8008afc:	4b9e      	ldr	r3, [pc, #632]	; (8008d78 <dcd_int_handler+0x294>)
 8008afe:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8008b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8008b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b1c:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fdd7 	bl	80076d4 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8008b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d031      	beq.n	8008b94 <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8008b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b36:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fec2 	bl	80078c4 <get_speed>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8008b46:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b4e:	f7fe fe37 	bl	80077c0 <set_turnaround>
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8008b58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008b5c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8008b66:	f107 0314 	add.w	r3, r7, #20
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	605a      	str	r2, [r3, #4]
 8008b70:	609a      	str	r2, [r3, #8]
 8008b72:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008b76:	753b      	strb	r3, [r7, #20]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8008b7c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008b80:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8008b82:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8008b86:	f107 0314 	add.w	r3, r7, #20
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd fe11 	bl	80067b4 <dcd_event_handler>
}
 8008b92:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8008b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d023      	beq.n	8008be6 <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ba4:	615a      	str	r2, [r3, #20]
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008bb8:	f107 0320 	add.w	r3, r7, #32
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
 8008bc4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008bc8:	f887 3020 	strb.w	r3, [r7, #32]
 8008bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8008bd4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8008bd8:	f107 0320 	add.w	r3, r7, #32
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd fde8 	bl	80067b4 <dcd_event_handler>
}
 8008be4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8008be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da23      	bge.n	8008c34 <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8008bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	615a      	str	r2, [r3, #20]
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8008bfa:	2305      	movs	r3, #5
 8008bfc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	605a      	str	r2, [r3, #4]
 8008c10:	609a      	str	r2, [r3, #8]
 8008c12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008c16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8008c1a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008c1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8008c22:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8008c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fd fdc1 	bl	80067b4 <dcd_event_handler>
}
 8008c32:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8008c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d028      	beq.n	8008c90 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8008c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8008c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01d      	beq.n	8008c8a <dcd_int_handler+0x1a6>
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	609a      	str	r2, [r3, #8]
 8008c6c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c70:	723b      	strb	r3, [r7, #8]
 8008c72:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8008c76:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8008c78:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd fd96 	bl	80067b4 <dcd_event_handler>
}
 8008c88:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8008c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c8e:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8008c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d028      	beq.n	8008cec <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8008c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f023 0208 	bic.w	r2, r3, #8
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	619a      	str	r2, [r3, #24]
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008cbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	605a      	str	r2, [r3, #4]
 8008cc8:	609a      	str	r2, [r3, #8]
 8008cca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008cd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008cd6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8008cda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fd fd65 	bl	80067b4 <dcd_event_handler>
}
 8008cea:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8008cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d021      	beq.n	8008d3a <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8008cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d00:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fc84 	bl	8008614 <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8008d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1f4      	bne.n	8008d02 <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8008d18:	4b18      	ldr	r3, [pc, #96]	; (8008d7c <dcd_int_handler+0x298>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d006      	beq.n	8008d2e <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fca4 	bl	8007670 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8008d28:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <dcd_int_handler+0x298>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f043 0210 	orr.w	r2, r3, #16
 8008d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d38:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8008d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff fd08 	bl	8008760 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8008d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d005      	beq.n	8008d66 <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff fdb7 	bl	80088d4 <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8008d66:	bf00      	nop
 8008d68:	3770      	adds	r7, #112	; 0x70
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	50000800 	.word	0x50000800
 8008d74:	50000b00 	.word	0x50000b00
 8008d78:	50000900 	.word	0x50000900
 8008d7c:	20001b76 	.word	0x20001b76

08008d80 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8008d86:	2000      	movs	r0, #0
 8008d88:	f7fc fe72 	bl	8005a70 <tud_init>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f083 0301 	eor.w	r3, r3, #1
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00a      	beq.n	8008dae <tusb_init+0x2e>
 8008d98:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <tusb_init+0x38>)
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d000      	beq.n	8008daa <tusb_init+0x2a>
 8008da8:	be00      	bkpt	0x0000
 8008daa:	2300      	movs	r3, #0
 8008dac:	e000      	b.n	8008db0 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 8008dae:	2301      	movs	r3, #1
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	e000edf0 	.word	0xe000edf0

08008dbc <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <tu_edpt_claim+0x26>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <tu_edpt_claim+0x2a>
 8008de2:	2300      	movs	r3, #0
 8008de4:	e01e      	b.n	8008e24 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d108      	bne.n	8008e06 <tu_edpt_claim+0x4a>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <tu_edpt_claim+0x4a>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <tu_edpt_claim+0x4c>
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
  if (available)
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7813      	ldrb	r3, [r2, #0]
 8008e1c:	f043 0304 	orr.w	r3, r3, #4
 8008e20:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d108      	bne.n	8008e5a <tu_edpt_release+0x2a>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <tu_edpt_release+0x2a>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <tu_edpt_release+0x2c>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7813      	ldrb	r3, [r2, #0]
 8008e70:	f36f 0382 	bfc	r3, #2, #1
 8008e74:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b08b      	sub	sp, #44	; 0x2c
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	889b      	ldrh	r3, [r3, #4]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e9e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8008ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d03e      	beq.n	8008f2e <tu_edpt_validate+0xaa>
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	dc53      	bgt.n	8008f5c <tu_edpt_validate+0xd8>
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d002      	beq.n	8008ebe <tu_edpt_validate+0x3a>
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d018      	beq.n	8008eee <tu_edpt_validate+0x6a>
 8008ebc:	e04e      	b.n	8008f5c <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d102      	bne.n	8008eca <tu_edpt_validate+0x46>
 8008ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec8:	e001      	b.n	8008ece <tu_edpt_validate+0x4a>
 8008eca:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008ece:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8008ed0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ed2:	8afb      	ldrh	r3, [r7, #22]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d943      	bls.n	8008f60 <tu_edpt_validate+0xdc>
 8008ed8:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <tu_edpt_validate+0xf4>)
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d000      	beq.n	8008eea <tu_edpt_validate+0x66>
 8008ee8:	be00      	bkpt	0x0000
 8008eea:	2300      	movs	r3, #0
 8008eec:	e03e      	b.n	8008f6c <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d10e      	bne.n	8008f12 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008ef4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008efa:	d033      	beq.n	8008f64 <tu_edpt_validate+0xe0>
 8008efc:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <tu_edpt_validate+0xf4>)
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d000      	beq.n	8008f0e <tu_edpt_validate+0x8a>
 8008f0c:	be00      	bkpt	0x0000
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e02c      	b.n	8008f6c <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8008f12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f14:	2b40      	cmp	r3, #64	; 0x40
 8008f16:	d925      	bls.n	8008f64 <tu_edpt_validate+0xe0>
 8008f18:	4b17      	ldr	r3, [pc, #92]	; (8008f78 <tu_edpt_validate+0xf4>)
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d000      	beq.n	8008f2a <tu_edpt_validate+0xa6>
 8008f28:	be00      	bkpt	0x0000
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e01e      	b.n	8008f6c <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d102      	bne.n	8008f3a <tu_edpt_validate+0xb6>
 8008f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f38:	e000      	b.n	8008f3c <tu_edpt_validate+0xb8>
 8008f3a:	2340      	movs	r3, #64	; 0x40
 8008f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8008f3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d910      	bls.n	8008f68 <tu_edpt_validate+0xe4>
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <tu_edpt_validate+0xf4>)
 8008f48:	623b      	str	r3, [r7, #32]
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d000      	beq.n	8008f58 <tu_edpt_validate+0xd4>
 8008f56:	be00      	bkpt	0x0000
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e007      	b.n	8008f6c <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e005      	b.n	8008f6c <tu_edpt_validate+0xe8>
    break;
 8008f60:	bf00      	nop
 8008f62:	e002      	b.n	8008f6a <tu_edpt_validate+0xe6>
    break;
 8008f64:	bf00      	nop
 8008f66:	e000      	b.n	8008f6a <tu_edpt_validate+0xe6>
    break;
 8008f68:	bf00      	nop
  }

  return true;
 8008f6a:	2301      	movs	r3, #1
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	372c      	adds	r7, #44	; 0x2c
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	e000edf0 	.word	0xe000edf0

08008f7c <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b08d      	sub	sp, #52	; 0x34
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4611      	mov	r1, r2
 8008f88:	461a      	mov	r2, r3
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	80fb      	strh	r3, [r7, #6]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9a:	4413      	add	r3, r2
 8008f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8008f9e:	e027      	b.n	8008ff0 <tu_edpt_bind_driver+0x74>
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d116      	bne.n	8008fdc <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	789b      	ldrb	r3, [r3, #2]
 8008fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fba:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008fbc:	7fbb      	ldrb	r3, [r7, #30]
 8008fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc2:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fce:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008fd0:	7ffa      	ldrb	r2, [r7, #31]
 8008fd2:	09d2      	lsrs	r2, r2, #7
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	797a      	ldrb	r2, [r7, #5]
 8008fda:	545a      	strb	r2, [r3, r1]
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8008ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d3d3      	bcc.n	8008fa0 <tu_edpt_bind_driver+0x24>
  }
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3734      	adds	r7, #52	; 0x34
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <__libc_init_array>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4d0d      	ldr	r5, [pc, #52]	; (8009040 <__libc_init_array+0x38>)
 800900c:	4c0d      	ldr	r4, [pc, #52]	; (8009044 <__libc_init_array+0x3c>)
 800900e:	1b64      	subs	r4, r4, r5
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	2600      	movs	r6, #0
 8009014:	42a6      	cmp	r6, r4
 8009016:	d109      	bne.n	800902c <__libc_init_array+0x24>
 8009018:	4d0b      	ldr	r5, [pc, #44]	; (8009048 <__libc_init_array+0x40>)
 800901a:	4c0c      	ldr	r4, [pc, #48]	; (800904c <__libc_init_array+0x44>)
 800901c:	f001 f87a 	bl	800a114 <_init>
 8009020:	1b64      	subs	r4, r4, r5
 8009022:	10a4      	asrs	r4, r4, #2
 8009024:	2600      	movs	r6, #0
 8009026:	42a6      	cmp	r6, r4
 8009028:	d105      	bne.n	8009036 <__libc_init_array+0x2e>
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009030:	4798      	blx	r3
 8009032:	3601      	adds	r6, #1
 8009034:	e7ee      	b.n	8009014 <__libc_init_array+0xc>
 8009036:	f855 3b04 	ldr.w	r3, [r5], #4
 800903a:	4798      	blx	r3
 800903c:	3601      	adds	r6, #1
 800903e:	e7f2      	b.n	8009026 <__libc_init_array+0x1e>
 8009040:	0800a568 	.word	0x0800a568
 8009044:	0800a568 	.word	0x0800a568
 8009048:	0800a568 	.word	0x0800a568
 800904c:	0800a56c 	.word	0x0800a56c

08009050 <memcpy>:
 8009050:	440a      	add	r2, r1
 8009052:	4291      	cmp	r1, r2
 8009054:	f100 33ff 	add.w	r3, r0, #4294967295
 8009058:	d100      	bne.n	800905c <memcpy+0xc>
 800905a:	4770      	bx	lr
 800905c:	b510      	push	{r4, lr}
 800905e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009066:	4291      	cmp	r1, r2
 8009068:	d1f9      	bne.n	800905e <memcpy+0xe>
 800906a:	bd10      	pop	{r4, pc}

0800906c <memset>:
 800906c:	4402      	add	r2, r0
 800906e:	4603      	mov	r3, r0
 8009070:	4293      	cmp	r3, r2
 8009072:	d100      	bne.n	8009076 <memset+0xa>
 8009074:	4770      	bx	lr
 8009076:	f803 1b01 	strb.w	r1, [r3], #1
 800907a:	e7f9      	b.n	8009070 <memset+0x4>
 800907c:	0000      	movs	r0, r0
	...

08009080 <sin>:
 8009080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009082:	ec53 2b10 	vmov	r2, r3, d0
 8009086:	4828      	ldr	r0, [pc, #160]	; (8009128 <sin+0xa8>)
 8009088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800908c:	4281      	cmp	r1, r0
 800908e:	dc07      	bgt.n	80090a0 <sin+0x20>
 8009090:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009120 <sin+0xa0>
 8009094:	2000      	movs	r0, #0
 8009096:	b005      	add	sp, #20
 8009098:	f85d eb04 	ldr.w	lr, [sp], #4
 800909c:	f000 be6c 	b.w	8009d78 <__kernel_sin>
 80090a0:	4822      	ldr	r0, [pc, #136]	; (800912c <sin+0xac>)
 80090a2:	4281      	cmp	r1, r0
 80090a4:	dd09      	ble.n	80090ba <sin+0x3a>
 80090a6:	ee10 0a10 	vmov	r0, s0
 80090aa:	4619      	mov	r1, r3
 80090ac:	f7f7 f8a0 	bl	80001f0 <__aeabi_dsub>
 80090b0:	ec41 0b10 	vmov	d0, r0, r1
 80090b4:	b005      	add	sp, #20
 80090b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80090ba:	4668      	mov	r0, sp
 80090bc:	f000 f838 	bl	8009130 <__ieee754_rem_pio2>
 80090c0:	f000 0003 	and.w	r0, r0, #3
 80090c4:	2801      	cmp	r0, #1
 80090c6:	d00c      	beq.n	80090e2 <sin+0x62>
 80090c8:	2802      	cmp	r0, #2
 80090ca:	d011      	beq.n	80090f0 <sin+0x70>
 80090cc:	b9f0      	cbnz	r0, 800910c <sin+0x8c>
 80090ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090d2:	ed9d 0b00 	vldr	d0, [sp]
 80090d6:	2001      	movs	r0, #1
 80090d8:	f000 fe4e 	bl	8009d78 <__kernel_sin>
 80090dc:	ec51 0b10 	vmov	r0, r1, d0
 80090e0:	e7e6      	b.n	80090b0 <sin+0x30>
 80090e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090e6:	ed9d 0b00 	vldr	d0, [sp]
 80090ea:	f000 fa2d 	bl	8009548 <__kernel_cos>
 80090ee:	e7f5      	b.n	80090dc <sin+0x5c>
 80090f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80090f4:	ed9d 0b00 	vldr	d0, [sp]
 80090f8:	2001      	movs	r0, #1
 80090fa:	f000 fe3d 	bl	8009d78 <__kernel_sin>
 80090fe:	ec53 2b10 	vmov	r2, r3, d0
 8009102:	ee10 0a10 	vmov	r0, s0
 8009106:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800910a:	e7d1      	b.n	80090b0 <sin+0x30>
 800910c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009110:	ed9d 0b00 	vldr	d0, [sp]
 8009114:	f000 fa18 	bl	8009548 <__kernel_cos>
 8009118:	e7f1      	b.n	80090fe <sin+0x7e>
 800911a:	bf00      	nop
 800911c:	f3af 8000 	nop.w
	...
 8009128:	3fe921fb 	.word	0x3fe921fb
 800912c:	7fefffff 	.word	0x7fefffff

08009130 <__ieee754_rem_pio2>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	ed2d 8b02 	vpush	{d8}
 8009138:	ec55 4b10 	vmov	r4, r5, d0
 800913c:	4bca      	ldr	r3, [pc, #808]	; (8009468 <__ieee754_rem_pio2+0x338>)
 800913e:	b08b      	sub	sp, #44	; 0x2c
 8009140:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009144:	4598      	cmp	r8, r3
 8009146:	4682      	mov	sl, r0
 8009148:	9502      	str	r5, [sp, #8]
 800914a:	dc08      	bgt.n	800915e <__ieee754_rem_pio2+0x2e>
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	ed80 0b00 	vstr	d0, [r0]
 8009154:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009158:	f04f 0b00 	mov.w	fp, #0
 800915c:	e028      	b.n	80091b0 <__ieee754_rem_pio2+0x80>
 800915e:	4bc3      	ldr	r3, [pc, #780]	; (800946c <__ieee754_rem_pio2+0x33c>)
 8009160:	4598      	cmp	r8, r3
 8009162:	dc78      	bgt.n	8009256 <__ieee754_rem_pio2+0x126>
 8009164:	9b02      	ldr	r3, [sp, #8]
 8009166:	4ec2      	ldr	r6, [pc, #776]	; (8009470 <__ieee754_rem_pio2+0x340>)
 8009168:	2b00      	cmp	r3, #0
 800916a:	ee10 0a10 	vmov	r0, s0
 800916e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009430 <__ieee754_rem_pio2+0x300>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	4629      	mov	r1, r5
 8009176:	dd39      	ble.n	80091ec <__ieee754_rem_pio2+0xbc>
 8009178:	f7f7 f83a 	bl	80001f0 <__aeabi_dsub>
 800917c:	45b0      	cmp	r8, r6
 800917e:	4604      	mov	r4, r0
 8009180:	460d      	mov	r5, r1
 8009182:	d01b      	beq.n	80091bc <__ieee754_rem_pio2+0x8c>
 8009184:	a3ac      	add	r3, pc, #688	; (adr r3, 8009438 <__ieee754_rem_pio2+0x308>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f831 	bl	80001f0 <__aeabi_dsub>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	e9ca 2300 	strd	r2, r3, [sl]
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 f829 	bl	80001f0 <__aeabi_dsub>
 800919e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009438 <__ieee754_rem_pio2+0x308>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f7f7 f824 	bl	80001f0 <__aeabi_dsub>
 80091a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091ac:	f04f 0b01 	mov.w	fp, #1
 80091b0:	4658      	mov	r0, fp
 80091b2:	b00b      	add	sp, #44	; 0x2c
 80091b4:	ecbd 8b02 	vpop	{d8}
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009440 <__ieee754_rem_pio2+0x310>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f815 	bl	80001f0 <__aeabi_dsub>
 80091c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009448 <__ieee754_rem_pio2+0x318>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	f7f7 f80e 	bl	80001f0 <__aeabi_dsub>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	e9ca 2300 	strd	r2, r3, [sl]
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 f806 	bl	80001f0 <__aeabi_dsub>
 80091e4:	a398      	add	r3, pc, #608	; (adr r3, 8009448 <__ieee754_rem_pio2+0x318>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	e7db      	b.n	80091a4 <__ieee754_rem_pio2+0x74>
 80091ec:	f7f7 f802 	bl	80001f4 <__adddf3>
 80091f0:	45b0      	cmp	r8, r6
 80091f2:	4604      	mov	r4, r0
 80091f4:	460d      	mov	r5, r1
 80091f6:	d016      	beq.n	8009226 <__ieee754_rem_pio2+0xf6>
 80091f8:	a38f      	add	r3, pc, #572	; (adr r3, 8009438 <__ieee754_rem_pio2+0x308>)
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	f7f6 fff9 	bl	80001f4 <__adddf3>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	e9ca 2300 	strd	r2, r3, [sl]
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f6 ffef 	bl	80001f0 <__aeabi_dsub>
 8009212:	a389      	add	r3, pc, #548	; (adr r3, 8009438 <__ieee754_rem_pio2+0x308>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f6 ffec 	bl	80001f4 <__adddf3>
 800921c:	f04f 3bff 	mov.w	fp, #4294967295
 8009220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009224:	e7c4      	b.n	80091b0 <__ieee754_rem_pio2+0x80>
 8009226:	a386      	add	r3, pc, #536	; (adr r3, 8009440 <__ieee754_rem_pio2+0x310>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f6 ffe2 	bl	80001f4 <__adddf3>
 8009230:	a385      	add	r3, pc, #532	; (adr r3, 8009448 <__ieee754_rem_pio2+0x318>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	4604      	mov	r4, r0
 8009238:	460d      	mov	r5, r1
 800923a:	f7f6 ffdb 	bl	80001f4 <__adddf3>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9ca 2300 	strd	r2, r3, [sl]
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	f7f6 ffd1 	bl	80001f0 <__aeabi_dsub>
 800924e:	a37e      	add	r3, pc, #504	; (adr r3, 8009448 <__ieee754_rem_pio2+0x318>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	e7e0      	b.n	8009218 <__ieee754_rem_pio2+0xe8>
 8009256:	4b87      	ldr	r3, [pc, #540]	; (8009474 <__ieee754_rem_pio2+0x344>)
 8009258:	4598      	cmp	r8, r3
 800925a:	f300 80d9 	bgt.w	8009410 <__ieee754_rem_pio2+0x2e0>
 800925e:	f000 fe49 	bl	8009ef4 <fabs>
 8009262:	ec55 4b10 	vmov	r4, r5, d0
 8009266:	ee10 0a10 	vmov	r0, s0
 800926a:	a379      	add	r3, pc, #484	; (adr r3, 8009450 <__ieee754_rem_pio2+0x320>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 f975 	bl	8000560 <__aeabi_dmul>
 8009276:	4b80      	ldr	r3, [pc, #512]	; (8009478 <__ieee754_rem_pio2+0x348>)
 8009278:	2200      	movs	r2, #0
 800927a:	f7f6 ffbb 	bl	80001f4 <__adddf3>
 800927e:	f7f7 fc09 	bl	8000a94 <__aeabi_d2iz>
 8009282:	4683      	mov	fp, r0
 8009284:	f7f7 f902 	bl	800048c <__aeabi_i2d>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	ec43 2b18 	vmov	d8, r2, r3
 8009290:	a367      	add	r3, pc, #412	; (adr r3, 8009430 <__ieee754_rem_pio2+0x300>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f7 f963 	bl	8000560 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4620      	mov	r0, r4
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7f6 ffa5 	bl	80001f0 <__aeabi_dsub>
 80092a6:	a364      	add	r3, pc, #400	; (adr r3, 8009438 <__ieee754_rem_pio2+0x308>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	4606      	mov	r6, r0
 80092ae:	460f      	mov	r7, r1
 80092b0:	ec51 0b18 	vmov	r0, r1, d8
 80092b4:	f7f7 f954 	bl	8000560 <__aeabi_dmul>
 80092b8:	f1bb 0f1f 	cmp.w	fp, #31
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	dc0d      	bgt.n	80092de <__ieee754_rem_pio2+0x1ae>
 80092c2:	4b6e      	ldr	r3, [pc, #440]	; (800947c <__ieee754_rem_pio2+0x34c>)
 80092c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80092c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092cc:	4543      	cmp	r3, r8
 80092ce:	d006      	beq.n	80092de <__ieee754_rem_pio2+0x1ae>
 80092d0:	4622      	mov	r2, r4
 80092d2:	462b      	mov	r3, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f6 ff8a 	bl	80001f0 <__aeabi_dsub>
 80092dc:	e00f      	b.n	80092fe <__ieee754_rem_pio2+0x1ce>
 80092de:	462b      	mov	r3, r5
 80092e0:	4622      	mov	r2, r4
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f6 ff83 	bl	80001f0 <__aeabi_dsub>
 80092ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80092f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80092f8:	f1b8 0f10 	cmp.w	r8, #16
 80092fc:	dc02      	bgt.n	8009304 <__ieee754_rem_pio2+0x1d4>
 80092fe:	e9ca 0100 	strd	r0, r1, [sl]
 8009302:	e039      	b.n	8009378 <__ieee754_rem_pio2+0x248>
 8009304:	a34e      	add	r3, pc, #312	; (adr r3, 8009440 <__ieee754_rem_pio2+0x310>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	ec51 0b18 	vmov	r0, r1, d8
 800930e:	f7f7 f927 	bl	8000560 <__aeabi_dmul>
 8009312:	4604      	mov	r4, r0
 8009314:	460d      	mov	r5, r1
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	f7f6 ff67 	bl	80001f0 <__aeabi_dsub>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	4680      	mov	r8, r0
 8009328:	4689      	mov	r9, r1
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f6 ff5f 	bl	80001f0 <__aeabi_dsub>
 8009332:	4622      	mov	r2, r4
 8009334:	462b      	mov	r3, r5
 8009336:	f7f6 ff5b 	bl	80001f0 <__aeabi_dsub>
 800933a:	a343      	add	r3, pc, #268	; (adr r3, 8009448 <__ieee754_rem_pio2+0x318>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	ec51 0b18 	vmov	r0, r1, d8
 8009348:	f7f7 f90a 	bl	8000560 <__aeabi_dmul>
 800934c:	4622      	mov	r2, r4
 800934e:	462b      	mov	r3, r5
 8009350:	f7f6 ff4e 	bl	80001f0 <__aeabi_dsub>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f6 ff46 	bl	80001f0 <__aeabi_dsub>
 8009364:	9a03      	ldr	r2, [sp, #12]
 8009366:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b31      	cmp	r3, #49	; 0x31
 800936e:	dc24      	bgt.n	80093ba <__ieee754_rem_pio2+0x28a>
 8009370:	e9ca 0100 	strd	r0, r1, [sl]
 8009374:	4646      	mov	r6, r8
 8009376:	464f      	mov	r7, r9
 8009378:	e9da 8900 	ldrd	r8, r9, [sl]
 800937c:	4630      	mov	r0, r6
 800937e:	4642      	mov	r2, r8
 8009380:	464b      	mov	r3, r9
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 ff34 	bl	80001f0 <__aeabi_dsub>
 8009388:	462b      	mov	r3, r5
 800938a:	4622      	mov	r2, r4
 800938c:	f7f6 ff30 	bl	80001f0 <__aeabi_dsub>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009398:	f6bf af0a 	bge.w	80091b0 <__ieee754_rem_pio2+0x80>
 800939c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80093a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093a8:	f8ca 8000 	str.w	r8, [sl]
 80093ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80093b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80093b4:	f1cb 0b00 	rsb	fp, fp, #0
 80093b8:	e6fa      	b.n	80091b0 <__ieee754_rem_pio2+0x80>
 80093ba:	a327      	add	r3, pc, #156	; (adr r3, 8009458 <__ieee754_rem_pio2+0x328>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	ec51 0b18 	vmov	r0, r1, d8
 80093c4:	f7f7 f8cc 	bl	8000560 <__aeabi_dmul>
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	f7f6 ff0c 	bl	80001f0 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f6 ff04 	bl	80001f0 <__aeabi_dsub>
 80093e8:	4622      	mov	r2, r4
 80093ea:	462b      	mov	r3, r5
 80093ec:	f7f6 ff00 	bl	80001f0 <__aeabi_dsub>
 80093f0:	a31b      	add	r3, pc, #108	; (adr r3, 8009460 <__ieee754_rem_pio2+0x330>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	4604      	mov	r4, r0
 80093f8:	460d      	mov	r5, r1
 80093fa:	ec51 0b18 	vmov	r0, r1, d8
 80093fe:	f7f7 f8af 	bl	8000560 <__aeabi_dmul>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f6 fef3 	bl	80001f0 <__aeabi_dsub>
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	e75f      	b.n	80092d0 <__ieee754_rem_pio2+0x1a0>
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <__ieee754_rem_pio2+0x350>)
 8009412:	4598      	cmp	r8, r3
 8009414:	dd36      	ble.n	8009484 <__ieee754_rem_pio2+0x354>
 8009416:	ee10 2a10 	vmov	r2, s0
 800941a:	462b      	mov	r3, r5
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f6 fee6 	bl	80001f0 <__aeabi_dsub>
 8009424:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009428:	e9ca 0100 	strd	r0, r1, [sl]
 800942c:	e694      	b.n	8009158 <__ieee754_rem_pio2+0x28>
 800942e:	bf00      	nop
 8009430:	54400000 	.word	0x54400000
 8009434:	3ff921fb 	.word	0x3ff921fb
 8009438:	1a626331 	.word	0x1a626331
 800943c:	3dd0b461 	.word	0x3dd0b461
 8009440:	1a600000 	.word	0x1a600000
 8009444:	3dd0b461 	.word	0x3dd0b461
 8009448:	2e037073 	.word	0x2e037073
 800944c:	3ba3198a 	.word	0x3ba3198a
 8009450:	6dc9c883 	.word	0x6dc9c883
 8009454:	3fe45f30 	.word	0x3fe45f30
 8009458:	2e000000 	.word	0x2e000000
 800945c:	3ba3198a 	.word	0x3ba3198a
 8009460:	252049c1 	.word	0x252049c1
 8009464:	397b839a 	.word	0x397b839a
 8009468:	3fe921fb 	.word	0x3fe921fb
 800946c:	4002d97b 	.word	0x4002d97b
 8009470:	3ff921fb 	.word	0x3ff921fb
 8009474:	413921fb 	.word	0x413921fb
 8009478:	3fe00000 	.word	0x3fe00000
 800947c:	0800a388 	.word	0x0800a388
 8009480:	7fefffff 	.word	0x7fefffff
 8009484:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009488:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800948c:	ee10 0a10 	vmov	r0, s0
 8009490:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009494:	ee10 6a10 	vmov	r6, s0
 8009498:	460f      	mov	r7, r1
 800949a:	f7f7 fafb 	bl	8000a94 <__aeabi_d2iz>
 800949e:	f7f6 fff5 	bl	800048c <__aeabi_i2d>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4630      	mov	r0, r6
 80094a8:	4639      	mov	r1, r7
 80094aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094ae:	f7f6 fe9f 	bl	80001f0 <__aeabi_dsub>
 80094b2:	4b23      	ldr	r3, [pc, #140]	; (8009540 <__ieee754_rem_pio2+0x410>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	f7f7 f853 	bl	8000560 <__aeabi_dmul>
 80094ba:	460f      	mov	r7, r1
 80094bc:	4606      	mov	r6, r0
 80094be:	f7f7 fae9 	bl	8000a94 <__aeabi_d2iz>
 80094c2:	f7f6 ffe3 	bl	800048c <__aeabi_i2d>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4630      	mov	r0, r6
 80094cc:	4639      	mov	r1, r7
 80094ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094d2:	f7f6 fe8d 	bl	80001f0 <__aeabi_dsub>
 80094d6:	4b1a      	ldr	r3, [pc, #104]	; (8009540 <__ieee754_rem_pio2+0x410>)
 80094d8:	2200      	movs	r2, #0
 80094da:	f7f7 f841 	bl	8000560 <__aeabi_dmul>
 80094de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094e2:	ad04      	add	r5, sp, #16
 80094e4:	f04f 0803 	mov.w	r8, #3
 80094e8:	46a9      	mov	r9, r5
 80094ea:	2600      	movs	r6, #0
 80094ec:	2700      	movs	r7, #0
 80094ee:	4632      	mov	r2, r6
 80094f0:	463b      	mov	r3, r7
 80094f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80094f6:	46c3      	mov	fp, r8
 80094f8:	3d08      	subs	r5, #8
 80094fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80094fe:	f7f7 fa97 	bl	8000a30 <__aeabi_dcmpeq>
 8009502:	2800      	cmp	r0, #0
 8009504:	d1f3      	bne.n	80094ee <__ieee754_rem_pio2+0x3be>
 8009506:	4b0f      	ldr	r3, [pc, #60]	; (8009544 <__ieee754_rem_pio2+0x414>)
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	2302      	movs	r3, #2
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4622      	mov	r2, r4
 8009510:	465b      	mov	r3, fp
 8009512:	4651      	mov	r1, sl
 8009514:	4648      	mov	r0, r9
 8009516:	f000 f8df 	bl	80096d8 <__kernel_rem_pio2>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	4683      	mov	fp, r0
 8009520:	f6bf ae46 	bge.w	80091b0 <__ieee754_rem_pio2+0x80>
 8009524:	e9da 2100 	ldrd	r2, r1, [sl]
 8009528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800952c:	e9ca 2300 	strd	r2, r3, [sl]
 8009530:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009538:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800953c:	e73a      	b.n	80093b4 <__ieee754_rem_pio2+0x284>
 800953e:	bf00      	nop
 8009540:	41700000 	.word	0x41700000
 8009544:	0800a408 	.word	0x0800a408

08009548 <__kernel_cos>:
 8009548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	ec57 6b10 	vmov	r6, r7, d0
 8009550:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009554:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009558:	ed8d 1b00 	vstr	d1, [sp]
 800955c:	da07      	bge.n	800956e <__kernel_cos+0x26>
 800955e:	ee10 0a10 	vmov	r0, s0
 8009562:	4639      	mov	r1, r7
 8009564:	f7f7 fa96 	bl	8000a94 <__aeabi_d2iz>
 8009568:	2800      	cmp	r0, #0
 800956a:	f000 8088 	beq.w	800967e <__kernel_cos+0x136>
 800956e:	4632      	mov	r2, r6
 8009570:	463b      	mov	r3, r7
 8009572:	4630      	mov	r0, r6
 8009574:	4639      	mov	r1, r7
 8009576:	f7f6 fff3 	bl	8000560 <__aeabi_dmul>
 800957a:	4b51      	ldr	r3, [pc, #324]	; (80096c0 <__kernel_cos+0x178>)
 800957c:	2200      	movs	r2, #0
 800957e:	4604      	mov	r4, r0
 8009580:	460d      	mov	r5, r1
 8009582:	f7f6 ffed 	bl	8000560 <__aeabi_dmul>
 8009586:	a340      	add	r3, pc, #256	; (adr r3, 8009688 <__kernel_cos+0x140>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	4682      	mov	sl, r0
 800958e:	468b      	mov	fp, r1
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f6 ffe4 	bl	8000560 <__aeabi_dmul>
 8009598:	a33d      	add	r3, pc, #244	; (adr r3, 8009690 <__kernel_cos+0x148>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f6 fe29 	bl	80001f4 <__adddf3>
 80095a2:	4622      	mov	r2, r4
 80095a4:	462b      	mov	r3, r5
 80095a6:	f7f6 ffdb 	bl	8000560 <__aeabi_dmul>
 80095aa:	a33b      	add	r3, pc, #236	; (adr r3, 8009698 <__kernel_cos+0x150>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 fe1e 	bl	80001f0 <__aeabi_dsub>
 80095b4:	4622      	mov	r2, r4
 80095b6:	462b      	mov	r3, r5
 80095b8:	f7f6 ffd2 	bl	8000560 <__aeabi_dmul>
 80095bc:	a338      	add	r3, pc, #224	; (adr r3, 80096a0 <__kernel_cos+0x158>)
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f6 fe17 	bl	80001f4 <__adddf3>
 80095c6:	4622      	mov	r2, r4
 80095c8:	462b      	mov	r3, r5
 80095ca:	f7f6 ffc9 	bl	8000560 <__aeabi_dmul>
 80095ce:	a336      	add	r3, pc, #216	; (adr r3, 80096a8 <__kernel_cos+0x160>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f7f6 fe0c 	bl	80001f0 <__aeabi_dsub>
 80095d8:	4622      	mov	r2, r4
 80095da:	462b      	mov	r3, r5
 80095dc:	f7f6 ffc0 	bl	8000560 <__aeabi_dmul>
 80095e0:	a333      	add	r3, pc, #204	; (adr r3, 80096b0 <__kernel_cos+0x168>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f7f6 fe05 	bl	80001f4 <__adddf3>
 80095ea:	4622      	mov	r2, r4
 80095ec:	462b      	mov	r3, r5
 80095ee:	f7f6 ffb7 	bl	8000560 <__aeabi_dmul>
 80095f2:	4622      	mov	r2, r4
 80095f4:	462b      	mov	r3, r5
 80095f6:	f7f6 ffb3 	bl	8000560 <__aeabi_dmul>
 80095fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	4630      	mov	r0, r6
 8009604:	4639      	mov	r1, r7
 8009606:	f7f6 ffab 	bl	8000560 <__aeabi_dmul>
 800960a:	460b      	mov	r3, r1
 800960c:	4602      	mov	r2, r0
 800960e:	4629      	mov	r1, r5
 8009610:	4620      	mov	r0, r4
 8009612:	f7f6 fded 	bl	80001f0 <__aeabi_dsub>
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <__kernel_cos+0x17c>)
 8009618:	4598      	cmp	r8, r3
 800961a:	4606      	mov	r6, r0
 800961c:	460f      	mov	r7, r1
 800961e:	dc10      	bgt.n	8009642 <__kernel_cos+0xfa>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4650      	mov	r0, sl
 8009626:	4659      	mov	r1, fp
 8009628:	f7f6 fde2 	bl	80001f0 <__aeabi_dsub>
 800962c:	460b      	mov	r3, r1
 800962e:	4926      	ldr	r1, [pc, #152]	; (80096c8 <__kernel_cos+0x180>)
 8009630:	4602      	mov	r2, r0
 8009632:	2000      	movs	r0, #0
 8009634:	f7f6 fddc 	bl	80001f0 <__aeabi_dsub>
 8009638:	ec41 0b10 	vmov	d0, r0, r1
 800963c:	b003      	add	sp, #12
 800963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009642:	4b22      	ldr	r3, [pc, #136]	; (80096cc <__kernel_cos+0x184>)
 8009644:	4920      	ldr	r1, [pc, #128]	; (80096c8 <__kernel_cos+0x180>)
 8009646:	4598      	cmp	r8, r3
 8009648:	bfcc      	ite	gt
 800964a:	4d21      	ldrgt	r5, [pc, #132]	; (80096d0 <__kernel_cos+0x188>)
 800964c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009650:	2400      	movs	r4, #0
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	2000      	movs	r0, #0
 8009658:	f7f6 fdca 	bl	80001f0 <__aeabi_dsub>
 800965c:	4622      	mov	r2, r4
 800965e:	4680      	mov	r8, r0
 8009660:	4689      	mov	r9, r1
 8009662:	462b      	mov	r3, r5
 8009664:	4650      	mov	r0, sl
 8009666:	4659      	mov	r1, fp
 8009668:	f7f6 fdc2 	bl	80001f0 <__aeabi_dsub>
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	f7f6 fdbe 	bl	80001f0 <__aeabi_dsub>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	e7da      	b.n	8009634 <__kernel_cos+0xec>
 800967e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80096b8 <__kernel_cos+0x170>
 8009682:	e7db      	b.n	800963c <__kernel_cos+0xf4>
 8009684:	f3af 8000 	nop.w
 8009688:	be8838d4 	.word	0xbe8838d4
 800968c:	bda8fae9 	.word	0xbda8fae9
 8009690:	bdb4b1c4 	.word	0xbdb4b1c4
 8009694:	3e21ee9e 	.word	0x3e21ee9e
 8009698:	809c52ad 	.word	0x809c52ad
 800969c:	3e927e4f 	.word	0x3e927e4f
 80096a0:	19cb1590 	.word	0x19cb1590
 80096a4:	3efa01a0 	.word	0x3efa01a0
 80096a8:	16c15177 	.word	0x16c15177
 80096ac:	3f56c16c 	.word	0x3f56c16c
 80096b0:	5555554c 	.word	0x5555554c
 80096b4:	3fa55555 	.word	0x3fa55555
 80096b8:	00000000 	.word	0x00000000
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	3fe00000 	.word	0x3fe00000
 80096c4:	3fd33332 	.word	0x3fd33332
 80096c8:	3ff00000 	.word	0x3ff00000
 80096cc:	3fe90000 	.word	0x3fe90000
 80096d0:	3fd20000 	.word	0x3fd20000
 80096d4:	00000000 	.word	0x00000000

080096d8 <__kernel_rem_pio2>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	ed2d 8b02 	vpush	{d8}
 80096e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80096e4:	f112 0f14 	cmn.w	r2, #20
 80096e8:	9308      	str	r3, [sp, #32]
 80096ea:	9101      	str	r1, [sp, #4]
 80096ec:	4bc4      	ldr	r3, [pc, #784]	; (8009a00 <__kernel_rem_pio2+0x328>)
 80096ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80096f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80096f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80096fe:	bfa8      	it	ge
 8009700:	1ed4      	subge	r4, r2, #3
 8009702:	9306      	str	r3, [sp, #24]
 8009704:	bfb2      	itee	lt
 8009706:	2400      	movlt	r4, #0
 8009708:	2318      	movge	r3, #24
 800970a:	fb94 f4f3 	sdivge	r4, r4, r3
 800970e:	f06f 0317 	mvn.w	r3, #23
 8009712:	fb04 3303 	mla	r3, r4, r3, r3
 8009716:	eb03 0a02 	add.w	sl, r3, r2
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	9a06      	ldr	r2, [sp, #24]
 800971e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80099f0 <__kernel_rem_pio2+0x318>
 8009722:	eb03 0802 	add.w	r8, r3, r2
 8009726:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009728:	1aa7      	subs	r7, r4, r2
 800972a:	ae22      	add	r6, sp, #136	; 0x88
 800972c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009730:	2500      	movs	r5, #0
 8009732:	4545      	cmp	r5, r8
 8009734:	dd13      	ble.n	800975e <__kernel_rem_pio2+0x86>
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80099f0 <__kernel_rem_pio2+0x318>
 800973c:	aa22      	add	r2, sp, #136	; 0x88
 800973e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009742:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	4598      	cmp	r8, r3
 800974e:	dc2f      	bgt.n	80097b0 <__kernel_rem_pio2+0xd8>
 8009750:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009754:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009758:	462f      	mov	r7, r5
 800975a:	2600      	movs	r6, #0
 800975c:	e01b      	b.n	8009796 <__kernel_rem_pio2+0xbe>
 800975e:	42ef      	cmn	r7, r5
 8009760:	d407      	bmi.n	8009772 <__kernel_rem_pio2+0x9a>
 8009762:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009766:	f7f6 fe91 	bl	800048c <__aeabi_i2d>
 800976a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800976e:	3501      	adds	r5, #1
 8009770:	e7df      	b.n	8009732 <__kernel_rem_pio2+0x5a>
 8009772:	ec51 0b18 	vmov	r0, r1, d8
 8009776:	e7f8      	b.n	800976a <__kernel_rem_pio2+0x92>
 8009778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800977c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009780:	f7f6 feee 	bl	8000560 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800978c:	f7f6 fd32 	bl	80001f4 <__adddf3>
 8009790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009794:	3601      	adds	r6, #1
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	429e      	cmp	r6, r3
 800979a:	f1a7 0708 	sub.w	r7, r7, #8
 800979e:	ddeb      	ble.n	8009778 <__kernel_rem_pio2+0xa0>
 80097a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80097a4:	f108 0801 	add.w	r8, r8, #1
 80097a8:	ecab 7b02 	vstmia	fp!, {d7}
 80097ac:	3508      	adds	r5, #8
 80097ae:	e7cc      	b.n	800974a <__kernel_rem_pio2+0x72>
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	aa0e      	add	r2, sp, #56	; 0x38
 80097b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b8:	930d      	str	r3, [sp, #52]	; 0x34
 80097ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80097bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80097c0:	9c02      	ldr	r4, [sp, #8]
 80097c2:	930c      	str	r3, [sp, #48]	; 0x30
 80097c4:	00e3      	lsls	r3, r4, #3
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	ab9a      	add	r3, sp, #616	; 0x268
 80097ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80097d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80097d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80097d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80097dc:	46c3      	mov	fp, r8
 80097de:	46a1      	mov	r9, r4
 80097e0:	f1b9 0f00 	cmp.w	r9, #0
 80097e4:	f1a5 0508 	sub.w	r5, r5, #8
 80097e8:	dc77      	bgt.n	80098da <__kernel_rem_pio2+0x202>
 80097ea:	ec47 6b10 	vmov	d0, r6, r7
 80097ee:	4650      	mov	r0, sl
 80097f0:	f000 fc0a 	bl	800a008 <scalbn>
 80097f4:	ec57 6b10 	vmov	r6, r7, d0
 80097f8:	2200      	movs	r2, #0
 80097fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80097fe:	ee10 0a10 	vmov	r0, s0
 8009802:	4639      	mov	r1, r7
 8009804:	f7f6 feac 	bl	8000560 <__aeabi_dmul>
 8009808:	ec41 0b10 	vmov	d0, r0, r1
 800980c:	f000 fb7c 	bl	8009f08 <floor>
 8009810:	4b7c      	ldr	r3, [pc, #496]	; (8009a04 <__kernel_rem_pio2+0x32c>)
 8009812:	ec51 0b10 	vmov	r0, r1, d0
 8009816:	2200      	movs	r2, #0
 8009818:	f7f6 fea2 	bl	8000560 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f7f6 fce4 	bl	80001f0 <__aeabi_dsub>
 8009828:	460f      	mov	r7, r1
 800982a:	4606      	mov	r6, r0
 800982c:	f7f7 f932 	bl	8000a94 <__aeabi_d2iz>
 8009830:	9004      	str	r0, [sp, #16]
 8009832:	f7f6 fe2b 	bl	800048c <__aeabi_i2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	f7f6 fcd7 	bl	80001f0 <__aeabi_dsub>
 8009842:	f1ba 0f00 	cmp.w	sl, #0
 8009846:	4606      	mov	r6, r0
 8009848:	460f      	mov	r7, r1
 800984a:	dd6d      	ble.n	8009928 <__kernel_rem_pio2+0x250>
 800984c:	1e62      	subs	r2, r4, #1
 800984e:	ab0e      	add	r3, sp, #56	; 0x38
 8009850:	9d04      	ldr	r5, [sp, #16]
 8009852:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009856:	f1ca 0118 	rsb	r1, sl, #24
 800985a:	fa40 f301 	asr.w	r3, r0, r1
 800985e:	441d      	add	r5, r3
 8009860:	408b      	lsls	r3, r1
 8009862:	1ac0      	subs	r0, r0, r3
 8009864:	ab0e      	add	r3, sp, #56	; 0x38
 8009866:	9504      	str	r5, [sp, #16]
 8009868:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800986c:	f1ca 0317 	rsb	r3, sl, #23
 8009870:	fa40 fb03 	asr.w	fp, r0, r3
 8009874:	f1bb 0f00 	cmp.w	fp, #0
 8009878:	dd65      	ble.n	8009946 <__kernel_rem_pio2+0x26e>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	2200      	movs	r2, #0
 800987e:	3301      	adds	r3, #1
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	4615      	mov	r5, r2
 8009884:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009888:	4294      	cmp	r4, r2
 800988a:	f300 809c 	bgt.w	80099c6 <__kernel_rem_pio2+0x2ee>
 800988e:	f1ba 0f00 	cmp.w	sl, #0
 8009892:	dd07      	ble.n	80098a4 <__kernel_rem_pio2+0x1cc>
 8009894:	f1ba 0f01 	cmp.w	sl, #1
 8009898:	f000 80c0 	beq.w	8009a1c <__kernel_rem_pio2+0x344>
 800989c:	f1ba 0f02 	cmp.w	sl, #2
 80098a0:	f000 80c6 	beq.w	8009a30 <__kernel_rem_pio2+0x358>
 80098a4:	f1bb 0f02 	cmp.w	fp, #2
 80098a8:	d14d      	bne.n	8009946 <__kernel_rem_pio2+0x26e>
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	4956      	ldr	r1, [pc, #344]	; (8009a08 <__kernel_rem_pio2+0x330>)
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7f6 fc9d 	bl	80001f0 <__aeabi_dsub>
 80098b6:	4606      	mov	r6, r0
 80098b8:	460f      	mov	r7, r1
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	d043      	beq.n	8009946 <__kernel_rem_pio2+0x26e>
 80098be:	4650      	mov	r0, sl
 80098c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80099f8 <__kernel_rem_pio2+0x320>
 80098c4:	f000 fba0 	bl	800a008 <scalbn>
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	ec53 2b10 	vmov	r2, r3, d0
 80098d0:	f7f6 fc8e 	bl	80001f0 <__aeabi_dsub>
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	e035      	b.n	8009946 <__kernel_rem_pio2+0x26e>
 80098da:	4b4c      	ldr	r3, [pc, #304]	; (8009a0c <__kernel_rem_pio2+0x334>)
 80098dc:	2200      	movs	r2, #0
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fe3d 	bl	8000560 <__aeabi_dmul>
 80098e6:	f7f7 f8d5 	bl	8000a94 <__aeabi_d2iz>
 80098ea:	f7f6 fdcf 	bl	800048c <__aeabi_i2d>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	ec43 2b18 	vmov	d8, r2, r3
 80098f6:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <__kernel_rem_pio2+0x338>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	f7f6 fe31 	bl	8000560 <__aeabi_dmul>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fc73 	bl	80001f0 <__aeabi_dsub>
 800990a:	f7f7 f8c3 	bl	8000a94 <__aeabi_d2iz>
 800990e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009912:	f84b 0b04 	str.w	r0, [fp], #4
 8009916:	ec51 0b18 	vmov	r0, r1, d8
 800991a:	f7f6 fc6b 	bl	80001f4 <__adddf3>
 800991e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009922:	4606      	mov	r6, r0
 8009924:	460f      	mov	r7, r1
 8009926:	e75b      	b.n	80097e0 <__kernel_rem_pio2+0x108>
 8009928:	d106      	bne.n	8009938 <__kernel_rem_pio2+0x260>
 800992a:	1e63      	subs	r3, r4, #1
 800992c:	aa0e      	add	r2, sp, #56	; 0x38
 800992e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009932:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009936:	e79d      	b.n	8009874 <__kernel_rem_pio2+0x19c>
 8009938:	4b36      	ldr	r3, [pc, #216]	; (8009a14 <__kernel_rem_pio2+0x33c>)
 800993a:	2200      	movs	r2, #0
 800993c:	f7f7 f896 	bl	8000a6c <__aeabi_dcmpge>
 8009940:	2800      	cmp	r0, #0
 8009942:	d13d      	bne.n	80099c0 <__kernel_rem_pio2+0x2e8>
 8009944:	4683      	mov	fp, r0
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f7 f86f 	bl	8000a30 <__aeabi_dcmpeq>
 8009952:	2800      	cmp	r0, #0
 8009954:	f000 80c0 	beq.w	8009ad8 <__kernel_rem_pio2+0x400>
 8009958:	1e65      	subs	r5, r4, #1
 800995a:	462b      	mov	r3, r5
 800995c:	2200      	movs	r2, #0
 800995e:	9902      	ldr	r1, [sp, #8]
 8009960:	428b      	cmp	r3, r1
 8009962:	da6c      	bge.n	8009a3e <__kernel_rem_pio2+0x366>
 8009964:	2a00      	cmp	r2, #0
 8009966:	f000 8089 	beq.w	8009a7c <__kernel_rem_pio2+0x3a4>
 800996a:	ab0e      	add	r3, sp, #56	; 0x38
 800996c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009970:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80ad 	beq.w	8009ad4 <__kernel_rem_pio2+0x3fc>
 800997a:	4650      	mov	r0, sl
 800997c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80099f8 <__kernel_rem_pio2+0x320>
 8009980:	f000 fb42 	bl	800a008 <scalbn>
 8009984:	ab9a      	add	r3, sp, #616	; 0x268
 8009986:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800998a:	ec57 6b10 	vmov	r6, r7, d0
 800998e:	00ec      	lsls	r4, r5, #3
 8009990:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009994:	46aa      	mov	sl, r5
 8009996:	f1ba 0f00 	cmp.w	sl, #0
 800999a:	f280 80d6 	bge.w	8009b4a <__kernel_rem_pio2+0x472>
 800999e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80099f0 <__kernel_rem_pio2+0x318>
 80099a2:	462e      	mov	r6, r5
 80099a4:	2e00      	cmp	r6, #0
 80099a6:	f2c0 8104 	blt.w	8009bb2 <__kernel_rem_pio2+0x4da>
 80099aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80099ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80099b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009a18 <__kernel_rem_pio2+0x340>
 80099b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80099b8:	f04f 0800 	mov.w	r8, #0
 80099bc:	1baf      	subs	r7, r5, r6
 80099be:	e0ea      	b.n	8009b96 <__kernel_rem_pio2+0x4be>
 80099c0:	f04f 0b02 	mov.w	fp, #2
 80099c4:	e759      	b.n	800987a <__kernel_rem_pio2+0x1a2>
 80099c6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ca:	b955      	cbnz	r5, 80099e2 <__kernel_rem_pio2+0x30a>
 80099cc:	b123      	cbz	r3, 80099d8 <__kernel_rem_pio2+0x300>
 80099ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80099d2:	f8c8 3000 	str.w	r3, [r8]
 80099d6:	2301      	movs	r3, #1
 80099d8:	3201      	adds	r2, #1
 80099da:	f108 0804 	add.w	r8, r8, #4
 80099de:	461d      	mov	r5, r3
 80099e0:	e752      	b.n	8009888 <__kernel_rem_pio2+0x1b0>
 80099e2:	1acb      	subs	r3, r1, r3
 80099e4:	f8c8 3000 	str.w	r3, [r8]
 80099e8:	462b      	mov	r3, r5
 80099ea:	e7f5      	b.n	80099d8 <__kernel_rem_pio2+0x300>
 80099ec:	f3af 8000 	nop.w
	...
 80099fc:	3ff00000 	.word	0x3ff00000
 8009a00:	0800a550 	.word	0x0800a550
 8009a04:	40200000 	.word	0x40200000
 8009a08:	3ff00000 	.word	0x3ff00000
 8009a0c:	3e700000 	.word	0x3e700000
 8009a10:	41700000 	.word	0x41700000
 8009a14:	3fe00000 	.word	0x3fe00000
 8009a18:	0800a510 	.word	0x0800a510
 8009a1c:	1e62      	subs	r2, r4, #1
 8009a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8009a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a28:	a90e      	add	r1, sp, #56	; 0x38
 8009a2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a2e:	e739      	b.n	80098a4 <__kernel_rem_pio2+0x1cc>
 8009a30:	1e62      	subs	r2, r4, #1
 8009a32:	ab0e      	add	r3, sp, #56	; 0x38
 8009a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a3c:	e7f4      	b.n	8009a28 <__kernel_rem_pio2+0x350>
 8009a3e:	a90e      	add	r1, sp, #56	; 0x38
 8009a40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	430a      	orrs	r2, r1
 8009a48:	e789      	b.n	800995e <__kernel_rem_pio2+0x286>
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009a50:	2900      	cmp	r1, #0
 8009a52:	d0fa      	beq.n	8009a4a <__kernel_rem_pio2+0x372>
 8009a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009a5a:	446a      	add	r2, sp
 8009a5c:	3a98      	subs	r2, #152	; 0x98
 8009a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8009a60:	9a08      	ldr	r2, [sp, #32]
 8009a62:	18e3      	adds	r3, r4, r3
 8009a64:	18a5      	adds	r5, r4, r2
 8009a66:	aa22      	add	r2, sp, #136	; 0x88
 8009a68:	f104 0801 	add.w	r8, r4, #1
 8009a6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	4543      	cmp	r3, r8
 8009a76:	da04      	bge.n	8009a82 <__kernel_rem_pio2+0x3aa>
 8009a78:	461c      	mov	r4, r3
 8009a7a:	e6a3      	b.n	80097c4 <__kernel_rem_pio2+0xec>
 8009a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e7e4      	b.n	8009a4c <__kernel_rem_pio2+0x374>
 8009a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a88:	f7f6 fd00 	bl	800048c <__aeabi_i2d>
 8009a8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a92:	46ab      	mov	fp, r5
 8009a94:	461c      	mov	r4, r3
 8009a96:	f04f 0900 	mov.w	r9, #0
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	2700      	movs	r7, #0
 8009a9e:	9b06      	ldr	r3, [sp, #24]
 8009aa0:	4599      	cmp	r9, r3
 8009aa2:	dd06      	ble.n	8009ab2 <__kernel_rem_pio2+0x3da>
 8009aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009aaa:	f108 0801 	add.w	r8, r8, #1
 8009aae:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab0:	e7df      	b.n	8009a72 <__kernel_rem_pio2+0x39a>
 8009ab2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009ab6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009aba:	f7f6 fd51 	bl	8000560 <__aeabi_dmul>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	f7f6 fb95 	bl	80001f4 <__adddf3>
 8009aca:	f109 0901 	add.w	r9, r9, #1
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	e7e4      	b.n	8009a9e <__kernel_rem_pio2+0x3c6>
 8009ad4:	3d01      	subs	r5, #1
 8009ad6:	e748      	b.n	800996a <__kernel_rem_pio2+0x292>
 8009ad8:	ec47 6b10 	vmov	d0, r6, r7
 8009adc:	f1ca 0000 	rsb	r0, sl, #0
 8009ae0:	f000 fa92 	bl	800a008 <scalbn>
 8009ae4:	ec57 6b10 	vmov	r6, r7, d0
 8009ae8:	4ba0      	ldr	r3, [pc, #640]	; (8009d6c <__kernel_rem_pio2+0x694>)
 8009aea:	ee10 0a10 	vmov	r0, s0
 8009aee:	2200      	movs	r2, #0
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 ffbb 	bl	8000a6c <__aeabi_dcmpge>
 8009af6:	b1f8      	cbz	r0, 8009b38 <__kernel_rem_pio2+0x460>
 8009af8:	4b9d      	ldr	r3, [pc, #628]	; (8009d70 <__kernel_rem_pio2+0x698>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	f7f6 fd2e 	bl	8000560 <__aeabi_dmul>
 8009b04:	f7f6 ffc6 	bl	8000a94 <__aeabi_d2iz>
 8009b08:	4680      	mov	r8, r0
 8009b0a:	f7f6 fcbf 	bl	800048c <__aeabi_i2d>
 8009b0e:	4b97      	ldr	r3, [pc, #604]	; (8009d6c <__kernel_rem_pio2+0x694>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	f7f6 fd25 	bl	8000560 <__aeabi_dmul>
 8009b16:	460b      	mov	r3, r1
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7f6 fb67 	bl	80001f0 <__aeabi_dsub>
 8009b22:	f7f6 ffb7 	bl	8000a94 <__aeabi_d2iz>
 8009b26:	1c65      	adds	r5, r4, #1
 8009b28:	ab0e      	add	r3, sp, #56	; 0x38
 8009b2a:	f10a 0a18 	add.w	sl, sl, #24
 8009b2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b36:	e720      	b.n	800997a <__kernel_rem_pio2+0x2a2>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 ffaa 	bl	8000a94 <__aeabi_d2iz>
 8009b40:	ab0e      	add	r3, sp, #56	; 0x38
 8009b42:	4625      	mov	r5, r4
 8009b44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b48:	e717      	b.n	800997a <__kernel_rem_pio2+0x2a2>
 8009b4a:	ab0e      	add	r3, sp, #56	; 0x38
 8009b4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009b50:	f7f6 fc9c 	bl	800048c <__aeabi_i2d>
 8009b54:	4632      	mov	r2, r6
 8009b56:	463b      	mov	r3, r7
 8009b58:	f7f6 fd02 	bl	8000560 <__aeabi_dmul>
 8009b5c:	4b84      	ldr	r3, [pc, #528]	; (8009d70 <__kernel_rem_pio2+0x698>)
 8009b5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009b62:	2200      	movs	r2, #0
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 fcfa 	bl	8000560 <__aeabi_dmul>
 8009b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b70:	4606      	mov	r6, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	e70f      	b.n	8009996 <__kernel_rem_pio2+0x2be>
 8009b76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009b7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009b7e:	f7f6 fcef 	bl	8000560 <__aeabi_dmul>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8a:	f7f6 fb33 	bl	80001f4 <__adddf3>
 8009b8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	4598      	cmp	r8, r3
 8009b9a:	dc01      	bgt.n	8009ba0 <__kernel_rem_pio2+0x4c8>
 8009b9c:	45b8      	cmp	r8, r7
 8009b9e:	ddea      	ble.n	8009b76 <__kernel_rem_pio2+0x49e>
 8009ba0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009ba4:	ab4a      	add	r3, sp, #296	; 0x128
 8009ba6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009baa:	ed87 7b00 	vstr	d7, [r7]
 8009bae:	3e01      	subs	r6, #1
 8009bb0:	e6f8      	b.n	80099a4 <__kernel_rem_pio2+0x2cc>
 8009bb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	dc0b      	bgt.n	8009bd0 <__kernel_rem_pio2+0x4f8>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc35      	bgt.n	8009c28 <__kernel_rem_pio2+0x550>
 8009bbc:	d059      	beq.n	8009c72 <__kernel_rem_pio2+0x59a>
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	f003 0007 	and.w	r0, r3, #7
 8009bc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009bc8:	ecbd 8b02 	vpop	{d8}
 8009bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d1f3      	bne.n	8009bbe <__kernel_rem_pio2+0x4e6>
 8009bd6:	ab4a      	add	r3, sp, #296	; 0x128
 8009bd8:	4423      	add	r3, r4
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	461c      	mov	r4, r3
 8009bde:	469a      	mov	sl, r3
 8009be0:	9502      	str	r5, [sp, #8]
 8009be2:	9b02      	ldr	r3, [sp, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f1aa 0a08 	sub.w	sl, sl, #8
 8009bea:	dc6b      	bgt.n	8009cc4 <__kernel_rem_pio2+0x5ec>
 8009bec:	46aa      	mov	sl, r5
 8009bee:	f1ba 0f01 	cmp.w	sl, #1
 8009bf2:	f1a4 0408 	sub.w	r4, r4, #8
 8009bf6:	f300 8085 	bgt.w	8009d04 <__kernel_rem_pio2+0x62c>
 8009bfa:	9c06      	ldr	r4, [sp, #24]
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	3408      	adds	r4, #8
 8009c00:	2100      	movs	r1, #0
 8009c02:	2d01      	cmp	r5, #1
 8009c04:	f300 809d 	bgt.w	8009d42 <__kernel_rem_pio2+0x66a>
 8009c08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009c0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009c10:	f1bb 0f00 	cmp.w	fp, #0
 8009c14:	f040 809b 	bne.w	8009d4e <__kernel_rem_pio2+0x676>
 8009c18:	9b01      	ldr	r3, [sp, #4]
 8009c1a:	e9c3 5600 	strd	r5, r6, [r3]
 8009c1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009c22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c26:	e7ca      	b.n	8009bbe <__kernel_rem_pio2+0x4e6>
 8009c28:	3408      	adds	r4, #8
 8009c2a:	ab4a      	add	r3, sp, #296	; 0x128
 8009c2c:	441c      	add	r4, r3
 8009c2e:	462e      	mov	r6, r5
 8009c30:	2000      	movs	r0, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	da36      	bge.n	8009ca6 <__kernel_rem_pio2+0x5ce>
 8009c38:	f1bb 0f00 	cmp.w	fp, #0
 8009c3c:	d039      	beq.n	8009cb2 <__kernel_rem_pio2+0x5da>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c44:	9c01      	ldr	r4, [sp, #4]
 8009c46:	e9c4 2300 	strd	r2, r3, [r4]
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009c52:	f7f6 facd 	bl	80001f0 <__aeabi_dsub>
 8009c56:	ae4c      	add	r6, sp, #304	; 0x130
 8009c58:	2401      	movs	r4, #1
 8009c5a:	42a5      	cmp	r5, r4
 8009c5c:	da2c      	bge.n	8009cb8 <__kernel_rem_pio2+0x5e0>
 8009c5e:	f1bb 0f00 	cmp.w	fp, #0
 8009c62:	d002      	beq.n	8009c6a <__kernel_rem_pio2+0x592>
 8009c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c68:	4619      	mov	r1, r3
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009c70:	e7a5      	b.n	8009bbe <__kernel_rem_pio2+0x4e6>
 8009c72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009c76:	eb0d 0403 	add.w	r4, sp, r3
 8009c7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009c7e:	2000      	movs	r0, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	2d00      	cmp	r5, #0
 8009c84:	da09      	bge.n	8009c9a <__kernel_rem_pio2+0x5c2>
 8009c86:	f1bb 0f00 	cmp.w	fp, #0
 8009c8a:	d002      	beq.n	8009c92 <__kernel_rem_pio2+0x5ba>
 8009c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c90:	4619      	mov	r1, r3
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	e9c3 0100 	strd	r0, r1, [r3]
 8009c98:	e791      	b.n	8009bbe <__kernel_rem_pio2+0x4e6>
 8009c9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c9e:	f7f6 faa9 	bl	80001f4 <__adddf3>
 8009ca2:	3d01      	subs	r5, #1
 8009ca4:	e7ed      	b.n	8009c82 <__kernel_rem_pio2+0x5aa>
 8009ca6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009caa:	f7f6 faa3 	bl	80001f4 <__adddf3>
 8009cae:	3e01      	subs	r6, #1
 8009cb0:	e7c0      	b.n	8009c34 <__kernel_rem_pio2+0x55c>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	e7c5      	b.n	8009c44 <__kernel_rem_pio2+0x56c>
 8009cb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009cbc:	f7f6 fa9a 	bl	80001f4 <__adddf3>
 8009cc0:	3401      	adds	r4, #1
 8009cc2:	e7ca      	b.n	8009c5a <__kernel_rem_pio2+0x582>
 8009cc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009cc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009ccc:	9b02      	ldr	r3, [sp, #8]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	4632      	mov	r2, r6
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	4649      	mov	r1, r9
 8009cda:	f7f6 fa8b 	bl	80001f4 <__adddf3>
 8009cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4649      	mov	r1, r9
 8009cea:	f7f6 fa81 	bl	80001f0 <__aeabi_dsub>
 8009cee:	4632      	mov	r2, r6
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	f7f6 fa7f 	bl	80001f4 <__adddf3>
 8009cf6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009cfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cfe:	ed8a 7b00 	vstr	d7, [sl]
 8009d02:	e76e      	b.n	8009be2 <__kernel_rem_pio2+0x50a>
 8009d04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009d08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4632      	mov	r2, r6
 8009d10:	463b      	mov	r3, r7
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 fa6e 	bl	80001f4 <__adddf3>
 8009d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7f6 fa64 	bl	80001f0 <__aeabi_dsub>
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	f7f6 fa62 	bl	80001f4 <__adddf3>
 8009d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d38:	ed84 7b00 	vstr	d7, [r4]
 8009d3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d40:	e755      	b.n	8009bee <__kernel_rem_pio2+0x516>
 8009d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d46:	f7f6 fa55 	bl	80001f4 <__adddf3>
 8009d4a:	3d01      	subs	r5, #1
 8009d4c:	e759      	b.n	8009c02 <__kernel_rem_pio2+0x52a>
 8009d4e:	9b01      	ldr	r3, [sp, #4]
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	601d      	str	r5, [r3, #0]
 8009d54:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009d58:	605c      	str	r4, [r3, #4]
 8009d5a:	609f      	str	r7, [r3, #8]
 8009d5c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009d60:	60d3      	str	r3, [r2, #12]
 8009d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d66:	6110      	str	r0, [r2, #16]
 8009d68:	6153      	str	r3, [r2, #20]
 8009d6a:	e728      	b.n	8009bbe <__kernel_rem_pio2+0x4e6>
 8009d6c:	41700000 	.word	0x41700000
 8009d70:	3e700000 	.word	0x3e700000
 8009d74:	00000000 	.word	0x00000000

08009d78 <__kernel_sin>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	ed2d 8b04 	vpush	{d8-d9}
 8009d80:	eeb0 8a41 	vmov.f32	s16, s2
 8009d84:	eef0 8a61 	vmov.f32	s17, s3
 8009d88:	ec55 4b10 	vmov	r4, r5, d0
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009d96:	9001      	str	r0, [sp, #4]
 8009d98:	da06      	bge.n	8009da8 <__kernel_sin+0x30>
 8009d9a:	ee10 0a10 	vmov	r0, s0
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fe78 	bl	8000a94 <__aeabi_d2iz>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d051      	beq.n	8009e4c <__kernel_sin+0xd4>
 8009da8:	4622      	mov	r2, r4
 8009daa:	462b      	mov	r3, r5
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fbd6 	bl	8000560 <__aeabi_dmul>
 8009db4:	4682      	mov	sl, r0
 8009db6:	468b      	mov	fp, r1
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fbce 	bl	8000560 <__aeabi_dmul>
 8009dc4:	a341      	add	r3, pc, #260	; (adr r3, 8009ecc <__kernel_sin+0x154>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	4680      	mov	r8, r0
 8009dcc:	4689      	mov	r9, r1
 8009dce:	4650      	mov	r0, sl
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	f7f6 fbc5 	bl	8000560 <__aeabi_dmul>
 8009dd6:	a33f      	add	r3, pc, #252	; (adr r3, 8009ed4 <__kernel_sin+0x15c>)
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f7f6 fa08 	bl	80001f0 <__aeabi_dsub>
 8009de0:	4652      	mov	r2, sl
 8009de2:	465b      	mov	r3, fp
 8009de4:	f7f6 fbbc 	bl	8000560 <__aeabi_dmul>
 8009de8:	a33c      	add	r3, pc, #240	; (adr r3, 8009edc <__kernel_sin+0x164>)
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f7f6 fa01 	bl	80001f4 <__adddf3>
 8009df2:	4652      	mov	r2, sl
 8009df4:	465b      	mov	r3, fp
 8009df6:	f7f6 fbb3 	bl	8000560 <__aeabi_dmul>
 8009dfa:	a33a      	add	r3, pc, #232	; (adr r3, 8009ee4 <__kernel_sin+0x16c>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 f9f6 	bl	80001f0 <__aeabi_dsub>
 8009e04:	4652      	mov	r2, sl
 8009e06:	465b      	mov	r3, fp
 8009e08:	f7f6 fbaa 	bl	8000560 <__aeabi_dmul>
 8009e0c:	a337      	add	r3, pc, #220	; (adr r3, 8009eec <__kernel_sin+0x174>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 f9ef 	bl	80001f4 <__adddf3>
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	b9eb      	cbnz	r3, 8009e5a <__kernel_sin+0xe2>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4650      	mov	r0, sl
 8009e24:	4659      	mov	r1, fp
 8009e26:	f7f6 fb9b 	bl	8000560 <__aeabi_dmul>
 8009e2a:	a325      	add	r3, pc, #148	; (adr r3, 8009ec0 <__kernel_sin+0x148>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 f9de 	bl	80001f0 <__aeabi_dsub>
 8009e34:	4642      	mov	r2, r8
 8009e36:	464b      	mov	r3, r9
 8009e38:	f7f6 fb92 	bl	8000560 <__aeabi_dmul>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4620      	mov	r0, r4
 8009e42:	4629      	mov	r1, r5
 8009e44:	f7f6 f9d6 	bl	80001f4 <__adddf3>
 8009e48:	4604      	mov	r4, r0
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	ec45 4b10 	vmov	d0, r4, r5
 8009e50:	b003      	add	sp, #12
 8009e52:	ecbd 8b04 	vpop	{d8-d9}
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <__kernel_sin+0x150>)
 8009e5c:	ec51 0b18 	vmov	r0, r1, d8
 8009e60:	2200      	movs	r2, #0
 8009e62:	f7f6 fb7d 	bl	8000560 <__aeabi_dmul>
 8009e66:	4632      	mov	r2, r6
 8009e68:	ec41 0b19 	vmov	d9, r0, r1
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fb75 	bl	8000560 <__aeabi_dmul>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	ec51 0b19 	vmov	r0, r1, d9
 8009e7e:	f7f6 f9b7 	bl	80001f0 <__aeabi_dsub>
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	f7f6 fb6b 	bl	8000560 <__aeabi_dmul>
 8009e8a:	ec53 2b18 	vmov	r2, r3, d8
 8009e8e:	f7f6 f9af 	bl	80001f0 <__aeabi_dsub>
 8009e92:	a30b      	add	r3, pc, #44	; (adr r3, 8009ec0 <__kernel_sin+0x148>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	4606      	mov	r6, r0
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f7f6 fb5e 	bl	8000560 <__aeabi_dmul>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 f9a2 	bl	80001f4 <__adddf3>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7f6 f99a 	bl	80001f0 <__aeabi_dsub>
 8009ebc:	e7c4      	b.n	8009e48 <__kernel_sin+0xd0>
 8009ebe:	bf00      	nop
 8009ec0:	55555549 	.word	0x55555549
 8009ec4:	3fc55555 	.word	0x3fc55555
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	5acfd57c 	.word	0x5acfd57c
 8009ed0:	3de5d93a 	.word	0x3de5d93a
 8009ed4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009ed8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009edc:	57b1fe7d 	.word	0x57b1fe7d
 8009ee0:	3ec71de3 	.word	0x3ec71de3
 8009ee4:	19c161d5 	.word	0x19c161d5
 8009ee8:	3f2a01a0 	.word	0x3f2a01a0
 8009eec:	1110f8a6 	.word	0x1110f8a6
 8009ef0:	3f811111 	.word	0x3f811111

08009ef4 <fabs>:
 8009ef4:	ec51 0b10 	vmov	r0, r1, d0
 8009ef8:	ee10 2a10 	vmov	r2, s0
 8009efc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f00:	ec43 2b10 	vmov	d0, r2, r3
 8009f04:	4770      	bx	lr
	...

08009f08 <floor>:
 8009f08:	ec51 0b10 	vmov	r0, r1, d0
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009f18:	2e13      	cmp	r6, #19
 8009f1a:	ee10 5a10 	vmov	r5, s0
 8009f1e:	ee10 8a10 	vmov	r8, s0
 8009f22:	460c      	mov	r4, r1
 8009f24:	dc32      	bgt.n	8009f8c <floor+0x84>
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	da14      	bge.n	8009f54 <floor+0x4c>
 8009f2a:	a333      	add	r3, pc, #204	; (adr r3, 8009ff8 <floor+0xf0>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 f960 	bl	80001f4 <__adddf3>
 8009f34:	2200      	movs	r2, #0
 8009f36:	2300      	movs	r3, #0
 8009f38:	f7f6 fda2 	bl	8000a80 <__aeabi_dcmpgt>
 8009f3c:	b138      	cbz	r0, 8009f4e <floor+0x46>
 8009f3e:	2c00      	cmp	r4, #0
 8009f40:	da57      	bge.n	8009ff2 <floor+0xea>
 8009f42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009f46:	431d      	orrs	r5, r3
 8009f48:	d001      	beq.n	8009f4e <floor+0x46>
 8009f4a:	4c2d      	ldr	r4, [pc, #180]	; (800a000 <floor+0xf8>)
 8009f4c:	2500      	movs	r5, #0
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	e025      	b.n	8009fa0 <floor+0x98>
 8009f54:	4f2b      	ldr	r7, [pc, #172]	; (800a004 <floor+0xfc>)
 8009f56:	4137      	asrs	r7, r6
 8009f58:	ea01 0307 	and.w	r3, r1, r7
 8009f5c:	4303      	orrs	r3, r0
 8009f5e:	d01f      	beq.n	8009fa0 <floor+0x98>
 8009f60:	a325      	add	r3, pc, #148	; (adr r3, 8009ff8 <floor+0xf0>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f7f6 f945 	bl	80001f4 <__adddf3>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f7f6 fd87 	bl	8000a80 <__aeabi_dcmpgt>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d0eb      	beq.n	8009f4e <floor+0x46>
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	bfbe      	ittt	lt
 8009f7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009f7e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009f82:	19a4      	addlt	r4, r4, r6
 8009f84:	ea24 0407 	bic.w	r4, r4, r7
 8009f88:	2500      	movs	r5, #0
 8009f8a:	e7e0      	b.n	8009f4e <floor+0x46>
 8009f8c:	2e33      	cmp	r6, #51	; 0x33
 8009f8e:	dd0b      	ble.n	8009fa8 <floor+0xa0>
 8009f90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009f94:	d104      	bne.n	8009fa0 <floor+0x98>
 8009f96:	ee10 2a10 	vmov	r2, s0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	f7f6 f92a 	bl	80001f4 <__adddf3>
 8009fa0:	ec41 0b10 	vmov	d0, r0, r1
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009fac:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb0:	fa23 f707 	lsr.w	r7, r3, r7
 8009fb4:	4207      	tst	r7, r0
 8009fb6:	d0f3      	beq.n	8009fa0 <floor+0x98>
 8009fb8:	a30f      	add	r3, pc, #60	; (adr r3, 8009ff8 <floor+0xf0>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f919 	bl	80001f4 <__adddf3>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f7f6 fd5b 	bl	8000a80 <__aeabi_dcmpgt>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d0bf      	beq.n	8009f4e <floor+0x46>
 8009fce:	2c00      	cmp	r4, #0
 8009fd0:	da02      	bge.n	8009fd8 <floor+0xd0>
 8009fd2:	2e14      	cmp	r6, #20
 8009fd4:	d103      	bne.n	8009fde <floor+0xd6>
 8009fd6:	3401      	adds	r4, #1
 8009fd8:	ea25 0507 	bic.w	r5, r5, r7
 8009fdc:	e7b7      	b.n	8009f4e <floor+0x46>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009fe4:	fa03 f606 	lsl.w	r6, r3, r6
 8009fe8:	4435      	add	r5, r6
 8009fea:	4545      	cmp	r5, r8
 8009fec:	bf38      	it	cc
 8009fee:	18e4      	addcc	r4, r4, r3
 8009ff0:	e7f2      	b.n	8009fd8 <floor+0xd0>
 8009ff2:	2500      	movs	r5, #0
 8009ff4:	462c      	mov	r4, r5
 8009ff6:	e7aa      	b.n	8009f4e <floor+0x46>
 8009ff8:	8800759c 	.word	0x8800759c
 8009ffc:	7e37e43c 	.word	0x7e37e43c
 800a000:	bff00000 	.word	0xbff00000
 800a004:	000fffff 	.word	0x000fffff

0800a008 <scalbn>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	ec55 4b10 	vmov	r4, r5, d0
 800a00e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a012:	4606      	mov	r6, r0
 800a014:	462b      	mov	r3, r5
 800a016:	b99a      	cbnz	r2, 800a040 <scalbn+0x38>
 800a018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a01c:	4323      	orrs	r3, r4
 800a01e:	d036      	beq.n	800a08e <scalbn+0x86>
 800a020:	4b39      	ldr	r3, [pc, #228]	; (800a108 <scalbn+0x100>)
 800a022:	4629      	mov	r1, r5
 800a024:	ee10 0a10 	vmov	r0, s0
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 fa99 	bl	8000560 <__aeabi_dmul>
 800a02e:	4b37      	ldr	r3, [pc, #220]	; (800a10c <scalbn+0x104>)
 800a030:	429e      	cmp	r6, r3
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	da10      	bge.n	800a05a <scalbn+0x52>
 800a038:	a32b      	add	r3, pc, #172	; (adr r3, 800a0e8 <scalbn+0xe0>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	e03a      	b.n	800a0b6 <scalbn+0xae>
 800a040:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a044:	428a      	cmp	r2, r1
 800a046:	d10c      	bne.n	800a062 <scalbn+0x5a>
 800a048:	ee10 2a10 	vmov	r2, s0
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f8d0 	bl	80001f4 <__adddf3>
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	e019      	b.n	800a08e <scalbn+0x86>
 800a05a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a05e:	460b      	mov	r3, r1
 800a060:	3a36      	subs	r2, #54	; 0x36
 800a062:	4432      	add	r2, r6
 800a064:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a068:	428a      	cmp	r2, r1
 800a06a:	dd08      	ble.n	800a07e <scalbn+0x76>
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	a120      	add	r1, pc, #128	; (adr r1, 800a0f0 <scalbn+0xe8>)
 800a070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a074:	da1c      	bge.n	800a0b0 <scalbn+0xa8>
 800a076:	a120      	add	r1, pc, #128	; (adr r1, 800a0f8 <scalbn+0xf0>)
 800a078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a07c:	e018      	b.n	800a0b0 <scalbn+0xa8>
 800a07e:	2a00      	cmp	r2, #0
 800a080:	dd08      	ble.n	800a094 <scalbn+0x8c>
 800a082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a08a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a08e:	ec45 4b10 	vmov	d0, r4, r5
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a098:	da19      	bge.n	800a0ce <scalbn+0xc6>
 800a09a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a09e:	429e      	cmp	r6, r3
 800a0a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a0a4:	dd0a      	ble.n	800a0bc <scalbn+0xb4>
 800a0a6:	a112      	add	r1, pc, #72	; (adr r1, 800a0f0 <scalbn+0xe8>)
 800a0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e2      	bne.n	800a076 <scalbn+0x6e>
 800a0b0:	a30f      	add	r3, pc, #60	; (adr r3, 800a0f0 <scalbn+0xe8>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 fa53 	bl	8000560 <__aeabi_dmul>
 800a0ba:	e7cb      	b.n	800a054 <scalbn+0x4c>
 800a0bc:	a10a      	add	r1, pc, #40	; (adr r1, 800a0e8 <scalbn+0xe0>)
 800a0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0b8      	beq.n	800a038 <scalbn+0x30>
 800a0c6:	a10e      	add	r1, pc, #56	; (adr r1, 800a100 <scalbn+0xf8>)
 800a0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0cc:	e7b4      	b.n	800a038 <scalbn+0x30>
 800a0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0d2:	3236      	adds	r2, #54	; 0x36
 800a0d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <scalbn+0x108>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	e7e8      	b.n	800a0b6 <scalbn+0xae>
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	c2f8f359 	.word	0xc2f8f359
 800a0ec:	01a56e1f 	.word	0x01a56e1f
 800a0f0:	8800759c 	.word	0x8800759c
 800a0f4:	7e37e43c 	.word	0x7e37e43c
 800a0f8:	8800759c 	.word	0x8800759c
 800a0fc:	fe37e43c 	.word	0xfe37e43c
 800a100:	c2f8f359 	.word	0xc2f8f359
 800a104:	81a56e1f 	.word	0x81a56e1f
 800a108:	43500000 	.word	0x43500000
 800a10c:	ffff3cb0 	.word	0xffff3cb0
 800a110:	3c900000 	.word	0x3c900000

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
